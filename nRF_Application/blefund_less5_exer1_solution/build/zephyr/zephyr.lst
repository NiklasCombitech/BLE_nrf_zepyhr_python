
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	e0 c3 00 20 69 c3 00 00 43 a2 01 00 3d c3 00 00     ... i...C...=...
    8010:	3d c3 00 00 3d c3 00 00 3d c3 00 00 3d c3 00 00     =...=...=...=...
	...
    802c:	5d bc 00 00 3d c3 00 00 00 00 00 00 fd bb 00 00     ]...=...........
    803c:	3d c3 00 00                                         =...

00008040 <_irq_vector_table>:
    8040:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8050:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8060:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8070:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8080:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8090:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80a0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80b0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80c0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80d0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80e0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    80f0:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8100:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8110:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8120:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8130:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8140:	e5 bc 00 00 e5 bc 00 00 e5 bc 00 00 e5 bc 00 00     ................
    8150:	e5 bc 00 00                                         ....

Disassembly of section text:

00008158 <__aeabi_uldivmod>:
    8158:	b953      	cbnz	r3, 8170 <__aeabi_uldivmod+0x18>
    815a:	b94a      	cbnz	r2, 8170 <__aeabi_uldivmod+0x18>
    815c:	2900      	cmp	r1, #0
    815e:	bf08      	it	eq
    8160:	2800      	cmpeq	r0, #0
    8162:	bf1c      	itt	ne
    8164:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8168:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    816c:	f000 b80c 	b.w	8188 <__aeabi_idiv0>
    8170:	f1ad 0c08 	sub.w	ip, sp, #8
    8174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8178:	f000 f808 	bl	818c <__udivmoddi4>
    817c:	f8dd e004 	ldr.w	lr, [sp, #4]
    8180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8184:	b004      	add	sp, #16
    8186:	4770      	bx	lr

00008188 <__aeabi_idiv0>:
    8188:	4770      	bx	lr
    818a:	bf00      	nop

0000818c <__udivmoddi4>:
    818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8190:	4686      	mov	lr, r0
    8192:	468c      	mov	ip, r1
    8194:	4608      	mov	r0, r1
    8196:	9e08      	ldr	r6, [sp, #32]
    8198:	4615      	mov	r5, r2
    819a:	4674      	mov	r4, lr
    819c:	4619      	mov	r1, r3
    819e:	2b00      	cmp	r3, #0
    81a0:	f040 80c1 	bne.w	8326 <__udivmoddi4+0x19a>
    81a4:	4285      	cmp	r5, r0
    81a6:	fab2 f282 	clz	r2, r2
    81aa:	d945      	bls.n	8238 <__udivmoddi4+0xac>
    81ac:	b14a      	cbz	r2, 81c2 <__udivmoddi4+0x36>
    81ae:	f1c2 0320 	rsb	r3, r2, #32
    81b2:	fa00 fc02 	lsl.w	ip, r0, r2
    81b6:	4095      	lsls	r5, r2
    81b8:	4094      	lsls	r4, r2
    81ba:	fa2e f303 	lsr.w	r3, lr, r3
    81be:	ea43 0c0c 	orr.w	ip, r3, ip
    81c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c6:	b2a8      	uxth	r0, r5
    81c8:	0c23      	lsrs	r3, r4, #16
    81ca:	fbbc f8fe 	udiv	r8, ip, lr
    81ce:	fb0e cc18 	mls	ip, lr, r8, ip
    81d2:	fb08 f900 	mul.w	r9, r8, r0
    81d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81da:	4599      	cmp	r9, r3
    81dc:	d928      	bls.n	8230 <__udivmoddi4+0xa4>
    81de:	18eb      	adds	r3, r5, r3
    81e0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    81e4:	d204      	bcs.n	81f0 <__udivmoddi4+0x64>
    81e6:	4599      	cmp	r9, r3
    81e8:	d902      	bls.n	81f0 <__udivmoddi4+0x64>
    81ea:	f1a8 0702 	sub.w	r7, r8, #2
    81ee:	442b      	add	r3, r5
    81f0:	eba3 0309 	sub.w	r3, r3, r9
    81f4:	b2a4      	uxth	r4, r4
    81f6:	fbb3 fcfe 	udiv	ip, r3, lr
    81fa:	fb0e 331c 	mls	r3, lr, ip, r3
    81fe:	fb0c f000 	mul.w	r0, ip, r0
    8202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8206:	42a0      	cmp	r0, r4
    8208:	d914      	bls.n	8234 <__udivmoddi4+0xa8>
    820a:	192c      	adds	r4, r5, r4
    820c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8210:	d204      	bcs.n	821c <__udivmoddi4+0x90>
    8212:	42a0      	cmp	r0, r4
    8214:	d902      	bls.n	821c <__udivmoddi4+0x90>
    8216:	f1ac 0302 	sub.w	r3, ip, #2
    821a:	442c      	add	r4, r5
    821c:	1a24      	subs	r4, r4, r0
    821e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8222:	b11e      	cbz	r6, 822c <__udivmoddi4+0xa0>
    8224:	40d4      	lsrs	r4, r2
    8226:	2300      	movs	r3, #0
    8228:	6034      	str	r4, [r6, #0]
    822a:	6073      	str	r3, [r6, #4]
    822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8230:	4647      	mov	r7, r8
    8232:	e7dd      	b.n	81f0 <__udivmoddi4+0x64>
    8234:	4663      	mov	r3, ip
    8236:	e7f1      	b.n	821c <__udivmoddi4+0x90>
    8238:	bb92      	cbnz	r2, 82a0 <__udivmoddi4+0x114>
    823a:	1b43      	subs	r3, r0, r5
    823c:	2101      	movs	r1, #1
    823e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8242:	b2af      	uxth	r7, r5
    8244:	0c20      	lsrs	r0, r4, #16
    8246:	fbb3 fcfe 	udiv	ip, r3, lr
    824a:	fb0e 331c 	mls	r3, lr, ip, r3
    824e:	fb0c f807 	mul.w	r8, ip, r7
    8252:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8256:	4598      	cmp	r8, r3
    8258:	d961      	bls.n	831e <__udivmoddi4+0x192>
    825a:	18eb      	adds	r3, r5, r3
    825c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8260:	d204      	bcs.n	826c <__udivmoddi4+0xe0>
    8262:	4598      	cmp	r8, r3
    8264:	d902      	bls.n	826c <__udivmoddi4+0xe0>
    8266:	f1ac 0002 	sub.w	r0, ip, #2
    826a:	442b      	add	r3, r5
    826c:	eba3 0308 	sub.w	r3, r3, r8
    8270:	b2a4      	uxth	r4, r4
    8272:	fbb3 fcfe 	udiv	ip, r3, lr
    8276:	fb0e 331c 	mls	r3, lr, ip, r3
    827a:	fb0c f707 	mul.w	r7, ip, r7
    827e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8282:	42a7      	cmp	r7, r4
    8284:	d94d      	bls.n	8322 <__udivmoddi4+0x196>
    8286:	192c      	adds	r4, r5, r4
    8288:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    828c:	d204      	bcs.n	8298 <__udivmoddi4+0x10c>
    828e:	42a7      	cmp	r7, r4
    8290:	d902      	bls.n	8298 <__udivmoddi4+0x10c>
    8292:	f1ac 0302 	sub.w	r3, ip, #2
    8296:	442c      	add	r4, r5
    8298:	1be4      	subs	r4, r4, r7
    829a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829e:	e7c0      	b.n	8222 <__udivmoddi4+0x96>
    82a0:	f1c2 0320 	rsb	r3, r2, #32
    82a4:	4095      	lsls	r5, r2
    82a6:	4094      	lsls	r4, r2
    82a8:	fa20 f103 	lsr.w	r1, r0, r3
    82ac:	fa2e f303 	lsr.w	r3, lr, r3
    82b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b4:	4090      	lsls	r0, r2
    82b6:	b2af      	uxth	r7, r5
    82b8:	4303      	orrs	r3, r0
    82ba:	fbb1 fcfe 	udiv	ip, r1, lr
    82be:	fb0e 101c 	mls	r0, lr, ip, r1
    82c2:	0c19      	lsrs	r1, r3, #16
    82c4:	fb0c f807 	mul.w	r8, ip, r7
    82c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82cc:	4588      	cmp	r8, r1
    82ce:	d922      	bls.n	8316 <__udivmoddi4+0x18a>
    82d0:	1869      	adds	r1, r5, r1
    82d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    82d6:	d204      	bcs.n	82e2 <__udivmoddi4+0x156>
    82d8:	4588      	cmp	r8, r1
    82da:	d902      	bls.n	82e2 <__udivmoddi4+0x156>
    82dc:	f1ac 0002 	sub.w	r0, ip, #2
    82e0:	4429      	add	r1, r5
    82e2:	eba1 0108 	sub.w	r1, r1, r8
    82e6:	b29b      	uxth	r3, r3
    82e8:	fbb1 fcfe 	udiv	ip, r1, lr
    82ec:	fb0e 111c 	mls	r1, lr, ip, r1
    82f0:	fb0c f707 	mul.w	r7, ip, r7
    82f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f8:	429f      	cmp	r7, r3
    82fa:	d90e      	bls.n	831a <__udivmoddi4+0x18e>
    82fc:	18eb      	adds	r3, r5, r3
    82fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    8302:	d204      	bcs.n	830e <__udivmoddi4+0x182>
    8304:	429f      	cmp	r7, r3
    8306:	d902      	bls.n	830e <__udivmoddi4+0x182>
    8308:	f1ac 0102 	sub.w	r1, ip, #2
    830c:	442b      	add	r3, r5
    830e:	1bdb      	subs	r3, r3, r7
    8310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8314:	e793      	b.n	823e <__udivmoddi4+0xb2>
    8316:	4660      	mov	r0, ip
    8318:	e7e3      	b.n	82e2 <__udivmoddi4+0x156>
    831a:	4661      	mov	r1, ip
    831c:	e7f7      	b.n	830e <__udivmoddi4+0x182>
    831e:	4660      	mov	r0, ip
    8320:	e7a4      	b.n	826c <__udivmoddi4+0xe0>
    8322:	4663      	mov	r3, ip
    8324:	e7b8      	b.n	8298 <__udivmoddi4+0x10c>
    8326:	4283      	cmp	r3, r0
    8328:	d906      	bls.n	8338 <__udivmoddi4+0x1ac>
    832a:	b916      	cbnz	r6, 8332 <__udivmoddi4+0x1a6>
    832c:	2100      	movs	r1, #0
    832e:	4608      	mov	r0, r1
    8330:	e77c      	b.n	822c <__udivmoddi4+0xa0>
    8332:	e9c6 e000 	strd	lr, r0, [r6]
    8336:	e7f9      	b.n	832c <__udivmoddi4+0x1a0>
    8338:	fab3 f783 	clz	r7, r3
    833c:	b98f      	cbnz	r7, 8362 <__udivmoddi4+0x1d6>
    833e:	4283      	cmp	r3, r0
    8340:	d301      	bcc.n	8346 <__udivmoddi4+0x1ba>
    8342:	4572      	cmp	r2, lr
    8344:	d808      	bhi.n	8358 <__udivmoddi4+0x1cc>
    8346:	ebbe 0402 	subs.w	r4, lr, r2
    834a:	eb60 0303 	sbc.w	r3, r0, r3
    834e:	2001      	movs	r0, #1
    8350:	469c      	mov	ip, r3
    8352:	b91e      	cbnz	r6, 835c <__udivmoddi4+0x1d0>
    8354:	2100      	movs	r1, #0
    8356:	e769      	b.n	822c <__udivmoddi4+0xa0>
    8358:	4638      	mov	r0, r7
    835a:	e7fa      	b.n	8352 <__udivmoddi4+0x1c6>
    835c:	e9c6 4c00 	strd	r4, ip, [r6]
    8360:	e7f8      	b.n	8354 <__udivmoddi4+0x1c8>
    8362:	f1c7 0c20 	rsb	ip, r7, #32
    8366:	40bb      	lsls	r3, r7
    8368:	fa0e f507 	lsl.w	r5, lr, r7
    836c:	fa22 f40c 	lsr.w	r4, r2, ip
    8370:	fa2e f10c 	lsr.w	r1, lr, ip
    8374:	40ba      	lsls	r2, r7
    8376:	431c      	orrs	r4, r3
    8378:	fa20 f30c 	lsr.w	r3, r0, ip
    837c:	40b8      	lsls	r0, r7
    837e:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8382:	4301      	orrs	r1, r0
    8384:	fa1f fe84 	uxth.w	lr, r4
    8388:	fbb3 f8f9 	udiv	r8, r3, r9
    838c:	fb09 3018 	mls	r0, r9, r8, r3
    8390:	0c0b      	lsrs	r3, r1, #16
    8392:	fb08 fa0e 	mul.w	sl, r8, lr
    8396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    839a:	459a      	cmp	sl, r3
    839c:	d940      	bls.n	8420 <__udivmoddi4+0x294>
    839e:	18e3      	adds	r3, r4, r3
    83a0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    83a4:	d204      	bcs.n	83b0 <__udivmoddi4+0x224>
    83a6:	459a      	cmp	sl, r3
    83a8:	d902      	bls.n	83b0 <__udivmoddi4+0x224>
    83aa:	f1a8 0002 	sub.w	r0, r8, #2
    83ae:	4423      	add	r3, r4
    83b0:	eba3 030a 	sub.w	r3, r3, sl
    83b4:	b289      	uxth	r1, r1
    83b6:	fbb3 f8f9 	udiv	r8, r3, r9
    83ba:	fb09 3318 	mls	r3, r9, r8, r3
    83be:	fb08 fe0e 	mul.w	lr, r8, lr
    83c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c6:	458e      	cmp	lr, r1
    83c8:	d92c      	bls.n	8424 <__udivmoddi4+0x298>
    83ca:	1861      	adds	r1, r4, r1
    83cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    83d0:	d204      	bcs.n	83dc <__udivmoddi4+0x250>
    83d2:	458e      	cmp	lr, r1
    83d4:	d902      	bls.n	83dc <__udivmoddi4+0x250>
    83d6:	f1a8 0302 	sub.w	r3, r8, #2
    83da:	4421      	add	r1, r4
    83dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83e0:	eba1 010e 	sub.w	r1, r1, lr
    83e4:	fba0 9802 	umull	r9, r8, r0, r2
    83e8:	4541      	cmp	r1, r8
    83ea:	46ce      	mov	lr, r9
    83ec:	4643      	mov	r3, r8
    83ee:	d302      	bcc.n	83f6 <__udivmoddi4+0x26a>
    83f0:	d106      	bne.n	8400 <__udivmoddi4+0x274>
    83f2:	454d      	cmp	r5, r9
    83f4:	d204      	bcs.n	8400 <__udivmoddi4+0x274>
    83f6:	3801      	subs	r0, #1
    83f8:	ebb9 0e02 	subs.w	lr, r9, r2
    83fc:	eb68 0304 	sbc.w	r3, r8, r4
    8400:	2e00      	cmp	r6, #0
    8402:	d0a7      	beq.n	8354 <__udivmoddi4+0x1c8>
    8404:	ebb5 020e 	subs.w	r2, r5, lr
    8408:	eb61 0103 	sbc.w	r1, r1, r3
    840c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8410:	fa22 f307 	lsr.w	r3, r2, r7
    8414:	40f9      	lsrs	r1, r7
    8416:	ea4c 0303 	orr.w	r3, ip, r3
    841a:	e9c6 3100 	strd	r3, r1, [r6]
    841e:	e799      	b.n	8354 <__udivmoddi4+0x1c8>
    8420:	4640      	mov	r0, r8
    8422:	e7c5      	b.n	83b0 <__udivmoddi4+0x224>
    8424:	4643      	mov	r3, r8
    8426:	e7d9      	b.n	83dc <__udivmoddi4+0x250>

00008428 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    842c:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    842e:	4d65      	ldr	r5, [pc, #404]	; (85c4 <bt_init+0x19c>)
{
    8430:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8432:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
    8436:	6899      	ldr	r1, [r3, #8]
    8438:	f011 0101 	ands.w	r1, r1, #1
    843c:	d11a      	bne.n	8474 <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    843e:	f640 4003 	movw	r0, #3075	; 0xc03
    8442:	1d3a      	adds	r2, r7, #4
    8444:	f004 ffba 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    8448:	4604      	mov	r4, r0
    844a:	2800      	cmp	r0, #0
    844c:	f040 80b4 	bne.w	85b8 <bt_init+0x190>
		hci_reset_complete(rsp);
    8450:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    8452:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    8454:	781b      	ldrb	r3, [r3, #0]
    8456:	b95b      	cbnz	r3, 8470 <bt_init+0x48>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8458:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    845c:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8460:	f002 0209 	and.w	r2, r2, #9
    8464:	e8d3 1fef 	ldaex	r1, [r3]
    8468:	e8c3 2fe4 	stlex	r4, r2, [r3]
    846c:	2c00      	cmp	r4, #0
    846e:	d1f9      	bne.n	8464 <bt_init+0x3c>
		net_buf_unref(rsp);
    8470:	f00b fea0 	bl	141b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8474:	2100      	movs	r1, #0
    8476:	f241 0003 	movw	r0, #4099	; 0x1003
    847a:	1d3a      	adds	r2, r7, #4
    847c:	f004 ff9e 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8480:	4604      	mov	r4, r0
    8482:	2800      	cmp	r0, #0
    8484:	f040 8098 	bne.w	85b8 <bt_init+0x190>
	read_local_features_complete(rsp);
    8488:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    848a:	2208      	movs	r2, #8
    848c:	68f1      	ldr	r1, [r6, #12]
    848e:	484e      	ldr	r0, [pc, #312]	; (85c8 <bt_init+0x1a0>)
    8490:	3101      	adds	r1, #1
    8492:	f011 ff6c 	bl	1a36e <memcpy>
	net_buf_unref(rsp);
    8496:	4630      	mov	r0, r6
    8498:	f00b fe8c 	bl	141b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    849c:	4621      	mov	r1, r4
    849e:	f241 0001 	movw	r0, #4097	; 0x1001
    84a2:	1d3a      	adds	r2, r7, #4
    84a4:	f004 ff8a 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    84a8:	4604      	mov	r4, r0
    84aa:	2800      	cmp	r0, #0
    84ac:	f040 8084 	bne.w	85b8 <bt_init+0x190>
	read_local_ver_complete(rsp);
    84b0:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    84b2:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    84b4:	785a      	ldrb	r2, [r3, #1]
    84b6:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    84ba:	885a      	ldrh	r2, [r3, #2]
    84bc:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    84c0:	791a      	ldrb	r2, [r3, #4]
    84c2:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    84c6:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    84ca:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    84ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    84d2:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    84d6:	f00b fe6d 	bl	141b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    84da:	4621      	mov	r1, r4
    84dc:	f241 0002 	movw	r0, #4098	; 0x1002
    84e0:	1d3a      	adds	r2, r7, #4
    84e2:	f004 ff6b 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    84e6:	4604      	mov	r4, r0
    84e8:	2800      	cmp	r0, #0
    84ea:	d165      	bne.n	85b8 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    84ec:	687c      	ldr	r4, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    84ee:	2240      	movs	r2, #64	; 0x40
    84f0:	68e1      	ldr	r1, [r4, #12]
    84f2:	4836      	ldr	r0, [pc, #216]	; (85cc <bt_init+0x1a4>)
    84f4:	3101      	adds	r1, #1
    84f6:	f011 ff3a 	bl	1a36e <memcpy>
	net_buf_unref(rsp);
    84fa:	4620      	mov	r0, r4
    84fc:	f00b fe5a 	bl	141b4 <net_buf_unref>
		err = prng_init();
    8500:	f006 fe02 	bl	f108 <prng_init>
		if (err) {
    8504:	4604      	mov	r4, r0
    8506:	2800      	cmp	r0, #0
    8508:	d156      	bne.n	85b8 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    850a:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
    850e:	0699      	lsls	r1, r3, #26
    8510:	d41c      	bmi.n	854c <bt_init+0x124>
		LOG_WRN("Controller to host flow control not supported");
    8512:	4b2f      	ldr	r3, [pc, #188]	; (85d0 <bt_init+0x1a8>)
    8514:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    8518:	61fb      	str	r3, [r7, #28]
    851a:	2302      	movs	r3, #2
    851c:	482d      	ldr	r0, [pc, #180]	; (85d4 <bt_init+0x1ac>)
    851e:	61bb      	str	r3, [r7, #24]
    8520:	f107 0218 	add.w	r2, r7, #24
    8524:	f011 fffb 	bl	1a51e <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    8528:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    852c:	065a      	lsls	r2, r3, #25
    852e:	d455      	bmi.n	85dc <bt_init+0x1b4>
		LOG_ERR("Non-LE capable controller detected!");
    8530:	4b29      	ldr	r3, [pc, #164]	; (85d8 <bt_init+0x1b0>)
    8532:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8536:	61fb      	str	r3, [r7, #28]
    8538:	2302      	movs	r3, #2
    853a:	4826      	ldr	r0, [pc, #152]	; (85d4 <bt_init+0x1ac>)
    853c:	61bb      	str	r3, [r7, #24]
    853e:	f107 0218 	add.w	r2, r7, #24
    8542:	f011 ffec 	bl	1a51e <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    8546:	f06f 0412 	mvn.w	r4, #18
    854a:	e035      	b.n	85b8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    854c:	2107      	movs	r1, #7
    854e:	f640 4033 	movw	r0, #3123	; 0xc33
    8552:	f004 fef9 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    8556:	4680      	mov	r8, r0
    8558:	2800      	cmp	r0, #0
    855a:	f000 814a 	beq.w	87f2 <bt_init+0x3ca>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    855e:	2107      	movs	r1, #7
    8560:	300c      	adds	r0, #12
    8562:	f013 fff0 	bl	1c546 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    8566:	4621      	mov	r1, r4
    8568:	2207      	movs	r2, #7
    856a:	4606      	mov	r6, r0
    856c:	f011 ff0a 	bl	1a384 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    8570:	2345      	movs	r3, #69	; 0x45
    8572:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    8574:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8576:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    8578:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    857a:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    857c:	4641      	mov	r1, r8
    857e:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    8582:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8584:	f004 ff1a 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8588:	4604      	mov	r4, r0
    858a:	b9a8      	cbnz	r0, 85b8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    858c:	2101      	movs	r1, #1
    858e:	f640 4031 	movw	r0, #3121	; 0xc31
    8592:	f004 fed9 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    8596:	4606      	mov	r6, r0
    8598:	2800      	cmp	r0, #0
    859a:	f000 812a 	beq.w	87f2 <bt_init+0x3ca>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    859e:	2101      	movs	r1, #1
    85a0:	300c      	adds	r0, #12
    85a2:	f013 ffdf 	bl	1c564 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    85a6:	4622      	mov	r2, r4
    85a8:	4631      	mov	r1, r6
    85aa:	f640 4031 	movw	r0, #3121	; 0xc31
    85ae:	f004 ff05 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    85b2:	4604      	mov	r4, r0
    85b4:	2800      	cmp	r0, #0
    85b6:	d0b7      	beq.n	8528 <bt_init+0x100>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    85b8:	4620      	mov	r0, r4
    85ba:	3720      	adds	r7, #32
    85bc:	46bd      	mov	sp, r7
    85be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85c2:	bf00      	nop
    85c4:	20008000 	.word	0x20008000
    85c8:	20008078 	.word	0x20008078
    85cc:	20008080 	.word	0x20008080
    85d0:	0001ffe4 	.word	0x0001ffe4
    85d4:	0001e55c 	.word	0x0001e55c
    85d8:	00020012 	.word	0x00020012
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    85dc:	2100      	movs	r1, #0
    85de:	f242 0003 	movw	r0, #8195	; 0x2003
    85e2:	f107 0208 	add.w	r2, r7, #8
    85e6:	f004 fee9 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    85ea:	4604      	mov	r4, r0
    85ec:	2800      	cmp	r0, #0
    85ee:	d1e3      	bne.n	85b8 <bt_init+0x190>
	read_le_features_complete(rsp);
    85f0:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    85f2:	2208      	movs	r2, #8
    85f4:	68f1      	ldr	r1, [r6, #12]
    85f6:	48aa      	ldr	r0, [pc, #680]	; (88a0 <bt_init+0x478>)
    85f8:	3101      	adds	r1, #1
    85fa:	f011 feb8 	bl	1a36e <memcpy>
	net_buf_unref(rsp);
    85fe:	4630      	mov	r0, r6
    8600:	f00b fdd8 	bl	141b4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    8604:	4621      	mov	r1, r4
    8606:	f242 0002 	movw	r0, #8194	; 0x2002
    860a:	f107 0208 	add.w	r2, r7, #8
    860e:	f004 fed5 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    8612:	4604      	mov	r4, r0
    8614:	2800      	cmp	r0, #0
    8616:	d1cf      	bne.n	85b8 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    8618:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    861a:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    861c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8620:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    8622:	b141      	cbz	r1, 8636 <bt_init+0x20e>
    8624:	78d9      	ldrb	r1, [r3, #3]
    8626:	b131      	cbz	r1, 8636 <bt_init+0x20e>
	bt_dev.le.acl_mtu = acl_mtu;
    8628:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    862c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    862e:	489d      	ldr	r0, [pc, #628]	; (88a4 <bt_init+0x47c>)
    8630:	4611      	mov	r1, r2
    8632:	f015 f938 	bl	1d8a6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    8636:	4620      	mov	r0, r4
    8638:	f00b fdbc 	bl	141b4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    863c:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
    8640:	f016 0620 	ands.w	r6, r6, #32
    8644:	d118      	bne.n	8678 <bt_init+0x250>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    8646:	2102      	movs	r1, #2
    8648:	f640 406d 	movw	r0, #3181	; 0xc6d
    864c:	f004 fe7c 	bl	d348 <bt_hci_cmd_create>
		if (!buf) {
    8650:	4604      	mov	r4, r0
    8652:	2800      	cmp	r0, #0
    8654:	f000 80cd 	beq.w	87f2 <bt_init+0x3ca>
	return net_buf_simple_add(&buf->b, len);
    8658:	2102      	movs	r1, #2
    865a:	300c      	adds	r0, #12
    865c:	f013 ff73 	bl	1c546 <net_buf_simple_add>
		cp_le->le = 0x01;
    8660:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8662:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    8664:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    8666:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8668:	4632      	mov	r2, r6
    866a:	f640 406d 	movw	r0, #3181	; 0xc6d
    866e:	f004 fea5 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    8672:	4604      	mov	r4, r0
    8674:	2800      	cmp	r0, #0
    8676:	d19f      	bne.n	85b8 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    8678:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    867c:	071b      	lsls	r3, r3, #28
    867e:	d513      	bpl.n	86a8 <bt_init+0x280>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    8680:	2100      	movs	r1, #0
    8682:	f242 001c 	movw	r0, #8220	; 0x201c
    8686:	f107 0208 	add.w	r2, r7, #8
    868a:	f004 fe97 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    868e:	4604      	mov	r4, r0
    8690:	2800      	cmp	r0, #0
    8692:	d191      	bne.n	85b8 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    8694:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    8696:	68c3      	ldr	r3, [r0, #12]
    8698:	f8d3 2001 	ldr.w	r2, [r3, #1]
    869c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    86a0:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    86a4:	f00b fd86 	bl	141b4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    86a8:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    86ac:	069e      	lsls	r6, r3, #26
    86ae:	d522      	bpl.n	86f6 <bt_init+0x2ce>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    86b0:	1d39      	adds	r1, r7, #4
    86b2:	1cb8      	adds	r0, r7, #2
    86b4:	f004 ff02 	bl	d4bc <hci_le_read_max_data_len>
		if (err) {
    86b8:	4604      	mov	r4, r0
    86ba:	2800      	cmp	r0, #0
    86bc:	f47f af7c 	bne.w	85b8 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    86c0:	2104      	movs	r1, #4
    86c2:	f242 0024 	movw	r0, #8228	; 0x2024
    86c6:	f004 fe3f 	bl	d348 <bt_hci_cmd_create>
		if (!buf) {
    86ca:	4606      	mov	r6, r0
    86cc:	2800      	cmp	r0, #0
    86ce:	f000 8090 	beq.w	87f2 <bt_init+0x3ca>
    86d2:	2104      	movs	r1, #4
    86d4:	300c      	adds	r0, #12
    86d6:	f013 ff36 	bl	1c546 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    86da:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    86dc:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    86de:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    86e0:	88bb      	ldrh	r3, [r7, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    86e2:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    86e4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    86e6:	f242 0024 	movw	r0, #8228	; 0x2024
    86ea:	f004 fe67 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    86ee:	4604      	mov	r4, r0
    86f0:	2800      	cmp	r0, #0
    86f2:	f47f af61 	bne.w	85b8 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    86f6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    86fa:	065c      	lsls	r4, r3, #25
    86fc:	d511      	bpl.n	8722 <bt_init+0x2fa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    86fe:	2100      	movs	r1, #0
    8700:	f242 002a 	movw	r0, #8234	; 0x202a
    8704:	f107 0208 	add.w	r2, r7, #8
    8708:	f004 fe58 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    870c:	4604      	mov	r4, r0
    870e:	2800      	cmp	r0, #0
    8710:	f47f af52 	bne.w	85b8 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    8714:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
    8716:	68c3      	ldr	r3, [r0, #12]
    8718:	785b      	ldrb	r3, [r3, #1]
    871a:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
    871e:	f00b fd49 	bl	141b4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    8722:	2108      	movs	r1, #8
    8724:	f242 0001 	movw	r0, #8193	; 0x2001
    8728:	f004 fe0e 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    872c:	4604      	mov	r4, r0
    872e:	2800      	cmp	r0, #0
    8730:	d05f      	beq.n	87f2 <bt_init+0x3ca>
    8732:	2108      	movs	r1, #8
    8734:	300c      	adds	r0, #12
    8736:	f013 ff06 	bl	1c546 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    873a:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    873e:	f240 2302 	movw	r3, #514	; 0x202
    8742:	f011 0f40 	tst.w	r1, #64	; 0x40
    8746:	bf08      	it	eq
    8748:	2303      	moveq	r3, #3
    874a:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    874c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    874e:	bf4c      	ite	mi
    8750:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    8754:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    8758:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    875a:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    875e:	bf48      	it	mi
    8760:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    8764:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    8768:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    876c:	bf18      	it	ne
    876e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    8772:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    8776:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    8778:	bf48      	it	mi
    877a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    877e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    8780:	bf08      	it	eq
    8782:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    8786:	2100      	movs	r1, #0
    8788:	f011 fed4 	bl	1a534 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    878c:	4621      	mov	r1, r4
    878e:	2200      	movs	r2, #0
    8790:	f242 0001 	movw	r0, #8193	; 0x2001
    8794:	f004 fe12 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8798:	4604      	mov	r4, r0
    879a:	2800      	cmp	r0, #0
    879c:	f47f af0c 	bne.w	85b8 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    87a0:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
    87a4:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
    87a8:	0698      	lsls	r0, r3, #26
    87aa:	d425      	bmi.n	87f8 <bt_init+0x3d0>
	if (bt_dev.le.acl_mtu) {
    87ac:	b9d1      	cbnz	r1, 87e4 <bt_init+0x3bc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    87ae:	f241 0005 	movw	r0, #4101	; 0x1005
    87b2:	f107 0208 	add.w	r2, r7, #8
    87b6:	f004 fe01 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    87ba:	4604      	mov	r4, r0
    87bc:	2800      	cmp	r0, #0
    87be:	f47f aefb 	bne.w	85b8 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    87c2:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
    87c6:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
    87c8:	b94b      	cbnz	r3, 87de <bt_init+0x3b6>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    87ca:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    87cc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    87d0:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    87d4:	889a      	ldrh	r2, [r3, #4]
    87d6:	4833      	ldr	r0, [pc, #204]	; (88a4 <bt_init+0x47c>)
    87d8:	4611      	mov	r1, r2
    87da:	f015 f864 	bl	1d8a6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    87de:	4620      	mov	r0, r4
    87e0:	f00b fce8 	bl	141b4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    87e4:	2108      	movs	r1, #8
    87e6:	f640 4001 	movw	r0, #3073	; 0xc01
    87ea:	f004 fdad 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    87ee:	4604      	mov	r4, r0
    87f0:	b990      	cbnz	r0, 8818 <bt_init+0x3f0>
		return -ENOBUFS;
    87f2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    87f6:	e6df      	b.n	85b8 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    87f8:	2900      	cmp	r1, #0
    87fa:	d1f3      	bne.n	87e4 <bt_init+0x3bc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    87fc:	4b2a      	ldr	r3, [pc, #168]	; (88a8 <bt_init+0x480>)
    87fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8802:	61fb      	str	r3, [r7, #28]
    8804:	2302      	movs	r3, #2
    8806:	4829      	ldr	r0, [pc, #164]	; (88ac <bt_init+0x484>)
    8808:	61bb      	str	r3, [r7, #24]
    880a:	f107 0218 	add.w	r2, r7, #24
    880e:	f011 fe86 	bl	1a51e <z_log_msg_static_create.constprop.0>
		return -EIO;
    8812:	f06f 0404 	mvn.w	r4, #4
    8816:	e6cf      	b.n	85b8 <bt_init+0x190>
    8818:	2108      	movs	r1, #8
    881a:	300c      	adds	r0, #12
    881c:	f013 fe93 	bl	1c546 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    8820:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    8824:	4602      	mov	r2, r0
    8826:	07d9      	lsls	r1, r3, #31
    8828:	d42f      	bmi.n	888a <bt_init+0x462>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    882a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    882e:	4820      	ldr	r0, [pc, #128]	; (88b0 <bt_init+0x488>)
	sys_put_le64(mask, ev->events);
    8830:	f011 fe80 	bl	1a534 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    8834:	4621      	mov	r1, r4
    8836:	2200      	movs	r2, #0
    8838:	f640 4001 	movw	r0, #3073	; 0xc01
    883c:	f004 fdbe 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8840:	4604      	mov	r4, r0
    8842:	2800      	cmp	r0, #0
    8844:	f47f aeb8 	bne.w	85b8 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    8848:	4601      	mov	r1, r0
    884a:	1d3a      	adds	r2, r7, #4
    884c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    8850:	f004 fdb4 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8854:	b380      	cbz	r0, 88b8 <bt_init+0x490>
		LOG_WRN("Vendor HCI extensions not available");
    8856:	4b17      	ldr	r3, [pc, #92]	; (88b4 <bt_init+0x48c>)
			LOG_WRN("Failed to read supported vendor features");
    8858:	61fb      	str	r3, [r7, #28]
    885a:	2302      	movs	r3, #2
    885c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    8860:	4812      	ldr	r0, [pc, #72]	; (88ac <bt_init+0x484>)
    8862:	61bb      	str	r3, [r7, #24]
    8864:	f107 0218 	add.w	r2, r7, #24
    8868:	f011 fe59 	bl	1a51e <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    886c:	f006 f8b0 	bl	e9d0 <bt_id_init>
	if (err) {
    8870:	4604      	mov	r4, r0
    8872:	2800      	cmp	r0, #0
    8874:	f47f aea0 	bne.w	85b8 <bt_init+0x190>
		err = bt_conn_init();
    8878:	f007 fc8c 	bl	10194 <bt_conn_init>
		if (err) {
    887c:	4604      	mov	r4, r0
    887e:	2800      	cmp	r0, #0
    8880:	f47f ae9a 	bne.w	85b8 <bt_init+0x190>
	bt_finalize_init();
    8884:	f005 fbb6 	bl	dff4 <bt_finalize_init>
	return 0;
    8888:	e696      	b.n	85b8 <bt_init+0x190>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    888a:	a103      	add	r1, pc, #12	; (adr r1, 8898 <bt_init+0x470>)
    888c:	e9d1 0100 	ldrd	r0, r1, [r1]
    8890:	e7ce      	b.n	8830 <bt_init+0x408>
    8892:	bf00      	nop
    8894:	f3af 8000 	nop.w
    8898:	02008890 	.word	0x02008890
    889c:	20008000 	.word	0x20008000
    88a0:	200080d8 	.word	0x200080d8
    88a4:	20008108 	.word	0x20008108
    88a8:	00020036 	.word	0x00020036
    88ac:	0001e55c 	.word	0x0001e55c
    88b0:	02008810 	.word	0x02008810
    88b4:	00020059 	.word	0x00020059
	rp.info = (void *)rsp->data;
    88b8:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    88ba:	466d      	mov	r5, sp
	rp.info = (void *)rsp->data;
    88bc:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    88be:	b08a      	sub	sp, #40	; 0x28
    88c0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    88c4:	2b03      	cmp	r3, #3
		return plat_str[platform];
    88c6:	bf96      	itet	ls
    88c8:	4a45      	ldrls	r2, [pc, #276]	; (89e0 <bt_init+0x5b8>)
	return "unknown";
    88ca:	4946      	ldrhi	r1, [pc, #280]	; (89e4 <bt_init+0x5bc>)
		return plat_str[platform];
    88cc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    88d0:	466a      	mov	r2, sp
    88d2:	61d3      	str	r3, [r2, #28]
    88d4:	f44f 7300 	mov.w	r3, #512	; 0x200
    88d8:	4843      	ldr	r0, [pc, #268]	; (89e8 <bt_init+0x5c0>)
    88da:	8413      	strh	r3, [r2, #32]
    88dc:	4b43      	ldr	r3, [pc, #268]	; (89ec <bt_init+0x5c4>)
    88de:	e9c2 0105 	strd	r0, r1, [r2, #20]
    88e2:	f842 3f10 	str.w	r3, [r2, #16]!
    88e6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    88ea:	4841      	ldr	r0, [pc, #260]	; (89f0 <bt_init+0x5c8>)
    88ec:	f011 fe17 	bl	1a51e <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    88f0:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    88f4:	46ad      	mov	sp, r5
    88f6:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
    88f8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    88fc:	d148      	bne.n	8990 <bt_init+0x568>
	if (variant < ARRAY_SIZE(nordic_str)) {
    88fe:	2b03      	cmp	r3, #3
    8900:	d846      	bhi.n	8990 <bt_init+0x568>
		return nordic_str[variant];
    8902:	4a3c      	ldr	r2, [pc, #240]	; (89f4 <bt_init+0x5cc>)
    8904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    8908:	466d      	mov	r5, sp
    890a:	b08a      	sub	sp, #40	; 0x28
    890c:	466a      	mov	r2, sp
    890e:	61d3      	str	r3, [r2, #28]
    8910:	f44f 7300 	mov.w	r3, #512	; 0x200
    8914:	4838      	ldr	r0, [pc, #224]	; (89f8 <bt_init+0x5d0>)
    8916:	8413      	strh	r3, [r2, #32]
    8918:	4b34      	ldr	r3, [pc, #208]	; (89ec <bt_init+0x5c4>)
    891a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    891e:	f842 3f10 	str.w	r3, [r2, #16]!
    8922:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    8926:	4832      	ldr	r0, [pc, #200]	; (89f0 <bt_init+0x5c8>)
    8928:	f011 fdf9 	bl	1a51e <z_log_msg_static_create.constprop.0>
    892c:	46ad      	mov	sp, r5
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    892e:	7963      	ldrb	r3, [r4, #5]
    8930:	79a6      	ldrb	r6, [r4, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    8932:	2b03      	cmp	r3, #3
		return var_str[variant];
    8934:	bf98      	it	ls
    8936:	4a31      	ldrls	r2, [pc, #196]	; (89fc <bt_init+0x5d4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    8938:	f8b4 5007 	ldrh.w	r5, [r4, #7]
    893c:	f8d4 0009 	ldr.w	r0, [r4, #9]
    8940:	466c      	mov	r4, sp
    8942:	b08c      	sub	sp, #48	; 0x30
		return var_str[variant];
    8944:	bf94      	ite	ls
    8946:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    894a:	4926      	ldrhi	r1, [pc, #152]	; (89e4 <bt_init+0x5bc>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    894c:	466a      	mov	r2, sp
    894e:	e9c2 3607 	strd	r3, r6, [r2, #28]
    8952:	f44f 7300 	mov.w	r3, #512	; 0x200
    8956:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8a00 <bt_init+0x5d8>
    895a:	8593      	strh	r3, [r2, #44]	; 0x2c
    895c:	4b29      	ldr	r3, [pc, #164]	; (8a04 <bt_init+0x5dc>)
    895e:	e9c2 c105 	strd	ip, r1, [r2, #20]
    8962:	e9c2 5009 	strd	r5, r0, [r2, #36]	; 0x24
    8966:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    896a:	f842 3f10 	str.w	r3, [r2, #16]!
    896e:	4820      	ldr	r0, [pc, #128]	; (89f0 <bt_init+0x5c8>)
    8970:	f011 fdd5 	bl	1a51e <z_log_msg_static_create.constprop.0>
    8974:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    8976:	6878      	ldr	r0, [r7, #4]
    8978:	f00b fc1c 	bl	141b4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    897c:	2100      	movs	r1, #0
    897e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    8982:	1d3a      	adds	r2, r7, #4
    8984:	f004 fd1a 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    8988:	4604      	mov	r4, r0
    898a:	b118      	cbz	r0, 8994 <bt_init+0x56c>
		LOG_WRN("Failed to read supported vendor commands");
    898c:	4b1e      	ldr	r3, [pc, #120]	; (8a08 <bt_init+0x5e0>)
    898e:	e763      	b.n	8858 <bt_init+0x430>
		return "unknown";
    8990:	4914      	ldr	r1, [pc, #80]	; (89e4 <bt_init+0x5bc>)
    8992:	e7b9      	b.n	8908 <bt_init+0x4e0>
	rp.cmds = (void *)rsp->data;
    8994:	687d      	ldr	r5, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    8996:	2202      	movs	r2, #2
    8998:	68e9      	ldr	r1, [r5, #12]
    899a:	481c      	ldr	r0, [pc, #112]	; (8a0c <bt_init+0x5e4>)
    899c:	3101      	adds	r1, #1
    899e:	f011 fce6 	bl	1a36e <memcpy>
	net_buf_unref(rsp);
    89a2:	4628      	mov	r0, r5
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    89a4:	4d1a      	ldr	r5, [pc, #104]	; (8a10 <bt_init+0x5e8>)
	net_buf_unref(rsp);
    89a6:	f00b fc05 	bl	141b4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    89aa:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    89ae:	075b      	lsls	r3, r3, #29
    89b0:	f57f af5c 	bpl.w	886c <bt_init+0x444>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    89b4:	4621      	mov	r1, r4
    89b6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    89ba:	1d3a      	adds	r2, r7, #4
    89bc:	f004 fcfe 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    89c0:	b108      	cbz	r0, 89c6 <bt_init+0x59e>
			LOG_WRN("Failed to read supported vendor features");
    89c2:	4b14      	ldr	r3, [pc, #80]	; (8a14 <bt_init+0x5ec>)
    89c4:	e748      	b.n	8858 <bt_init+0x430>
		memcpy(bt_dev.vs_features, rp.feat->features,
    89c6:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    89c8:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    89ca:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    89ce:	68e1      	ldr	r1, [r4, #12]
    89d0:	4411      	add	r1, r2
    89d2:	f011 fccc 	bl	1a36e <memcpy>
		net_buf_unref(rsp);
    89d6:	4620      	mov	r0, r4
    89d8:	f00b fbec 	bl	141b4 <net_buf_unref>
    89dc:	e746      	b.n	886c <bt_init+0x444>
    89de:	bf00      	nop
    89e0:	0001ea14 	.word	0x0001ea14
    89e4:	0001fa32 	.word	0x0001fa32
    89e8:	0002007d 	.word	0x0002007d
    89ec:	01000004 	.word	0x01000004
    89f0:	0001e55c 	.word	0x0001e55c
    89f4:	0001ea04 	.word	0x0001ea04
    89f8:	00020096 	.word	0x00020096
    89fc:	0001e9f4 	.word	0x0001e9f4
    8a00:	000200ae 	.word	0x000200ae
    8a04:	01000007 	.word	0x01000007
    8a08:	000200db 	.word	0x000200db
    8a0c:	200080c1 	.word	0x200080c1
    8a10:	20008000 	.word	0x20008000
    8a14:	00020104 	.word	0x00020104

00008a18 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
    8a18:	4b01      	ldr	r3, [pc, #4]	; (8a20 <app_button_cb+0x8>)
    8a1a:	7818      	ldrb	r0, [r3, #0]
    8a1c:	4770      	bx	lr
    8a1e:	bf00      	nop
    8a20:	20009c54 	.word	0x20009c54

00008a24 <button_changed>:
	.button_cb = app_button_cb,
};

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
    8a24:	07cb      	lsls	r3, r1, #31
{
    8a26:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
    8a28:	d506      	bpl.n	8a38 <button_changed+0x14>
		uint32_t user_button_state = button_state & USER_BUTTON;

		bt_lbs_send_button_state(user_button_state);
    8a2a:	f000 0401 	and.w	r4, r0, #1
    8a2e:	4620      	mov	r0, r4
    8a30:	f000 fa22 	bl	8e78 <bt_lbs_send_button_state>
		app_button_state = user_button_state ? true : false;
    8a34:	4b01      	ldr	r3, [pc, #4]	; (8a3c <button_changed+0x18>)
    8a36:	701c      	strb	r4, [r3, #0]
	}
}
    8a38:	bd10      	pop	{r4, pc}
    8a3a:	bf00      	nop
    8a3c:	20009c54 	.word	0x20009c54

00008a40 <on_connected>:
{
    8a40:	b590      	push	{r4, r7, lr}
    8a42:	b087      	sub	sp, #28
    8a44:	af00      	add	r7, sp, #0
	if (err) {
    8a46:	b189      	cbz	r1, 8a6c <on_connected+0x2c>
		LOG_INF("Connection failed (err %u)\n", err);
    8a48:	466c      	mov	r4, sp
    8a4a:	b088      	sub	sp, #32
    8a4c:	466a      	mov	r2, sp
    8a4e:	4b0f      	ldr	r3, [pc, #60]	; (8a8c <on_connected+0x4c>)
    8a50:	480f      	ldr	r0, [pc, #60]	; (8a90 <on_connected+0x50>)
    8a52:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8a56:	2303      	movs	r3, #3
    8a58:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8a5c:	f842 3f10 	str.w	r3, [r2, #16]!
    8a60:	f00f ff0e 	bl	18880 <z_log_msg_static_create.constprop.0>
    8a64:	46a5      	mov	sp, r4
}
    8a66:	371c      	adds	r7, #28
    8a68:	46bd      	mov	sp, r7
    8a6a:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Connected\n");
    8a6c:	4b09      	ldr	r3, [pc, #36]	; (8a94 <on_connected+0x54>)
    8a6e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8a72:	617b      	str	r3, [r7, #20]
    8a74:	2302      	movs	r3, #2
    8a76:	4806      	ldr	r0, [pc, #24]	; (8a90 <on_connected+0x50>)
    8a78:	f107 0210 	add.w	r2, r7, #16
    8a7c:	613b      	str	r3, [r7, #16]
    8a7e:	f00f feff 	bl	18880 <z_log_msg_static_create.constprop.0>
	dk_set_led_on(CON_STATUS_LED);
    8a82:	2001      	movs	r0, #1
    8a84:	f013 ff8e 	bl	1c9a4 <dk_set_led_on>
    8a88:	e7ed      	b.n	8a66 <on_connected+0x26>
    8a8a:	bf00      	nop
    8a8c:	0001ef58 	.word	0x0001ef58
    8a90:	0001e504 	.word	0x0001e504
    8a94:	0001ef74 	.word	0x0001ef74

00008a98 <on_disconnected>:
{
    8a98:	b598      	push	{r3, r4, r7, lr}
    8a9a:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason %u)\n", reason);
    8a9c:	466c      	mov	r4, sp
    8a9e:	b088      	sub	sp, #32
    8aa0:	466a      	mov	r2, sp
    8aa2:	4b08      	ldr	r3, [pc, #32]	; (8ac4 <on_disconnected+0x2c>)
    8aa4:	4808      	ldr	r0, [pc, #32]	; (8ac8 <on_disconnected+0x30>)
    8aa6:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8aaa:	2303      	movs	r3, #3
    8aac:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8ab0:	f842 3f10 	str.w	r3, [r2, #16]!
    8ab4:	f00f fee4 	bl	18880 <z_log_msg_static_create.constprop.0>
	dk_set_led_off(CON_STATUS_LED);
    8ab8:	2001      	movs	r0, #1
    8aba:	46a5      	mov	sp, r4
    8abc:	f013 ff75 	bl	1c9aa <dk_set_led_off>
}
    8ac0:	46bd      	mov	sp, r7
    8ac2:	bd98      	pop	{r3, r4, r7, pc}
    8ac4:	0001ef7f 	.word	0x0001ef7f
    8ac8:	0001e504 	.word	0x0001e504

00008acc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8acc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    8ace:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8ad0:	b08a      	sub	sp, #40	; 0x28
    8ad2:	4604      	mov	r4, r0
    8ad4:	460e      	mov	r6, r1
    8ad6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8ad8:	2b03      	cmp	r3, #3
    8ada:	d820      	bhi.n	8b1e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    8adc:	e8df f003 	tbb	[pc, r3]
    8ae0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    8ae4:	4911      	ldr	r1, [pc, #68]	; (8b2c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    8ae6:	4628      	mov	r0, r5
    8ae8:	f011 fbe4 	bl	1a2b4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8aec:	9505      	str	r5, [sp, #20]
    8aee:	7863      	ldrb	r3, [r4, #1]
    8af0:	211e      	movs	r1, #30
    8af2:	9304      	str	r3, [sp, #16]
    8af4:	78a3      	ldrb	r3, [r4, #2]
    8af6:	4630      	mov	r0, r6
    8af8:	9303      	str	r3, [sp, #12]
    8afa:	78e3      	ldrb	r3, [r4, #3]
    8afc:	4a0c      	ldr	r2, [pc, #48]	; (8b30 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    8afe:	9302      	str	r3, [sp, #8]
    8b00:	7923      	ldrb	r3, [r4, #4]
    8b02:	9301      	str	r3, [sp, #4]
    8b04:	7963      	ldrb	r3, [r4, #5]
    8b06:	9300      	str	r3, [sp, #0]
    8b08:	79a3      	ldrb	r3, [r4, #6]
    8b0a:	f00f ff36 	bl	1897a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    8b0e:	b00a      	add	sp, #40	; 0x28
    8b10:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8b12:	4908      	ldr	r1, [pc, #32]	; (8b34 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    8b14:	e7e7      	b.n	8ae6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    8b16:	4908      	ldr	r1, [pc, #32]	; (8b38 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    8b18:	e7e5      	b.n	8ae6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    8b1a:	4908      	ldr	r1, [pc, #32]	; (8b3c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    8b1c:	e7e3      	b.n	8ae6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8b1e:	210a      	movs	r1, #10
    8b20:	4628      	mov	r0, r5
    8b22:	4a07      	ldr	r2, [pc, #28]	; (8b40 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    8b24:	f00f ff29 	bl	1897a <snprintk>
		break;
    8b28:	e7e0      	b.n	8aec <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    8b2a:	bf00      	nop
    8b2c:	0001ef99 	.word	0x0001ef99
    8b30:	0001efbb 	.word	0x0001efbb
    8b34:	0001efa0 	.word	0x0001efa0
    8b38:	0001efa7 	.word	0x0001efa7
    8b3c:	0001efb1 	.word	0x0001efb1
    8b40:	0002106d 	.word	0x0002106d

00008b44 <on_security_changed>:
{
    8b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b46:	4614      	mov	r4, r2
    8b48:	b089      	sub	sp, #36	; 0x24
    8b4a:	af00      	add	r7, sp, #0
    8b4c:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    8b4e:	f012 f8e0 	bl	1ad12 <bt_conn_get_dst>
    8b52:	4639      	mov	r1, r7
    8b54:	f7ff ffba 	bl	8acc <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    8b58:	b9ac      	cbnz	r4, 8b86 <on_security_changed+0x42>
		LOG_INF("Security changed: %s level %u\n", addr, level);
    8b5a:	466c      	mov	r4, sp
    8b5c:	b08a      	sub	sp, #40	; 0x28
    8b5e:	466a      	mov	r2, sp
    8b60:	4b14      	ldr	r3, [pc, #80]	; (8bb4 <on_security_changed+0x70>)
    8b62:	61d5      	str	r5, [r2, #28]
    8b64:	e9c2 3705 	strd	r3, r7, [r2, #20]
    8b68:	f44f 7300 	mov.w	r3, #512	; 0x200
    8b6c:	8413      	strh	r3, [r2, #32]
    8b6e:	4b12      	ldr	r3, [pc, #72]	; (8bb8 <on_security_changed+0x74>)
    8b70:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    8b74:	4811      	ldr	r0, [pc, #68]	; (8bbc <on_security_changed+0x78>)
    8b76:	f842 3f10 	str.w	r3, [r2, #16]!
    8b7a:	f00f fe81 	bl	18880 <z_log_msg_static_create.constprop.0>
    8b7e:	46a5      	mov	sp, r4
}
    8b80:	3724      	adds	r7, #36	; 0x24
    8b82:	46bd      	mov	sp, r7
    8b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
    8b86:	466e      	mov	r6, sp
    8b88:	b08a      	sub	sp, #40	; 0x28
    8b8a:	466b      	mov	r3, sp
    8b8c:	4a0c      	ldr	r2, [pc, #48]	; (8bc0 <on_security_changed+0x7c>)
    8b8e:	e9c3 5407 	strd	r5, r4, [r3, #28]
    8b92:	e9c3 2705 	strd	r2, r7, [r3, #20]
    8b96:	f44f 7200 	mov.w	r2, #512	; 0x200
    8b9a:	849a      	strh	r2, [r3, #36]	; 0x24
    8b9c:	461a      	mov	r2, r3
    8b9e:	4b09      	ldr	r3, [pc, #36]	; (8bc4 <on_security_changed+0x80>)
    8ba0:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    8ba4:	4805      	ldr	r0, [pc, #20]	; (8bbc <on_security_changed+0x78>)
    8ba6:	f842 3f10 	str.w	r3, [r2, #16]!
    8baa:	f00f fe69 	bl	18880 <z_log_msg_static_create.constprop.0>
    8bae:	46b5      	mov	sp, r6
}
    8bb0:	e7e6      	b.n	8b80 <on_security_changed+0x3c>
    8bb2:	bf00      	nop
    8bb4:	0001efde 	.word	0x0001efde
    8bb8:	01000004 	.word	0x01000004
    8bbc:	0001e504 	.word	0x0001e504
    8bc0:	0001effd 	.word	0x0001effd
    8bc4:	01000005 	.word	0x01000005

00008bc8 <auth_cancel>:
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b088      	sub	sp, #32
    8bcc:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    8bce:	f012 f8a0 	bl	1ad12 <bt_conn_get_dst>
    8bd2:	4639      	mov	r1, r7
    8bd4:	f7ff ff7a 	bl	8acc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s\n", addr);
    8bd8:	b088      	sub	sp, #32
    8bda:	466a      	mov	r2, sp
    8bdc:	4b08      	ldr	r3, [pc, #32]	; (8c00 <auth_cancel+0x38>)
    8bde:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    8be2:	e9c2 3705 	strd	r3, r7, [r2, #20]
    8be6:	f44f 7300 	mov.w	r3, #512	; 0x200
    8bea:	8393      	strh	r3, [r2, #28]
    8bec:	4b05      	ldr	r3, [pc, #20]	; (8c04 <auth_cancel+0x3c>)
    8bee:	4806      	ldr	r0, [pc, #24]	; (8c08 <auth_cancel+0x40>)
    8bf0:	f842 3f10 	str.w	r3, [r2, #16]!
    8bf4:	f00f fe44 	bl	18880 <z_log_msg_static_create.constprop.0>
}
    8bf8:	3720      	adds	r7, #32
    8bfa:	46bd      	mov	sp, r7
    8bfc:	bd80      	pop	{r7, pc}
    8bfe:	bf00      	nop
    8c00:	0001f022 	.word	0x0001f022
    8c04:	01000003 	.word	0x01000003
    8c08:	0001e504 	.word	0x0001e504

00008c0c <auth_passkey_display>:
{
    8c0c:	b590      	push	{r4, r7, lr}
    8c0e:	b089      	sub	sp, #36	; 0x24
    8c10:	af00      	add	r7, sp, #0
    8c12:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    8c14:	f012 f87d 	bl	1ad12 <bt_conn_get_dst>
    8c18:	4639      	mov	r1, r7
    8c1a:	f7ff ff57 	bl	8acc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u\n", addr, passkey);
    8c1e:	b08a      	sub	sp, #40	; 0x28
    8c20:	466a      	mov	r2, sp
    8c22:	4b09      	ldr	r3, [pc, #36]	; (8c48 <auth_passkey_display+0x3c>)
    8c24:	61d4      	str	r4, [r2, #28]
    8c26:	e9c2 3705 	strd	r3, r7, [r2, #20]
    8c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
    8c2e:	8413      	strh	r3, [r2, #32]
    8c30:	4b06      	ldr	r3, [pc, #24]	; (8c4c <auth_passkey_display+0x40>)
    8c32:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    8c36:	4806      	ldr	r0, [pc, #24]	; (8c50 <auth_passkey_display+0x44>)
    8c38:	f842 3f10 	str.w	r3, [r2, #16]!
    8c3c:	f00f fe20 	bl	18880 <z_log_msg_static_create.constprop.0>
}
    8c40:	3724      	adds	r7, #36	; 0x24
    8c42:	46bd      	mov	sp, r7
    8c44:	bd90      	pop	{r4, r7, pc}
    8c46:	bf00      	nop
    8c48:	0001f039 	.word	0x0001f039
    8c4c:	01000004 	.word	0x01000004
    8c50:	0001e504 	.word	0x0001e504

00008c54 <main>:

	return err;
}

void main(void)
{
    8c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c58:	b08e      	sub	sp, #56	; 0x38
	int blink_status = 0;
	int err;

	LOG_INF("Starting Lesson 5 - Exercise 1 \n");
    8c5a:	466e      	mov	r6, sp
{
    8c5c:	af02      	add	r7, sp, #8
	LOG_INF("Starting Lesson 5 - Exercise 1 \n");
    8c5e:	f04f 0802 	mov.w	r8, #2
    8c62:	4b4a      	ldr	r3, [pc, #296]	; (8d8c <main+0x138>)
    8c64:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8c68:	4849      	ldr	r0, [pc, #292]	; (8d90 <main+0x13c>)
    8c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    8c6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8c70:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
    8c74:	f00f fe04 	bl	18880 <z_log_msg_static_create.constprop.0>

	err = dk_leds_init();
    8c78:	f00c feda 	bl	15a30 <dk_leds_init>
	if (err) {
    8c7c:	b140      	cbz	r0, 8c90 <main+0x3c>
		LOG_INF("LEDs init failed (err %d)\n", err);
    8c7e:	b088      	sub	sp, #32
    8c80:	aa02      	add	r2, sp, #8
    8c82:	4b44      	ldr	r3, [pc, #272]	; (8d94 <main+0x140>)
		return;
	}

	err = bt_lbs_init(&lbs_callbacs);
	if (err) {
		LOG_INF("Failed to init LBS (err:%d)\n", err);
    8c84:	e9c2 3005 	strd	r3, r0, [r2, #20]

	LOG_INF("Bluetooth initialized\n");

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
	if (err) {
		LOG_INF("Advertising failed to start (err %d)\n", err);
    8c88:	2303      	movs	r3, #3
    8c8a:	f842 3f10 	str.w	r3, [r2, #16]!
    8c8e:	e02c      	b.n	8cea <main+0x96>
	err = dk_buttons_init(button_changed);
    8c90:	4841      	ldr	r0, [pc, #260]	; (8d98 <main+0x144>)
    8c92:	f00c ff07 	bl	15aa4 <dk_buttons_init>
	if (err) {
    8c96:	4604      	mov	r4, r0
    8c98:	b990      	cbnz	r0, 8cc0 <main+0x6c>
	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    8c9a:	4840      	ldr	r0, [pc, #256]	; (8d9c <main+0x148>)
    8c9c:	f007 fa58 	bl	10150 <bt_conn_auth_cb_register>
	if (err) {
    8ca0:	4604      	mov	r4, r0
    8ca2:	b348      	cbz	r0, 8cf8 <main+0xa4>
		LOG_INF("Failed to register authorization callbacks\n");
    8ca4:	4b3e      	ldr	r3, [pc, #248]	; (8da0 <main+0x14c>)
    8ca6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8caa:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
    8cae:	4838      	ldr	r0, [pc, #224]	; (8d90 <main+0x13c>)
    8cb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8cb4:	f00f fde4 	bl	18880 <z_log_msg_static_create.constprop.0>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
    8cb8:	3730      	adds	r7, #48	; 0x30
    8cba:	46bd      	mov	sp, r7
    8cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_INF("Cannot init buttons (err: %d)\n", err);
    8cc0:	b088      	sub	sp, #32
    8cc2:	aa02      	add	r2, sp, #8
    8cc4:	2503      	movs	r5, #3
    8cc6:	4b37      	ldr	r3, [pc, #220]	; (8da4 <main+0x150>)
    8cc8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8ccc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8cd0:	f842 5f10 	str.w	r5, [r2, #16]!
    8cd4:	482e      	ldr	r0, [pc, #184]	; (8d90 <main+0x13c>)
    8cd6:	f00f fdd3 	bl	18880 <z_log_msg_static_create.constprop.0>
    8cda:	46b5      	mov	sp, r6
		LOG_INF("Button init failed (err %d)\n", err);
    8cdc:	b088      	sub	sp, #32
    8cde:	aa02      	add	r2, sp, #8
    8ce0:	4b31      	ldr	r3, [pc, #196]	; (8da8 <main+0x154>)
    8ce2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    8ce6:	f842 5f10 	str.w	r5, [r2, #16]!
		LOG_INF("Advertising failed to start (err %d)\n", err);
    8cea:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8cee:	4828      	ldr	r0, [pc, #160]	; (8d90 <main+0x13c>)
    8cf0:	f00f fdc6 	bl	18880 <z_log_msg_static_create.constprop.0>
    8cf4:	46b5      	mov	sp, r6
		return;
    8cf6:	e7df      	b.n	8cb8 <main+0x64>
	bt_conn_cb_register(&connection_callbacks);
    8cf8:	482c      	ldr	r0, [pc, #176]	; (8dac <main+0x158>)
    8cfa:	f007 f851 	bl	fda0 <bt_conn_cb_register>
	err = bt_enable(NULL);
    8cfe:	4620      	mov	r0, r4
    8d00:	f005 fa2e 	bl	e160 <bt_enable>
	if (err) {
    8d04:	b118      	cbz	r0, 8d0e <main+0xba>
		LOG_INF("Bluetooth init failed (err %d)\n", err);
    8d06:	b088      	sub	sp, #32
    8d08:	aa02      	add	r2, sp, #8
    8d0a:	4b29      	ldr	r3, [pc, #164]	; (8db0 <main+0x15c>)
    8d0c:	e7ba      	b.n	8c84 <main+0x30>
	err = bt_lbs_init(&lbs_callbacs);
    8d0e:	4829      	ldr	r0, [pc, #164]	; (8db4 <main+0x160>)
    8d10:	f000 f8a8 	bl	8e64 <bt_lbs_init>
	if (err) {
    8d14:	b118      	cbz	r0, 8d1e <main+0xca>
		LOG_INF("Failed to init LBS (err:%d)\n", err);
    8d16:	b088      	sub	sp, #32
    8d18:	aa02      	add	r2, sp, #8
    8d1a:	4b27      	ldr	r3, [pc, #156]	; (8db8 <main+0x164>)
    8d1c:	e7b2      	b.n	8c84 <main+0x30>
	LOG_INF("Bluetooth initialized\n");
    8d1e:	4b27      	ldr	r3, [pc, #156]	; (8dbc <main+0x168>)
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    8d20:	4d27      	ldr	r5, [pc, #156]	; (8dc0 <main+0x16c>)
	LOG_INF("Bluetooth initialized\n");
    8d22:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8d26:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
    8d2a:	4819      	ldr	r0, [pc, #100]	; (8d90 <main+0x13c>)
    8d2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    8d30:	1d3c      	adds	r4, r7, #4
	LOG_INF("Bluetooth initialized\n");
    8d32:	f00f fda5 	bl	18880 <z_log_msg_static_create.constprop.0>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    8d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8d3a:	682b      	ldr	r3, [r5, #0]
    8d3c:	4642      	mov	r2, r8
    8d3e:	6023      	str	r3, [r4, #0]
    8d40:	2301      	movs	r3, #1
    8d42:	4920      	ldr	r1, [pc, #128]	; (8dc4 <main+0x170>)
    8d44:	9300      	str	r3, [sp, #0]
    8d46:	1d38      	adds	r0, r7, #4
    8d48:	4b1f      	ldr	r3, [pc, #124]	; (8dc8 <main+0x174>)
    8d4a:	f006 f8a3 	bl	ee94 <bt_le_adv_start>
	if (err) {
    8d4e:	4604      	mov	r4, r0
    8d50:	b128      	cbz	r0, 8d5e <main+0x10a>
		LOG_INF("Advertising failed to start (err %d)\n", err);
    8d52:	b088      	sub	sp, #32
    8d54:	aa02      	add	r2, sp, #8
    8d56:	4b1d      	ldr	r3, [pc, #116]	; (8dcc <main+0x178>)
    8d58:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8d5c:	e794      	b.n	8c88 <main+0x34>
	LOG_INF("Advertising successfully started\n");
    8d5e:	4b1c      	ldr	r3, [pc, #112]	; (8dd0 <main+0x17c>)
    8d60:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8d64:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
    8d68:	4809      	ldr	r0, [pc, #36]	; (8d90 <main+0x13c>)
    8d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8d6e:	f00f fd87 	bl	18880 <z_log_msg_static_create.constprop.0>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
    8d72:	3401      	adds	r4, #1
    8d74:	f004 0101 	and.w	r1, r4, #1
    8d78:	2000      	movs	r0, #0
    8d7a:	f00c ff25 	bl	15bc8 <dk_set_led>
	return z_impl_k_sleep(timeout);
    8d7e:	2100      	movs	r1, #0
    8d80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8d84:	f00f fa3a 	bl	181fc <z_impl_k_sleep>
	for (;;) {
    8d88:	e7f3      	b.n	8d72 <main+0x11e>
    8d8a:	bf00      	nop
    8d8c:	0001f04f 	.word	0x0001f04f
    8d90:	0001e504 	.word	0x0001e504
    8d94:	0001f070 	.word	0x0001f070
    8d98:	00008a25 	.word	0x00008a25
    8d9c:	20008170 	.word	0x20008170
    8da0:	0001f0c7 	.word	0x0001f0c7
    8da4:	0001f08b 	.word	0x0001f08b
    8da8:	0001f0aa 	.word	0x0001f0aa
    8dac:	20008188 	.word	0x20008188
    8db0:	0001f0f3 	.word	0x0001f0f3
    8db4:	20008168 	.word	0x20008168
    8db8:	0001f113 	.word	0x0001f113
    8dbc:	0001f130 	.word	0x0001f130
    8dc0:	0001e650 	.word	0x0001e650
    8dc4:	0001e730 	.word	0x0001e730
    8dc8:	0001e728 	.word	0x0001e728
    8dcc:	0001f147 	.word	0x0001f147
    8dd0:	0001f16d 	.word	0x0001f16d

00008dd4 <lbslc_ccc_cfg_changed>:
static bool button_state;
static struct bt_lbs_cb lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    8dd4:	1e4b      	subs	r3, r1, #1
    8dd6:	4259      	negs	r1, r3
    8dd8:	4159      	adcs	r1, r3
    8dda:	4b01      	ldr	r3, [pc, #4]	; (8de0 <lbslc_ccc_cfg_changed+0xc>)
    8ddc:	7019      	strb	r1, [r3, #0]
}
    8dde:	4770      	bx	lr
    8de0:	20009c56 	.word	0x20009c56

00008de4 <write_led>:

static ssize_t write_led(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    8de4:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (len != 1U) {
    8de6:	2b01      	cmp	r3, #1
{
    8de8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
    8dec:	d10c      	bne.n	8e08 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
    8dee:	b971      	cbnz	r1, 8e0e <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
    8df0:	4b0a      	ldr	r3, [pc, #40]	; (8e1c <write_led+0x38>)
    8df2:	681b      	ldr	r3, [r3, #0]
    8df4:	b90b      	cbnz	r3, 8dfa <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
    8df6:	2001      	movs	r0, #1
}
    8df8:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
    8dfa:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
    8dfc:	2801      	cmp	r0, #1
    8dfe:	d809      	bhi.n	8e14 <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
    8e00:	f000 0001 	and.w	r0, r0, #1
    8e04:	4798      	blx	r3
    8e06:	e7f6      	b.n	8df6 <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8e08:	f06f 000c 	mvn.w	r0, #12
    8e0c:	e7f4      	b.n	8df8 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8e0e:	f06f 0006 	mvn.w	r0, #6
    8e12:	e7f1      	b.n	8df8 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    8e14:	f06f 0012 	mvn.w	r0, #18
    8e18:	e7ee      	b.n	8df8 <write_led+0x14>
    8e1a:	bf00      	nop
    8e1c:	200097a0 	.word	0x200097a0

00008e20 <read_button>:
static ssize_t read_button(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    8e20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8e24:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (lbs_cb.button_cb) {
    8e26:	4b0d      	ldr	r3, [pc, #52]	; (8e5c <read_button+0x3c>)
{
    8e28:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    8e2a:	6858      	ldr	r0, [r3, #4]
{
    8e2c:	460c      	mov	r4, r1
    8e2e:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    8e30:	b180      	cbz	r0, 8e54 <read_button+0x34>
	const char *value = attr->user_data;
    8e32:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    8e36:	4780      	blx	r0
    8e38:	4b09      	ldr	r3, [pc, #36]	; (8e60 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    8e3a:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    8e3c:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    8e3e:	2301      	movs	r3, #1
    8e40:	e9cd 8301 	strd	r8, r3, [sp, #4]
    8e44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8e48:	4621      	mov	r1, r4
    8e4a:	9300      	str	r3, [sp, #0]
    8e4c:	4628      	mov	r0, r5
    8e4e:	463b      	mov	r3, r7
    8e50:	f012 fe2e 	bl	1bab0 <bt_gatt_attr_read>
	}

	return 0;
}
    8e54:	b004      	add	sp, #16
    8e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e5a:	bf00      	nop
    8e5c:	200097a0 	.word	0x200097a0
    8e60:	20009c55 	.word	0x20009c55

00008e64 <bt_lbs_init>:
			       // BT_GATT_PERM_WRITE_ENCRYPT,
			       BT_GATT_PERM_WRITE_AUTHEN, NULL, write_led, NULL), );

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    8e64:	b120      	cbz	r0, 8e70 <bt_lbs_init+0xc>
		lbs_cb.led_cb = callbacks->led_cb;
    8e66:	4b03      	ldr	r3, [pc, #12]	; (8e74 <bt_lbs_init+0x10>)
    8e68:	6802      	ldr	r2, [r0, #0]
    8e6a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    8e6c:	6842      	ldr	r2, [r0, #4]
    8e6e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    8e70:	2000      	movs	r0, #0
    8e72:	4770      	bx	lr
    8e74:	200097a0 	.word	0x200097a0

00008e78 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    8e78:	b500      	push	{lr}
	if (!notify_enabled) {
    8e7a:	4b0e      	ldr	r3, [pc, #56]	; (8eb4 <bt_lbs_send_button_state+0x3c>)
{
    8e7c:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    8e7e:	781b      	ldrb	r3, [r3, #0]
{
    8e80:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    8e84:	b19b      	cbz	r3, 8eae <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    8e86:	2100      	movs	r1, #0
    8e88:	2218      	movs	r2, #24
    8e8a:	a802      	add	r0, sp, #8
    8e8c:	f011 fa7a 	bl	1a384 <memset>

	params.attr = attr;
    8e90:	4b09      	ldr	r3, [pc, #36]	; (8eb8 <bt_lbs_send_button_state+0x40>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    8e92:	2000      	movs	r0, #0
	params.attr = attr;
    8e94:	9303      	str	r3, [sp, #12]
	params.data = data;
    8e96:	f10d 0307 	add.w	r3, sp, #7
    8e9a:	9304      	str	r3, [sp, #16]
	params.len = len;
    8e9c:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    8e9e:	a902      	add	r1, sp, #8
	params.len = len;
    8ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    8ea4:	f009 f90a 	bl	120bc <bt_gatt_notify_cb>
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2], &button_state, sizeof(button_state));
}
    8ea8:	b009      	add	sp, #36	; 0x24
    8eaa:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    8eae:	f06f 000c 	mvn.w	r0, #12
    8eb2:	e7f9      	b.n	8ea8 <bt_lbs_send_button_state+0x30>
    8eb4:	20009c56 	.word	0x20009c56
    8eb8:	0001e768 	.word	0x0001e768

00008ebc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    8ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ec0:	b091      	sub	sp, #68	; 0x44
    8ec2:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    8ec4:	f002 0304 	and.w	r3, r2, #4
    8ec8:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    8eca:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    8ece:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    8ed0:	0784      	lsls	r4, r0, #30
{
    8ed2:	4605      	mov	r5, r0
    8ed4:	460e      	mov	r6, r1
    8ed6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    8eda:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    8edc:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    8ede:	f040 81bd 	bne.w	925c <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    8ee2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    8ee4:	b130      	cbz	r0, 8ef4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    8ee6:	2907      	cmp	r1, #7
    8ee8:	d809      	bhi.n	8efe <cbvprintf_package+0x42>
		return -ENOSPC;
    8eea:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    8eee:	b011      	add	sp, #68	; 0x44
    8ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    8ef4:	f001 0607 	and.w	r6, r1, #7
    8ef8:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    8efa:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    8efe:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    8f00:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    8f04:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    8f08:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    8f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    8f0e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    8f10:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    8f12:	46cb      	mov	fp, r9
	size = sizeof(char *);
    8f14:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    8f16:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    8f1a:	b10d      	cbz	r5, 8f20 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    8f1c:	9a00      	ldr	r2, [sp, #0]
    8f1e:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8f20:	9805      	ldr	r0, [sp, #20]
    8f22:	2800      	cmp	r0, #0
    8f24:	f300 80eb 	bgt.w	90fe <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8f28:	4899      	ldr	r0, [pc, #612]	; (9190 <cbvprintf_package+0x2d4>)
    8f2a:	9a00      	ldr	r2, [sp, #0]
    8f2c:	4282      	cmp	r2, r0
    8f2e:	d303      	bcc.n	8f38 <cbvprintf_package+0x7c>
    8f30:	4898      	ldr	r0, [pc, #608]	; (9194 <cbvprintf_package+0x2d8>)
    8f32:	4282      	cmp	r2, r0
    8f34:	f0c0 80e3 	bcc.w	90fe <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8f38:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8f3a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8f3e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8f40:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8f44:	f100 8106 	bmi.w	9154 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    8f48:	2f0f      	cmp	r7, #15
    8f4a:	f200 80b4 	bhi.w	90b6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    8f4e:	2d00      	cmp	r5, #0
    8f50:	f000 8108 	beq.w	9164 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    8f54:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8f58:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    8f5c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    8f5e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    8f62:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    8f66:	9804      	ldr	r0, [sp, #16]
    8f68:	3001      	adds	r0, #1
    8f6a:	9004      	str	r0, [sp, #16]
    8f6c:	e0ea      	b.n	9144 <cbvprintf_package+0x288>
			switch (*fmt) {
    8f6e:	287a      	cmp	r0, #122	; 0x7a
    8f70:	d860      	bhi.n	9034 <cbvprintf_package+0x178>
    8f72:	284b      	cmp	r0, #75	; 0x4b
    8f74:	d80e      	bhi.n	8f94 <cbvprintf_package+0xd8>
    8f76:	2847      	cmp	r0, #71	; 0x47
    8f78:	d85c      	bhi.n	9034 <cbvprintf_package+0x178>
    8f7a:	2829      	cmp	r0, #41	; 0x29
    8f7c:	d82f      	bhi.n	8fde <cbvprintf_package+0x122>
    8f7e:	2825      	cmp	r0, #37	; 0x25
    8f80:	d055      	beq.n	902e <cbvprintf_package+0x172>
    8f82:	d857      	bhi.n	9034 <cbvprintf_package+0x178>
    8f84:	2820      	cmp	r0, #32
    8f86:	d07d      	beq.n	9084 <cbvprintf_package+0x1c8>
    8f88:	3823      	subs	r0, #35	; 0x23
    8f8a:	f1d0 0b00 	rsbs	fp, r0, #0
    8f8e:	eb4b 0b00 	adc.w	fp, fp, r0
    8f92:	e077      	b.n	9084 <cbvprintf_package+0x1c8>
    8f94:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    8f98:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    8f9c:	d84a      	bhi.n	9034 <cbvprintf_package+0x178>
    8f9e:	e8df f00c 	tbb	[pc, ip]
    8fa2:	4971      	.short	0x4971
    8fa4:	49494949 	.word	0x49494949
    8fa8:	49494949 	.word	0x49494949
    8fac:	494c4949 	.word	0x494c4949
    8fb0:	49494949 	.word	0x49494949
    8fb4:	5a494949 	.word	0x5a494949
    8fb8:	5a4c4c49 	.word	0x5a4c4c49
    8fbc:	4c715a5a 	.word	0x4c715a5a
    8fc0:	4971496e 	.word	0x4971496e
    8fc4:	49184c18 	.word	0x49184c18
    8fc8:	4c808349 	.word	0x4c808349
    8fcc:	494c4949 	.word	0x494c4949
    8fd0:	80          	.byte	0x80
    8fd1:	00          	.byte	0x00
    8fd2:	2000      	movs	r0, #0
    8fd4:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    8fd8:	f04f 0a04 	mov.w	sl, #4
    8fdc:	e039      	b.n	9052 <cbvprintf_package+0x196>
    8fde:	2201      	movs	r2, #1
			switch (*fmt) {
    8fe0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    8fe4:	fa5f fc8c 	uxtb.w	ip, ip
    8fe8:	fa02 fc0c 	lsl.w	ip, r2, ip
    8fec:	ea1c 0f0e 	tst.w	ip, lr
    8ff0:	d148      	bne.n	9084 <cbvprintf_package+0x1c8>
    8ff2:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    8ff6:	d12e      	bne.n	9056 <cbvprintf_package+0x19a>
    8ff8:	ea1c 0b02 	ands.w	fp, ip, r2
    8ffc:	d042      	beq.n	9084 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    8ffe:	3c01      	subs	r4, #1
    9000:	4454      	add	r4, sl
    9002:	f1ca 0c00 	rsb	ip, sl, #0
    9006:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    900a:	2d00      	cmp	r5, #0
    900c:	d061      	beq.n	90d2 <cbvprintf_package+0x216>
    900e:	eba3 0c05 	sub.w	ip, r3, r5
    9012:	44a4      	add	ip, r4
    9014:	45b4      	cmp	ip, r6
    9016:	f63f af68 	bhi.w	8eea <cbvprintf_package+0x2e>
		if (is_str_arg) {
    901a:	2800      	cmp	r0, #0
    901c:	d168      	bne.n	90f0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    901e:	2b04      	cmp	r3, #4
    9020:	d147      	bne.n	90b2 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    9022:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    9026:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    9028:	2304      	movs	r3, #4
    902a:	3404      	adds	r4, #4
    902c:	e02a      	b.n	9084 <cbvprintf_package+0x1c8>
				arg_idx--;
    902e:	9a01      	ldr	r2, [sp, #4]
    9030:	3a01      	subs	r2, #1
    9032:	9201      	str	r2, [sp, #4]
				parsing = false;
    9034:	f04f 0b00 	mov.w	fp, #0
				continue;
    9038:	e024      	b.n	9084 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    903a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    903e:	286c      	cmp	r0, #108	; 0x6c
    9040:	d134      	bne.n	90ac <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    9042:	2000      	movs	r0, #0
    9044:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    9048:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    904a:	2b6c      	cmp	r3, #108	; 0x6c
    904c:	d1c4      	bne.n	8fd8 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    904e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    9052:	4653      	mov	r3, sl
    9054:	e7d3      	b.n	8ffe <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    9056:	f108 0807 	add.w	r8, r8, #7
    905a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    905e:	3407      	adds	r4, #7
    9060:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    9064:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    9068:	b135      	cbz	r5, 9078 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    906a:	9806      	ldr	r0, [sp, #24]
    906c:	4420      	add	r0, r4
    906e:	42b0      	cmp	r0, r6
    9070:	f63f af3b 	bhi.w	8eea <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    9074:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    9078:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    907c:	3408      	adds	r4, #8
			switch (*fmt) {
    907e:	f04f 0a08 	mov.w	sl, #8
    9082:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    9084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9088:	2800      	cmp	r0, #0
    908a:	d078      	beq.n	917e <cbvprintf_package+0x2c2>
			if (!parsing) {
    908c:	f1bb 0f00 	cmp.w	fp, #0
    9090:	f47f af6d 	bne.w	8f6e <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    9094:	2825      	cmp	r0, #37	; 0x25
    9096:	d1f5      	bne.n	9084 <cbvprintf_package+0x1c8>
					parsing = true;
    9098:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    909c:	9b01      	ldr	r3, [sp, #4]
    909e:	3301      	adds	r3, #1
    90a0:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    90a2:	f04f 0a04 	mov.w	sl, #4
    90a6:	e7ec      	b.n	9082 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    90a8:	4658      	mov	r0, fp
    90aa:	e793      	b.n	8fd4 <cbvprintf_package+0x118>
    90ac:	2000      	movs	r0, #0
				parsing = false;
    90ae:	4683      	mov	fp, r0
    90b0:	e7a5      	b.n	8ffe <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    90b2:	2b08      	cmp	r3, #8
    90b4:	d002      	beq.n	90bc <cbvprintf_package+0x200>
					return -EINVAL;
    90b6:	f06f 0015 	mvn.w	r0, #21
    90ba:	e718      	b.n	8eee <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    90bc:	f108 0807 	add.w	r8, r8, #7
    90c0:	f028 0807 	bic.w	r8, r8, #7
    90c4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    90c8:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    90cc:	2308      	movs	r3, #8
    90ce:	3408      	adds	r4, #8
    90d0:	e7d8      	b.n	9084 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    90d2:	b968      	cbnz	r0, 90f0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    90d4:	2b04      	cmp	r3, #4
    90d6:	d102      	bne.n	90de <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    90d8:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    90dc:	e7a4      	b.n	9028 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    90de:	2b08      	cmp	r3, #8
    90e0:	d1e9      	bne.n	90b6 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    90e2:	f108 0807 	add.w	r8, r8, #7
    90e6:	f028 0807 	bic.w	r8, r8, #7
    90ea:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    90ee:	e7ed      	b.n	90cc <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    90f0:	9a05      	ldr	r2, [sp, #20]
    90f2:	3a01      	subs	r2, #1
    90f4:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    90f6:	f858 2b04 	ldr.w	r2, [r8], #4
    90fa:	9200      	str	r2, [sp, #0]
    90fc:	e70d      	b.n	8f1a <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    90fe:	9a03      	ldr	r2, [sp, #12]
    9100:	0790      	lsls	r0, r2, #30
    9102:	d520      	bpl.n	9146 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    9104:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    9108:	eba4 0e05 	sub.w	lr, r4, r5
    910c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    9110:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    9114:	d2cf      	bcs.n	90b6 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    9116:	2f0f      	cmp	r7, #15
    9118:	d8cd      	bhi.n	90b6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    911a:	b1f5      	cbz	r5, 915a <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    911c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    9120:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    9124:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    9126:	b2c0      	uxtb	r0, r0
    9128:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    912c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    9130:	f1bc 0f00 	cmp.w	ip, #0
    9134:	f43f af17 	beq.w	8f66 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    9138:	f060 007f 	orn	r0, r0, #127	; 0x7f
    913c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    9140:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    9144:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    9146:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    914a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    914e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    9150:	9206      	str	r2, [sp, #24]
    9152:	e797      	b.n	9084 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    9154:	f04f 0c00 	mov.w	ip, #0
    9158:	e7da      	b.n	9110 <cbvprintf_package+0x254>
				} else if (is_ro) {
    915a:	f1bc 0f00 	cmp.w	ip, #0
    915e:	d001      	beq.n	9164 <cbvprintf_package+0x2a8>
					len += 1;
    9160:	3601      	adds	r6, #1
    9162:	e7ef      	b.n	9144 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    9164:	9802      	ldr	r0, [sp, #8]
					len += 2;
    9166:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    9168:	2800      	cmp	r0, #0
    916a:	d1eb      	bne.n	9144 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    916c:	9800      	ldr	r0, [sp, #0]
    916e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    9172:	f011 f8bd 	bl	1a2f0 <strlen>
    9176:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    917a:	4406      	add	r6, r0
    917c:	e7e2      	b.n	9144 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    917e:	1b63      	subs	r3, r4, r5
    9180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9184:	d297      	bcs.n	90b6 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    9186:	b93d      	cbnz	r5, 9198 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    9188:	f1a6 0408 	sub.w	r4, r6, #8
    918c:	18e0      	adds	r0, r4, r3
    918e:	e6ae      	b.n	8eee <cbvprintf_package+0x32>
    9190:	0001e0fc 	.word	0x0001e0fc
    9194:	00021944 	.word	0x00021944
	if (rws_pos_en) {
    9198:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    919a:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    919c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    919e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    91a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    91a4:	b1c2      	cbz	r2, 91d8 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    91a6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    91a8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    91ac:	f1b9 0f00 	cmp.w	r9, #0
    91b0:	d005      	beq.n	91be <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    91b2:	2200      	movs	r2, #0
    91b4:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    91b6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    91ba:	4297      	cmp	r7, r2
    91bc:	d10e      	bne.n	91dc <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    91be:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    91c2:	f1c5 0301 	rsb	r3, r5, #1
    91c6:	f10d 0820 	add.w	r8, sp, #32
    91ca:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    91cc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    91d0:	4557      	cmp	r7, sl
    91d2:	d112      	bne.n	91fa <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    91d4:	1b60      	subs	r0, r4, r5
    91d6:	e68a      	b.n	8eee <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    91d8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    91da:	e7e5      	b.n	91a8 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    91dc:	f810 3b01 	ldrb.w	r3, [r0], #1
    91e0:	0619      	lsls	r1, r3, #24
    91e2:	d508      	bpl.n	91f6 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    91e4:	eb04 0e0c 	add.w	lr, r4, ip
    91e8:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    91ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    91ee:	f63f ae7c 	bhi.w	8eea <cbvprintf_package+0x2e>
			*buf++ = pos;
    91f2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    91f6:	3201      	adds	r2, #1
    91f8:	e7df      	b.n	91ba <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    91fa:	f1b9 0f00 	cmp.w	r9, #0
    91fe:	d003      	beq.n	9208 <cbvprintf_package+0x34c>
    9200:	f998 2000 	ldrsb.w	r2, [r8]
    9204:	2a00      	cmp	r2, #0
    9206:	db17      	blt.n	9238 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    9208:	9b02      	ldr	r3, [sp, #8]
    920a:	b1d3      	cbz	r3, 9242 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    920c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    9210:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    9214:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    9216:	9b01      	ldr	r3, [sp, #4]
    9218:	1898      	adds	r0, r3, r2
    921a:	4420      	add	r0, r4
    921c:	42b0      	cmp	r0, r6
    921e:	f63f ae64 	bhi.w	8eea <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    9222:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
    9226:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
    9228:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    922c:	4620      	mov	r0, r4
    922e:	9203      	str	r2, [sp, #12]
    9230:	f011 f89d 	bl	1a36e <memcpy>
		buf += size;
    9234:	9a03      	ldr	r2, [sp, #12]
    9236:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    9238:	f10a 0a01 	add.w	sl, sl, #1
    923c:	f108 0801 	add.w	r8, r8, #1
    9240:	e7c6      	b.n	91d0 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    9242:	f898 2000 	ldrb.w	r2, [r8]
    9246:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    924a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    924c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    924e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    9250:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    9254:	f011 f84c 	bl	1a2f0 <strlen>
    9258:	1c42      	adds	r2, r0, #1
    925a:	e7dc      	b.n	9216 <cbvprintf_package+0x35a>
		return -EFAULT;
    925c:	f06f 000d 	mvn.w	r0, #13
    9260:	e645      	b.n	8eee <cbvprintf_package+0x32>
    9262:	bf00      	nop

00009264 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    9264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9268:	b095      	sub	sp, #84	; 0x54
    926a:	af00      	add	r7, sp, #0
    926c:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    9270:	61bb      	str	r3, [r7, #24]
    9272:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    9276:	4604      	mov	r4, r0
    9278:	627a      	str	r2, [r7, #36]	; 0x24
    927a:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    927c:	6239      	str	r1, [r7, #32]
    927e:	b951      	cbnz	r1, 9296 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    9280:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    9282:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    9284:	7880      	ldrb	r0, [r0, #2]
    9286:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    928a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    928c:	6a3b      	ldr	r3, [r7, #32]
    928e:	429e      	cmp	r6, r3
    9290:	d81a      	bhi.n	92c8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    9292:	1b03      	subs	r3, r0, r4
    9294:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    9296:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    929a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    929c:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
    929e:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    92a0:	f1ba 0f00 	cmp.w	sl, #0
    92a4:	d002      	beq.n	92ac <cbprintf_package_convert+0x48>
    92a6:	f01b 0f01 	tst.w	fp, #1
    92aa:	d117      	bne.n	92dc <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    92ac:	697b      	ldr	r3, [r7, #20]
    92ae:	bb5b      	cbnz	r3, 9308 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    92b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92b2:	b11b      	cbz	r3, 92bc <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    92b4:	4620      	mov	r0, r4
    92b6:	69ba      	ldr	r2, [r7, #24]
    92b8:	6a39      	ldr	r1, [r7, #32]
    92ba:	4798      	blx	r3
		}

		return in_len;
    92bc:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    92be:	4628      	mov	r0, r5
    92c0:	3754      	adds	r7, #84	; 0x54
    92c2:	46bd      	mov	sp, r7
    92c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    92c8:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    92ca:	4628      	mov	r0, r5
    92cc:	f011 f810 	bl	1a2f0 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    92d0:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    92d2:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    92d4:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    92d6:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    92d8:	623b      	str	r3, [r7, #32]
    92da:	e7d7      	b.n	928c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    92dc:	6863      	ldr	r3, [r4, #4]
    92de:	f894 8000 	ldrb.w	r8, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    92e2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    92e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    92e6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    92ea:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    92ec:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    92f0:	2b00      	cmp	r3, #0
    92f2:	f040 8102 	bne.w	94fa <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
    92f6:	46c1      	mov	r9, r8
	size_t strl_cnt = 0;
    92f8:	2600      	movs	r6, #0
		out_len = (int)in_len;
    92fa:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    92fc:	eb0a 0308 	add.w	r3, sl, r8
			for (unsigned int i = 0; i < ros_nbr; i++) {
    9300:	454b      	cmp	r3, r9
    9302:	d14e      	bne.n	93a2 <cbprintf_package_convert+0x13e>
    9304:	44d0      	add	r8, sl
    9306:	e013      	b.n	9330 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    9308:	f01b 0f02 	tst.w	fp, #2
    930c:	d0d0      	beq.n	92b0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    930e:	f894 8000 	ldrb.w	r8, [r4]
    9312:	ea4f 0388 	mov.w	r3, r8, lsl #2
    9316:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    9318:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    931a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    931e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    9320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9322:	2b00      	cmp	r3, #0
    9324:	d178      	bne.n	9418 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    9326:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9328:	f1ba 0f00 	cmp.w	sl, #0
    932c:	d14e      	bne.n	93cc <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    932e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    9330:	f01b 0f05 	tst.w	fp, #5
    9334:	bf0c      	ite	eq
    9336:	2302      	moveq	r3, #2
    9338:	2301      	movne	r3, #1
    933a:	627b      	str	r3, [r7, #36]	; 0x24
    933c:	697b      	ldr	r3, [r7, #20]
    933e:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9342:	f00b 0302 	and.w	r3, fp, #2
    9346:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    9348:	45d0      	cmp	r8, sl
    934a:	d0b8      	beq.n	92be <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    934c:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    9350:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    9354:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    9358:	4bad      	ldr	r3, [pc, #692]	; (9610 <cbprintf_package_convert+0x3ac>)
    935a:	4599      	cmp	r9, r3
    935c:	d302      	bcc.n	9364 <cbprintf_package_convert+0x100>
    935e:	4bad      	ldr	r3, [pc, #692]	; (9614 <cbprintf_package_convert+0x3b0>)
    9360:	4599      	cmp	r9, r3
    9362:	d339      	bcc.n	93d8 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    9364:	693b      	ldr	r3, [r7, #16]
    9366:	2b00      	cmp	r3, #0
    9368:	d043      	beq.n	93f2 <cbprintf_package_convert+0x18e>
    936a:	69f8      	ldr	r0, [r7, #28]
    936c:	f00f fabc 	bl	188e8 <is_ptr>
    9370:	2800      	cmp	r0, #0
    9372:	d03e      	beq.n	93f2 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    9374:	46e9      	mov	r9, sp
    9376:	b08a      	sub	sp, #40	; 0x28
    9378:	466a      	mov	r2, sp
    937a:	4ba7      	ldr	r3, [pc, #668]	; (9618 <cbprintf_package_convert+0x3b4>)
    937c:	6153      	str	r3, [r2, #20]
    937e:	69fb      	ldr	r3, [r7, #28]
    9380:	e9c2 3106 	strd	r3, r1, [r2, #24]
    9384:	f44f 7300 	mov.w	r3, #512	; 0x200
    9388:	8413      	strh	r3, [r2, #32]
    938a:	4ba4      	ldr	r3, [pc, #656]	; (961c <cbprintf_package_convert+0x3b8>)
    938c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    9390:	2300      	movs	r3, #0
    9392:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    9396:	48a2      	ldr	r0, [pc, #648]	; (9620 <cbprintf_package_convert+0x3bc>)
    9398:	f001 fd8c 	bl	aeb4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    939c:	3d02      	subs	r5, #2
    939e:	46cd      	mov	sp, r9
				continue;
    93a0:	e7d2      	b.n	9348 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    93a2:	f819 2b01 	ldrb.w	r2, [r9], #1
    93a6:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    93a8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    93ac:	f010 ffa0 	bl	1a2f0 <strlen>
				if (strl && strl_cnt < strl_len) {
    93b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    93b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    93b4:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    93b6:	b13a      	cbz	r2, 93c8 <cbprintf_package_convert+0x164>
    93b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    93bc:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    93be:	bf3e      	ittt	cc
    93c0:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    93c2:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    93c6:	3601      	addcc	r6, #1
				out_len += len;
    93c8:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    93ca:	e799      	b.n	9300 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    93cc:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    93d0:	bf1c      	itt	ne
    93d2:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    93d4:	44d0      	addne	r8, sl
    93d6:	e7ab      	b.n	9330 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    93d8:	693b      	ldr	r3, [r7, #16]
    93da:	b123      	cbz	r3, 93e6 <cbprintf_package_convert+0x182>
    93dc:	69f8      	ldr	r0, [r7, #28]
    93de:	f00f fa83 	bl	188e8 <is_ptr>
    93e2:	2800      	cmp	r0, #0
    93e4:	d1c6      	bne.n	9374 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    93e6:	f01b 0f01 	tst.w	fp, #1
    93ea:	d105      	bne.n	93f8 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    93ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93ee:	1aed      	subs	r5, r5, r3
    93f0:	e7aa      	b.n	9348 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    93f2:	6a3b      	ldr	r3, [r7, #32]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d0a7      	beq.n	9348 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    93f8:	4648      	mov	r0, r9
    93fa:	f010 ff79 	bl	1a2f0 <strlen>
				if (strl && strl_cnt < strl_len) {
    93fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9400:	b143      	cbz	r3, 9414 <cbprintf_package_convert+0x1b0>
    9402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    9406:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    9408:	bf3f      	itttt	cc
    940a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    940c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    940e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    9412:	3601      	addcc	r6, #1
				out_len += (len - 1);
    9414:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    9416:	e797      	b.n	9348 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9418:	f1ba 0f00 	cmp.w	sl, #0
    941c:	d072      	beq.n	9504 <cbprintf_package_convert+0x2a0>
    941e:	f01b 0604 	ands.w	r6, fp, #4
    9422:	d072      	beq.n	950a <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
    9424:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    9426:	2600      	movs	r6, #0
		dst = keep_str_pos;
    9428:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    942c:	4652      	mov	r2, sl
    942e:	4641      	mov	r1, r8
    9430:	f010 ff9d 	bl	1a36e <memcpy>
	str_pos += ros_nbr;
    9434:	697b      	ldr	r3, [r7, #20]
    9436:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    9438:	005b      	lsls	r3, r3, #1
    943a:	60bb      	str	r3, [r7, #8]
    943c:	697b      	ldr	r3, [r7, #20]
    943e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    9442:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9444:	f00b 0302 	and.w	r3, fp, #2
    9448:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    944a:	697b      	ldr	r3, [r7, #20]
    944c:	4598      	cmp	r8, r3
    944e:	d15e      	bne.n	950e <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
    9450:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9452:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    9456:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9458:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    945a:	bf18      	it	ne
    945c:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    945e:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9462:	bf08      	it	eq
    9464:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9468:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    946c:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    946e:	f040 809d 	bne.w	95ac <cbprintf_package_convert+0x348>
    9472:	f01b 0f04 	tst.w	fp, #4
    9476:	bf14      	ite	ne
    9478:	4648      	movne	r0, r9
    947a:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    947c:	f894 b002 	ldrb.w	fp, [r4, #2]
    9480:	f894 8003 	ldrb.w	r8, [r4, #3]
    9484:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    9486:	7062      	strb	r2, [r4, #1]
    9488:	70a0      	strb	r0, [r4, #2]
    948a:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    948c:	4620      	mov	r0, r4
    948e:	69ba      	ldr	r2, [r7, #24]
    9490:	68f9      	ldr	r1, [r7, #12]
    9492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9494:	4798      	blx	r3
	if (rv < 0) {
    9496:	1e05      	subs	r5, r0, #0
    9498:	f6ff af11 	blt.w	92be <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    949c:	69fb      	ldr	r3, [r7, #28]
    949e:	f884 8003 	strb.w	r8, [r4, #3]
    94a2:	7023      	strb	r3, [r4, #0]
    94a4:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    94a6:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
    94a8:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    94aa:	69ba      	ldr	r2, [r7, #24]
    94ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    94ae:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    94b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
    94b6:	4798      	blx	r3
	if (rv < 0) {
    94b8:	f1b0 0800 	subs.w	r8, r0, #0
    94bc:	f2c0 80a3 	blt.w	9606 <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    94c0:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    94c2:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    94c4:	eba3 010a 	sub.w	r1, r3, sl
    94c8:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    94ca:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    94cc:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    94ce:	68bb      	ldr	r3, [r7, #8]
    94d0:	1ac9      	subs	r1, r1, r3
    94d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94d4:	4798      	blx	r3
	if (rv < 0) {
    94d6:	2800      	cmp	r0, #0
    94d8:	f2c0 8097 	blt.w	960a <cbprintf_package_convert+0x3a6>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    94dc:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    94e0:	44a8      	add	r8, r5
	out_len += rv;
    94e2:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    94e6:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    94ea:	45b3      	cmp	fp, r6
    94ec:	d360      	bcc.n	95b0 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
    94ee:	2100      	movs	r1, #0
    94f0:	69ba      	ldr	r2, [r7, #24]
    94f2:	4608      	mov	r0, r1
    94f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94f6:	4798      	blx	r3
	return out_len;
    94f8:	e6e1      	b.n	92be <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    94fa:	f04f 0900 	mov.w	r9, #0
    94fe:	f107 0030 	add.w	r0, r7, #48	; 0x30
    9502:	e793      	b.n	942c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    9504:	4656      	mov	r6, sl
		keep_cnt = 0;
    9506:	46d1      	mov	r9, sl
    9508:	e794      	b.n	9434 <cbprintf_package_convert+0x1d0>
    950a:	46b1      	mov	r9, r6
    950c:	e792      	b.n	9434 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    950e:	f818 1b02 	ldrb.w	r1, [r8], #2
    9512:	4a3f      	ldr	r2, [pc, #252]	; (9610 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
    9514:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    9518:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    951c:	4293      	cmp	r3, r2
    951e:	d302      	bcc.n	9526 <cbprintf_package_convert+0x2c2>
    9520:	4a3c      	ldr	r2, [pc, #240]	; (9614 <cbprintf_package_convert+0x3b0>)
    9522:	4293      	cmp	r3, r2
    9524:	d31c      	bcc.n	9560 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9526:	693b      	ldr	r3, [r7, #16]
    9528:	b123      	cbz	r3, 9534 <cbprintf_package_convert+0x2d0>
    952a:	69f8      	ldr	r0, [r7, #28]
    952c:	f00f f9dc 	bl	188e8 <is_ptr>
    9530:	2800      	cmp	r0, #0
    9532:	d18a      	bne.n	944a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9534:	687b      	ldr	r3, [r7, #4]
    9536:	b9f3      	cbnz	r3, 9576 <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
    9538:	f109 0228 	add.w	r2, r9, #40	; 0x28
    953c:	f107 0028 	add.w	r0, r7, #40	; 0x28
    9540:	4402      	add	r2, r0
    9542:	f109 0301 	add.w	r3, r9, #1
    9546:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    954a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    954e:	f109 0902 	add.w	r9, r9, #2
    9552:	fa52 f383 	uxtab	r3, r2, r3
    9556:	fa5f f989 	uxtb.w	r9, r9
    955a:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    955e:	e774      	b.n	944a <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9560:	693b      	ldr	r3, [r7, #16]
    9562:	b12b      	cbz	r3, 9570 <cbprintf_package_convert+0x30c>
    9564:	69f8      	ldr	r0, [r7, #28]
    9566:	f00f f9bf 	bl	188e8 <is_ptr>
    956a:	2800      	cmp	r0, #0
    956c:	f47f af6d 	bne.w	944a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    9570:	f01b 0f01 	tst.w	fp, #1
    9574:	d009      	beq.n	958a <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    9576:	f106 0228 	add.w	r2, r6, #40	; 0x28
    957a:	f107 0128 	add.w	r1, r7, #40	; 0x28
    957e:	1c73      	adds	r3, r6, #1
    9580:	1856      	adds	r6, r2, r1
    9582:	f806 5c20 	strb.w	r5, [r6, #-32]
    9586:	b2de      	uxtb	r6, r3
    9588:	e75f      	b.n	944a <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    958a:	f01b 0f04 	tst.w	fp, #4
    958e:	f43f af5c 	beq.w	944a <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    9592:	f109 0228 	add.w	r2, r9, #40	; 0x28
    9596:	f107 0128 	add.w	r1, r7, #40	; 0x28
    959a:	f109 0301 	add.w	r3, r9, #1
    959e:	eb02 0901 	add.w	r9, r2, r1
    95a2:	f809 5c10 	strb.w	r5, [r9, #-16]
    95a6:	fa5f f983 	uxtb.w	r9, r3
    95aa:	e74e      	b.n	944a <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    95ac:	2000      	movs	r0, #0
    95ae:	e765      	b.n	947c <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
    95b0:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    95b4:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    95b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    95bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    95be:	b1fb      	cbz	r3, 9600 <cbprintf_package_convert+0x39c>
    95c0:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    95c4:	2101      	movs	r1, #1
    95c6:	69ba      	ldr	r2, [r7, #24]
    95c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95ca:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    95ce:	4798      	blx	r3
		if (rv < 0) {
    95d0:	2800      	cmp	r0, #0
    95d2:	db1a      	blt.n	960a <cbprintf_package_convert+0x3a6>
		out_len += rv;
    95d4:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    95d6:	f1b8 0f00 	cmp.w	r8, #0
    95da:	d106      	bne.n	95ea <cbprintf_package_convert+0x386>
    95dc:	4648      	mov	r0, r9
    95de:	f010 fe87 	bl	1a2f0 <strlen>
    95e2:	f100 0801 	add.w	r8, r0, #1
    95e6:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    95ea:	4641      	mov	r1, r8
    95ec:	4648      	mov	r0, r9
    95ee:	69ba      	ldr	r2, [r7, #24]
    95f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95f2:	4798      	blx	r3
		if (rv < 0) {
    95f4:	2800      	cmp	r0, #0
    95f6:	db08      	blt.n	960a <cbprintf_package_convert+0x3a6>
		out_len += rv;
    95f8:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    95fa:	f10b 0b01 	add.w	fp, fp, #1
    95fe:	e774      	b.n	94ea <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
    9600:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    9604:	e7de      	b.n	95c4 <cbprintf_package_convert+0x360>
    9606:	4645      	mov	r5, r8
    9608:	e659      	b.n	92be <cbprintf_package_convert+0x5a>
    960a:	4605      	mov	r5, r0
    960c:	e657      	b.n	92be <cbprintf_package_convert+0x5a>
    960e:	bf00      	nop
    9610:	0001e0fc 	.word	0x0001e0fc
    9614:	00021944 	.word	0x00021944
    9618:	0001f1b3 	.word	0x0001f1b3
    961c:	01000004 	.word	0x01000004
    9620:	0001e5a4 	.word	0x0001e5a4

00009624 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    9624:	4b01      	ldr	r3, [pc, #4]	; (962c <__printk_hook_install+0x8>)
    9626:	6018      	str	r0, [r3, #0]
}
    9628:	4770      	bx	lr
    962a:	bf00      	nop
    962c:	200081d8 	.word	0x200081d8

00009630 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9630:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9632:	2500      	movs	r5, #0
{
    9634:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    9636:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    963a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    963c:	9500      	str	r5, [sp, #0]
    963e:	a903      	add	r1, sp, #12
    9640:	4805      	ldr	r0, [pc, #20]	; (9658 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    9642:	9505      	str	r5, [sp, #20]
    9644:	f000 f918 	bl	9878 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    9648:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    964c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    964e:	bfb8      	it	lt
    9650:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9652:	b007      	add	sp, #28
    9654:	bd30      	pop	{r4, r5, pc}
    9656:	bf00      	nop
    9658:	00018937 	.word	0x00018937

0000965c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9660:	8b05      	ldrh	r5, [r0, #24]
{
    9662:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9664:	0728      	lsls	r0, r5, #28
{
    9666:	4690      	mov	r8, r2
	if (processing) {
    9668:	d411      	bmi.n	968e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    966a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    966c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    9670:	f040 80cd 	bne.w	980e <process_event+0x1b2>
			evt = process_recheck(mgr);
    9674:	4620      	mov	r0, r4
    9676:	f00f fb5c 	bl	18d32 <process_recheck>
		}

		if (evt == EVT_NOP) {
    967a:	b178      	cbz	r0, 969c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    967c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    967e:	8b21      	ldrh	r1, [r4, #24]
    9680:	2804      	cmp	r0, #4
    9682:	d811      	bhi.n	96a8 <process_event+0x4c>
    9684:	e8df f000 	tbb	[pc, r0]
    9688:	856d10c3 	.word	0x856d10c3
    968c:	95          	.byte	0x95
    968d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    968e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9690:	bf0c      	ite	eq
    9692:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9696:	f045 0520 	orrne.w	r5, r5, #32
    969a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    969c:	f388 8811 	msr	BASEPRI, r8
    96a0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    96a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    96a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    96ac:	45aa      	cmp	sl, r5
    96ae:	f000 80a6 	beq.w	97fe <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    96b2:	2700      	movs	r7, #0
    96b4:	46b9      	mov	r9, r7
    96b6:	463e      	mov	r6, r7
    96b8:	68a3      	ldr	r3, [r4, #8]
    96ba:	2b00      	cmp	r3, #0
    96bc:	f000 80bd 	beq.w	983a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    96c0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    96c4:	8321      	strh	r1, [r4, #24]
    96c6:	f388 8811 	msr	BASEPRI, r8
    96ca:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    96ce:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    96d0:	2900      	cmp	r1, #0
    96d2:	f000 80bb 	beq.w	984c <process_event+0x1f0>
	return node->next;
    96d6:	680d      	ldr	r5, [r1, #0]
    96d8:	2900      	cmp	r1, #0
    96da:	f000 80b7 	beq.w	984c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    96de:	4633      	mov	r3, r6
    96e0:	4652      	mov	r2, sl
    96e2:	4620      	mov	r0, r4
    96e4:	f8d1 8004 	ldr.w	r8, [r1, #4]
    96e8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    96ea:	2d00      	cmp	r5, #0
    96ec:	d076      	beq.n	97dc <process_event+0x180>
    96ee:	682b      	ldr	r3, [r5, #0]
    96f0:	4629      	mov	r1, r5
    96f2:	461d      	mov	r5, r3
    96f4:	e7f0      	b.n	96d8 <process_event+0x7c>
    96f6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    96fa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    96fc:	2a01      	cmp	r2, #1
    96fe:	d81b      	bhi.n	9738 <process_event+0xdc>
	list->head = NULL;
    9700:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9702:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    9706:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    9708:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    970a:	b289      	uxth	r1, r1
	list->tail = NULL;
    970c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9710:	d109      	bne.n	9726 <process_event+0xca>
    9712:	463b      	mov	r3, r7
    9714:	e003      	b.n	971e <process_event+0xc2>
				mgr->refs += 1U;
    9716:	8b62      	ldrh	r2, [r4, #26]
    9718:	3201      	adds	r2, #1
    971a:	8362      	strh	r2, [r4, #26]
	return node->next;
    971c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    971e:	2b00      	cmp	r3, #0
    9720:	d1f9      	bne.n	9716 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9722:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9726:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9728:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    972a:	f00f fb02 	bl	18d32 <process_recheck>
    972e:	2800      	cmp	r0, #0
    9730:	d07b      	beq.n	982a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9732:	f041 0120 	orr.w	r1, r1, #32
    9736:	e077      	b.n	9828 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9738:	2b04      	cmp	r3, #4
    973a:	d10a      	bne.n	9752 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    973c:	f021 0107 	bic.w	r1, r1, #7
    9740:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    9742:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9744:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    9746:	f00f faf4 	bl	18d32 <process_recheck>
    974a:	b110      	cbz	r0, 9752 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    974c:	f041 0120 	orr.w	r1, r1, #32
    9750:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9752:	8b21      	ldrh	r1, [r4, #24]
    9754:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9758:	45aa      	cmp	sl, r5
    975a:	d050      	beq.n	97fe <process_event+0x1a2>
    975c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    975e:	46b9      	mov	r9, r7
    9760:	e7aa      	b.n	96b8 <process_event+0x5c>
			transit = mgr->transitions->start;
    9762:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9764:	f021 0107 	bic.w	r1, r1, #7
    9768:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    976c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    976e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    9772:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    9774:	d12d      	bne.n	97d2 <process_event+0x176>
		    || (transit != NULL)) {
    9776:	f1b9 0f00 	cmp.w	r9, #0
    977a:	d040      	beq.n	97fe <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    977c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    9780:	8321      	strh	r1, [r4, #24]
    9782:	f388 8811 	msr	BASEPRI, r8
    9786:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    978a:	4620      	mov	r0, r4
    978c:	4939      	ldr	r1, [pc, #228]	; (9874 <process_event+0x218>)
    978e:	47c8      	blx	r9
    9790:	e029      	b.n	97e6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9792:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    9796:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9798:	f041 0104 	orr.w	r1, r1, #4
    979c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    979e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    97a0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    97a4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    97a6:	d0e6      	beq.n	9776 <process_event+0x11a>
    97a8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    97aa:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    97ae:	463e      	mov	r6, r7
    97b0:	e782      	b.n	96b8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    97b2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    97b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    97b8:	f041 0105 	orr.w	r1, r1, #5
    97bc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    97be:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    97c0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    97c4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    97c6:	d0d6      	beq.n	9776 <process_event+0x11a>
    97c8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    97ca:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    97ce:	463e      	mov	r6, r7
    97d0:	e772      	b.n	96b8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    97d2:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    97d4:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    97d8:	463e      	mov	r6, r7
    97da:	e76d      	b.n	96b8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    97dc:	462b      	mov	r3, r5
    97de:	e787      	b.n	96f0 <process_event+0x94>
			if (transit != NULL) {
    97e0:	f1b9 0f00 	cmp.w	r9, #0
    97e4:	d1d1      	bne.n	978a <process_event+0x12e>
	__asm__ volatile(
    97e6:	f04f 0320 	mov.w	r3, #32
    97ea:	f3ef 8811 	mrs	r8, BASEPRI
    97ee:	f383 8812 	msr	BASEPRI_MAX, r3
    97f2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    97f6:	8b23      	ldrh	r3, [r4, #24]
    97f8:	f023 0308 	bic.w	r3, r3, #8
    97fc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    97fe:	8b25      	ldrh	r5, [r4, #24]
    9800:	06ea      	lsls	r2, r5, #27
    9802:	d52e      	bpl.n	9862 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9804:	f025 0310 	bic.w	r3, r5, #16
    9808:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    980a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    980e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9810:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    9812:	2e00      	cmp	r6, #0
    9814:	f6bf af6f 	bge.w	96f6 <process_event+0x9a>
	list->head = NULL;
    9818:	2300      	movs	r3, #0
		*clients = mgr->clients;
    981a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    981c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9820:	f021 0107 	bic.w	r1, r1, #7
    9824:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9828:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    982a:	8b21      	ldrh	r1, [r4, #24]
    982c:	f04f 0900 	mov.w	r9, #0
    9830:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9834:	45aa      	cmp	sl, r5
    9836:	f47f af3f 	bne.w	96b8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    983a:	2f00      	cmp	r7, #0
    983c:	d09b      	beq.n	9776 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    983e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    9842:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    9844:	f388 8811 	msr	BASEPRI, r8
    9848:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    984c:	2f00      	cmp	r7, #0
    984e:	d0c7      	beq.n	97e0 <process_event+0x184>
	return node->next;
    9850:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    9852:	4639      	mov	r1, r7
    9854:	4633      	mov	r3, r6
    9856:	4652      	mov	r2, sl
    9858:	4620      	mov	r0, r4
    985a:	f00f fa96 	bl	18d8a <notify_one>
	list->head = node;
    985e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    9860:	e7f4      	b.n	984c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9862:	06ab      	lsls	r3, r5, #26
    9864:	f57f af1a 	bpl.w	969c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    9868:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    986c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    986e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    9872:	e6ff      	b.n	9674 <process_event+0x18>
    9874:	00018db7 	.word	0x00018db7

00009878 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    9878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    987c:	4681      	mov	r9, r0
    987e:	468b      	mov	fp, r1
    9880:	4617      	mov	r7, r2
    9882:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    9884:	2500      	movs	r5, #0
{
    9886:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    9888:	7838      	ldrb	r0, [r7, #0]
    988a:	b908      	cbnz	r0, 9890 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    988c:	4628      	mov	r0, r5
    988e:	e357      	b.n	9f40 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    9890:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    9892:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    9894:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    9896:	d006      	beq.n	98a6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    9898:	4659      	mov	r1, fp
    989a:	47c8      	blx	r9
    989c:	2800      	cmp	r0, #0
    989e:	f2c0 834f 	blt.w	9f40 <z_cbvprintf_impl+0x6c8>
    98a2:	3501      	adds	r5, #1
		if (bps == NULL) {
    98a4:	e1fb      	b.n	9c9e <z_cbvprintf_impl+0x426>
		} state = {
    98a6:	2218      	movs	r2, #24
    98a8:	2100      	movs	r1, #0
    98aa:	a80e      	add	r0, sp, #56	; 0x38
    98ac:	f010 fd6a 	bl	1a384 <memset>
	if (*sp == '%') {
    98b0:	787b      	ldrb	r3, [r7, #1]
    98b2:	2b25      	cmp	r3, #37	; 0x25
    98b4:	d07d      	beq.n	99b2 <z_cbvprintf_impl+0x13a>
    98b6:	2300      	movs	r3, #0
    98b8:	4698      	mov	r8, r3
    98ba:	469e      	mov	lr, r3
    98bc:	469c      	mov	ip, r3
    98be:	461e      	mov	r6, r3
    98c0:	1c78      	adds	r0, r7, #1
    98c2:	4601      	mov	r1, r0
		switch (*sp) {
    98c4:	f810 2b01 	ldrb.w	r2, [r0], #1
    98c8:	2a2b      	cmp	r2, #43	; 0x2b
    98ca:	f000 80a1 	beq.w	9a10 <z_cbvprintf_impl+0x198>
    98ce:	f200 8098 	bhi.w	9a02 <z_cbvprintf_impl+0x18a>
    98d2:	2a20      	cmp	r2, #32
    98d4:	f000 809f 	beq.w	9a16 <z_cbvprintf_impl+0x19e>
    98d8:	2a23      	cmp	r2, #35	; 0x23
    98da:	f000 809f 	beq.w	9a1c <z_cbvprintf_impl+0x1a4>
    98de:	b12b      	cbz	r3, 98ec <z_cbvprintf_impl+0x74>
    98e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    98e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    98ec:	f1b8 0f00 	cmp.w	r8, #0
    98f0:	d005      	beq.n	98fe <z_cbvprintf_impl+0x86>
    98f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    98f6:	f043 0320 	orr.w	r3, r3, #32
    98fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    98fe:	f1be 0f00 	cmp.w	lr, #0
    9902:	d005      	beq.n	9910 <z_cbvprintf_impl+0x98>
    9904:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9908:	f043 0310 	orr.w	r3, r3, #16
    990c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9910:	f1bc 0f00 	cmp.w	ip, #0
    9914:	d005      	beq.n	9922 <z_cbvprintf_impl+0xaa>
    9916:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    991a:	f043 0308 	orr.w	r3, r3, #8
    991e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9922:	b12e      	cbz	r6, 9930 <z_cbvprintf_impl+0xb8>
    9924:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9928:	f043 0304 	orr.w	r3, r3, #4
    992c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    9930:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9934:	f003 0044 	and.w	r0, r3, #68	; 0x44
    9938:	2844      	cmp	r0, #68	; 0x44
    993a:	d103      	bne.n	9944 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    993c:	f36f 1386 	bfc	r3, #6, #1
    9940:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    9944:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    9948:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    994a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    994e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    9952:	d17f      	bne.n	9a54 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    9954:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    9958:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    995a:	f042 0201 	orr.w	r2, r2, #1
    995e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    9962:	781a      	ldrb	r2, [r3, #0]
    9964:	2a2e      	cmp	r2, #46	; 0x2e
    9966:	bf0c      	ite	eq
    9968:	2101      	moveq	r1, #1
    996a:	2100      	movne	r1, #0
    996c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9970:	f361 0241 	bfi	r2, r1, #1, #1
    9974:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    9978:	d178      	bne.n	9a6c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    997a:	785a      	ldrb	r2, [r3, #1]
    997c:	2a2a      	cmp	r2, #42	; 0x2a
    997e:	d06e      	beq.n	9a5e <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    9980:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    9982:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    9986:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9988:	4619      	mov	r1, r3
    998a:	f811 0b01 	ldrb.w	r0, [r1], #1
    998e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    9992:	2e09      	cmp	r6, #9
    9994:	f240 8095 	bls.w	9ac2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    9998:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    999c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    999e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    99a2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    99a6:	460a      	mov	r2, r1
    99a8:	f360 0241 	bfi	r2, r0, #1, #1
    99ac:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    99b0:	e05c      	b.n	9a6c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    99b2:	1cba      	adds	r2, r7, #2
    99b4:	9203      	str	r2, [sp, #12]
    99b6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    99ba:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    99be:	07da      	lsls	r2, r3, #31
    99c0:	f140 812e 	bpl.w	9c20 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    99c4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    99c8:	f1b8 0f00 	cmp.w	r8, #0
    99cc:	da07      	bge.n	99de <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    99ce:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    99d2:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    99d6:	f042 0204 	orr.w	r2, r2, #4
    99da:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    99de:	075e      	lsls	r6, r3, #29
    99e0:	f140 8127 	bpl.w	9c32 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    99e4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    99e8:	f1ba 0f00 	cmp.w	sl, #0
    99ec:	f280 8126 	bge.w	9c3c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    99f0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    99f4:	f36f 0341 	bfc	r3, #1, #1
    99f8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    99fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    9a00:	e11c      	b.n	9c3c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    9a02:	2a2d      	cmp	r2, #45	; 0x2d
    9a04:	d00d      	beq.n	9a22 <z_cbvprintf_impl+0x1aa>
    9a06:	2a30      	cmp	r2, #48	; 0x30
    9a08:	f47f af69 	bne.w	98de <z_cbvprintf_impl+0x66>
    9a0c:	2301      	movs	r3, #1
	} while (loop);
    9a0e:	e758      	b.n	98c2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    9a10:	f04f 0c01 	mov.w	ip, #1
    9a14:	e755      	b.n	98c2 <z_cbvprintf_impl+0x4a>
    9a16:	f04f 0e01 	mov.w	lr, #1
    9a1a:	e752      	b.n	98c2 <z_cbvprintf_impl+0x4a>
    9a1c:	f04f 0801 	mov.w	r8, #1
    9a20:	e74f      	b.n	98c2 <z_cbvprintf_impl+0x4a>
    9a22:	2601      	movs	r6, #1
    9a24:	e74d      	b.n	98c2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    9a26:	4603      	mov	r3, r0
    9a28:	fb0e 6202 	mla	r2, lr, r2, r6
    9a2c:	3a30      	subs	r2, #48	; 0x30
    9a2e:	4618      	mov	r0, r3
    9a30:	f810 6b01 	ldrb.w	r6, [r0], #1
    9a34:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    9a38:	f1bc 0f09 	cmp.w	ip, #9
    9a3c:	d9f3      	bls.n	9a26 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    9a3e:	4299      	cmp	r1, r3
    9a40:	d08f      	beq.n	9962 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    9a42:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    9a46:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    9a48:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    9a4a:	f362 0141 	bfi	r1, r2, #1, #1
    9a4e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    9a52:	e786      	b.n	9962 <z_cbvprintf_impl+0xea>
    9a54:	460b      	mov	r3, r1
	size_t val = 0;
    9a56:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    9a58:	f04f 0e0a 	mov.w	lr, #10
    9a5c:	e7e7      	b.n	9a2e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    9a5e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    9a62:	3302      	adds	r3, #2
		conv->prec_star = true;
    9a64:	f042 0204 	orr.w	r2, r2, #4
    9a68:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    9a6c:	781a      	ldrb	r2, [r3, #0]
    9a6e:	2a6c      	cmp	r2, #108	; 0x6c
    9a70:	d047      	beq.n	9b02 <z_cbvprintf_impl+0x28a>
    9a72:	d82b      	bhi.n	9acc <z_cbvprintf_impl+0x254>
    9a74:	2a68      	cmp	r2, #104	; 0x68
    9a76:	d031      	beq.n	9adc <z_cbvprintf_impl+0x264>
    9a78:	2a6a      	cmp	r2, #106	; 0x6a
    9a7a:	d04b      	beq.n	9b14 <z_cbvprintf_impl+0x29c>
    9a7c:	2a4c      	cmp	r2, #76	; 0x4c
    9a7e:	d051      	beq.n	9b24 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    9a80:	461a      	mov	r2, r3
    9a82:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    9a86:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    9a88:	9203      	str	r2, [sp, #12]
    9a8a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    9a8e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    9a92:	f200 80be 	bhi.w	9c12 <z_cbvprintf_impl+0x39a>
    9a96:	2b6d      	cmp	r3, #109	; 0x6d
    9a98:	d851      	bhi.n	9b3e <z_cbvprintf_impl+0x2c6>
    9a9a:	2b69      	cmp	r3, #105	; 0x69
    9a9c:	f200 80b9 	bhi.w	9c12 <z_cbvprintf_impl+0x39a>
    9aa0:	2b57      	cmp	r3, #87	; 0x57
    9aa2:	d867      	bhi.n	9b74 <z_cbvprintf_impl+0x2fc>
    9aa4:	2b41      	cmp	r3, #65	; 0x41
    9aa6:	d003      	beq.n	9ab0 <z_cbvprintf_impl+0x238>
    9aa8:	3b45      	subs	r3, #69	; 0x45
    9aaa:	2b02      	cmp	r3, #2
    9aac:	f200 80b1 	bhi.w	9c12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    9ab0:	2204      	movs	r2, #4
    9ab2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9ab6:	f362 0302 	bfi	r3, r2, #0, #3
    9aba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    9abe:	2301      	movs	r3, #1
			break;
    9ac0:	e073      	b.n	9baa <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    9ac2:	fb0c 0202 	mla	r2, ip, r2, r0
    9ac6:	460b      	mov	r3, r1
    9ac8:	3a30      	subs	r2, #48	; 0x30
    9aca:	e75d      	b.n	9988 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    9acc:	2a74      	cmp	r2, #116	; 0x74
    9ace:	d025      	beq.n	9b1c <z_cbvprintf_impl+0x2a4>
    9ad0:	2a7a      	cmp	r2, #122	; 0x7a
    9ad2:	d1d5      	bne.n	9a80 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    9ad4:	2106      	movs	r1, #6
    9ad6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9ada:	e00c      	b.n	9af6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    9adc:	785a      	ldrb	r2, [r3, #1]
    9ade:	2a68      	cmp	r2, #104	; 0x68
    9ae0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9ae4:	d106      	bne.n	9af4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    9ae6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9ae8:	f361 02c6 	bfi	r2, r1, #3, #4
    9aec:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    9af0:	3302      	adds	r3, #2
    9af2:	e7c5      	b.n	9a80 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    9af4:	2102      	movs	r1, #2
    9af6:	f361 02c6 	bfi	r2, r1, #3, #4
    9afa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    9afe:	3301      	adds	r3, #1
    9b00:	e7be      	b.n	9a80 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    9b02:	785a      	ldrb	r2, [r3, #1]
    9b04:	2a6c      	cmp	r2, #108	; 0x6c
    9b06:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9b0a:	d101      	bne.n	9b10 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    9b0c:	2104      	movs	r1, #4
    9b0e:	e7eb      	b.n	9ae8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    9b10:	2103      	movs	r1, #3
    9b12:	e7f0      	b.n	9af6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    9b14:	2105      	movs	r1, #5
    9b16:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9b1a:	e7ec      	b.n	9af6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    9b1c:	2107      	movs	r1, #7
    9b1e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9b22:	e7e8      	b.n	9af6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    9b24:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    9b28:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    9b2c:	f022 0202 	bic.w	r2, r2, #2
    9b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    9b34:	f042 0202 	orr.w	r2, r2, #2
    9b38:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    9b3c:	e7df      	b.n	9afe <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    9b3e:	3b6e      	subs	r3, #110	; 0x6e
    9b40:	b2d9      	uxtb	r1, r3
    9b42:	2301      	movs	r3, #1
    9b44:	408b      	lsls	r3, r1
    9b46:	f240 4182 	movw	r1, #1154	; 0x482
    9b4a:	420b      	tst	r3, r1
    9b4c:	d137      	bne.n	9bbe <z_cbvprintf_impl+0x346>
    9b4e:	f013 0f24 	tst.w	r3, #36	; 0x24
    9b52:	d151      	bne.n	9bf8 <z_cbvprintf_impl+0x380>
    9b54:	07d8      	lsls	r0, r3, #31
    9b56:	d55c      	bpl.n	9c12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    9b58:	2103      	movs	r1, #3
    9b5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9b5e:	f361 0302 	bfi	r3, r1, #0, #3
    9b62:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9b66:	f002 0378 	and.w	r3, r2, #120	; 0x78
    9b6a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    9b6e:	424b      	negs	r3, r1
    9b70:	414b      	adcs	r3, r1
    9b72:	e01a      	b.n	9baa <z_cbvprintf_impl+0x332>
    9b74:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9b76:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    9b7a:	b2c9      	uxtb	r1, r1
    9b7c:	fa00 f101 	lsl.w	r1, r0, r1
    9b80:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9b84:	d194      	bne.n	9ab0 <z_cbvprintf_impl+0x238>
    9b86:	f640 0601 	movw	r6, #2049	; 0x801
    9b8a:	4231      	tst	r1, r6
    9b8c:	d11d      	bne.n	9bca <z_cbvprintf_impl+0x352>
    9b8e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9b92:	d03e      	beq.n	9c12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    9b94:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9b98:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9b9c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    9ba0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    9ba2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9ba6:	d034      	beq.n	9c12 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    9ba8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    9baa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    9bae:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9bb2:	430b      	orrs	r3, r1
    9bb4:	f363 0241 	bfi	r2, r3, #1, #1
    9bb8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9bbc:	e6fd      	b.n	99ba <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    9bbe:	2102      	movs	r1, #2
    9bc0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9bc4:	f361 0302 	bfi	r3, r1, #0, #3
    9bc8:	e7e8      	b.n	9b9c <z_cbvprintf_impl+0x324>
    9bca:	2002      	movs	r0, #2
    9bcc:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9bd0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9bd4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9bd8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9bda:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    9bde:	bf02      	ittt	eq
    9be0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    9be4:	f041 0101 	orreq.w	r1, r1, #1
    9be8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    9bec:	2b63      	cmp	r3, #99	; 0x63
    9bee:	d1db      	bne.n	9ba8 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9bf0:	1e13      	subs	r3, r2, #0
    9bf2:	bf18      	it	ne
    9bf4:	2301      	movne	r3, #1
    9bf6:	e7d8      	b.n	9baa <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    9bf8:	2103      	movs	r1, #3
    9bfa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9bfe:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9c02:	f361 0302 	bfi	r3, r1, #0, #3
    9c06:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9c0a:	bf14      	ite	ne
    9c0c:	2301      	movne	r3, #1
    9c0e:	2300      	moveq	r3, #0
    9c10:	e7cb      	b.n	9baa <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    9c12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9c16:	f043 0301 	orr.w	r3, r3, #1
    9c1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    9c1e:	e7c3      	b.n	9ba8 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    9c20:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9c24:	2a00      	cmp	r2, #0
		int width = -1;
    9c26:	bfac      	ite	ge
    9c28:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
    9c2c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    9c30:	e6d5      	b.n	99de <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    9c32:	0798      	lsls	r0, r3, #30
    9c34:	f57f aee2 	bpl.w	99fc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    9c38:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    9c3c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    9c3e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    9c42:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    9c46:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    9c4a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9c4e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9c50:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9c54:	d133      	bne.n	9cbe <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    9c56:	1ecb      	subs	r3, r1, #3
    9c58:	2b04      	cmp	r3, #4
    9c5a:	d804      	bhi.n	9c66 <z_cbvprintf_impl+0x3ee>
    9c5c:	e8df f003 	tbb	[pc, r3]
    9c60:	21464621 	.word	0x21464621
    9c64:	21          	.byte	0x21
    9c65:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9c66:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    9c68:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    9c6a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9c6e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9c72:	d11c      	bne.n	9cae <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    9c74:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    9c78:	17da      	asrs	r2, r3, #31
    9c7a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    9c7e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9c80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9c84:	f013 0603 	ands.w	r6, r3, #3
    9c88:	d050      	beq.n	9d2c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    9c8a:	463a      	mov	r2, r7
    9c8c:	4659      	mov	r1, fp
    9c8e:	4648      	mov	r0, r9
    9c90:	9b03      	ldr	r3, [sp, #12]
    9c92:	f00f f97c 	bl	18f8e <outs>
    9c96:	2800      	cmp	r0, #0
    9c98:	f2c0 8152 	blt.w	9f40 <z_cbvprintf_impl+0x6c8>
    9c9c:	4405      	add	r5, r0
			continue;
    9c9e:	9f03      	ldr	r7, [sp, #12]
    9ca0:	e5f2      	b.n	9888 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9ca2:	f854 3b04 	ldr.w	r3, [r4], #4
    9ca6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    9ca8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    9cac:	e7e8      	b.n	9c80 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    9cae:	2902      	cmp	r1, #2
    9cb0:	d1e5      	bne.n	9c7e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    9cb2:	b21a      	sxth	r2, r3
    9cb4:	f343 33c0 	sbfx	r3, r3, #15, #1
    9cb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9cbc:	e7df      	b.n	9c7e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9cbe:	2b02      	cmp	r3, #2
    9cc0:	d124      	bne.n	9d0c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    9cc2:	1ecb      	subs	r3, r1, #3
    9cc4:	2b04      	cmp	r3, #4
    9cc6:	d804      	bhi.n	9cd2 <z_cbvprintf_impl+0x45a>
    9cc8:	e8df f003 	tbb	[pc, r3]
    9ccc:	18101018 	.word	0x18101018
    9cd0:	18          	.byte	0x18
    9cd1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9cd2:	2901      	cmp	r1, #1
    9cd4:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    9cd8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    9cdc:	d014      	beq.n	9d08 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    9cde:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9ce0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    9ce4:	d1cc      	bne.n	9c80 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    9ce6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9ce8:	930e      	str	r3, [sp, #56]	; 0x38
    9cea:	e7c9      	b.n	9c80 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    9cec:	3407      	adds	r4, #7
    9cee:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9cf2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9cf6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9cfa:	e7c1      	b.n	9c80 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    9cfc:	f854 3b04 	ldr.w	r3, [r4], #4
    9d00:	930e      	str	r3, [sp, #56]	; 0x38
    9d02:	2300      	movs	r3, #0
    9d04:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    9d06:	e7bb      	b.n	9c80 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	e7cd      	b.n	9ca8 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    9d0c:	2b04      	cmp	r3, #4
    9d0e:	d108      	bne.n	9d22 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9d10:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    9d12:	f024 0407 	bic.w	r4, r4, #7
    9d16:	e9d4 2300 	ldrd	r2, r3, [r4]
    9d1a:	3408      	adds	r4, #8
    9d1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9d20:	e7ae      	b.n	9c80 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    9d22:	2b03      	cmp	r3, #3
    9d24:	d1ac      	bne.n	9c80 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    9d26:	f854 3b04 	ldr.w	r3, [r4], #4
    9d2a:	e7dd      	b.n	9ce8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    9d2c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9d30:	2878      	cmp	r0, #120	; 0x78
    9d32:	d8b4      	bhi.n	9c9e <z_cbvprintf_impl+0x426>
    9d34:	2862      	cmp	r0, #98	; 0x62
    9d36:	d81c      	bhi.n	9d72 <z_cbvprintf_impl+0x4fa>
    9d38:	2825      	cmp	r0, #37	; 0x25
    9d3a:	f43f adad 	beq.w	9898 <z_cbvprintf_impl+0x20>
    9d3e:	2858      	cmp	r0, #88	; 0x58
    9d40:	d1ad      	bne.n	9c9e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    9d42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9d46:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9d4a:	9300      	str	r3, [sp, #0]
    9d4c:	aa10      	add	r2, sp, #64	; 0x40
    9d4e:	ab08      	add	r3, sp, #32
    9d50:	f00f f8d7 	bl	18f02 <encode_uint>
			if (precision >= 0) {
    9d54:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    9d58:	4607      	mov	r7, r0
			if (precision >= 0) {
    9d5a:	f280 8099 	bge.w	9e90 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    9d5e:	2f00      	cmp	r7, #0
    9d60:	d09d      	beq.n	9c9e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    9d62:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9d66:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    9d68:	2e00      	cmp	r6, #0
    9d6a:	f000 80c0 	beq.w	9eee <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    9d6e:	3001      	adds	r0, #1
    9d70:	e0bd      	b.n	9eee <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    9d72:	3863      	subs	r0, #99	; 0x63
    9d74:	2815      	cmp	r0, #21
    9d76:	d892      	bhi.n	9c9e <z_cbvprintf_impl+0x426>
    9d78:	a201      	add	r2, pc, #4	; (adr r2, 9d80 <z_cbvprintf_impl+0x508>)
    9d7a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9d7e:	bf00      	nop
    9d80:	00009e55 	.word	0x00009e55
    9d84:	00009e67 	.word	0x00009e67
    9d88:	00009c9f 	.word	0x00009c9f
    9d8c:	00009c9f 	.word	0x00009c9f
    9d90:	00009c9f 	.word	0x00009c9f
    9d94:	00009c9f 	.word	0x00009c9f
    9d98:	00009e67 	.word	0x00009e67
    9d9c:	00009c9f 	.word	0x00009c9f
    9da0:	00009c9f 	.word	0x00009c9f
    9da4:	00009c9f 	.word	0x00009c9f
    9da8:	00009c9f 	.word	0x00009c9f
    9dac:	00009ef3 	.word	0x00009ef3
    9db0:	00009e8b 	.word	0x00009e8b
    9db4:	00009eb1 	.word	0x00009eb1
    9db8:	00009c9f 	.word	0x00009c9f
    9dbc:	00009c9f 	.word	0x00009c9f
    9dc0:	00009dd9 	.word	0x00009dd9
    9dc4:	00009c9f 	.word	0x00009c9f
    9dc8:	00009e8b 	.word	0x00009e8b
    9dcc:	00009c9f 	.word	0x00009c9f
    9dd0:	00009c9f 	.word	0x00009c9f
    9dd4:	00009e8b 	.word	0x00009e8b
			if (precision >= 0) {
    9dd8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    9ddc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    9dde:	db35      	blt.n	9e4c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9de0:	4651      	mov	r1, sl
    9de2:	4638      	mov	r0, r7
    9de4:	f010 fa8b 	bl	1a2fe <strnlen>
			bpe = bps + len;
    9de8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    9dec:	2f00      	cmp	r7, #0
    9dee:	f43f af56 	beq.w	9c9e <z_cbvprintf_impl+0x426>
		char sign = 0;
    9df2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    9df4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9df8:	f013 0210 	ands.w	r2, r3, #16
    9dfc:	9205      	str	r2, [sp, #20]
    9dfe:	f000 8092 	beq.w	9f26 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    9e02:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    9e04:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    9e06:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9e08:	bf48      	it	mi
    9e0a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    9e0c:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    9e0e:	bf48      	it	mi
    9e10:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    9e12:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    9e16:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9e18:	f340 809f 	ble.w	9f5a <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    9e1c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9e20:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    9e24:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9e28:	0750      	lsls	r0, r2, #29
    9e2a:	9306      	str	r3, [sp, #24]
    9e2c:	f100 8095 	bmi.w	9f5a <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    9e30:	0651      	lsls	r1, r2, #25
    9e32:	f140 8088 	bpl.w	9f46 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    9e36:	b13e      	cbz	r6, 9e48 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9e38:	4659      	mov	r1, fp
    9e3a:	4630      	mov	r0, r6
    9e3c:	47c8      	blx	r9
    9e3e:	2800      	cmp	r0, #0
    9e40:	db7e      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9e42:	9b06      	ldr	r3, [sp, #24]
    9e44:	3501      	adds	r5, #1
    9e46:	461e      	mov	r6, r3
					pad = '0';
    9e48:	2230      	movs	r2, #48	; 0x30
    9e4a:	e07d      	b.n	9f48 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    9e4c:	4638      	mov	r0, r7
    9e4e:	f010 fa4f 	bl	1a2f0 <strlen>
    9e52:	e7c9      	b.n	9de8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    9e56:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9e58:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9e5a:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    9e5e:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    9e60:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    9e64:	e7c6      	b.n	9df4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    9e66:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9e68:	bf5a      	itte	pl
    9e6a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9e6e:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9e70:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    9e72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    9e76:	2b00      	cmp	r3, #0
    9e78:	f6bf af63 	bge.w	9d42 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    9e7c:	4252      	negs	r2, r2
    9e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9e82:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9e84:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9e88:	e75b      	b.n	9d42 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    9e8a:	2600      	movs	r6, #0
    9e8c:	e759      	b.n	9d42 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    9e8e:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9e90:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    9e94:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9e98:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    9e9a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9e9e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    9ea0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    9ea4:	f67f af5b 	bls.w	9d5e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    9ea8:	ebaa 0303 	sub.w	r3, sl, r3
    9eac:	9311      	str	r3, [sp, #68]	; 0x44
    9eae:	e756      	b.n	9d5e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    9eb0:	980e      	ldr	r0, [sp, #56]	; 0x38
    9eb2:	b390      	cbz	r0, 9f1a <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9eb4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9eb8:	9300      	str	r3, [sp, #0]
    9eba:	2100      	movs	r1, #0
    9ebc:	ab08      	add	r3, sp, #32
    9ebe:	aa10      	add	r2, sp, #64	; 0x40
    9ec0:	f00f f81f 	bl	18f02 <encode_uint>
				conv->altform_0c = true;
    9ec4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9ec8:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    9ecc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9ed0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9ed4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9ed8:	4607      	mov	r7, r0
				conv->altform_0c = true;
    9eda:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9ede:	dad6      	bge.n	9e8e <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9ee0:	2800      	cmp	r0, #0
    9ee2:	f43f aedc 	beq.w	9c9e <z_cbvprintf_impl+0x426>
		char sign = 0;
    9ee6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9ee8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9eec:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    9eee:	469a      	mov	sl, r3
    9ef0:	e780      	b.n	9df4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    9ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    9ef4:	2907      	cmp	r1, #7
    9ef6:	f63f aed2 	bhi.w	9c9e <z_cbvprintf_impl+0x426>
    9efa:	e8df f001 	tbb	[pc, r1]
    9efe:	040c      	.short	0x040c
    9f00:	08080c06 	.word	0x08080c06
    9f04:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9f06:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9f08:	e6c9      	b.n	9c9e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    9f0a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9f0c:	e6c7      	b.n	9c9e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    9f0e:	17ea      	asrs	r2, r5, #31
    9f10:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9f14:	e6c3      	b.n	9c9e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9f16:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9f18:	e6c1      	b.n	9c9e <z_cbvprintf_impl+0x426>
    9f1a:	4f2f      	ldr	r7, [pc, #188]	; (9fd8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    9f1c:	4606      	mov	r6, r0
			bpe = bps + 5;
    9f1e:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    9f22:	2005      	movs	r0, #5
    9f24:	e766      	b.n	9df4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    9f26:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9f28:	bf48      	it	mi
    9f2a:	3001      	addmi	r0, #1
    9f2c:	e76a      	b.n	9e04 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    9f2e:	4610      	mov	r0, r2
    9f30:	9307      	str	r3, [sp, #28]
    9f32:	9206      	str	r2, [sp, #24]
    9f34:	4659      	mov	r1, fp
    9f36:	47c8      	blx	r9
    9f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9f3c:	2800      	cmp	r0, #0
    9f3e:	da04      	bge.n	9f4a <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    9f40:	b015      	add	sp, #84	; 0x54
    9f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9f46:	2220      	movs	r2, #32
					pad = '0';
    9f48:	4643      	mov	r3, r8
				while (width-- > 0) {
    9f4a:	4619      	mov	r1, r3
    9f4c:	2900      	cmp	r1, #0
    9f4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9f52:	dcec      	bgt.n	9f2e <z_cbvprintf_impl+0x6b6>
    9f54:	4445      	add	r5, r8
    9f56:	4698      	mov	r8, r3
    9f58:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    9f5a:	b12e      	cbz	r6, 9f68 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    9f5c:	4659      	mov	r1, fp
    9f5e:	4630      	mov	r0, r6
    9f60:	47c8      	blx	r9
    9f62:	2800      	cmp	r0, #0
    9f64:	dbec      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9f66:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9f68:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9f6c:	06da      	lsls	r2, r3, #27
    9f6e:	d401      	bmi.n	9f74 <z_cbvprintf_impl+0x6fc>
    9f70:	071b      	lsls	r3, r3, #28
    9f72:	d505      	bpl.n	9f80 <z_cbvprintf_impl+0x708>
				OUTC('0');
    9f74:	4659      	mov	r1, fp
    9f76:	2030      	movs	r0, #48	; 0x30
    9f78:	47c8      	blx	r9
    9f7a:	2800      	cmp	r0, #0
    9f7c:	dbe0      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9f7e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9f80:	9b05      	ldr	r3, [sp, #20]
    9f82:	b133      	cbz	r3, 9f92 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    9f84:	4659      	mov	r1, fp
    9f86:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9f8a:	47c8      	blx	r9
    9f8c:	2800      	cmp	r0, #0
    9f8e:	dbd7      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9f90:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9f92:	9e04      	ldr	r6, [sp, #16]
    9f94:	442e      	add	r6, r5
    9f96:	e005      	b.n	9fa4 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    9f98:	4659      	mov	r1, fp
    9f9a:	2030      	movs	r0, #48	; 0x30
    9f9c:	47c8      	blx	r9
    9f9e:	2800      	cmp	r0, #0
    9fa0:	dbce      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9fa2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9fa4:	1b73      	subs	r3, r6, r5
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	dcf6      	bgt.n	9f98 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    9faa:	4653      	mov	r3, sl
    9fac:	463a      	mov	r2, r7
    9fae:	4659      	mov	r1, fp
    9fb0:	4648      	mov	r0, r9
    9fb2:	f00e ffec 	bl	18f8e <outs>
    9fb6:	2800      	cmp	r0, #0
    9fb8:	dbc2      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9fba:	4405      	add	r5, r0
		while (width > 0) {
    9fbc:	44a8      	add	r8, r5
    9fbe:	eba8 0305 	sub.w	r3, r8, r5
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	f77f ae6b 	ble.w	9c9e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    9fc8:	4659      	mov	r1, fp
    9fca:	2020      	movs	r0, #32
    9fcc:	47c8      	blx	r9
    9fce:	2800      	cmp	r0, #0
    9fd0:	dbb6      	blt.n	9f40 <z_cbvprintf_impl+0x6c8>
    9fd2:	3501      	adds	r5, #1
			--width;
    9fd4:	e7f3      	b.n	9fbe <z_cbvprintf_impl+0x746>
    9fd6:	bf00      	nop
    9fd8:	0001f267 	.word	0x0001f267

00009fdc <z_arm_on_enter_cpu_idle>:
		DIV_ROUND_UP(200 * CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9fdc:	2305      	movs	r3, #5

	return true;
}

bool z_arm_on_enter_cpu_idle(void)
{
    9fde:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9fe0:	4d14      	ldr	r5, [pc, #80]	; (a034 <z_arm_on_enter_cpu_idle+0x58>)
    9fe2:	4e15      	ldr	r6, [pc, #84]	; (a038 <z_arm_on_enter_cpu_idle+0x5c>)
    9fe4:	782c      	ldrb	r4, [r5, #0]
    9fe6:	3401      	adds	r4, #1
    9fe8:	fbb4 f3f3 	udiv	r3, r4, r3
    9fec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9ff0:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9ff2:	f012 fcab 	bl	1c94c <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    9ff6:	4a11      	ldr	r2, [pc, #68]	; (a03c <z_arm_on_enter_cpu_idle+0x60>)
    9ff8:	7813      	ldrb	r3, [r2, #0]
    9ffa:	b123      	cbz	r3, a006 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    9ffc:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    a000:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    a002:	2807      	cmp	r0, #7
    a004:	d913      	bls.n	a02e <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a006:	4b0e      	ldr	r3, [pc, #56]	; (a040 <z_arm_on_enter_cpu_idle+0x64>)
    a008:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    a00c:	b141      	cbz	r1, a020 <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a00e:	2100      	movs	r1, #0
    a010:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    a014:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    a018:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    a01a:	b90c      	cbnz	r4, a020 <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
    a01c:	2301      	movs	r3, #1
    a01e:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    a020:	782c      	ldrb	r4, [r5, #0]
    a022:	f012 fc93 	bl	1c94c <sys_clock_cycle_get_32>
    a026:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    a02a:	2001      	movs	r0, #1
		suppress_message = true;
	}
#endif

	return ok_to_sleep;
}
    a02c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    a02e:	2000      	movs	r0, #0
    a030:	e7fc      	b.n	a02c <z_arm_on_enter_cpu_idle+0x50>
    a032:	bf00      	nop
    a034:	20009c58 	.word	0x20009c58
    a038:	200097a8 	.word	0x200097a8
    a03c:	20009c57 	.word	0x20009c57
    a040:	40005000 	.word	0x40005000

0000a044 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    a044:	b148      	cbz	r0, a05a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    a046:	4b05      	ldr	r3, [pc, #20]	; (a05c <arch_busy_wait+0x18>)
    a048:	4a05      	ldr	r2, [pc, #20]	; (a060 <arch_busy_wait+0x1c>)
    a04a:	681b      	ldr	r3, [r3, #0]
    a04c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    a050:	4358      	muls	r0, r3
    a052:	4b04      	ldr	r3, [pc, #16]	; (a064 <arch_busy_wait+0x20>)
    a054:	f043 0301 	orr.w	r3, r3, #1
    a058:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    a05a:	4770      	bx	lr
    a05c:	20008330 	.word	0x20008330
    a060:	000f4240 	.word	0x000f4240
    a064:	0001e720 	.word	0x0001e720

0000a068 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(void)
{
    a068:	b5f0      	push	{r4, r5, r6, r7, lr}
    a06a:	b083      	sub	sp, #12
    a06c:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    a06e:	1d38      	adds	r0, r7, #4
    a070:	f00c f852 	bl	16118 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    a074:	4b27      	ldr	r3, [pc, #156]	; (a114 <sync_rtc_setup+0xac>)
    a076:	4298      	cmp	r0, r3
    a078:	d149      	bne.n	a10e <sync_rtc_setup+0xa6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    a07a:	f00b fadf 	bl	1563c <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    a07e:	1e04      	subs	r4, r0, #0
    a080:	da13      	bge.n	a0aa <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    a082:	7938      	ldrb	r0, [r7, #4]
    a084:	f00c f84e 	bl	16124 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    a088:	466d      	mov	r5, sp
    a08a:	b088      	sub	sp, #32
    a08c:	466a      	mov	r2, sp
    a08e:	4b22      	ldr	r3, [pc, #136]	; (a118 <sync_rtc_setup+0xb0>)
    a090:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a094:	2303      	movs	r3, #3
    a096:	f842 3f10 	str.w	r3, [r2, #16]!
    a09a:	2300      	movs	r3, #0
    a09c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a0a0:	481e      	ldr	r0, [pc, #120]	; (a11c <sync_rtc_setup+0xb4>)
    a0a2:	f000 ff07 	bl	aeb4 <z_impl_z_log_msg_static_create>
    a0a6:	46ad      	mov	sp, r5
	}

	return rv;
    a0a8:	e02d      	b.n	a106 <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a0aa:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    a0ae:	4d1c      	ldr	r5, [pc, #112]	; (a120 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    a0b0:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    a0b2:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a0b4:	80fb      	strh	r3, [r7, #6]
    a0b6:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	b914      	cbnz	r4, a0c2 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    a0bc:	f06f 0457 	mvn.w	r4, #87	; 0x57
    a0c0:	e7e2      	b.n	a088 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    a0c2:	2108      	movs	r1, #8
    a0c4:	4628      	mov	r0, r5
    a0c6:	4a17      	ldr	r2, [pc, #92]	; (a124 <sync_rtc_setup+0xbc>)
    a0c8:	47a0      	blx	r4
	if (err < 0) {
    a0ca:	1e04      	subs	r4, r0, #0
    a0cc:	dbdc      	blt.n	a088 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    a0ce:	6933      	ldr	r3, [r6, #16]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d0f3      	beq.n	a0bc <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    a0d4:	2201      	movs	r2, #1
    a0d6:	2108      	movs	r1, #8
    a0d8:	4628      	mov	r0, r5
    a0da:	4798      	blx	r3
	if (rv < 0) {
    a0dc:	1e04      	subs	r4, r0, #0
    a0de:	dbd3      	blt.n	a088 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    a0e0:	2301      	movs	r3, #1
    a0e2:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a0e4:	4a10      	ldr	r2, [pc, #64]	; (a128 <sync_rtc_setup+0xc0>)
    a0e6:	40ab      	lsls	r3, r5
    a0e8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    a0ec:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a0ee:	79fe      	ldrb	r6, [r7, #7]
    a0f0:	f012 fc21 	bl	1c936 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    a0f4:	4b0d      	ldr	r3, [pc, #52]	; (a12c <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a0f6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a0fa:	00b6      	lsls	r6, r6, #2
    a0fc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    a100:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    a102:	2c00      	cmp	r4, #0
    a104:	d1c0      	bne.n	a088 <sync_rtc_setup+0x20>
}
    a106:	4620      	mov	r0, r4
    a108:	370c      	adds	r7, #12
    a10a:	46bd      	mov	sp, r7
    a10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    a10e:	f06f 0412 	mvn.w	r4, #18
    a112:	e7b9      	b.n	a088 <sync_rtc_setup+0x20>
    a114:	0bad0000 	.word	0x0bad0000
    a118:	0001f271 	.word	0x0001f271
    a11c:	0001e624 	.word	0x0001e624
    a120:	0001e254 	.word	0x0001e254
    a124:	0000a175 	.word	0x0000a175
    a128:	40017000 	.word	0x40017000
    a12c:	4002a180 	.word	0x4002a180

0000a130 <rtc_cb>:
{
    a130:	b538      	push	{r3, r4, r5, lr}
    a132:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a134:	f3c4 2507 	ubfx	r5, r4, #8, #8
    a138:	4628      	mov	r0, r5
    a13a:	f00b f8f1 	bl	15320 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    a13e:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    a140:	4b0a      	ldr	r3, [pc, #40]	; (a16c <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a142:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    a144:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    a148:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    a14c:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    a14e:	2301      	movs	r3, #1
    a150:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    a152:	4a07      	ldr	r2, [pc, #28]	; (a170 <rtc_cb+0x40>)
    a154:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    a156:	4628      	mov	r0, r5
    a158:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    a15c:	f00b fa8c 	bl	15678 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    a160:	4620      	mov	r0, r4
}
    a162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    a166:	f00b bfdd 	b.w	16124 <nrfx_dppi_channel_free>
    a16a:	bf00      	nop
    a16c:	4002a080 	.word	0x4002a080
    a170:	40017000 	.word	0x40017000

0000a174 <mbox_callback>:
{
    a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a176:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    a178:	6883      	ldr	r3, [r0, #8]
    a17a:	691b      	ldr	r3, [r3, #16]
    a17c:	b10b      	cbz	r3, a182 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    a17e:	2200      	movs	r2, #0
    a180:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    a182:	f3c4 2607 	ubfx	r6, r4, #8, #8
    a186:	4630      	mov	r0, r6
    a188:	f00b f8d2 	bl	15330 <z_nrf_rtc_timer_compare_read>
    a18c:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    a18e:	4630      	mov	r0, r6
    a190:	f012 fbd1 	bl	1c936 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    a194:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    a196:	4b10      	ldr	r3, [pc, #64]	; (a1d8 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a198:	0e22      	lsrs	r2, r4, #24
    a19a:	0092      	lsls	r2, r2, #2
    a19c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    a1a0:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a1a2:	4630      	mov	r0, r6
    a1a4:	f00b f8bc 	bl	15320 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a1a8:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a1aa:	4b0c      	ldr	r3, [pc, #48]	; (a1dc <mbox_callback+0x68>)
    a1ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    a1b0:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    a1b2:	b2e2      	uxtb	r2, r4
    a1b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a1b8:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    a1ba:	4b09      	ldr	r3, [pc, #36]	; (a1e0 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a1bc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    a1c0:	f105 0232 	add.w	r2, r5, #50	; 0x32
    a1c4:	9300      	str	r3, [sp, #0]
    a1c6:	4630      	mov	r0, r6
    a1c8:	463b      	mov	r3, r7
    a1ca:	9401      	str	r4, [sp, #4]
    a1cc:	0052      	lsls	r2, r2, #1
    a1ce:	f012 fbbb 	bl	1c948 <z_nrf_rtc_timer_set>
}
    a1d2:	b003      	add	sp, #12
    a1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1d6:	bf00      	nop
    a1d8:	4002a180 	.word	0x4002a180
    a1dc:	4002a080 	.word	0x4002a080
    a1e0:	0000a131 	.word	0x0000a131

0000a1e4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a1e4:	f012 bc01 	b.w	1c9ea <SystemInit>

0000a1e8 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    a1e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    a1ea:	b970      	cbnz	r0, a20a <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    a1ec:	4b12      	ldr	r3, [pc, #72]	; (a238 <ipc_service_open_instance+0x50>)
    a1ee:	4813      	ldr	r0, [pc, #76]	; (a23c <ipc_service_open_instance+0x54>)
    a1f0:	9305      	str	r3, [sp, #20]
    a1f2:	2302      	movs	r3, #2
    a1f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a1f8:	aa04      	add	r2, sp, #16
    a1fa:	9304      	str	r3, [sp, #16]
    a1fc:	f00f f986 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    a200:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    a204:	b007      	add	sp, #28
    a206:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    a20a:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    a20c:	b963      	cbnz	r3, a228 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    a20e:	4b0c      	ldr	r3, [pc, #48]	; (a240 <ipc_service_open_instance+0x58>)
    a210:	480a      	ldr	r0, [pc, #40]	; (a23c <ipc_service_open_instance+0x54>)
    a212:	9305      	str	r3, [sp, #20]
    a214:	2302      	movs	r3, #2
    a216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a21a:	aa04      	add	r2, sp, #16
    a21c:	9304      	str	r3, [sp, #16]
    a21e:	f00f f975 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EIO;
    a222:	f06f 0004 	mvn.w	r0, #4
    a226:	e7ed      	b.n	a204 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    a228:	681b      	ldr	r3, [r3, #0]
    a22a:	b11b      	cbz	r3, a234 <ipc_service_open_instance+0x4c>
}
    a22c:	b007      	add	sp, #28
    a22e:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    a232:	4718      	bx	r3
		return 0;
    a234:	4618      	mov	r0, r3
    a236:	e7e5      	b.n	a204 <ipc_service_open_instance+0x1c>
    a238:	0001f2a2 	.word	0x0001f2a2
    a23c:	0001e5c4 	.word	0x0001e5c4
    a240:	0001f2b3 	.word	0x0001f2b3

0000a244 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    a244:	b530      	push	{r4, r5, lr}
    a246:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    a248:	b108      	cbz	r0, a24e <ipc_service_register_endpoint+0xa>
    a24a:	b101      	cbz	r1, a24e <ipc_service_register_endpoint+0xa>
    a24c:	b96a      	cbnz	r2, a26a <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    a24e:	4b13      	ldr	r3, [pc, #76]	; (a29c <ipc_service_register_endpoint+0x58>)
    a250:	4813      	ldr	r0, [pc, #76]	; (a2a0 <ipc_service_register_endpoint+0x5c>)
    a252:	9305      	str	r3, [sp, #20]
    a254:	2302      	movs	r3, #2
    a256:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a25a:	aa04      	add	r2, sp, #16
    a25c:	9304      	str	r3, [sp, #16]
    a25e:	f00f f955 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    a262:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    a266:	b007      	add	sp, #28
    a268:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    a26a:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    a26c:	b10c      	cbz	r4, a272 <ipc_service_register_endpoint+0x2e>
    a26e:	68e5      	ldr	r5, [r4, #12]
    a270:	b965      	cbnz	r5, a28c <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    a272:	4b0c      	ldr	r3, [pc, #48]	; (a2a4 <ipc_service_register_endpoint+0x60>)
    a274:	480a      	ldr	r0, [pc, #40]	; (a2a0 <ipc_service_register_endpoint+0x5c>)
    a276:	9305      	str	r3, [sp, #20]
    a278:	2302      	movs	r3, #2
    a27a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a27e:	aa04      	add	r2, sp, #16
    a280:	9304      	str	r3, [sp, #16]
    a282:	f00f f943 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EIO;
    a286:	f06f 0004 	mvn.w	r0, #4
    a28a:	e7ec      	b.n	a266 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    a28c:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    a290:	68e3      	ldr	r3, [r4, #12]
}
    a292:	b007      	add	sp, #28
    a294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    a298:	4718      	bx	r3
    a29a:	bf00      	nop
    a29c:	0001f2d1 	.word	0x0001f2d1
    a2a0:	0001e5c4 	.word	0x0001e5c4
    a2a4:	0001f2b3 	.word	0x0001f2b3

0000a2a8 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    a2a8:	b530      	push	{r4, r5, lr}
    a2aa:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    a2ac:	4604      	mov	r4, r0
{
    a2ae:	b087      	sub	sp, #28
	if (!ept) {
    a2b0:	b968      	cbnz	r0, a2ce <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    a2b2:	4b1a      	ldr	r3, [pc, #104]	; (a31c <ipc_service_send+0x74>)
    a2b4:	481a      	ldr	r0, [pc, #104]	; (a320 <ipc_service_send+0x78>)
    a2b6:	9305      	str	r3, [sp, #20]
    a2b8:	2302      	movs	r3, #2
    a2ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a2be:	aa04      	add	r2, sp, #16
    a2c0:	9304      	str	r3, [sp, #16]
    a2c2:	f00f f923 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    a2c6:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    a2ca:	b007      	add	sp, #28
    a2cc:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    a2ce:	6800      	ldr	r0, [r0, #0]
    a2d0:	b960      	cbnz	r0, a2ec <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    a2d2:	4b14      	ldr	r3, [pc, #80]	; (a324 <ipc_service_send+0x7c>)
    a2d4:	4812      	ldr	r0, [pc, #72]	; (a320 <ipc_service_send+0x78>)
    a2d6:	9305      	str	r3, [sp, #20]
    a2d8:	2302      	movs	r3, #2
    a2da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a2de:	aa04      	add	r2, sp, #16
    a2e0:	9304      	str	r3, [sp, #16]
    a2e2:	f00f f913 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    a2e6:	f06f 0001 	mvn.w	r0, #1
    a2ea:	e7ee      	b.n	a2ca <ipc_service_send+0x22>
	backend = ept->instance->api;
    a2ec:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    a2ee:	b10a      	cbz	r2, a2f4 <ipc_service_send+0x4c>
    a2f0:	6895      	ldr	r5, [r2, #8]
    a2f2:	b965      	cbnz	r5, a30e <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    a2f4:	4b0c      	ldr	r3, [pc, #48]	; (a328 <ipc_service_send+0x80>)
    a2f6:	480a      	ldr	r0, [pc, #40]	; (a320 <ipc_service_send+0x78>)
    a2f8:	9305      	str	r3, [sp, #20]
    a2fa:	2302      	movs	r3, #2
    a2fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a300:	aa04      	add	r2, sp, #16
    a302:	9304      	str	r3, [sp, #16]
    a304:	f00f f902 	bl	1950c <z_log_msg_static_create.constprop.0>
		return -EIO;
    a308:	f06f 0004 	mvn.w	r0, #4
    a30c:	e7dd      	b.n	a2ca <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    a30e:	460a      	mov	r2, r1
    a310:	46ac      	mov	ip, r5
    a312:	6861      	ldr	r1, [r4, #4]
}
    a314:	b007      	add	sp, #28
    a316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    a31a:	4760      	bx	ip
    a31c:	0001f2fd 	.word	0x0001f2fd
    a320:	0001e5c4 	.word	0x0001e5c4
    a324:	0001f30e 	.word	0x0001f30e
    a328:	0001f2b3 	.word	0x0001f2b3

0000a32c <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(void)
{
    a32c:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    a32e:	2204      	movs	r2, #4
    a330:	2100      	movs	r1, #0
    a332:	4802      	ldr	r0, [pc, #8]	; (a33c <shared_memory_prepare+0x10>)
    a334:	f010 f826 	bl	1a384 <memset>
		}
	}

	return 0;
}
    a338:	2000      	movs	r0, #0
    a33a:	bd08      	pop	{r3, pc}
    a33c:	20070000 	.word	0x20070000

0000a340 <advertise_ept>:
{
    a340:	b530      	push	{r4, r5, lr}
    a342:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a344:	490e      	ldr	r1, [pc, #56]	; (a380 <advertise_ept+0x40>)
{
    a346:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a348:	9102      	str	r1, [sp, #8]
    a34a:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    a34e:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a350:	e9cd 3100 	strd	r3, r1, [sp]
    a354:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    a358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a35c:	4620      	mov	r0, r4
    a35e:	f00c fc9d 	bl	16c9c <rpmsg_create_ept>
	if (err != 0) {
    a362:	b950      	cbnz	r0, a37a <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    a364:	2301      	movs	r3, #1
    a366:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    a36a:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    a36e:	b123      	cbz	r3, a37a <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    a370:	4620      	mov	r0, r4
}
    a372:	b005      	add	sp, #20
    a374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    a378:	4718      	bx	r3
}
    a37a:	b005      	add	sp, #20
    a37c:	bd30      	pop	{r4, r5, pc}
    a37e:	bf00      	nop
    a380:	00019603 	.word	0x00019603

0000a384 <get_ept>:
{
    a384:	b538      	push	{r3, r4, r5, lr}
    a386:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    a388:	4611      	mov	r1, r2
{
    a38a:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    a38c:	f00f f93b 	bl	19606 <get_ept_slot_with_name>
	if (ept != NULL) {
    a390:	4603      	mov	r3, r0
    a392:	b938      	cbnz	r0, a3a4 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    a394:	4628      	mov	r0, r5
    a396:	4904      	ldr	r1, [pc, #16]	; (a3a8 <get_ept+0x24>)
    a398:	f00f f935 	bl	19606 <get_ept_slot_with_name>
    a39c:	4603      	mov	r3, r0
	if (ept != NULL) {
    a39e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    a3a0:	6023      	str	r3, [r4, #0]
}
    a3a2:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    a3a4:	2001      	movs	r0, #1
    a3a6:	e7fb      	b.n	a3a0 <get_ept+0x1c>
    a3a8:	00021839 	.word	0x00021839

0000a3ac <open>:
{
    a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a3b0:	2301      	movs	r3, #1
    a3b2:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    a3b4:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    a3b6:	6846      	ldr	r6, [r0, #4]
{
    a3b8:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    a3ba:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    a3be:	e8d7 2fef 	ldaex	r2, [r7]
    a3c2:	2a00      	cmp	r2, #0
    a3c4:	d103      	bne.n	a3ce <open+0x22>
    a3c6:	e8c7 3fe1 	stlex	r1, r3, [r7]
    a3ca:	2900      	cmp	r1, #0
    a3cc:	d1f7      	bne.n	a3be <open+0x12>
    a3ce:	f040 80b8 	bne.w	a542 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    a3d2:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    a3d4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    a3d6:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    a3d8:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    a3da:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    a3de:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    a3e2:	bf26      	itte	cs
    a3e4:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    a3e8:	fab3 f383 	clzcs	r3, r3
		return 0;
    a3ec:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    a3ee:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    a3f2:	bf28      	it	cs
    a3f4:	f1c3 0320 	rsbcs	r3, r3, #32
    a3f8:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    a3fa:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    a3fc:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    a400:	f000 8099 	beq.w	a536 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    a404:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    a406:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    a408:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    a40a:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    a40c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    a410:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    a412:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    a414:	3209      	adds	r2, #9
    a416:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    a41a:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    a41c:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    a420:	440a      	add	r2, r1
	return (buf_size * num);
    a422:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    a424:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    a428:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    a42a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    a42e:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    a432:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    a434:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    a436:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    a43a:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    a43e:	3303      	adds	r3, #3
    a440:	4413      	add	r3, r2
    a442:	f023 0303 	bic.w	r3, r3, #3
    a446:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    a44a:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    a44c:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    a450:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    a454:	4b3c      	ldr	r3, [pc, #240]	; (a548 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    a456:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    a458:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    a45c:	6831      	ldr	r1, [r6, #0]
    a45e:	f000 fa1d 	bl	a89c <ipc_static_vrings_init>
	if (err != 0) {
    a462:	4604      	mov	r4, r0
    a464:	bb30      	cbnz	r0, a4b4 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    a466:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    a46a:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    a46e:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    a472:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    a476:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    a478:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    a47a:	bf08      	it	eq
    a47c:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    a47e:	f013 fad3 	bl	1da28 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    a482:	2300      	movs	r3, #0
    a484:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    a488:	4930      	ldr	r1, [pc, #192]	; (a54c <open+0x1a0>)
    a48a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a48e:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    a492:	9300      	str	r3, [sp, #0]
    a494:	4658      	mov	r0, fp
    a496:	4623      	mov	r3, r4
    a498:	f00d fb14 	bl	17ac4 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    a49c:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    a4a0:	492b      	ldr	r1, [pc, #172]	; (a550 <open+0x1a4>)
    a4a2:	f013 fa83 	bl	1d9ac <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    a4a6:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    a4aa:	6883      	ldr	r3, [r0, #8]
    a4ac:	685c      	ldr	r4, [r3, #4]
    a4ae:	b91c      	cbnz	r4, a4b8 <open+0x10c>
		return -ENOSYS;
    a4b0:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    a4b4:	2100      	movs	r1, #0
    a4b6:	e037      	b.n	a528 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    a4b8:	464b      	mov	r3, r9
    a4ba:	4a26      	ldr	r2, [pc, #152]	; (a554 <open+0x1a8>)
    a4bc:	f8da 1018 	ldr.w	r1, [sl, #24]
    a4c0:	47a0      	blx	r4
	if (err != 0) {
    a4c2:	4604      	mov	r4, r0
    a4c4:	2800      	cmp	r0, #0
    a4c6:	d1f5      	bne.n	a4b4 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    a4c8:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    a4cc:	6883      	ldr	r3, [r0, #8]
    a4ce:	691b      	ldr	r3, [r3, #16]
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d0ed      	beq.n	a4b0 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    a4d4:	2201      	movs	r2, #1
    a4d6:	f8da 1018 	ldr.w	r1, [sl, #24]
    a4da:	4798      	blx	r3
	if (err != 0) {
    a4dc:	4604      	mov	r4, r0
    a4de:	2800      	cmp	r0, #0
    a4e0:	d1e8      	bne.n	a4b4 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    a4e2:	4b1d      	ldr	r3, [pc, #116]	; (a558 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    a4e4:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    a4e6:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    a4ea:	4b1c      	ldr	r3, [pc, #112]	; (a55c <open+0x1b0>)
    a4ec:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    a4f0:	4b1b      	ldr	r3, [pc, #108]	; (a560 <open+0x1b4>)
    a4f2:	9303      	str	r3, [sp, #12]
    a4f4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    a4f8:	9302      	str	r3, [sp, #8]
    a4fa:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    a4fe:	e9cd 8300 	strd	r8, r3, [sp]
    a502:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    a506:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    a508:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    a50c:	f000 f98e 	bl	a82c <ipc_rpmsg_init>
	if (err != 0) {
    a510:	4604      	mov	r4, r0
    a512:	2800      	cmp	r0, #0
    a514:	d1ce      	bne.n	a4b4 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    a516:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    a51a:	f00c fc6d 	bl	16df8 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    a51e:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    a520:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    a524:	db0a      	blt.n	a53c <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    a526:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    a528:	4638      	mov	r0, r7
    a52a:	f00f f8a1 	bl	19670 <atomic_set.isra.0>
}
    a52e:	4620      	mov	r0, r4
    a530:	b005      	add	sp, #20
    a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    a536:	f06f 040b 	mvn.w	r4, #11
    a53a:	e7bb      	b.n	a4b4 <open+0x108>
		err = -EINVAL;
    a53c:	f06f 0415 	mvn.w	r4, #21
    a540:	e7b8      	b.n	a4b4 <open+0x108>
		return -EALREADY;
    a542:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a546:	e7f2      	b.n	a52e <open+0x182>
    a548:	00019659 	.word	0x00019659
    a54c:	20009d48 	.word	0x20009d48
    a550:	0001963f 	.word	0x0001963f
    a554:	00019633 	.word	0x00019633
    a558:	0000a629 	.word	0x0000a629
    a55c:	00019711 	.word	0x00019711
    a560:	000196a1 	.word	0x000196a1

0000a564 <close>:
{
    a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a568:	4606      	mov	r6, r0
    a56a:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    a56e:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    a570:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    a574:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    a578:	e8d7 3fef 	ldaex	r3, [r7]
    a57c:	2b02      	cmp	r3, #2
    a57e:	d103      	bne.n	a588 <close+0x24>
    a580:	e8c7 9fe2 	stlex	r2, r9, [r7]
    a584:	2a00      	cmp	r2, #0
    a586:	d1f7      	bne.n	a578 <close+0x14>
    a588:	d149      	bne.n	a61e <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    a58a:	4826      	ldr	r0, [pc, #152]	; (a624 <close+0xc0>)
    a58c:	f105 0140 	add.w	r1, r5, #64	; 0x40
    a590:	f00f febe 	bl	1a310 <strcmp>
    a594:	b120      	cbz	r0, a5a0 <close+0x3c>
		return -EBUSY;
    a596:	f06f 040f 	mvn.w	r4, #15
}
    a59a:	4620      	mov	r0, r4
    a59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    a5a0:	4820      	ldr	r0, [pc, #128]	; (a624 <close+0xc0>)
    a5a2:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    a5a6:	f00f feb3 	bl	1a310 <strcmp>
    a5aa:	2800      	cmp	r0, #0
    a5ac:	d1f3      	bne.n	a596 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    a5ae:	4628      	mov	r0, r5
    a5b0:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    a5b4:	f00f f8df 	bl	19776 <ipc_rpmsg_deinit>
	if (err != 0) {
    a5b8:	4604      	mov	r4, r0
    a5ba:	bb70      	cbnz	r0, a61a <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    a5bc:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    a5be:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    a5c0:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    a5c2:	6883      	ldr	r3, [r0, #8]
    a5c4:	691b      	ldr	r3, [r3, #16]
    a5c6:	b333      	cbz	r3, a616 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    a5c8:	4622      	mov	r2, r4
    a5ca:	6989      	ldr	r1, [r1, #24]
    a5cc:	4798      	blx	r3
	if (err != 0) {
    a5ce:	4604      	mov	r4, r0
    a5d0:	bb18      	cbnz	r0, a61a <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    a5d2:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    a5d6:	4649      	mov	r1, r9
    a5d8:	4630      	mov	r0, r6
    a5da:	f00d faab 	bl	17b34 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    a5de:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    a5e0:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    a5e4:	f001 ff3a 	bl	c45c <z_impl_k_thread_abort>
    a5e8:	4630      	mov	r0, r6
    a5ea:	f8d8 1000 	ldr.w	r1, [r8]
    a5ee:	f00f f8ff 	bl	197f0 <ipc_static_vrings_deinit>
	if (err != 0) {
    a5f2:	4604      	mov	r4, r0
    a5f4:	b988      	cbnz	r0, a61a <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    a5f6:	4601      	mov	r1, r0
    a5f8:	22e8      	movs	r2, #232	; 0xe8
    a5fa:	4630      	mov	r0, r6
    a5fc:	f00f fec2 	bl	1a384 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    a600:	4621      	mov	r1, r4
    a602:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    a606:	4628      	mov	r0, r5
    a608:	f00f febc 	bl	1a384 <memset>
	atomic_set(&data->state, STATE_READY);
    a60c:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    a60e:	4638      	mov	r0, r7
    a610:	f00f f82e 	bl	19670 <atomic_set.isra.0>
	return err;
    a614:	e7c1      	b.n	a59a <close+0x36>
		return -ENOSYS;
    a616:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    a61a:	2102      	movs	r1, #2
    a61c:	e7f7      	b.n	a60e <close+0xaa>
		return -EALREADY;
    a61e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a622:	e7ba      	b.n	a59a <close+0x36>
    a624:	00021839 	.word	0x00021839

0000a628 <bound_cb>:
{
    a628:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    a62a:	4604      	mov	r4, r0
    a62c:	b140      	cbz	r0, a640 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    a62e:	2300      	movs	r3, #0
    a630:	2201      	movs	r2, #1
    a632:	e9cd 3200 	strd	r3, r2, [sp]
    a636:	4b07      	ldr	r3, [pc, #28]	; (a654 <bound_cb+0x2c>)
    a638:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    a63c:	f00c fae2 	bl	16c04 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    a640:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    a642:	681b      	ldr	r3, [r3, #0]
    a644:	b123      	cbz	r3, a650 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    a646:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    a648:	b002      	add	sp, #8
    a64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    a64e:	4718      	bx	r3
}
    a650:	b002      	add	sp, #8
    a652:	bd10      	pop	{r4, pc}
    a654:	00021839 	.word	0x00021839

0000a658 <send>:
{
    a658:	b513      	push	{r0, r1, r4, lr}
    a65a:	4604      	mov	r4, r0
    a65c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a65e:	6921      	ldr	r1, [r4, #16]
    a660:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    a664:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    a668:	2902      	cmp	r1, #2
    a66a:	d110      	bne.n	a68e <send+0x36>
	if (len == 0) {
    a66c:	b193      	cbz	r3, a694 <send+0x3c>
	if (!rpmsg_ept) {
    a66e:	b1a0      	cbz	r0, a69a <send+0x42>
    a670:	2101      	movs	r1, #1
    a672:	e9cd 3100 	strd	r3, r1, [sp]
    a676:	4613      	mov	r3, r2
    a678:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    a67c:	f00c fac2 	bl	16c04 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    a680:	4b07      	ldr	r3, [pc, #28]	; (a6a0 <send+0x48>)
		return -ENOMEM;
    a682:	4298      	cmp	r0, r3
    a684:	bf08      	it	eq
    a686:	f06f 000b 	mvneq.w	r0, #11
}
    a68a:	b002      	add	sp, #8
    a68c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    a68e:	f06f 000f 	mvn.w	r0, #15
    a692:	e7fa      	b.n	a68a <send+0x32>
		return -EBADMSG;
    a694:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    a698:	e7f7      	b.n	a68a <send+0x32>
		return -ENOENT;
    a69a:	f06f 0001 	mvn.w	r0, #1
    a69e:	e7f4      	b.n	a68a <send+0x32>
    a6a0:	fffff82e 	.word	0xfffff82e

0000a6a4 <register_ept>:
{
    a6a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a6a8:	4688      	mov	r8, r1
    a6aa:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    a6ac:	6906      	ldr	r6, [r0, #16]
    a6ae:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    a6b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    a6b6:	2b02      	cmp	r3, #2
    a6b8:	d15f      	bne.n	a77a <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    a6ba:	6813      	ldr	r3, [r2, #0]
    a6bc:	b923      	cbnz	r3, a6c8 <register_ept+0x24>
		return -EINVAL;
    a6be:	f06f 0015 	mvn.w	r0, #21
}
    a6c2:	b003      	add	sp, #12
    a6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	2b00      	cmp	r3, #0
    a6cc:	d0f7      	beq.n	a6be <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    a6ce:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    a6d2:	f1b9 0f00 	cmp.w	r9, #0
    a6d6:	d133      	bne.n	a740 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    a6d8:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    a6dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a6e4:	4638      	mov	r0, r7
    a6e6:	f00c ff81 	bl	175ec <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    a6ea:	4630      	mov	r0, r6
    a6ec:	682a      	ldr	r2, [r5, #0]
    a6ee:	a901      	add	r1, sp, #4
    a6f0:	f7ff fe48 	bl	a384 <get_ept>
	if (rpmsg_ept == NULL) {
    a6f4:	9c01      	ldr	r4, [sp, #4]
    a6f6:	b91c      	cbnz	r4, a700 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a6f8:	4638      	mov	r0, r7
    a6fa:	f00e ffb7 	bl	1966c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    a6fe:	e7de      	b.n	a6be <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    a700:	f105 0308 	add.w	r3, r5, #8
    a704:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    a706:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    a708:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    a70c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    a70e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    a710:	b160      	cbz	r0, a72c <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a712:	4638      	mov	r0, r7
    a714:	f00e ffaa 	bl	1966c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    a718:	4621      	mov	r1, r4
    a71a:	4630      	mov	r0, r6
    a71c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a71e:	682a      	ldr	r2, [r5, #0]
    a720:	f7ff fe0e 	bl	a340 <advertise_ept>
	return 0;
    a724:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    a726:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    a72a:	e7ca      	b.n	a6c2 <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    a72c:	2220      	movs	r2, #32
    a72e:	6829      	ldr	r1, [r5, #0]
    a730:	f104 0040 	add.w	r0, r4, #64	; 0x40
    a734:	f00f fdc8 	bl	1a2c8 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a738:	4638      	mov	r0, r7
    a73a:	f00e ff97 	bl	1966c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    a73e:	e7f1      	b.n	a724 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    a740:	4630      	mov	r0, r6
    a742:	490f      	ldr	r1, [pc, #60]	; (a780 <register_ept+0xdc>)
    a744:	f00e ff5f 	bl	19606 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    a748:	4604      	mov	r4, r0
    a74a:	2800      	cmp	r0, #0
    a74c:	d0b7      	beq.n	a6be <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    a74e:	f105 0308 	add.w	r3, r5, #8
    a752:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    a754:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    a756:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    a758:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    a75a:	2300      	movs	r3, #0
    a75c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    a760:	2220      	movs	r2, #32
    a762:	6829      	ldr	r1, [r5, #0]
    a764:	3040      	adds	r0, #64	; 0x40
    a766:	f00f fdaf 	bl	1a2c8 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    a76a:	4622      	mov	r2, r4
    a76c:	2101      	movs	r1, #1
    a76e:	4630      	mov	r0, r6
    a770:	f000 f83e 	bl	a7f0 <ipc_rpmsg_register_ept>
	if (err != 0) {
    a774:	2800      	cmp	r0, #0
    a776:	d0d5      	beq.n	a724 <register_ept+0x80>
    a778:	e7a1      	b.n	a6be <register_ept+0x1a>
		return -EBUSY;
    a77a:	f06f 000f 	mvn.w	r0, #15
    a77e:	e7a0      	b.n	a6c2 <register_ept+0x1e>
    a780:	00021839 	.word	0x00021839

0000a784 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a788:	4605      	mov	r5, r0
    a78a:	460e      	mov	r6, r1
    a78c:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a78e:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    a790:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    a794:	b085      	sub	sp, #20
    a796:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    a79a:	4621      	mov	r1, r4
    a79c:	4630      	mov	r0, r6
    a79e:	f00f fdb7 	bl	1a310 <strcmp>
    a7a2:	b9e0      	cbnz	r0, a7de <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a7a4:	4b11      	ldr	r3, [pc, #68]	; (a7ec <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    a7a6:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a7aa:	9302      	str	r3, [sp, #8]
    a7ac:	f8da 3010 	ldr.w	r3, [sl, #16]
    a7b0:	4632      	mov	r2, r6
    a7b2:	e9cd 8300 	strd	r8, r3, [sp]
    a7b6:	4629      	mov	r1, r5
    a7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a7bc:	4658      	mov	r0, fp
    a7be:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    a7c2:	f00c fa6b 	bl	16c9c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    a7c6:	b960      	cbnz	r0, a7e2 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    a7c8:	2370      	movs	r3, #112	; 0x70
    a7ca:	2201      	movs	r2, #1
    a7cc:	fb03 9307 	mla	r3, r3, r7, r9
    a7d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    a7d4:	f8da 300c 	ldr.w	r3, [sl, #12]
    a7d8:	b10b      	cbz	r3, a7de <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    a7da:	4658      	mov	r0, fp
    a7dc:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a7de:	3470      	adds	r4, #112	; 0x70
    a7e0:	b117      	cbz	r7, a7e8 <ns_bind_cb+0x64>
			}
		}
	}
}
    a7e2:	b005      	add	sp, #20
    a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a7e8:	2701      	movs	r7, #1
    a7ea:	e7d6      	b.n	a79a <ns_bind_cb+0x16>
    a7ec:	00019773 	.word	0x00019773

0000a7f0 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    a7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a7f2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    a7f4:	b190      	cbz	r0, a81c <ipc_rpmsg_register_ept+0x2c>
    a7f6:	b18a      	cbz	r2, a81c <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    a7f8:	2901      	cmp	r1, #1
    a7fa:	d112      	bne.n	a822 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    a7fc:	4b0a      	ldr	r3, [pc, #40]	; (a828 <ipc_rpmsg_register_ept+0x38>)
    a7fe:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    a802:	9302      	str	r3, [sp, #8]
    a804:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    a808:	3240      	adds	r2, #64	; 0x40
    a80a:	9301      	str	r3, [sp, #4]
    a80c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a810:	4620      	mov	r0, r4
    a812:	9300      	str	r3, [sp, #0]
    a814:	f00c fa42 	bl	16c9c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    a818:	b004      	add	sp, #16
    a81a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a81c:	f06f 0015 	mvn.w	r0, #21
    a820:	e7fa      	b.n	a818 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    a822:	2000      	movs	r0, #0
    a824:	e7f8      	b.n	a818 <ipc_rpmsg_register_ept+0x28>
    a826:	bf00      	nop
    a828:	00019773 	.word	0x00019773

0000a82c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    a82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a830:	b087      	sub	sp, #28
    a832:	460e      	mov	r6, r1
    a834:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    a838:	4614      	mov	r4, r2
    a83a:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    a83e:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    a840:	b330      	cbz	r0, a890 <ipc_rpmsg_init+0x64>
    a842:	b329      	cbz	r1, a890 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    a844:	f8df c050 	ldr.w	ip, [pc, #80]	; a898 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a848:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    a84c:	2d00      	cmp	r5, #0
    a84e:	bf08      	it	eq
    a850:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    a852:	b99e      	cbnz	r6, a87c <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    a854:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a858:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    a85c:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    a85e:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a860:	f012 fe91 	bl	1d586 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a864:	ab03      	add	r3, sp, #12
    a866:	e9cd 4300 	strd	r4, r3, [sp]
    a86a:	462a      	mov	r2, r5
    a86c:	463b      	mov	r3, r7
    a86e:	4641      	mov	r1, r8
    a870:	4648      	mov	r0, r9
    a872:	f00c fae7 	bl	16e44 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    a876:	b007      	add	sp, #28
    a878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a87c:	2200      	movs	r2, #0
    a87e:	4641      	mov	r1, r8
    a880:	920e      	str	r2, [sp, #56]	; 0x38
    a882:	4648      	mov	r0, r9
    a884:	462a      	mov	r2, r5
}
    a886:	b007      	add	sp, #28
    a888:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a88c:	f00c bc04 	b.w	17098 <rpmsg_init_vdev>
		return -EINVAL;
    a890:	f06f 0015 	mvn.w	r0, #21
    a894:	e7ef      	b.n	a876 <ipc_rpmsg_init+0x4a>
    a896:	bf00      	nop
    a898:	0000a785 	.word	0x0000a785

0000a89c <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a89e:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    a8a0:	4604      	mov	r4, r0
{
    a8a2:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    a8a4:	2800      	cmp	r0, #0
    a8a6:	d06f      	beq.n	a988 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    a8a8:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    a8aa:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    a8ac:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a8ae:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    a8b0:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    a8b4:	4f36      	ldr	r7, [pc, #216]	; (a990 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a8b6:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    a8b8:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    a8bc:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a8c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    a8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8c8:	9300      	str	r3, [sp, #0]
    a8ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a8cc:	f012 f919 	bl	1cb02 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    a8d0:	4a30      	ldr	r2, [pc, #192]	; (a994 <ipc_static_vrings_init+0xf8>)
    a8d2:	ab06      	add	r3, sp, #24
    a8d4:	e892 0003 	ldmia.w	r2, {r0, r1}
    a8d8:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    a8dc:	4618      	mov	r0, r3
    a8de:	f00c f8b1 	bl	16a44 <metal_init>
	if (err != 0) {
    a8e2:	4605      	mov	r5, r0
    a8e4:	b9d8      	cbnz	r0, a91e <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    a8e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a8ea:	f00c f88b 	bl	16a04 <metal_register_generic_device>
	if (err != 0) {
    a8ee:	4605      	mov	r5, r0
    a8f0:	b9a8      	cbnz	r0, a91e <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    a8f2:	4639      	mov	r1, r7
    a8f4:	4828      	ldr	r0, [pc, #160]	; (a998 <ipc_static_vrings_init+0xfc>)
    a8f6:	aa05      	add	r2, sp, #20
    a8f8:	f012 f8d5 	bl	1caa6 <metal_device_open>
	if (err != 0) {
    a8fc:	4605      	mov	r5, r0
    a8fe:	b970      	cbnz	r0, a91e <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    a900:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    a902:	689a      	ldr	r2, [r3, #8]
    a904:	b172      	cbz	r2, a924 <ipc_static_vrings_init+0x88>
    a906:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a908:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    a90c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a910:	f00e ff60 	bl	197d4 <virtqueue_allocate>
    a914:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    a918:	b930      	cbnz	r0, a928 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    a91a:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    a91e:	4628      	mov	r0, r5
    a920:	b009      	add	sp, #36	; 0x24
    a922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a924:	4603      	mov	r3, r0
    a926:	e7ef      	b.n	a908 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    a928:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    a92c:	f00e ff52 	bl	197d4 <virtqueue_allocate>
    a930:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    a934:	2800      	cmp	r0, #0
    a936:	d0f0      	beq.n	a91a <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a938:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a93c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a940:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    a944:	2304      	movs	r3, #4
    a946:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    a94a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    a94e:	2302      	movs	r3, #2
    a950:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    a952:	4b12      	ldr	r3, [pc, #72]	; (a99c <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a954:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a958:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a95c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    a960:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a964:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    a968:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a96a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a96e:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a972:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a976:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    a97a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    a97e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    a982:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a984:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    a986:	e7ca      	b.n	a91e <ipc_static_vrings_init+0x82>
		return -EINVAL;
    a988:	f06f 0515 	mvn.w	r5, #21
    a98c:	e7c7      	b.n	a91e <ipc_static_vrings_init+0x82>
    a98e:	bf00      	nop
    a990:	0001f338 	.word	0x0001f338
    a994:	0001e664 	.word	0x0001e664
    a998:	0001f342 	.word	0x0001f342
    a99c:	0001e7e4 	.word	0x0001e7e4

0000a9a0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    a9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9a4:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    a9a6:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    a9a8:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a9ac:	f8df 8050 	ldr.w	r8, [pc, #80]	; aa00 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    a9b0:	b914      	cbnz	r4, a9b8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    a9b2:	4638      	mov	r0, r7
    a9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    a9b8:	fa94 f5a4 	rbit	r5, r4
    a9bc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    a9c0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a9c4:	012e      	lsls	r6, r5, #4
    a9c6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    a9ca:	ea6f 0a03 	mvn.w	sl, r3
    a9ce:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a9d2:	7b2b      	ldrb	r3, [r5, #12]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d0eb      	beq.n	a9b0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a9d8:	f858 3006 	ldr.w	r3, [r8, r6]
    a9dc:	691b      	ldr	r3, [r3, #16]
    a9de:	b94b      	cbnz	r3, a9f4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    a9e0:	4446      	add	r6, r8
			log_backend_enable(backend,
    a9e2:	6873      	ldr	r3, [r6, #4]
    a9e4:	2204      	movs	r2, #4
    a9e6:	4628      	mov	r0, r5
    a9e8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a9ea:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    a9ee:	f000 fa4d 	bl	ae8c <log_backend_enable>
    a9f2:	e7dd      	b.n	a9b0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    a9f4:	4628      	mov	r0, r5
    a9f6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a9f8:	2800      	cmp	r0, #0
    a9fa:	d1d9      	bne.n	a9b0 <activate_foreach_backend+0x10>
    a9fc:	e7f0      	b.n	a9e0 <activate_foreach_backend+0x40>
    a9fe:	bf00      	nop
    aa00:	0001e634 	.word	0x0001e634

0000aa04 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    aa04:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    aa06:	2200      	movs	r2, #0
{
    aa08:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    aa0a:	490f      	ldr	r1, [pc, #60]	; (aa48 <enable_logger+0x44>)
    aa0c:	480f      	ldr	r0, [pc, #60]	; (aa4c <enable_logger+0x48>)
    aa0e:	f013 f9d5 	bl	1ddbc <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    aa12:	2200      	movs	r2, #0
    aa14:	2300      	movs	r3, #0
    aa16:	2400      	movs	r4, #0
    aa18:	e9cd 2306 	strd	r2, r3, [sp, #24]
    aa1c:	230e      	movs	r3, #14
    aa1e:	4d0c      	ldr	r5, [pc, #48]	; (aa50 <enable_logger+0x4c>)
    aa20:	e9cd 3403 	strd	r3, r4, [sp, #12]
    aa24:	f44f 7240 	mov.w	r2, #768	; 0x300
    aa28:	4628      	mov	r0, r5
    aa2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    aa2e:	4b09      	ldr	r3, [pc, #36]	; (aa54 <enable_logger+0x50>)
    aa30:	4909      	ldr	r1, [pc, #36]	; (aa58 <enable_logger+0x54>)
    aa32:	9400      	str	r4, [sp, #0]
    aa34:	f00c fd36 	bl	174a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    aa38:	4908      	ldr	r1, [pc, #32]	; (aa5c <enable_logger+0x58>)
    aa3a:	4628      	mov	r0, r5
    aa3c:	f012 fe7f 	bl	1d73e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    aa40:	4620      	mov	r0, r4
    aa42:	b009      	add	sp, #36	; 0x24
    aa44:	bd30      	pop	{r4, r5, pc}
    aa46:	bf00      	nop
    aa48:	0000aa61 	.word	0x0000aa61
    aa4c:	20008f48 	.word	0x20008f48
    aa50:	20008ab8 	.word	0x20008ab8
    aa54:	0000ad39 	.word	0x0000ad39
    aa58:	2000a148 	.word	0x2000a148
    aa5c:	0001f34a 	.word	0x0001f34a

0000aa60 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    aa60:	4801      	ldr	r0, [pc, #4]	; (aa68 <log_process_thread_timer_expiry_fn+0x8>)
    aa62:	f00c bead 	b.w	177c0 <z_impl_k_sem_give>
    aa66:	bf00      	nop
    aa68:	200085ac 	.word	0x200085ac

0000aa6c <z_log_init>:
{
    aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa70:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    aa72:	481f      	ldr	r0, [pc, #124]	; (aaf0 <z_log_init+0x84>)
{
    aa74:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    aa76:	f00e feff 	bl	19878 <atomic_inc>
    aa7a:	4606      	mov	r6, r0
    aa7c:	2800      	cmp	r0, #0
    aa7e:	d030      	beq.n	aae2 <z_log_init+0x76>
	uint32_t mask = 0;
    aa80:	2500      	movs	r5, #0
}
    aa82:	4628      	mov	r0, r5
    aa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    aa88:	7b23      	ldrb	r3, [r4, #12]
    aa8a:	b173      	cbz	r3, aaaa <z_log_init+0x3e>
	if (backend->api->init) {
    aa8c:	6823      	ldr	r3, [r4, #0]
    aa8e:	68db      	ldr	r3, [r3, #12]
    aa90:	b10b      	cbz	r3, aa96 <z_log_init+0x2a>
		backend->api->init(backend);
    aa92:	4620      	mov	r0, r4
    aa94:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    aa96:	6823      	ldr	r3, [r4, #0]
    aa98:	691b      	ldr	r3, [r3, #16]
    aa9a:	b9d3      	cbnz	r3, aad2 <z_log_init+0x66>
				log_backend_enable(backend,
    aa9c:	6863      	ldr	r3, [r4, #4]
    aa9e:	2204      	movs	r2, #4
    aaa0:	4620      	mov	r0, r4
    aaa2:	6819      	ldr	r1, [r3, #0]
    aaa4:	f000 f9f2 	bl	ae8c <log_backend_enable>
			i++;
    aaa8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aaaa:	3410      	adds	r4, #16
    aaac:	454c      	cmp	r4, r9
    aaae:	d3eb      	bcc.n	aa88 <z_log_init+0x1c>
	if (blocking) {
    aab0:	f1b8 0f00 	cmp.w	r8, #0
    aab4:	d0e5      	beq.n	aa82 <z_log_init+0x16>
		while (mask) {
    aab6:	2d00      	cmp	r5, #0
    aab8:	d0e2      	beq.n	aa80 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    aaba:	4628      	mov	r0, r5
    aabc:	f7ff ff70 	bl	a9a0 <activate_foreach_backend>
    aac0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    aac2:	2f00      	cmp	r7, #0
    aac4:	d0f7      	beq.n	aab6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    aac6:	2100      	movs	r1, #0
    aac8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    aacc:	f00d fb96 	bl	181fc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    aad0:	e7f1      	b.n	aab6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    aad2:	4620      	mov	r0, r4
    aad4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    aad6:	2800      	cmp	r0, #0
    aad8:	d0e0      	beq.n	aa9c <z_log_init+0x30>
				mask |= BIT(i);
    aada:	fa0a f306 	lsl.w	r3, sl, r6
    aade:	431d      	orrs	r5, r3
    aae0:	e7e2      	b.n	aaa8 <z_log_init+0x3c>
	uint32_t mask = 0;
    aae2:	4605      	mov	r5, r0
				mask |= BIT(i);
    aae4:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aae8:	4c02      	ldr	r4, [pc, #8]	; (aaf4 <z_log_init+0x88>)
    aaea:	f8df 900c 	ldr.w	r9, [pc, #12]	; aaf8 <z_log_init+0x8c>
    aaee:	e7dd      	b.n	aaac <z_log_init+0x40>
    aaf0:	200097cc 	.word	0x200097cc
    aaf4:	0001e634 	.word	0x0001e634
    aaf8:	0001e644 	.word	0x0001e644

0000aafc <log_format_func_t_get>:
}
    aafc:	4b01      	ldr	r3, [pc, #4]	; (ab04 <log_format_func_t_get+0x8>)
    aafe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ab02:	4770      	bx	lr
    ab04:	0001e81c 	.word	0x0001e81c

0000ab08 <log_set_timestamp_func>:
{
    ab08:	b508      	push	{r3, lr}
    ab0a:	4603      	mov	r3, r0
    ab0c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    ab0e:	b12b      	cbz	r3, ab1c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    ab10:	4a04      	ldr	r2, [pc, #16]	; (ab24 <log_set_timestamp_func+0x1c>)
    ab12:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    ab14:	f000 fc6c 	bl	b3f0 <log_output_timestamp_freq_set>
	return 0;
    ab18:	2000      	movs	r0, #0
}
    ab1a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    ab1c:	f06f 0015 	mvn.w	r0, #21
    ab20:	e7fb      	b.n	ab1a <log_set_timestamp_func+0x12>
    ab22:	bf00      	nop
    ab24:	20008208 	.word	0x20008208

0000ab28 <z_log_notify_backend_enabled>:
{
    ab28:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    ab2a:	4c04      	ldr	r4, [pc, #16]	; (ab3c <z_log_notify_backend_enabled+0x14>)
    ab2c:	7823      	ldrb	r3, [r4, #0]
    ab2e:	b913      	cbnz	r3, ab36 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    ab30:	4803      	ldr	r0, [pc, #12]	; (ab40 <z_log_notify_backend_enabled+0x18>)
    ab32:	f00c fe45 	bl	177c0 <z_impl_k_sem_give>
	backend_attached = true;
    ab36:	2301      	movs	r3, #1
    ab38:	7023      	strb	r3, [r4, #0]
}
    ab3a:	bd10      	pop	{r4, pc}
    ab3c:	20009c59 	.word	0x20009c59
    ab40:	200085ac 	.word	0x200085ac

0000ab44 <z_log_dropped>:
{
    ab44:	b510      	push	{r4, lr}
    ab46:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    ab48:	4806      	ldr	r0, [pc, #24]	; (ab64 <z_log_dropped+0x20>)
    ab4a:	f00e fe95 	bl	19878 <atomic_inc>
	if (buffered) {
    ab4e:	b13c      	cbz	r4, ab60 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ab50:	4b05      	ldr	r3, [pc, #20]	; (ab68 <z_log_dropped+0x24>)
    ab52:	e8d3 1fef 	ldaex	r1, [r3]
    ab56:	3901      	subs	r1, #1
    ab58:	e8c3 1fe2 	stlex	r2, r1, [r3]
    ab5c:	2a00      	cmp	r2, #0
    ab5e:	d1f8      	bne.n	ab52 <z_log_dropped+0xe>
}
    ab60:	bd10      	pop	{r4, pc}
    ab62:	bf00      	nop
    ab64:	200097c4 	.word	0x200097c4
    ab68:	200097c8 	.word	0x200097c8

0000ab6c <z_log_dropped_read_and_clear>:
}
    ab6c:	2000      	movs	r0, #0
    ab6e:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ab70:	4b03      	ldr	r3, [pc, #12]	; (ab80 <z_log_dropped_read_and_clear+0x14>)
    ab72:	e8d3 0fef 	ldaex	r0, [r3]
    ab76:	e8c3 1fe2 	stlex	r2, r1, [r3]
    ab7a:	2a00      	cmp	r2, #0
    ab7c:	d1f9      	bne.n	ab72 <z_log_dropped_read_and_clear+0x6>
    ab7e:	4770      	bx	lr
    ab80:	200097c4 	.word	0x200097c4

0000ab84 <dropped_notify>:
{
    ab84:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    ab86:	f7ff fff1 	bl	ab6c <z_log_dropped_read_and_clear>
    ab8a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ab8c:	4c07      	ldr	r4, [pc, #28]	; (abac <dropped_notify+0x28>)
    ab8e:	4e08      	ldr	r6, [pc, #32]	; (abb0 <dropped_notify+0x2c>)
    ab90:	42b4      	cmp	r4, r6
    ab92:	d300      	bcc.n	ab96 <dropped_notify+0x12>
}
    ab94:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ab96:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ab98:	795b      	ldrb	r3, [r3, #5]
    ab9a:	b12b      	cbz	r3, aba8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    ab9c:	6823      	ldr	r3, [r4, #0]
    ab9e:	685b      	ldr	r3, [r3, #4]
    aba0:	b113      	cbz	r3, aba8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    aba2:	4629      	mov	r1, r5
    aba4:	4620      	mov	r0, r4
    aba6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aba8:	3410      	adds	r4, #16
    abaa:	e7f1      	b.n	ab90 <dropped_notify+0xc>
    abac:	0001e634 	.word	0x0001e634
    abb0:	0001e644 	.word	0x0001e644

0000abb4 <z_log_msg_init>:
{
    abb4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    abb6:	4c04      	ldr	r4, [pc, #16]	; (abc8 <z_log_msg_init+0x14>)
    abb8:	4904      	ldr	r1, [pc, #16]	; (abcc <z_log_msg_init+0x18>)
    abba:	4620      	mov	r0, r4
    abbc:	f00e fb07 	bl	191ce <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    abc0:	4b03      	ldr	r3, [pc, #12]	; (abd0 <z_log_msg_init+0x1c>)
    abc2:	601c      	str	r4, [r3, #0]
}
    abc4:	bd10      	pop	{r4, pc}
    abc6:	bf00      	nop
    abc8:	200084d4 	.word	0x200084d4
    abcc:	0001e808 	.word	0x0001e808
    abd0:	200097bc 	.word	0x200097bc

0000abd4 <log_core_init>:
{
    abd4:	b508      	push	{r3, lr}
	panic_mode = false;
    abd6:	2300      	movs	r3, #0
    abd8:	4a07      	ldr	r2, [pc, #28]	; (abf8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    abda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    abde:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    abe0:	4a06      	ldr	r2, [pc, #24]	; (abfc <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    abe2:	4807      	ldr	r0, [pc, #28]	; (ac00 <log_core_init+0x2c>)
	dropped_cnt = 0;
    abe4:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    abe6:	4a07      	ldr	r2, [pc, #28]	; (ac04 <log_core_init+0x30>)
    abe8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    abea:	f7ff ff8d 	bl	ab08 <log_set_timestamp_func>
}
    abee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    abf2:	f7ff bfdf 	b.w	abb4 <z_log_msg_init>
    abf6:	bf00      	nop
    abf8:	20009c5a 	.word	0x20009c5a
    abfc:	200097c4 	.word	0x200097c4
    ac00:	00019875 	.word	0x00019875
    ac04:	200097c8 	.word	0x200097c8

0000ac08 <z_log_msg_alloc>:
{
    ac08:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    ac0a:	2200      	movs	r2, #0
    ac0c:	2300      	movs	r3, #0
    ac0e:	4801      	ldr	r0, [pc, #4]	; (ac14 <z_log_msg_alloc+0xc>)
    ac10:	f00e bafe 	b.w	19210 <mpsc_pbuf_alloc>
    ac14:	200084d4 	.word	0x200084d4

0000ac18 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    ac18:	4801      	ldr	r0, [pc, #4]	; (ac20 <z_log_msg_local_claim+0x8>)
    ac1a:	f00e bb97 	b.w	1934c <mpsc_pbuf_claim>
    ac1e:	bf00      	nop
    ac20:	200084d4 	.word	0x200084d4

0000ac24 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    ac24:	4b02      	ldr	r3, [pc, #8]	; (ac30 <z_log_msg_free+0xc>)
{
    ac26:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    ac28:	6818      	ldr	r0, [r3, #0]
    ac2a:	f00e bbe1 	b.w	193f0 <mpsc_pbuf_free>
    ac2e:	bf00      	nop
    ac30:	200097bc 	.word	0x200097bc

0000ac34 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    ac34:	4801      	ldr	r0, [pc, #4]	; (ac3c <z_log_msg_pending+0x8>)
    ac36:	f00e bc17 	b.w	19468 <mpsc_pbuf_is_pending>
    ac3a:	bf00      	nop
    ac3c:	200084d4 	.word	0x200084d4

0000ac40 <z_impl_log_process>:
{
    ac40:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    ac42:	4b26      	ldr	r3, [pc, #152]	; (acdc <z_impl_log_process+0x9c>)
    ac44:	7818      	ldrb	r0, [r3, #0]
    ac46:	2800      	cmp	r0, #0
    ac48:	d047      	beq.n	acda <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    ac4a:	f7ff ffe5 	bl	ac18 <z_log_msg_local_claim>
	if (msg) {
    ac4e:	4605      	mov	r5, r0
    ac50:	b170      	cbz	r0, ac70 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ac52:	4b23      	ldr	r3, [pc, #140]	; (ace0 <z_impl_log_process+0xa0>)
    ac54:	e8d3 1fef 	ldaex	r1, [r3]
    ac58:	3901      	subs	r1, #1
    ac5a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    ac5e:	2a00      	cmp	r2, #0
    ac60:	d1f8      	bne.n	ac54 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ac62:	4c20      	ldr	r4, [pc, #128]	; (ace4 <z_impl_log_process+0xa4>)
    ac64:	4e20      	ldr	r6, [pc, #128]	; (ace8 <z_impl_log_process+0xa8>)
    ac66:	42b4      	cmp	r4, r6
    ac68:	d32d      	bcc.n	acc6 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    ac6a:	4628      	mov	r0, r5
    ac6c:	f7ff ffda 	bl	ac24 <z_log_msg_free>
	return dropped_cnt > 0;
    ac70:	4b1e      	ldr	r3, [pc, #120]	; (acec <z_impl_log_process+0xac>)
    ac72:	4c1f      	ldr	r4, [pc, #124]	; (acf0 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    ac74:	681b      	ldr	r3, [r3, #0]
    ac76:	2b00      	cmp	r3, #0
    ac78:	dd19      	ble.n	acae <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    ac7a:	f013 f877 	bl	1dd6c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    ac7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ac82:	fba0 0302 	umull	r0, r3, r0, r2
    ac86:	fb02 3101 	mla	r1, r2, r1, r3
    ac8a:	0bc3      	lsrs	r3, r0, #15
    ac8c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    ac90:	e9d4 2000 	ldrd	r2, r0, [r4]
    ac94:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    ac96:	f240 32e9 	movw	r2, #1001	; 0x3e9
    ac9a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    ac9e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    aca2:	4293      	cmp	r3, r2
    aca4:	f171 0100 	sbcs.w	r1, r1, #0
    aca8:	d301      	bcc.n	acae <z_impl_log_process+0x6e>
				dropped_notify();
    acaa:	f7ff ff6b 	bl	ab84 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    acae:	e9d4 3200 	ldrd	r3, r2, [r4]
    acb2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    acb6:	f142 0200 	adc.w	r2, r2, #0
    acba:	e9c4 3200 	strd	r3, r2, [r4]
}
    acbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    acc2:	f7ff bfb7 	b.w	ac34 <z_log_msg_pending>
	return backend->cb->active;
    acc6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    acc8:	795b      	ldrb	r3, [r3, #5]
    acca:	b123      	cbz	r3, acd6 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    accc:	6823      	ldr	r3, [r4, #0]
    acce:	4629      	mov	r1, r5
    acd0:	4620      	mov	r0, r4
    acd2:	681b      	ldr	r3, [r3, #0]
    acd4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    acd6:	3410      	adds	r4, #16
    acd8:	e7c5      	b.n	ac66 <z_impl_log_process+0x26>
}
    acda:	bd70      	pop	{r4, r5, r6, pc}
    acdc:	20009c59 	.word	0x20009c59
    ace0:	200097c8 	.word	0x200097c8
    ace4:	0001e634 	.word	0x0001e634
    ace8:	0001e644 	.word	0x0001e644
    acec:	200097c4 	.word	0x200097c4
    acf0:	20008f40 	.word	0x20008f40

0000acf4 <z_impl_log_panic>:
{
    acf4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    acf6:	4d0d      	ldr	r5, [pc, #52]	; (ad2c <z_impl_log_panic+0x38>)
    acf8:	7829      	ldrb	r1, [r5, #0]
    acfa:	b961      	cbnz	r1, ad16 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    acfc:	2001      	movs	r0, #1
    acfe:	f7ff feb5 	bl	aa6c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ad02:	4c0b      	ldr	r4, [pc, #44]	; (ad30 <z_impl_log_panic+0x3c>)
    ad04:	4e0b      	ldr	r6, [pc, #44]	; (ad34 <z_impl_log_panic+0x40>)
    ad06:	42b4      	cmp	r4, r6
    ad08:	d306      	bcc.n	ad18 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    ad0a:	f7ff ff99 	bl	ac40 <z_impl_log_process>
		while (log_process() == true) {
    ad0e:	2800      	cmp	r0, #0
    ad10:	d1fb      	bne.n	ad0a <z_impl_log_panic+0x16>
	panic_mode = true;
    ad12:	2301      	movs	r3, #1
    ad14:	702b      	strb	r3, [r5, #0]
}
    ad16:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    ad18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ad1a:	795b      	ldrb	r3, [r3, #5]
    ad1c:	b11b      	cbz	r3, ad26 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    ad1e:	6823      	ldr	r3, [r4, #0]
    ad20:	4620      	mov	r0, r4
    ad22:	689b      	ldr	r3, [r3, #8]
    ad24:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ad26:	3410      	adds	r4, #16
    ad28:	e7ed      	b.n	ad06 <z_impl_log_panic+0x12>
    ad2a:	bf00      	nop
    ad2c:	20009c5a 	.word	0x20009c5a
    ad30:	0001e634 	.word	0x0001e634
    ad34:	0001e644 	.word	0x0001e644

0000ad38 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    ad38:	2100      	movs	r1, #0
{
    ad3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    ad3e:	4608      	mov	r0, r1
    ad40:	f7ff fe94 	bl	aa6c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ad44:	4604      	mov	r4, r0
    ad46:	b348      	cbz	r0, ad9c <log_process_thread_func+0x64>
    ad48:	f240 6867 	movw	r8, #1639	; 0x667
    ad4c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    ad50:	f00d fa6e 	bl	18230 <z_impl_z_current_get>
	proc_tid = process_tid;
    ad54:	4b1a      	ldr	r3, [pc, #104]	; (adc0 <log_process_thread_func+0x88>)
    ad56:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ad58:	b130      	cbz	r0, ad68 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ad5a:	4b1a      	ldr	r3, [pc, #104]	; (adc4 <log_process_thread_func+0x8c>)
	    process_tid &&
    ad5c:	681b      	ldr	r3, [r3, #0]
    ad5e:	2b09      	cmp	r3, #9
    ad60:	dd02      	ble.n	ad68 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    ad62:	4819      	ldr	r0, [pc, #100]	; (adc8 <log_process_thread_func+0x90>)
    ad64:	f00c fd2c 	bl	177c0 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ad68:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ad6a:	4f18      	ldr	r7, [pc, #96]	; (adcc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    ad6c:	f8df a058 	ldr.w	sl, [pc, #88]	; adc8 <log_process_thread_func+0x90>
		if (activate_mask) {
    ad70:	b144      	cbz	r4, ad84 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    ad72:	4620      	mov	r0, r4
    ad74:	f7ff fe14 	bl	a9a0 <activate_foreach_backend>
			if (!activate_mask) {
    ad78:	4604      	mov	r4, r0
    ad7a:	b918      	cbnz	r0, ad84 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    ad7c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ad80:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    ad84:	f7ff ff5c 	bl	ac40 <z_impl_log_process>
		if (log_process() == false) {
    ad88:	4606      	mov	r6, r0
    ad8a:	b928      	cbnz	r0, ad98 <log_process_thread_func+0x60>
			if (processed_any) {
    ad8c:	b9b5      	cbnz	r5, adbc <log_process_thread_func+0x84>
    ad8e:	4642      	mov	r2, r8
    ad90:	464b      	mov	r3, r9
    ad92:	4650      	mov	r0, sl
    ad94:	f00c fd3a 	bl	1780c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ad98:	4635      	mov	r5, r6
    ad9a:	e7e9      	b.n	ad70 <log_process_thread_func+0x38>
    ad9c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ada0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    ada4:	e7d4      	b.n	ad50 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    ada6:	682b      	ldr	r3, [r5, #0]
    ada8:	699b      	ldr	r3, [r3, #24]
    adaa:	b11b      	cbz	r3, adb4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    adac:	2200      	movs	r2, #0
    adae:	4628      	mov	r0, r5
    adb0:	4611      	mov	r1, r2
    adb2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    adb4:	3510      	adds	r5, #16
    adb6:	42bd      	cmp	r5, r7
    adb8:	d3f5      	bcc.n	ada6 <log_process_thread_func+0x6e>
    adba:	e7e8      	b.n	ad8e <log_process_thread_func+0x56>
    adbc:	4d04      	ldr	r5, [pc, #16]	; (add0 <log_process_thread_func+0x98>)
    adbe:	e7fa      	b.n	adb6 <log_process_thread_func+0x7e>
    adc0:	200097c0 	.word	0x200097c0
    adc4:	200097c8 	.word	0x200097c8
    adc8:	200085ac 	.word	0x200085ac
    adcc:	0001e644 	.word	0x0001e644
    add0:	0001e634 	.word	0x0001e634

0000add4 <z_log_msg_post_finalize>:
{
    add4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    add6:	4818      	ldr	r0, [pc, #96]	; (ae38 <z_log_msg_post_finalize+0x64>)
    add8:	f00e fd4e 	bl	19878 <atomic_inc>
	if (panic_mode) {
    addc:	4b17      	ldr	r3, [pc, #92]	; (ae3c <z_log_msg_post_finalize+0x68>)
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	b17b      	cbz	r3, ae02 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    ade2:	f04f 0320 	mov.w	r3, #32
    ade6:	f3ef 8411 	mrs	r4, BASEPRI
    adea:	f383 8812 	msr	BASEPRI_MAX, r3
    adee:	f3bf 8f6f 	isb	sy
    adf2:	f7ff ff25 	bl	ac40 <z_impl_log_process>
	__asm__ volatile(
    adf6:	f384 8811 	msr	BASEPRI, r4
    adfa:	f3bf 8f6f 	isb	sy
}
    adfe:	b002      	add	sp, #8
    ae00:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    ae02:	4b0f      	ldr	r3, [pc, #60]	; (ae40 <z_log_msg_post_finalize+0x6c>)
    ae04:	681b      	ldr	r3, [r3, #0]
    ae06:	2b00      	cmp	r3, #0
    ae08:	d0f9      	beq.n	adfe <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    ae0a:	b950      	cbnz	r0, ae22 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    ae0c:	2200      	movs	r2, #0
    ae0e:	2300      	movs	r3, #0
    ae10:	480c      	ldr	r0, [pc, #48]	; (ae44 <z_log_msg_post_finalize+0x70>)
    ae12:	e9cd 2300 	strd	r2, r3, [sp]
    ae16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ae1a:	2300      	movs	r3, #0
    ae1c:	f00d fc4c 	bl	186b8 <z_impl_k_timer_start>
    ae20:	e7ed      	b.n	adfe <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ae22:	280a      	cmp	r0, #10
    ae24:	d1eb      	bne.n	adfe <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    ae26:	4807      	ldr	r0, [pc, #28]	; (ae44 <z_log_msg_post_finalize+0x70>)
    ae28:	f012 ffd4 	bl	1ddd4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ae2c:	4806      	ldr	r0, [pc, #24]	; (ae48 <z_log_msg_post_finalize+0x74>)
}
    ae2e:	b002      	add	sp, #8
    ae30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae34:	f00c bcc4 	b.w	177c0 <z_impl_k_sem_give>
    ae38:	200097c8 	.word	0x200097c8
    ae3c:	20009c5a 	.word	0x20009c5a
    ae40:	200097c0 	.word	0x200097c0
    ae44:	20008f48 	.word	0x20008f48
    ae48:	200085ac 	.word	0x200085ac

0000ae4c <z_log_msg_commit>:
{
    ae4c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    ae4e:	4b06      	ldr	r3, [pc, #24]	; (ae68 <z_log_msg_commit+0x1c>)
{
    ae50:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ae52:	681b      	ldr	r3, [r3, #0]
    ae54:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    ae56:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    ae58:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    ae5a:	4804      	ldr	r0, [pc, #16]	; (ae6c <z_log_msg_commit+0x20>)
    ae5c:	f00e fa56 	bl	1930c <mpsc_pbuf_commit>
}
    ae60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    ae64:	f7ff bfb6 	b.w	add4 <z_log_msg_post_finalize>
    ae68:	20008208 	.word	0x20008208
    ae6c:	200084d4 	.word	0x200084d4

0000ae70 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    ae70:	4a04      	ldr	r2, [pc, #16]	; (ae84 <log_source_name_get+0x14>)
    ae72:	4b05      	ldr	r3, [pc, #20]	; (ae88 <log_source_name_get+0x18>)
    ae74:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    ae76:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    ae7a:	bf34      	ite	cc
    ae7c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    ae80:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    ae82:	4770      	bx	lr
    ae84:	0001e504 	.word	0x0001e504
    ae88:	0001e634 	.word	0x0001e634

0000ae8c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    ae8c:	4b08      	ldr	r3, [pc, #32]	; (aeb0 <log_backend_enable+0x24>)
{
    ae8e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    ae90:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    ae92:	6844      	ldr	r4, [r0, #4]
    ae94:	111b      	asrs	r3, r3, #4
    ae96:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    ae98:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    ae9a:	6843      	ldr	r3, [r0, #4]
    ae9c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    ae9e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    aea0:	6843      	ldr	r3, [r0, #4]
    aea2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    aea4:	6843      	ldr	r3, [r0, #4]
    aea6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    aea8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    aeaa:	f7ff be3d 	b.w	ab28 <z_log_notify_backend_enabled>
    aeae:	bf00      	nop
    aeb0:	0001e634 	.word	0x0001e634

0000aeb4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aeb8:	b08f      	sub	sp, #60	; 0x3c
    aeba:	f3c1 284a 	ubfx	r8, r1, #9, #11
    aebe:	af04      	add	r7, sp, #16
    aec0:	460d      	mov	r5, r1
    aec2:	4691      	mov	r9, r2
    aec4:	60b8      	str	r0, [r7, #8]
    aec6:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    aec8:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    aeca:	f1b8 0f00 	cmp.w	r8, #0
    aece:	d063      	beq.n	af98 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    aed0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    aed2:	f04f 0b04 	mov.w	fp, #4
    aed6:	f04f 0a0a 	mov.w	sl, #10
    aeda:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    aede:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    aee2:	e9c7 6607 	strd	r6, r6, [r7, #28]
    aee6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    aee8:	9301      	str	r3, [sp, #4]
    aeea:	f8cd b008 	str.w	fp, [sp, #8]
    aeee:	f8cd a000 	str.w	sl, [sp]
    aef2:	f107 031c 	add.w	r3, r7, #28
    aef6:	4632      	mov	r2, r6
    aef8:	4648      	mov	r0, r9
    aefa:	68f9      	ldr	r1, [r7, #12]
    aefc:	f7fe f9b2 	bl	9264 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    af00:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    af04:	4603      	mov	r3, r0
    af06:	d31c      	bcc.n	af42 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    af08:	466c      	mov	r4, sp
    af0a:	b08a      	sub	sp, #40	; 0x28
    af0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    af10:	ab04      	add	r3, sp, #16
    af12:	4826      	ldr	r0, [pc, #152]	; (afac <z_impl_z_log_msg_static_create+0xf8>)
    af14:	461a      	mov	r2, r3
    af16:	e9c3 0105 	strd	r0, r1, [r3, #20]
    af1a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    af1e:	61d9      	str	r1, [r3, #28]
    af20:	f44f 7100 	mov.w	r1, #512	; 0x200
    af24:	8419      	strh	r1, [r3, #32]
    af26:	4b22      	ldr	r3, [pc, #136]	; (afb0 <z_impl_z_log_msg_static_create+0xfc>)
    af28:	f842 3f10 	str.w	r3, [r2, #16]!
    af2c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    af30:	4633      	mov	r3, r6
    af32:	4820      	ldr	r0, [pc, #128]	; (afb4 <z_impl_z_log_msg_static_create+0x100>)
    af34:	f7ff ffbe 	bl	aeb4 <z_impl_z_log_msg_static_create>
    af38:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    af3a:	372c      	adds	r7, #44	; 0x2c
    af3c:	46bd      	mov	sp, r7
    af3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    af42:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    af46:	f104 0017 	add.w	r0, r4, #23
    af4a:	4418      	add	r0, r3
    af4c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    af50:	0880      	lsrs	r0, r0, #2
    af52:	603b      	str	r3, [r7, #0]
    af54:	f7ff fe58 	bl	ac08 <z_log_msg_alloc>
    af58:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    af5c:	4604      	mov	r4, r0
    af5e:	b190      	cbz	r0, af86 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    af60:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    af62:	f100 0110 	add.w	r1, r0, #16
    af66:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    af6a:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    af6e:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    af70:	e9cd a300 	strd	sl, r3, [sp]
    af74:	f8cd b008 	str.w	fp, [sp, #8]
    af78:	4648      	mov	r0, r9
    af7a:	4a0f      	ldr	r2, [pc, #60]	; (afb8 <z_impl_z_log_msg_static_create+0x104>)
    af7c:	68f9      	ldr	r1, [r7, #12]
    af7e:	f107 031c 	add.w	r3, r7, #28
    af82:	f7fe f96f 	bl	9264 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    af86:	f368 2553 	bfi	r5, r8, #9, #11
    af8a:	462a      	mov	r2, r5
    af8c:	4620      	mov	r0, r4
    af8e:	687b      	ldr	r3, [r7, #4]
    af90:	68b9      	ldr	r1, [r7, #8]
    af92:	f00e fca3 	bl	198dc <z_log_msg_finalize>
    af96:	e7d0      	b.n	af3a <z_impl_z_log_msg_static_create+0x86>
    af98:	f104 0017 	add.w	r0, r4, #23
    af9c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    afa0:	0880      	lsrs	r0, r0, #2
    afa2:	f7ff fe31 	bl	ac08 <z_log_msg_alloc>
    afa6:	4604      	mov	r4, r0
    afa8:	e7ed      	b.n	af86 <z_impl_z_log_msg_static_create+0xd2>
    afaa:	bf00      	nop
    afac:	0001f35f 	.word	0x0001f35f
    afb0:	01000004 	.word	0x01000004
    afb4:	0001e5cc 	.word	0x0001e5cc
    afb8:	000198b1 	.word	0x000198b1

0000afbc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afc0:	b087      	sub	sp, #28
    afc2:	4604      	mov	r4, r0
    afc4:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    afc8:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    afcc:	460f      	mov	r7, r1
    afce:	4693      	mov	fp, r2
    afd0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    afd2:	b3a6      	cbz	r6, b03e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    afd4:	2110      	movs	r1, #16
    afd6:	4633      	mov	r3, r6
    afd8:	4652      	mov	r2, sl
    afda:	2000      	movs	r0, #0
    afdc:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    afe0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    afe4:	f7fd ff6a 	bl	8ebc <cbvprintf_package>
    afe8:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    afea:	f105 0017 	add.w	r0, r5, #23
    afee:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    aff0:	4b14      	ldr	r3, [pc, #80]	; (b044 <z_impl_z_log_msg_runtime_vcreate+0x88>)
    aff2:	f004 0407 	and.w	r4, r4, #7
    aff6:	f00b 0b07 	and.w	fp, fp, #7
    affa:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    affc:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    b000:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    b004:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    b008:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    b00a:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    b00c:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    b00e:	f7ff fdfb 	bl	ac08 <z_log_msg_alloc>
	struct log_msg_desc desc =
    b012:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    b016:	4605      	mov	r5, r0
    b018:	b140      	cbz	r0, b02c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    b01a:	b13e      	cbz	r6, b02c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    b01c:	4633      	mov	r3, r6
    b01e:	4652      	mov	r2, sl
    b020:	9903      	ldr	r1, [sp, #12]
    b022:	f8cd 9000 	str.w	r9, [sp]
    b026:	3010      	adds	r0, #16
    b028:	f7fd ff48 	bl	8ebc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    b02c:	4643      	mov	r3, r8
    b02e:	4622      	mov	r2, r4
    b030:	4639      	mov	r1, r7
    b032:	4628      	mov	r0, r5
	}
}
    b034:	b007      	add	sp, #28
    b036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    b03a:	f00e bc4f 	b.w	198dc <z_log_msg_finalize>
		plen = 0;
    b03e:	4631      	mov	r1, r6
    b040:	e7d3      	b.n	afea <z_impl_z_log_msg_runtime_vcreate+0x2e>
    b042:	bf00      	nop
    b044:	000ffe00 	.word	0x000ffe00

0000b048 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    b048:	b40e      	push	{r1, r2, r3}
    b04a:	b503      	push	{r0, r1, lr}
    b04c:	ab03      	add	r3, sp, #12
    b04e:	f853 2b04 	ldr.w	r2, [r3], #4
    b052:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b054:	4804      	ldr	r0, [pc, #16]	; (b068 <print_formatted+0x20>)
	va_start(args, fmt);
    b056:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b058:	f00e fc66 	bl	19928 <cbvprintf>
	va_end(args);

	return length;
}
    b05c:	b002      	add	sp, #8
    b05e:	f85d eb04 	ldr.w	lr, [sp], #4
    b062:	b003      	add	sp, #12
    b064:	4770      	bx	lr
    b066:	bf00      	nop
    b068:	00019951 	.word	0x00019951

0000b06c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    b06c:	06ca      	lsls	r2, r1, #27
    b06e:	d405      	bmi.n	b07c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    b070:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    b072:	bf4c      	ite	mi
    b074:	4902      	ldrmi	r1, [pc, #8]	; (b080 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    b076:	4903      	ldrpl	r1, [pc, #12]	; (b084 <newline_print+0x18>)
    b078:	f7ff bfe6 	b.w	b048 <print_formatted>
	}
}
    b07c:	4770      	bx	lr
    b07e:	bf00      	nop
    b080:	00021838 	.word	0x00021838
    b084:	00021837 	.word	0x00021837

0000b088 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b08c:	b089      	sub	sp, #36	; 0x24
    b08e:	469b      	mov	fp, r3
    b090:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    b094:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b098:	4604      	mov	r4, r0
    b09a:	9304      	str	r3, [sp, #16]
    b09c:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    b0a0:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    b0a2:	9b04      	ldr	r3, [sp, #16]
{
    b0a4:	460d      	mov	r5, r1
    b0a6:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	f000 8087 	beq.w	b1bc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    b0ae:	f006 0308 	and.w	r3, r6, #8
    b0b2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    b0b4:	f00e fbfa 	bl	198ac <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    b0b8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    b0bc:	4602      	mov	r2, r0
    b0be:	2800      	cmp	r0, #0
    b0c0:	d04b      	beq.n	b15a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    b0c2:	4620      	mov	r0, r4
    b0c4:	4985      	ldr	r1, [pc, #532]	; (b2dc <log_output_process+0x254>)
    b0c6:	f7ff ffbf 	bl	b048 <print_formatted>
    b0ca:	4680      	mov	r8, r0
	if (stamp) {
    b0cc:	f1ba 0f00 	cmp.w	sl, #0
    b0d0:	d008      	beq.n	b0e4 <log_output_process+0x5c>
	if (!format) {
    b0d2:	f016 0f44 	tst.w	r6, #68	; 0x44
    b0d6:	d142      	bne.n	b15e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    b0d8:	462a      	mov	r2, r5
    b0da:	4620      	mov	r0, r4
    b0dc:	4980      	ldr	r1, [pc, #512]	; (b2e0 <log_output_process+0x258>)
    b0de:	f7ff ffb3 	bl	b048 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    b0e2:	4480      	add	r8, r0
	if (color) {
    b0e4:	f006 0301 	and.w	r3, r6, #1
    b0e8:	b15b      	cbz	r3, b102 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    b0ea:	4b7e      	ldr	r3, [pc, #504]	; (b2e4 <log_output_process+0x25c>)
    b0ec:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    b0ee:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    b0f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    b0f4:	4b7c      	ldr	r3, [pc, #496]	; (b2e8 <log_output_process+0x260>)
    b0f6:	497d      	ldr	r1, [pc, #500]	; (b2ec <log_output_process+0x264>)
    b0f8:	2a00      	cmp	r2, #0
    b0fa:	bf08      	it	eq
    b0fc:	461a      	moveq	r2, r3
    b0fe:	f7ff ffa3 	bl	b048 <print_formatted>
	if (level_on) {
    b102:	f006 0308 	and.w	r3, r6, #8
    b106:	2b00      	cmp	r3, #0
    b108:	d055      	beq.n	b1b6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    b10a:	4b79      	ldr	r3, [pc, #484]	; (b2f0 <log_output_process+0x268>)
    b10c:	9a04      	ldr	r2, [sp, #16]
    b10e:	4620      	mov	r0, r4
    b110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b114:	4977      	ldr	r1, [pc, #476]	; (b2f4 <log_output_process+0x26c>)
    b116:	f7ff ff97 	bl	b048 <print_formatted>
    b11a:	4605      	mov	r5, r0
	if (domain) {
    b11c:	9b06      	ldr	r3, [sp, #24]
    b11e:	b12b      	cbz	r3, b12c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    b120:	461a      	mov	r2, r3
    b122:	4620      	mov	r0, r4
    b124:	4974      	ldr	r1, [pc, #464]	; (b2f8 <log_output_process+0x270>)
    b126:	f7ff ff8f 	bl	b048 <print_formatted>
    b12a:	4405      	add	r5, r0
	if (source) {
    b12c:	f1bb 0f00 	cmp.w	fp, #0
    b130:	d005      	beq.n	b13e <log_output_process+0xb6>
		total += print_formatted(output,
    b132:	465a      	mov	r2, fp
    b134:	4620      	mov	r0, r4
    b136:	4971      	ldr	r1, [pc, #452]	; (b2fc <log_output_process+0x274>)
    b138:	f7ff ff86 	bl	b048 <print_formatted>
    b13c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    b13e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    b140:	f1b9 0f00 	cmp.w	r9, #0
    b144:	d149      	bne.n	b1da <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    b146:	2f00      	cmp	r7, #0
    b148:	d14f      	bne.n	b1ea <log_output_process+0x162>
	if (color) {
    b14a:	07f3      	lsls	r3, r6, #31
    b14c:	f100 80c0 	bmi.w	b2d0 <log_output_process+0x248>
	newline_print(output, flags);
    b150:	4631      	mov	r1, r6
    b152:	4620      	mov	r0, r4
    b154:	f7ff ff8a 	bl	b06c <newline_print>
}
    b158:	e0b4      	b.n	b2c4 <log_output_process+0x23c>
	uint32_t length = 0U;
    b15a:	4680      	mov	r8, r0
    b15c:	e7b6      	b.n	b0cc <log_output_process+0x44>
	} else if (freq != 0U) {
    b15e:	4b68      	ldr	r3, [pc, #416]	; (b300 <log_output_process+0x278>)
    b160:	6818      	ldr	r0, [r3, #0]
    b162:	2800      	cmp	r0, #0
    b164:	d0bd      	beq.n	b0e2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    b166:	4b67      	ldr	r3, [pc, #412]	; (b304 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    b168:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    b16c:	681b      	ldr	r3, [r3, #0]
    b16e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b172:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    b176:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    b17a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    b17e:	fb0e f505 	mul.w	r5, lr, r5
    b182:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b186:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    b18a:	213c      	movs	r1, #60	; 0x3c
    b18c:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b190:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    b194:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    b198:	fb0e f505 	mul.w	r5, lr, r5
    b19c:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    b1a0:	fb01 2213 	mls	r2, r1, r3, r2
    b1a4:	4620      	mov	r0, r4
    b1a6:	9200      	str	r2, [sp, #0]
    b1a8:	e9cd c501 	strd	ip, r5, [sp, #4]
    b1ac:	4652      	mov	r2, sl
    b1ae:	4956      	ldr	r1, [pc, #344]	; (b308 <log_output_process+0x280>)
    b1b0:	f7ff ff4a 	bl	b048 <print_formatted>
    b1b4:	e795      	b.n	b0e2 <log_output_process+0x5a>
	int total = 0;
    b1b6:	f006 0508 	and.w	r5, r6, #8
    b1ba:	e7af      	b.n	b11c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b1bc:	f1bb 0f01 	cmp.w	fp, #1
    b1c0:	d106      	bne.n	b1d0 <log_output_process+0x148>
	if (package) {
    b1c2:	f1b9 0f00 	cmp.w	r9, #0
    b1c6:	d164      	bne.n	b292 <log_output_process+0x20a>
	if (data_len) {
    b1c8:	2f00      	cmp	r7, #0
    b1ca:	d07b      	beq.n	b2c4 <log_output_process+0x23c>
		prefix_offset = 0;
    b1cc:	2500      	movs	r5, #0
    b1ce:	e00c      	b.n	b1ea <log_output_process+0x162>
	if (package) {
    b1d0:	f1b9 0f00 	cmp.w	r9, #0
    b1d4:	d0f8      	beq.n	b1c8 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b1d6:	484d      	ldr	r0, [pc, #308]	; (b30c <log_output_process+0x284>)
    b1d8:	e05c      	b.n	b294 <log_output_process+0x20c>
		cb = out_func;
    b1da:	484d      	ldr	r0, [pc, #308]	; (b310 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    b1dc:	464b      	mov	r3, r9
    b1de:	4622      	mov	r2, r4
    b1e0:	494c      	ldr	r1, [pc, #304]	; (b314 <log_output_process+0x28c>)
    b1e2:	f00d fb50 	bl	18886 <cbpprintf_external>
	if (data_len) {
    b1e6:	2f00      	cmp	r7, #0
    b1e8:	d068      	beq.n	b2bc <log_output_process+0x234>
		print_formatted(output, " ");
    b1ea:	f8df 912c 	ldr.w	r9, [pc, #300]	; b318 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    b1ee:	f8df a12c 	ldr.w	sl, [pc, #300]	; b31c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b1f2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    b1f4:	4631      	mov	r1, r6
    b1f6:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b1f8:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    b1fa:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b1fe:	bf28      	it	cs
    b200:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    b204:	f7ff ff32 	bl	b06c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    b208:	455d      	cmp	r5, fp
    b20a:	dc45      	bgt.n	b298 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    b20c:	9b05      	ldr	r3, [sp, #20]
    b20e:	4651      	mov	r1, sl
    b210:	4620      	mov	r0, r4
    b212:	781a      	ldrb	r2, [r3, #0]
    b214:	f7ff ff18 	bl	b048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b218:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    b21c:	f01b 0f07 	tst.w	fp, #7
    b220:	d103      	bne.n	b22a <log_output_process+0x1a2>
			print_formatted(output, " ");
    b222:	4649      	mov	r1, r9
    b224:	4620      	mov	r0, r4
    b226:	f7ff ff0f 	bl	b048 <print_formatted>
		if (i < length) {
    b22a:	45d8      	cmp	r8, fp
    b22c:	d93b      	bls.n	b2a6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    b22e:	9b05      	ldr	r3, [sp, #20]
    b230:	4651      	mov	r1, sl
    b232:	4620      	mov	r0, r4
    b234:	f813 200b 	ldrb.w	r2, [r3, fp]
    b238:	f7ff ff06 	bl	b048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b23c:	f10b 0b01 	add.w	fp, fp, #1
    b240:	f1bb 0f10 	cmp.w	fp, #16
    b244:	d1ea      	bne.n	b21c <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b246:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    b24a:	4620      	mov	r0, r4
    b24c:	4934      	ldr	r1, [pc, #208]	; (b320 <log_output_process+0x298>)
    b24e:	f7ff fefb 	bl	b048 <print_formatted>
		if (i < length) {
    b252:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    b254:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    b256:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    b258:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    b25a:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    b25e:	295f      	cmp	r1, #95	; 0x5f
    b260:	bf28      	it	cs
    b262:	222e      	movcs	r2, #46	; 0x2e
    b264:	492f      	ldr	r1, [pc, #188]	; (b324 <log_output_process+0x29c>)
    b266:	f7ff feef 	bl	b048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b26a:	f10b 0b01 	add.w	fp, fp, #1
    b26e:	f1bb 0f10 	cmp.w	fp, #16
    b272:	d01d      	beq.n	b2b0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    b274:	f01b 0f07 	tst.w	fp, #7
    b278:	d103      	bne.n	b282 <log_output_process+0x1fa>
			print_formatted(output, " ");
    b27a:	4649      	mov	r1, r9
    b27c:	4620      	mov	r0, r4
    b27e:	f7ff fee3 	bl	b048 <print_formatted>
		if (i < length) {
    b282:	45d8      	cmp	r8, fp
    b284:	465a      	mov	r2, fp
    b286:	d8e5      	bhi.n	b254 <log_output_process+0x1cc>
			print_formatted(output, " ");
    b288:	4649      	mov	r1, r9
    b28a:	4620      	mov	r0, r4
    b28c:	f7ff fedc 	bl	b048 <print_formatted>
    b290:	e7eb      	b.n	b26a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    b292:	481f      	ldr	r0, [pc, #124]	; (b310 <log_output_process+0x288>)
		prefix_offset = 0;
    b294:	9d04      	ldr	r5, [sp, #16]
    b296:	e7a1      	b.n	b1dc <log_output_process+0x154>
		print_formatted(output, " ");
    b298:	4649      	mov	r1, r9
    b29a:	4620      	mov	r0, r4
    b29c:	f7ff fed4 	bl	b048 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    b2a0:	f10b 0b01 	add.w	fp, fp, #1
    b2a4:	e7b0      	b.n	b208 <log_output_process+0x180>
			print_formatted(output, "   ");
    b2a6:	4620      	mov	r0, r4
    b2a8:	491f      	ldr	r1, [pc, #124]	; (b328 <log_output_process+0x2a0>)
    b2aa:	f7ff fecd 	bl	b048 <print_formatted>
    b2ae:	e7c5      	b.n	b23c <log_output_process+0x1b4>
		data += length;
    b2b0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    b2b2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    b2b6:	4443      	add	r3, r8
    b2b8:	9305      	str	r3, [sp, #20]
	} while (len);
    b2ba:	d19a      	bne.n	b1f2 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    b2bc:	9b04      	ldr	r3, [sp, #16]
    b2be:	2b00      	cmp	r3, #0
    b2c0:	f47f af43 	bne.w	b14a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    b2c4:	4620      	mov	r0, r4
}
    b2c6:	b009      	add	sp, #36	; 0x24
    b2c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    b2cc:	f00e bb33 	b.w	19936 <log_output_flush>
		print_formatted(output, "%s", log_color);
    b2d0:	4620      	mov	r0, r4
    b2d2:	4a05      	ldr	r2, [pc, #20]	; (b2e8 <log_output_process+0x260>)
    b2d4:	4905      	ldr	r1, [pc, #20]	; (b2ec <log_output_process+0x264>)
    b2d6:	f7ff feb7 	bl	b048 <print_formatted>
}
    b2da:	e739      	b.n	b150 <log_output_process+0xc8>
    b2dc:	0001f3a3 	.word	0x0001f3a3
    b2e0:	0001f3a7 	.word	0x0001f3a7
    b2e4:	0001e82c 	.word	0x0001e82c
    b2e8:	0001f39e 	.word	0x0001f39e
    b2ec:	0001ff7c 	.word	0x0001ff7c
    b2f0:	0001e840 	.word	0x0001e840
    b2f4:	0001f3cc 	.word	0x0001f3cc
    b2f8:	0001f3d2 	.word	0x0001f3d2
    b2fc:	0001f3d6 	.word	0x0001f3d6
    b300:	200097d4 	.word	0x200097d4
    b304:	200097d0 	.word	0x200097d0
    b308:	0001f3b0 	.word	0x0001f3b0
    b30c:	0001997f 	.word	0x0001997f
    b310:	00019951 	.word	0x00019951
    b314:	00019929 	.word	0x00019929
    b318:	00021803 	.word	0x00021803
    b31c:	0001f3db 	.word	0x0001f3db
    b320:	0001f3e1 	.word	0x0001f3e1
    b324:	0001f3e3 	.word	0x0001f3e3
    b328:	00021801 	.word	0x00021801

0000b32c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    b330:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    b332:	684b      	ldr	r3, [r1, #4]
    b334:	4605      	mov	r5, r0
    b336:	460c      	mov	r4, r1
    b338:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    b33a:	688e      	ldr	r6, [r1, #8]
    b33c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    b33e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    b342:	b15b      	cbz	r3, b35c <log_output_msg_process+0x30>
    b344:	4a13      	ldr	r2, [pc, #76]	; (b394 <log_output_msg_process+0x68>)
    b346:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    b348:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b34c:	2900      	cmp	r1, #0
    b34e:	db1f      	blt.n	b390 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    b350:	7820      	ldrb	r0, [r4, #0]
    b352:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    b356:	f7ff fd8b 	bl	ae70 <log_source_name_get>
    b35a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    b35c:	4621      	mov	r1, r4
    b35e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    b362:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    b364:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    b368:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    b36a:	eb01 0402 	add.w	r4, r1, r2
    b36e:	bf08      	it	eq
    b370:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    b372:	f3c0 100b 	ubfx	r0, r0, #4, #12
    b376:	e9cd 0803 	strd	r0, r8, [sp, #12]
    b37a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b37e:	2200      	movs	r2, #0
    b380:	4631      	mov	r1, r6
    b382:	4628      	mov	r0, r5
    b384:	9700      	str	r7, [sp, #0]
    b386:	f7ff fe7f 	bl	b088 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    b38a:	b006      	add	sp, #24
    b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b390:	2300      	movs	r3, #0
    b392:	e7e3      	b.n	b35c <log_output_msg_process+0x30>
    b394:	0001e504 	.word	0x0001e504

0000b398 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b398:	f242 730f 	movw	r3, #9999	; 0x270f
{
    b39c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b39e:	428b      	cmp	r3, r1
    b3a0:	bf28      	it	cs
    b3a2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    b3a4:	6805      	ldr	r5, [r0, #0]
{
    b3a6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b3a8:	2105      	movs	r1, #5
    b3aa:	4668      	mov	r0, sp
    b3ac:	4a0d      	ldr	r2, [pc, #52]	; (b3e4 <log_output_dropped_process+0x4c>)
    b3ae:	f00d fae4 	bl	1897a <snprintk>
    b3b2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    b3b4:	6863      	ldr	r3, [r4, #4]
    b3b6:	4628      	mov	r0, r5
    b3b8:	220b      	movs	r2, #11
    b3ba:	685b      	ldr	r3, [r3, #4]
    b3bc:	490a      	ldr	r1, [pc, #40]	; (b3e8 <log_output_dropped_process+0x50>)
    b3be:	f00e faa6 	bl	1990e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    b3c2:	6863      	ldr	r3, [r4, #4]
    b3c4:	4632      	mov	r2, r6
    b3c6:	4669      	mov	r1, sp
    b3c8:	4628      	mov	r0, r5
    b3ca:	685b      	ldr	r3, [r3, #4]
    b3cc:	f00e fa9f 	bl	1990e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    b3d0:	6863      	ldr	r3, [r4, #4]
    b3d2:	221b      	movs	r2, #27
    b3d4:	4628      	mov	r0, r5
    b3d6:	685b      	ldr	r3, [r3, #4]
    b3d8:	4904      	ldr	r1, [pc, #16]	; (b3ec <log_output_dropped_process+0x54>)
    b3da:	f00e fa98 	bl	1990e <buffer_write>
		     output->control_block->ctx);
}
    b3de:	b002      	add	sp, #8
    b3e0:	bd70      	pop	{r4, r5, r6, pc}
    b3e2:	bf00      	nop
    b3e4:	0001fada 	.word	0x0001fada
    b3e8:	0001f402 	.word	0x0001f402
    b3ec:	0001f3e6 	.word	0x0001f3e6

0000b3f0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    b3f0:	2100      	movs	r1, #0
    b3f2:	2301      	movs	r3, #1
    b3f4:	4a06      	ldr	r2, [pc, #24]	; (b410 <log_output_timestamp_freq_set+0x20>)
    b3f6:	4290      	cmp	r0, r2
    b3f8:	d806      	bhi.n	b408 <log_output_timestamp_freq_set+0x18>
    b3fa:	4a06      	ldr	r2, [pc, #24]	; (b414 <log_output_timestamp_freq_set+0x24>)
    b3fc:	b901      	cbnz	r1, b400 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    b3fe:	2301      	movs	r3, #1
    b400:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    b402:	4b05      	ldr	r3, [pc, #20]	; (b418 <log_output_timestamp_freq_set+0x28>)
    b404:	6018      	str	r0, [r3, #0]
}
    b406:	4770      	bx	lr
		timestamp_div *= 2U;
    b408:	2101      	movs	r1, #1
		frequency /= 2U;
    b40a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    b40c:	005b      	lsls	r3, r3, #1
    b40e:	e7f2      	b.n	b3f6 <log_output_timestamp_freq_set+0x6>
    b410:	000f4240 	.word	0x000f4240
    b414:	200097d0 	.word	0x200097d0
    b418:	200097d4 	.word	0x200097d4

0000b41c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    b41c:	4b01      	ldr	r3, [pc, #4]	; (b424 <format_set+0x8>)
	return 0;
}
    b41e:	2000      	movs	r0, #0
	log_format_current = log_type;
    b420:	6019      	str	r1, [r3, #0]
}
    b422:	4770      	bx	lr
    b424:	200097ec 	.word	0x200097ec

0000b428 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    b428:	2201      	movs	r2, #1
    b42a:	4b02      	ldr	r3, [pc, #8]	; (b434 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    b42c:	4802      	ldr	r0, [pc, #8]	; (b438 <panic+0x10>)
    b42e:	701a      	strb	r2, [r3, #0]
    b430:	f00e ba81 	b.w	19936 <log_output_flush>
    b434:	20009c5c 	.word	0x20009c5c
    b438:	0001e870 	.word	0x0001e870

0000b43c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    b43c:	4801      	ldr	r0, [pc, #4]	; (b444 <dropped+0x8>)
    b43e:	f7ff bfab 	b.w	b398 <log_output_dropped_process>
    b442:	bf00      	nop
    b444:	0001e870 	.word	0x0001e870

0000b448 <process>:
{
    b448:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b44a:	4b06      	ldr	r3, [pc, #24]	; (b464 <process+0x1c>)
{
    b44c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b44e:	6818      	ldr	r0, [r3, #0]
    b450:	f7ff fb54 	bl	aafc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    b454:	4621      	mov	r1, r4
}
    b456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b45a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    b45c:	220f      	movs	r2, #15
    b45e:	4802      	ldr	r0, [pc, #8]	; (b468 <process+0x20>)
    b460:	4718      	bx	r3
    b462:	bf00      	nop
    b464:	200097ec 	.word	0x200097ec
    b468:	0001e870 	.word	0x0001e870

0000b46c <char_out>:
{
    b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b46e:	460d      	mov	r5, r1
    b470:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    b472:	4f06      	ldr	r7, [pc, #24]	; (b48c <char_out+0x20>)
    b474:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    b476:	42b4      	cmp	r4, r6
    b478:	d101      	bne.n	b47e <char_out+0x12>
}
    b47a:	4628      	mov	r0, r5
    b47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
    b482:	68bb      	ldr	r3, [r7, #8]
    b484:	4801      	ldr	r0, [pc, #4]	; (b48c <char_out+0x20>)
    b486:	685b      	ldr	r3, [r3, #4]
    b488:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    b48a:	e7f4      	b.n	b476 <char_out+0xa>
    b48c:	0001e224 	.word	0x0001e224

0000b490 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b494:	4605      	mov	r5, r0
	__asm__ volatile(
    b496:	f04f 0320 	mov.w	r3, #32
    b49a:	f3ef 8611 	mrs	r6, BASEPRI
    b49e:	f383 8812 	msr	BASEPRI_MAX, r3
    b4a2:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b4a6:	f04f 090c 	mov.w	r9, #12
	return list->head;
    b4aa:	4b0d      	ldr	r3, [pc, #52]	; (b4e0 <pm_state_notify+0x50>)
    b4ac:	4f0d      	ldr	r7, [pc, #52]	; (b4e4 <pm_state_notify+0x54>)
    b4ae:	681c      	ldr	r4, [r3, #0]
    b4b0:	f8df 8034 	ldr.w	r8, [pc, #52]	; b4e8 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b4b4:	b92c      	cbnz	r4, b4c2 <pm_state_notify+0x32>
	__asm__ volatile(
    b4b6:	f386 8811 	msr	BASEPRI, r6
    b4ba:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    b4c2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    b4c6:	2d00      	cmp	r5, #0
    b4c8:	bf18      	it	ne
    b4ca:	4613      	movne	r3, r2
		if (callback) {
    b4cc:	b12b      	cbz	r3, b4da <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b4ce:	f898 2010 	ldrb.w	r2, [r8, #16]
    b4d2:	fb09 f202 	mul.w	r2, r9, r2
    b4d6:	5cb8      	ldrb	r0, [r7, r2]
    b4d8:	4798      	blx	r3
	return node->next;
    b4da:	6824      	ldr	r4, [r4, #0]
    b4dc:	e7ea      	b.n	b4b4 <pm_state_notify+0x24>
    b4de:	bf00      	nop
    b4e0:	20009808 	.word	0x20009808
    b4e4:	200097fc 	.word	0x200097fc
    b4e8:	20009bfc 	.word	0x20009bfc

0000b4ec <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b4ec:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    b4ee:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    b4f0:	4b16      	ldr	r3, [pc, #88]	; (b54c <pm_system_resume+0x60>)
    b4f2:	7c1c      	ldrb	r4, [r3, #16]
    b4f4:	f004 031f 	and.w	r3, r4, #31
    b4f8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b4fa:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b4fc:	4b14      	ldr	r3, [pc, #80]	; (b550 <pm_system_resume+0x64>)
    b4fe:	0961      	lsrs	r1, r4, #5
    b500:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b504:	e8d3 1fef 	ldaex	r1, [r3]
    b508:	ea01 0500 	and.w	r5, r1, r0
    b50c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    b510:	2e00      	cmp	r6, #0
    b512:	d1f7      	bne.n	b504 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b514:	420a      	tst	r2, r1
    b516:	d013      	beq.n	b540 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    b518:	4b0e      	ldr	r3, [pc, #56]	; (b554 <pm_system_resume+0x68>)
    b51a:	4d0f      	ldr	r5, [pc, #60]	; (b558 <pm_system_resume+0x6c>)
    b51c:	b18b      	cbz	r3, b542 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b51e:	230c      	movs	r3, #12
    b520:	4363      	muls	r3, r4
    b522:	18ea      	adds	r2, r5, r3
    b524:	7851      	ldrb	r1, [r2, #1]
    b526:	5ce8      	ldrb	r0, [r5, r3]
    b528:	f00d ffe3 	bl	194f2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b52c:	2000      	movs	r0, #0
    b52e:	f7ff ffaf 	bl	b490 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b532:	230c      	movs	r3, #12
    b534:	435c      	muls	r4, r3
    b536:	2300      	movs	r3, #0
    b538:	192a      	adds	r2, r5, r4
    b53a:	512b      	str	r3, [r5, r4]
    b53c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b540:	bd70      	pop	{r4, r5, r6, pc}
    b542:	f383 8811 	msr	BASEPRI, r3
    b546:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b54a:	e7ef      	b.n	b52c <pm_system_resume+0x40>
    b54c:	20009bfc 	.word	0x20009bfc
    b550:	20009810 	.word	0x20009810
    b554:	000194f3 	.word	0x000194f3
    b558:	200097fc 	.word	0x200097fc

0000b55c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    b560:	4b32      	ldr	r3, [pc, #200]	; (b62c <pm_system_suspend+0xd0>)
{
    b562:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    b564:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    b566:	f04f 0320 	mov.w	r3, #32
    b56a:	f3ef 8811 	mrs	r8, BASEPRI
    b56e:	f383 8812 	msr	BASEPRI_MAX, r3
    b572:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    b576:	240c      	movs	r4, #12
    b578:	436c      	muls	r4, r5
    b57a:	4b2d      	ldr	r3, [pc, #180]	; (b630 <pm_system_suspend+0xd4>)
    b57c:	4e2d      	ldr	r6, [pc, #180]	; (b634 <pm_system_suspend+0xd8>)
    b57e:	5d19      	ldrb	r1, [r3, r4]
    b580:	191a      	adds	r2, r3, r4
    b582:	2900      	cmp	r1, #0
    b584:	d047      	beq.n	b616 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    b586:	ca07      	ldmia	r2, {r0, r1, r2}
    b588:	eb06 0c04 	add.w	ip, r6, r4
    b58c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    b590:	2200      	movs	r2, #0
    b592:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    b594:	f388 8811 	msr	BASEPRI, r8
    b598:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b59c:	230c      	movs	r3, #12
    b59e:	436b      	muls	r3, r5
    b5a0:	5cf0      	ldrb	r0, [r6, r3]
    b5a2:	18f2      	adds	r2, r6, r3
    b5a4:	b3a8      	cbz	r0, b612 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    b5a6:	1c7b      	adds	r3, r7, #1
    b5a8:	d010      	beq.n	b5cc <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    b5aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b5ae:	2100      	movs	r1, #0
    b5b0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b5b4:	4c20      	ldr	r4, [pc, #128]	; (b638 <pm_system_suspend+0xdc>)
    b5b6:	2300      	movs	r3, #0
    b5b8:	fbec 4100 	umlal	r4, r1, ip, r0
    b5bc:	4a1f      	ldr	r2, [pc, #124]	; (b63c <pm_system_suspend+0xe0>)
    b5be:	4620      	mov	r0, r4
    b5c0:	f7fc fdca 	bl	8158 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    b5c4:	2101      	movs	r1, #1
    b5c6:	1a38      	subs	r0, r7, r0
    b5c8:	f00a f864 	bl	15694 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b5cc:	f00c fd5c 	bl	18088 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b5d0:	2001      	movs	r0, #1
    b5d2:	f7ff ff5d 	bl	b490 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5d6:	4b1a      	ldr	r3, [pc, #104]	; (b640 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b5d8:	096a      	lsrs	r2, r5, #5
    b5da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    b5de:	2201      	movs	r2, #1
    b5e0:	f005 011f 	and.w	r1, r5, #31
    b5e4:	408a      	lsls	r2, r1
    b5e6:	e8d3 0fef 	ldaex	r0, [r3]
    b5ea:	4310      	orrs	r0, r2
    b5ec:	e8c3 0fe1 	stlex	r1, r0, [r3]
    b5f0:	2900      	cmp	r1, #0
    b5f2:	d1f8      	bne.n	b5e6 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    b5f4:	4b13      	ldr	r3, [pc, #76]	; (b644 <pm_system_suspend+0xe8>)
    b5f6:	b13b      	cbz	r3, b608 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    b5f8:	230c      	movs	r3, #12
    b5fa:	fb03 f005 	mul.w	r0, r3, r5
    b5fe:	1833      	adds	r3, r6, r0
    b600:	7859      	ldrb	r1, [r3, #1]
    b602:	5c30      	ldrb	r0, [r6, r0]
    b604:	f00d ff69 	bl	194da <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b608:	f7ff ff70 	bl	b4ec <pm_system_resume>
	k_sched_unlock();
    b60c:	f00c fd50 	bl	180b0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b610:	2001      	movs	r0, #1
}
    b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b616:	4601      	mov	r1, r0
    b618:	4628      	mov	r0, r5
    b61a:	f000 f815 	bl	b648 <pm_policy_next_state>
		if (info != NULL) {
    b61e:	2800      	cmp	r0, #0
    b620:	d0b8      	beq.n	b594 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b622:	c807      	ldmia	r0, {r0, r1, r2}
    b624:	4434      	add	r4, r6
    b626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b62a:	e7b3      	b.n	b594 <pm_system_suspend+0x38>
    b62c:	20009bfc 	.word	0x20009bfc
    b630:	200097f0 	.word	0x200097f0
    b634:	200097fc 	.word	0x200097fc
    b638:	000f423f 	.word	0x000f423f
    b63c:	000f4240 	.word	0x000f4240
    b640:	20009810 	.word	0x20009810
    b644:	000194db 	.word	0x000194db

0000b648 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b64c:	b085      	sub	sp, #20
    b64e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b650:	a903      	add	r1, sp, #12
    b652:	f000 f843 	bl	b6dc <pm_state_cpu_get_all>
    b656:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b65a:	4604      	mov	r4, r0
    b65c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b660:	4b1b      	ldr	r3, [pc, #108]	; (b6d0 <pm_policy_next_state+0x88>)
    b662:	9d03      	ldr	r5, [sp, #12]
    b664:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b668:	1e43      	subs	r3, r0, #1
    b66a:	b21b      	sxth	r3, r3
    b66c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b670:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6d4 <pm_policy_next_state+0x8c>
    b674:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b678:	b924      	cbnz	r4, b684 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b67a:	46a1      	mov	r9, r4
}
    b67c:	4648      	mov	r0, r9
    b67e:	b005      	add	sp, #20
    b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b684:	46c4      	mov	ip, r8
    b686:	4659      	mov	r1, fp
    b688:	6868      	ldr	r0, [r5, #4]
    b68a:	2300      	movs	r3, #0
    b68c:	fbe0 c107 	umlal	ip, r1, r0, r7
    b690:	4a11      	ldr	r2, [pc, #68]	; (b6d8 <pm_policy_next_state+0x90>)
    b692:	4660      	mov	r0, ip
    b694:	f7fc fd60 	bl	8158 <__aeabi_uldivmod>
    b698:	46c4      	mov	ip, r8
    b69a:	4659      	mov	r1, fp
    b69c:	9001      	str	r0, [sp, #4]
    b69e:	68a8      	ldr	r0, [r5, #8]
    b6a0:	2300      	movs	r3, #0
    b6a2:	fbe0 c107 	umlal	ip, r1, r0, r7
    b6a6:	4a0c      	ldr	r2, [pc, #48]	; (b6d8 <pm_policy_next_state+0x90>)
    b6a8:	4660      	mov	r0, ip
    b6aa:	f7fc fd55 	bl	8158 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b6ae:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    b6b2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b6b4:	d001      	beq.n	b6ba <pm_policy_next_state+0x72>
    b6b6:	4582      	cmp	sl, r0
    b6b8:	d905      	bls.n	b6c6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b6ba:	1c73      	adds	r3, r6, #1
    b6bc:	d0de      	beq.n	b67c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    b6be:	9b01      	ldr	r3, [sp, #4]
    b6c0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b6c2:	42b0      	cmp	r0, r6
    b6c4:	d9da      	bls.n	b67c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b6c6:	3c01      	subs	r4, #1
    b6c8:	b2a4      	uxth	r4, r4
    b6ca:	3d0c      	subs	r5, #12
    b6cc:	e7d4      	b.n	b678 <pm_policy_next_state+0x30>
    b6ce:	bf00      	nop
    b6d0:	2000820c 	.word	0x2000820c
    b6d4:	000f423f 	.word	0x000f423f
    b6d8:	000f4240 	.word	0x000f4240

0000b6dc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b6dc:	b908      	cbnz	r0, b6e2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b6de:	4b02      	ldr	r3, [pc, #8]	; (b6e8 <pm_state_cpu_get_all+0xc>)
    b6e0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b6e2:	2000      	movs	r0, #0
    b6e4:	4770      	bx	lr
    b6e6:	bf00      	nop
    b6e8:	0001e880 	.word	0x0001e880

0000b6ec <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    b6ec:	4904      	ldr	r1, [pc, #16]	; (b700 <sub_bytes+0x14>)
    b6ee:	1e43      	subs	r3, r0, #1
    b6f0:	300f      	adds	r0, #15
    b6f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b6f6:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    b6f8:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    b6fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    b6fc:	d1f9      	bne.n	b6f2 <sub_bytes+0x6>
	}
}
    b6fe:	4770      	bx	lr
    b700:	0001f44b 	.word	0x0001f44b

0000b704 <tc_aes128_set_encrypt_key>:
{
    b704:	b5f0      	push	{r4, r5, r6, r7, lr}
    b706:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    b708:	4e26      	ldr	r6, [pc, #152]	; (b7a4 <tc_aes128_set_encrypt_key+0xa0>)
{
    b70a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    b70c:	ad01      	add	r5, sp, #4
{
    b70e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    b710:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b714:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b718:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b71c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    b720:	4638      	mov	r0, r7
    b722:	2f00      	cmp	r7, #0
    b724:	d039      	beq.n	b79a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    b726:	2c00      	cmp	r4, #0
    b728:	d039      	beq.n	b79e <tc_aes128_set_encrypt_key+0x9a>
    b72a:	1f38      	subs	r0, r7, #4
    b72c:	4602      	mov	r2, r0
    b72e:	4621      	mov	r1, r4
    b730:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b732:	784b      	ldrb	r3, [r1, #1]
    b734:	780d      	ldrb	r5, [r1, #0]
    b736:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b738:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    b73c:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    b73e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b740:	432b      	orrs	r3, r5
    b742:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    b746:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b748:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b74c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    b750:	d1ef      	bne.n	b732 <tc_aes128_set_encrypt_key+0x2e>
    b752:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b754:	4c14      	ldr	r4, [pc, #80]	; (b7a8 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    b756:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    b758:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    b75a:	d116      	bne.n	b78a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b75c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    b760:	5ca5      	ldrb	r5, [r4, r2]
    b762:	0e1a      	lsrs	r2, r3, #24
    b764:	5ca2      	ldrb	r2, [r4, r2]
    b766:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    b76a:	f3c3 2507 	ubfx	r5, r3, #8, #8
    b76e:	5d65      	ldrb	r5, [r4, r5]
    b770:	b2db      	uxtb	r3, r3
    b772:	5ce3      	ldrb	r3, [r4, r3]
    b774:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    b778:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    b77c:	f021 0303 	bic.w	r3, r1, #3
    b780:	3330      	adds	r3, #48	; 0x30
    b782:	446b      	add	r3, sp
    b784:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    b788:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    b78a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    b78e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    b790:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    b792:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    b794:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    b796:	d1de      	bne.n	b756 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    b798:	2001      	movs	r0, #1
}
    b79a:	b00d      	add	sp, #52	; 0x34
    b79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b79e:	4620      	mov	r0, r4
    b7a0:	e7fb      	b.n	b79a <tc_aes128_set_encrypt_key+0x96>
    b7a2:	bf00      	nop
    b7a4:	0001e66c 	.word	0x0001e66c
    b7a8:	0001f44b 	.word	0x0001f44b

0000b7ac <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b7b0:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b7b2:	6803      	ldr	r3, [r0, #0]
{
    b7b4:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b7b6:	9302      	str	r3, [sp, #8]
    b7b8:	6843      	ldr	r3, [r0, #4]
    b7ba:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b978 <compress+0x1cc>
    b7be:	9303      	str	r3, [sp, #12]
    b7c0:	6883      	ldr	r3, [r0, #8]
    b7c2:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    b7c6:	9304      	str	r3, [sp, #16]
    b7c8:	68c3      	ldr	r3, [r0, #12]
    b7ca:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b7cc:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b7ce:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b7d2:	9306      	str	r3, [sp, #24]
    b7d4:	6943      	ldr	r3, [r0, #20]
    b7d6:	9307      	str	r3, [sp, #28]
    b7d8:	6983      	ldr	r3, [r0, #24]
    b7da:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    b7de:	9308      	str	r3, [sp, #32]
    b7e0:	69c3      	ldr	r3, [r0, #28]
    b7e2:	4698      	mov	r8, r3
    b7e4:	9309      	str	r3, [sp, #36]	; 0x24
    b7e6:	9b08      	ldr	r3, [sp, #32]
    b7e8:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    b7ea:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    b7ec:	ab0c      	add	r3, sp, #48	; 0x30
    b7ee:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b7f0:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    b7f4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    b7f6:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b7fa:	44a9      	add	r9, r5
    b7fc:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    b800:	9d00      	ldr	r5, [sp, #0]
    b802:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    b806:	444b      	add	r3, r9
    b808:	ea25 0502 	bic.w	r5, r5, r2
    b80c:	ea02 090c 	and.w	r9, r2, ip
    b810:	ea85 0509 	eor.w	r5, r5, r9
    b814:	442b      	add	r3, r5
    b816:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    b818:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    b81c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    b820:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    b824:	4025      	ands	r5, r4
    b826:	ea06 090b 	and.w	r9, r6, fp
    b82a:	ea85 0509 	eor.w	r5, r5, r9
    b82e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    b832:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    b834:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    b836:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    b838:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    b83c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    b83e:	46de      	mov	lr, fp
    b840:	f8dd 8000 	ldr.w	r8, [sp]
    b844:	f040 8088 	bne.w	b958 <compress+0x1ac>
    b848:	f04f 0a10 	mov.w	sl, #16
    b84c:	494b      	ldr	r1, [pc, #300]	; (b97c <compress+0x1d0>)
    b84e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    b850:	4651      	mov	r1, sl
    b852:	f10a 0a01 	add.w	sl, sl, #1
    b856:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b85a:	f00a 070f 	and.w	r7, sl, #15
    b85e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b862:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b866:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    b86a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    b86e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    b870:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    b874:	f101 070e 	add.w	r7, r1, #14
    b878:	f007 070f 	and.w	r7, r7, #15
    b87c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b880:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b884:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    b886:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    b88a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    b88e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b892:	f001 010f 	and.w	r1, r1, #15
    b896:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b89a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    b89e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    b8a2:	f859 ec40 	ldr.w	lr, [r9, #-64]
    b8a6:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    b8aa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b8ae:	4471      	add	r1, lr
		s0 = sigma0(s0);
    b8b0:	f8dd e004 	ldr.w	lr, [sp, #4]
    b8b4:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    b8b8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b8bc:	4441      	add	r1, r8
		s1 = sigma1(s1);
    b8be:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b8c2:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b8c4:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    b8c8:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b8cc:	ea2c 0705 	bic.w	r7, ip, r5
    b8d0:	ea87 0708 	eor.w	r7, r7, r8
    b8d4:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    b8d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    b8dc:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    b8e0:	4477      	add	r7, lr
    b8e2:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b8e6:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b8ea:	4477      	add	r7, lr
    b8ec:	440f      	add	r7, r1
    b8ee:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    b8f0:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b8f4:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    b8f6:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b8fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    b8fe:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    b902:	ea07 0703 	and.w	r7, r7, r3
    b906:	ea04 0806 	and.w	r8, r4, r6
    b90a:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    b90e:	ea87 0708 	eor.w	r7, r7, r8
    b912:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    b914:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    b916:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    b91a:	f8cd c000 	str.w	ip, [sp]
    b91e:	46b3      	mov	fp, r6
    b920:	d122      	bne.n	b968 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    b922:	9902      	ldr	r1, [sp, #8]
    b924:	4439      	add	r1, r7
    b926:	6001      	str	r1, [r0, #0]
    b928:	9903      	ldr	r1, [sp, #12]
    b92a:	4419      	add	r1, r3
    b92c:	9b04      	ldr	r3, [sp, #16]
    b92e:	6041      	str	r1, [r0, #4]
    b930:	4423      	add	r3, r4
    b932:	6083      	str	r3, [r0, #8]
    b934:	9b05      	ldr	r3, [sp, #20]
    b936:	4433      	add	r3, r6
    b938:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    b93a:	9b06      	ldr	r3, [sp, #24]
    b93c:	4473      	add	r3, lr
    b93e:	6103      	str	r3, [r0, #16]
    b940:	9b07      	ldr	r3, [sp, #28]
    b942:	442b      	add	r3, r5
    b944:	6143      	str	r3, [r0, #20]
    b946:	9b08      	ldr	r3, [sp, #32]
    b948:	4413      	add	r3, r2
    b94a:	6183      	str	r3, [r0, #24]
    b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b94e:	4463      	add	r3, ip
    b950:	61c3      	str	r3, [r0, #28]
}
    b952:	b01d      	add	sp, #116	; 0x74
    b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b958:	46b3      	mov	fp, r6
    b95a:	f8cd c000 	str.w	ip, [sp]
    b95e:	4626      	mov	r6, r4
    b960:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    b962:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b964:	462a      	mov	r2, r5
    b966:	e740      	b.n	b7ea <compress+0x3e>
    b968:	4694      	mov	ip, r2
    b96a:	4626      	mov	r6, r4
    b96c:	462a      	mov	r2, r5
    b96e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b970:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    b972:	463b      	mov	r3, r7
    b974:	e76c      	b.n	b850 <compress+0xa4>
    b976:	bf00      	nop
    b978:	0001e880 	.word	0x0001e880
    b97c:	0001e8bc 	.word	0x0001e8bc

0000b980 <tc_sha256_init>:
{
    b980:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    b982:	4604      	mov	r4, r0
    b984:	b1c8      	cbz	r0, b9ba <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    b986:	2270      	movs	r2, #112	; 0x70
    b988:	2100      	movs	r1, #0
    b98a:	f00e f814 	bl	199b6 <_set>
	s->iv[1] = 0xbb67ae85;
    b98e:	4b0b      	ldr	r3, [pc, #44]	; (b9bc <tc_sha256_init+0x3c>)
    b990:	4a0b      	ldr	r2, [pc, #44]	; (b9c0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    b992:	490c      	ldr	r1, [pc, #48]	; (b9c4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    b994:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    b998:	4b0b      	ldr	r3, [pc, #44]	; (b9c8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    b99a:	480c      	ldr	r0, [pc, #48]	; (b9cc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    b99c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    b9a0:	4b0b      	ldr	r3, [pc, #44]	; (b9d0 <tc_sha256_init+0x50>)
    b9a2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    b9a6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    b9a8:	4b0a      	ldr	r3, [pc, #40]	; (b9d4 <tc_sha256_init+0x54>)
    b9aa:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    b9ac:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    b9b0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    b9b4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    b9b8:	61e3      	str	r3, [r4, #28]
}
    b9ba:	bd10      	pop	{r4, pc}
    b9bc:	bb67ae85 	.word	0xbb67ae85
    b9c0:	6a09e667 	.word	0x6a09e667
    b9c4:	3c6ef372 	.word	0x3c6ef372
    b9c8:	a54ff53a 	.word	0xa54ff53a
    b9cc:	510e527f 	.word	0x510e527f
    b9d0:	9b05688c 	.word	0x9b05688c
    b9d4:	1f83d9ab 	.word	0x1f83d9ab

0000b9d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b9d8:	4901      	ldr	r1, [pc, #4]	; (b9e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b9da:	2210      	movs	r2, #16
	str	r2, [r1]
    b9dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b9de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b9e0:	e000ed10 	.word	0xe000ed10

0000b9e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b9e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b9e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b9e8:	f380 8811 	msr	BASEPRI, r0
	isb
    b9ec:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    b9f0:	b501      	push	{r0, lr}
    b9f2:	f7fe faf3 	bl	9fdc <z_arm_on_enter_cpu_idle>
    b9f6:	2800      	cmp	r0, #0
    b9f8:	d002      	beq.n	ba00 <_skip_0>
    b9fa:	f3bf 8f4f 	dsb	sy
    b9fe:	bf30      	wfi

0000ba00 <_skip_0>:
    ba00:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ba04:	b662      	cpsie	i
	isb
    ba06:	f3bf 8f6f 	isb	sy

	bx	lr
    ba0a:	4770      	bx	lr

0000ba0c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ba0c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ba0e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    ba10:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    ba14:	b501      	push	{r0, lr}
    ba16:	f7fe fae1 	bl	9fdc <z_arm_on_enter_cpu_idle>
    ba1a:	2800      	cmp	r0, #0
    ba1c:	d002      	beq.n	ba24 <_skip_1>
    ba1e:	f3bf 8f4f 	dsb	sy
    ba22:	bf20      	wfe

0000ba24 <_skip_1>:
    ba24:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    ba28:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ba2c:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ba2e:	4770      	bx	lr

0000ba30 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba34:	4681      	mov	r9, r0

	if (esf != NULL) {
    ba36:	460c      	mov	r4, r1
{
    ba38:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    ba3a:	2900      	cmp	r1, #0
    ba3c:	d04c      	beq.n	bad8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    ba3e:	e9d1 1200 	ldrd	r1, r2, [r1]
    ba42:	466e      	mov	r6, sp
    ba44:	b08a      	sub	sp, #40	; 0x28
    ba46:	68a3      	ldr	r3, [r4, #8]
    ba48:	466d      	mov	r5, sp
    ba4a:	f04f 0a05 	mov.w	sl, #5
    ba4e:	46a8      	mov	r8, r5
    ba50:	4825      	ldr	r0, [pc, #148]	; (bae8 <z_arm_fatal_error+0xb8>)
    ba52:	e9c5 2307 	strd	r2, r3, [r5, #28]
    ba56:	e9c5 0105 	strd	r0, r1, [r5, #20]
    ba5a:	f848 af10 	str.w	sl, [r8, #16]!
    ba5e:	2300      	movs	r3, #0
    ba60:	4642      	mov	r2, r8
    ba62:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ba66:	4821      	ldr	r0, [pc, #132]	; (baec <z_arm_fatal_error+0xbc>)
    ba68:	f7ff fa24 	bl	aeb4 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    ba6c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    ba70:	46b5      	mov	sp, r6
    ba72:	6963      	ldr	r3, [r4, #20]
    ba74:	46ad      	mov	sp, r5
    ba76:	481e      	ldr	r0, [pc, #120]	; (baf0 <z_arm_fatal_error+0xc0>)
    ba78:	e9c5 2307 	strd	r2, r3, [r5, #28]
    ba7c:	e9c5 0105 	strd	r0, r1, [r5, #20]
    ba80:	f8c5 a010 	str.w	sl, [r5, #16]
    ba84:	2300      	movs	r3, #0
    ba86:	4642      	mov	r2, r8
    ba88:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ba8c:	4817      	ldr	r0, [pc, #92]	; (baec <z_arm_fatal_error+0xbc>)
    ba8e:	f7ff fa11 	bl	aeb4 <z_impl_z_log_msg_static_create>
    ba92:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ba94:	b088      	sub	sp, #32
    ba96:	69e3      	ldr	r3, [r4, #28]
    ba98:	466d      	mov	r5, sp
    ba9a:	f04f 0a03 	mov.w	sl, #3
    ba9e:	46a8      	mov	r8, r5
    baa0:	4a14      	ldr	r2, [pc, #80]	; (baf4 <z_arm_fatal_error+0xc4>)
    baa2:	e9c5 2305 	strd	r2, r3, [r5, #20]
    baa6:	f848 af10 	str.w	sl, [r8, #16]!
    baaa:	2300      	movs	r3, #0
    baac:	4642      	mov	r2, r8
    baae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bab2:	480e      	ldr	r0, [pc, #56]	; (baec <z_arm_fatal_error+0xbc>)
    bab4:	f7ff f9fe 	bl	aeb4 <z_impl_z_log_msg_static_create>
    bab8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    baba:	69a3      	ldr	r3, [r4, #24]
    babc:	46ad      	mov	sp, r5
    babe:	4a0e      	ldr	r2, [pc, #56]	; (baf8 <z_arm_fatal_error+0xc8>)
    bac0:	f8c5 a010 	str.w	sl, [r5, #16]
    bac4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    bac8:	2300      	movs	r3, #0
    baca:	4642      	mov	r2, r8
    bacc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bad0:	4806      	ldr	r0, [pc, #24]	; (baec <z_arm_fatal_error+0xbc>)
    bad2:	f7ff f9ef 	bl	aeb4 <z_impl_z_log_msg_static_create>
    bad6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    bad8:	4621      	mov	r1, r4
    bada:	4648      	mov	r0, r9
    badc:	f00b faf2 	bl	170c4 <z_fatal_error>
}
    bae0:	46bd      	mov	sp, r7
    bae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bae6:	bf00      	nop
    bae8:	0001f54b 	.word	0x0001f54b
    baec:	0001e60c 	.word	0x0001e60c
    baf0:	0001f57a 	.word	0x0001f57a
    baf4:	0001f5a9 	.word	0x0001f5a9
    baf8:	0001f5b8 	.word	0x0001f5b8

0000bafc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    bafc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bafe:	2800      	cmp	r0, #0
    bb00:	db07      	blt.n	bb12 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bb02:	2301      	movs	r3, #1
    bb04:	0941      	lsrs	r1, r0, #5
    bb06:	4a03      	ldr	r2, [pc, #12]	; (bb14 <arch_irq_enable+0x18>)
    bb08:	f000 001f 	and.w	r0, r0, #31
    bb0c:	4083      	lsls	r3, r0
    bb0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    bb12:	4770      	bx	lr
    bb14:	e000e100 	.word	0xe000e100

0000bb18 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    bb18:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bb1a:	2800      	cmp	r0, #0
    bb1c:	db0c      	blt.n	bb38 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bb1e:	2201      	movs	r2, #1
    bb20:	4906      	ldr	r1, [pc, #24]	; (bb3c <arch_irq_disable+0x24>)
    bb22:	0943      	lsrs	r3, r0, #5
    bb24:	f000 001f 	and.w	r0, r0, #31
    bb28:	4082      	lsls	r2, r0
    bb2a:	3320      	adds	r3, #32
    bb2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    bb30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bb34:	f3bf 8f6f 	isb	sy
}
    bb38:	4770      	bx	lr
    bb3a:	bf00      	nop
    bb3c:	e000e100 	.word	0xe000e100

0000bb40 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    bb40:	4b05      	ldr	r3, [pc, #20]	; (bb58 <arch_irq_is_enabled+0x18>)
    bb42:	0942      	lsrs	r2, r0, #5
    bb44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    bb48:	2301      	movs	r3, #1
    bb4a:	f000 001f 	and.w	r0, r0, #31
    bb4e:	fa03 f000 	lsl.w	r0, r3, r0
}
    bb52:	4010      	ands	r0, r2
    bb54:	4770      	bx	lr
    bb56:	bf00      	nop
    bb58:	e000e100 	.word	0xe000e100

0000bb5c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    bb5c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    bb5e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    bb60:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb64:	bfac      	ite	ge
    bb66:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb6a:	4b06      	ldrlt	r3, [pc, #24]	; (bb84 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb6c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    bb70:	b2c9      	uxtb	r1, r1
    bb72:	bfab      	itete	ge
    bb74:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb78:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb7c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb80:	5419      	strblt	r1, [r3, r0]
}
    bb82:	4770      	bx	lr
    bb84:	e000ed14 	.word	0xe000ed14

0000bb88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    bb88:	bf30      	wfi
    b z_SysNmiOnReset
    bb8a:	f7ff bffd 	b.w	bb88 <z_SysNmiOnReset>
    bb8e:	bf00      	nop

0000bb90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    bb90:	4a0b      	ldr	r2, [pc, #44]	; (bbc0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    bb92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    bb94:	4b0b      	ldr	r3, [pc, #44]	; (bbc4 <z_arm_prep_c+0x34>)
    bb96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    bb9a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    bb9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bba0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    bba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    bba8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    bbac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    bbb0:	f00b fb44 	bl	1723c <z_bss_zero>
	z_data_copy();
    bbb4:	f00c fbb4 	bl	18320 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    bbb8:	f000 fbca 	bl	c350 <z_arm_interrupt_init>
	z_cstart();
    bbbc:	f00b fb7e 	bl	172bc <z_cstart>
    bbc0:	00008000 	.word	0x00008000
    bbc4:	e000ed00 	.word	0xe000ed00

0000bbc8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    bbc8:	4a09      	ldr	r2, [pc, #36]	; (bbf0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    bbca:	490a      	ldr	r1, [pc, #40]	; (bbf4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    bbcc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    bbce:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    bbd0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    bbd2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bbd4:	4908      	ldr	r1, [pc, #32]	; (bbf8 <arch_swap+0x30>)
    bbd6:	684b      	ldr	r3, [r1, #4]
    bbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    bbdc:	604b      	str	r3, [r1, #4]
    bbde:	2300      	movs	r3, #0
    bbe0:	f383 8811 	msr	BASEPRI, r3
    bbe4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    bbe8:	6893      	ldr	r3, [r2, #8]
}
    bbea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    bbec:	4770      	bx	lr
    bbee:	bf00      	nop
    bbf0:	20009bfc 	.word	0x20009bfc
    bbf4:	0001ef28 	.word	0x0001ef28
    bbf8:	e000ed00 	.word	0xe000ed00

0000bbfc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    bbfc:	4915      	ldr	r1, [pc, #84]	; (bc54 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    bbfe:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    bc00:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    bc04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    bc08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    bc0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    bc0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bc12:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    bc14:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    bc18:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    bc1c:	4f0e      	ldr	r7, [pc, #56]	; (bc58 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    bc1e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    bc22:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    bc24:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    bc26:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    bc28:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    bc2c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    bc2e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    bc30:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    bc32:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    bc36:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    bc3a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    bc3e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    bc42:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    bc46:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    bc48:	f00e fb02 	bl	1a250 <configure_builtin_stack_guard>
    pop {r2, lr}
    bc4c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    bc50:	4770      	bx	lr
    bc52:	0000      	.short	0x0000
    ldr r1, =_kernel
    bc54:	20009bfc 	.word	0x20009bfc
    ldr v4, =_SCS_ICSR
    bc58:	e000ed04 	.word	0xe000ed04

0000bc5c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    bc5c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    bc60:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    bc62:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    bc66:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    bc6a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    bc6c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    bc70:	2902      	cmp	r1, #2
    beq _oops
    bc72:	d0ff      	beq.n	bc74 <_oops>

0000bc74 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    bc74:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    bc76:	f00e fadc 	bl	1a232 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    bc7a:	bd01      	pop	{r0, pc}

0000bc7c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    bc7c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    bc80:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    bc82:	490d      	ldr	r1, [pc, #52]	; (bcb8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    bc84:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    bc88:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    bc8a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    bc8e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    bc92:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    bc94:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    bc98:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    bc9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    bca0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    bca4:	2300      	movs	r3, #0
    bca6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    bca8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    bcac:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    bcae:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    bcb0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    bcb4:	4770      	bx	lr
    bcb6:	bf00      	nop
    bcb8:	00018995 	.word	0x00018995

0000bcbc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    bcbc:	4b08      	ldr	r3, [pc, #32]	; (bce0 <arch_switch_to_main_thread+0x24>)
    bcbe:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    bcc0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bcc2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    bcc6:	4610      	mov	r0, r2
    bcc8:	f381 8809 	msr	PSP, r1
    bccc:	2100      	movs	r1, #0
    bcce:	b663      	cpsie	if
    bcd0:	f381 8811 	msr	BASEPRI, r1
    bcd4:	f3bf 8f6f 	isb	sy
    bcd8:	2200      	movs	r2, #0
    bcda:	2300      	movs	r3, #0
    bcdc:	f00c fe5a 	bl	18994 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    bce0:	20009bfc 	.word	0x20009bfc

0000bce4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    bce4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    bce6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    bce8:	4a0b      	ldr	r2, [pc, #44]	; (bd18 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    bcea:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    bcec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    bcee:	bf1e      	ittt	ne
	movne	r1, #0
    bcf0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    bcf2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    bcf4:	f011 fd2a 	blne	1d74c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    bcf8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    bcfa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    bcfe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    bd02:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    bd06:	4905      	ldr	r1, [pc, #20]	; (bd1c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    bd08:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    bd0a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    bd0c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    bd0e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    bd12:	4903      	ldr	r1, [pc, #12]	; (bd20 <_isr_wrapper+0x3c>)
	bx r1
    bd14:	4708      	bx	r1
    bd16:	0000      	.short	0x0000
	ldr r2, =_kernel
    bd18:	20009bfc 	.word	0x20009bfc
	ldr r1, =_sw_isr_table
    bd1c:	0001e26c 	.word	0x0001e26c
	ldr r1, =z_arm_int_exit
    bd20:	0000bd25 	.word	0x0000bd25

0000bd24 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    bd24:	4b04      	ldr	r3, [pc, #16]	; (bd38 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    bd26:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    bd28:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    bd2a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    bd2c:	d003      	beq.n	bd36 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    bd2e:	4903      	ldr	r1, [pc, #12]	; (bd3c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    bd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    bd34:	600a      	str	r2, [r1, #0]

0000bd36 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    bd36:	4770      	bx	lr
	ldr r3, =_kernel
    bd38:	20009bfc 	.word	0x20009bfc
	ldr r1, =_SCS_ICSR
    bd3c:	e000ed04 	.word	0xe000ed04

0000bd40 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd44:	b086      	sub	sp, #24
    bd46:	4606      	mov	r6, r0
    bd48:	460d      	mov	r5, r1
    bd4a:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    bd4c:	2402      	movs	r4, #2
    bd4e:	4b44      	ldr	r3, [pc, #272]	; (be60 <mem_manage_fault.constprop.0+0x120>)
    bd50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd54:	617b      	str	r3, [r7, #20]
    bd56:	4843      	ldr	r0, [pc, #268]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bd58:	613c      	str	r4, [r7, #16]
    bd5a:	f107 0210 	add.w	r2, r7, #16
    bd5e:	f00e fa7b 	bl	1a258 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    bd62:	4b41      	ldr	r3, [pc, #260]	; (be68 <mem_manage_fault.constprop.0+0x128>)
    bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd66:	06db      	lsls	r3, r3, #27
    bd68:	d578      	bpl.n	be5c <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    bd6a:	4b40      	ldr	r3, [pc, #256]	; (be6c <mem_manage_fault.constprop.0+0x12c>)
    bd6c:	483d      	ldr	r0, [pc, #244]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bd6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd72:	e9c7 4304 	strd	r4, r3, [r7, #16]
    bd76:	f107 0210 	add.w	r2, r7, #16
    bd7a:	f00e fa6d 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    bd7e:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    bd80:	4b39      	ldr	r3, [pc, #228]	; (be68 <mem_manage_fault.constprop.0+0x128>)
    bd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd84:	071c      	lsls	r4, r3, #28
    bd86:	d50b      	bpl.n	bda0 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    bd88:	4b39      	ldr	r3, [pc, #228]	; (be70 <mem_manage_fault.constprop.0+0x130>)
    bd8a:	4836      	ldr	r0, [pc, #216]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bd8c:	617b      	str	r3, [r7, #20]
    bd8e:	2302      	movs	r3, #2
    bd90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd94:	613b      	str	r3, [r7, #16]
    bd96:	f107 0210 	add.w	r2, r7, #16
    bd9a:	f00e fa5d 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    bd9e:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    bda0:	4c31      	ldr	r4, [pc, #196]	; (be68 <mem_manage_fault.constprop.0+0x128>)
    bda2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bda4:	0799      	lsls	r1, r3, #30
    bda6:	d523      	bpl.n	bdf0 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    bda8:	46e8      	mov	r8, sp
    bdaa:	4b32      	ldr	r3, [pc, #200]	; (be74 <mem_manage_fault.constprop.0+0x134>)
    bdac:	f107 0210 	add.w	r2, r7, #16
    bdb0:	617b      	str	r3, [r7, #20]
    bdb2:	2302      	movs	r3, #2
    bdb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bdb8:	613b      	str	r3, [r7, #16]
    bdba:	482a      	ldr	r0, [pc, #168]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bdbc:	f00e fa4c 	bl	1a258 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    bdc0:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    bdc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    bdc4:	0612      	lsls	r2, r2, #24
    bdc6:	d512      	bpl.n	bdee <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    bdc8:	b088      	sub	sp, #32
    bdca:	466a      	mov	r2, sp
    bdcc:	492a      	ldr	r1, [pc, #168]	; (be78 <mem_manage_fault.constprop.0+0x138>)
    bdce:	4825      	ldr	r0, [pc, #148]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bdd0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bdd4:	2303      	movs	r3, #3
    bdd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bdda:	f842 3f10 	str.w	r3, [r2, #16]!
    bdde:	f00e fa3b 	bl	1a258 <z_log_msg_static_create.constprop.0>
    bde2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    bde4:	b11e      	cbz	r6, bdee <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    bde6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bdec:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    bdee:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    bdf0:	4b1d      	ldr	r3, [pc, #116]	; (be68 <mem_manage_fault.constprop.0+0x128>)
    bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bdf4:	07de      	lsls	r6, r3, #31
    bdf6:	d50b      	bpl.n	be10 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    bdf8:	4b20      	ldr	r3, [pc, #128]	; (be7c <mem_manage_fault.constprop.0+0x13c>)
    bdfa:	481a      	ldr	r0, [pc, #104]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    bdfc:	617b      	str	r3, [r7, #20]
    bdfe:	2302      	movs	r3, #2
    be00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be04:	613b      	str	r3, [r7, #16]
    be06:	f107 0210 	add.w	r2, r7, #16
    be0a:	f00e fa25 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    be0e:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    be10:	4b15      	ldr	r3, [pc, #84]	; (be68 <mem_manage_fault.constprop.0+0x128>)
    be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    be14:	069c      	lsls	r4, r3, #26
    be16:	d50b      	bpl.n	be30 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    be18:	4b19      	ldr	r3, [pc, #100]	; (be80 <mem_manage_fault.constprop.0+0x140>)
    be1a:	4812      	ldr	r0, [pc, #72]	; (be64 <mem_manage_fault.constprop.0+0x124>)
    be1c:	617b      	str	r3, [r7, #20]
    be1e:	2302      	movs	r3, #2
    be20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be24:	613b      	str	r3, [r7, #16]
    be26:	f107 0210 	add.w	r2, r7, #16
    be2a:	f00e fa15 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    be2e:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    be30:	4b0d      	ldr	r3, [pc, #52]	; (be68 <mem_manage_fault.constprop.0+0x128>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    be32:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    be34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    be36:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    be38:	bf58      	it	pl
    be3a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    be3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    be3e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    be40:	bf42      	ittt	mi
    be42:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    be44:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    be48:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    be4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    be4c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    be50:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    be52:	2300      	movs	r3, #0
    be54:	702b      	strb	r3, [r5, #0]
}
    be56:	46bd      	mov	sp, r7
    be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    be5c:	2010      	movs	r0, #16
    be5e:	e78f      	b.n	bd80 <mem_manage_fault.constprop.0+0x40>
    be60:	0001f5e6 	.word	0x0001f5e6
    be64:	0001e60c 	.word	0x0001e60c
    be68:	e000ed00 	.word	0xe000ed00
    be6c:	0001f5fc 	.word	0x0001f5fc
    be70:	0001f62f 	.word	0x0001f62f
    be74:	0001f642 	.word	0x0001f642
    be78:	0001f65a 	.word	0x0001f65a
    be7c:	0001f670 	.word	0x0001f670
    be80:	0001f68f 	.word	0x0001f68f

0000be84 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be88:	b086      	sub	sp, #24
    be8a:	4606      	mov	r6, r0
    be8c:	460d      	mov	r5, r1
    be8e:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    be90:	2402      	movs	r4, #2
    be92:	4b47      	ldr	r3, [pc, #284]	; (bfb0 <bus_fault.constprop.0+0x12c>)
    be94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be98:	617b      	str	r3, [r7, #20]
    be9a:	4846      	ldr	r0, [pc, #280]	; (bfb4 <bus_fault.constprop.0+0x130>)
    be9c:	613c      	str	r4, [r7, #16]
    be9e:	f107 0210 	add.w	r2, r7, #16
    bea2:	f00e f9d9 	bl	1a258 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bea6:	4b44      	ldr	r3, [pc, #272]	; (bfb8 <bus_fault.constprop.0+0x134>)
    bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    beaa:	04d9      	lsls	r1, r3, #19
    beac:	d56d      	bpl.n	bf8a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    beae:	4b43      	ldr	r3, [pc, #268]	; (bfbc <bus_fault.constprop.0+0x138>)
    beb0:	4840      	ldr	r0, [pc, #256]	; (bfb4 <bus_fault.constprop.0+0x130>)
    beb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    beb6:	e9c7 4304 	strd	r4, r3, [r7, #16]
    beba:	f107 0210 	add.w	r2, r7, #16
    bebe:	f00e f9cb 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    bec2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    bec4:	4b3c      	ldr	r3, [pc, #240]	; (bfb8 <bus_fault.constprop.0+0x134>)
    bec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bec8:	051a      	lsls	r2, r3, #20
    beca:	d50b      	bpl.n	bee4 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    becc:	4b3c      	ldr	r3, [pc, #240]	; (bfc0 <bus_fault.constprop.0+0x13c>)
    bece:	4839      	ldr	r0, [pc, #228]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bed0:	617b      	str	r3, [r7, #20]
    bed2:	2302      	movs	r3, #2
    bed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bed8:	613b      	str	r3, [r7, #16]
    beda:	f107 0210 	add.w	r2, r7, #16
    bede:	f00e f9bb 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    bee2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    bee4:	4c34      	ldr	r4, [pc, #208]	; (bfb8 <bus_fault.constprop.0+0x134>)
    bee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bee8:	059b      	lsls	r3, r3, #22
    beea:	d523      	bpl.n	bf34 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    beec:	46e8      	mov	r8, sp
    beee:	4b35      	ldr	r3, [pc, #212]	; (bfc4 <bus_fault.constprop.0+0x140>)
    bef0:	4830      	ldr	r0, [pc, #192]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bef2:	617b      	str	r3, [r7, #20]
    bef4:	2302      	movs	r3, #2
    bef6:	f107 0210 	add.w	r2, r7, #16
    befa:	613b      	str	r3, [r7, #16]
    befc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf00:	f00e f9aa 	bl	1a258 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    bf04:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    bf06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    bf08:	0410      	lsls	r0, r2, #16
    bf0a:	d512      	bpl.n	bf32 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    bf0c:	b088      	sub	sp, #32
    bf0e:	466a      	mov	r2, sp
    bf10:	492d      	ldr	r1, [pc, #180]	; (bfc8 <bus_fault.constprop.0+0x144>)
    bf12:	4828      	ldr	r0, [pc, #160]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bf14:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bf18:	2303      	movs	r3, #3
    bf1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bf1e:	f842 3f10 	str.w	r3, [r2, #16]!
    bf22:	f00e f999 	bl	1a258 <z_log_msg_static_create.constprop.0>
    bf26:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    bf28:	b11e      	cbz	r6, bf32 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    bf2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bf2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    bf30:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    bf32:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    bf34:	4b20      	ldr	r3, [pc, #128]	; (bfb8 <bus_fault.constprop.0+0x134>)
    bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bf38:	0559      	lsls	r1, r3, #21
    bf3a:	d50b      	bpl.n	bf54 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    bf3c:	4b23      	ldr	r3, [pc, #140]	; (bfcc <bus_fault.constprop.0+0x148>)
    bf3e:	481d      	ldr	r0, [pc, #116]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bf40:	617b      	str	r3, [r7, #20]
    bf42:	2302      	movs	r3, #2
    bf44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf48:	613b      	str	r3, [r7, #16]
    bf4a:	f107 0210 	add.w	r2, r7, #16
    bf4e:	f00e f983 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    bf52:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    bf54:	4b18      	ldr	r3, [pc, #96]	; (bfb8 <bus_fault.constprop.0+0x134>)
    bf56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf58:	05d2      	lsls	r2, r2, #23
    bf5a:	d518      	bpl.n	bf8e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    bf5c:	4b1c      	ldr	r3, [pc, #112]	; (bfd0 <bus_fault.constprop.0+0x14c>)
    bf5e:	4815      	ldr	r0, [pc, #84]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bf60:	617b      	str	r3, [r7, #20]
    bf62:	2302      	movs	r3, #2
    bf64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf68:	613b      	str	r3, [r7, #16]
    bf6a:	f107 0210 	add.w	r2, r7, #16
    bf6e:	f00e f973 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    bf72:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bf74:	4a10      	ldr	r2, [pc, #64]	; (bfb8 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    bf76:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bf78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    bf7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    bf7e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    bf80:	2300      	movs	r3, #0
    bf82:	702b      	strb	r3, [r5, #0]
}
    bf84:	46bd      	mov	sp, r7
    bf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    bf8a:	2016      	movs	r0, #22
    bf8c:	e79a      	b.n	bec4 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    bf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bf90:	049b      	lsls	r3, r3, #18
    bf92:	d5ef      	bpl.n	bf74 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    bf94:	4b0f      	ldr	r3, [pc, #60]	; (bfd4 <bus_fault.constprop.0+0x150>)
    bf96:	4807      	ldr	r0, [pc, #28]	; (bfb4 <bus_fault.constprop.0+0x130>)
    bf98:	617b      	str	r3, [r7, #20]
    bf9a:	2302      	movs	r3, #2
    bf9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfa0:	613b      	str	r3, [r7, #16]
    bfa2:	f107 0210 	add.w	r2, r7, #16
    bfa6:	f00e f957 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    bfaa:	201c      	movs	r0, #28
    bfac:	e7e2      	b.n	bf74 <bus_fault.constprop.0+0xf0>
    bfae:	bf00      	nop
    bfb0:	0001f6be 	.word	0x0001f6be
    bfb4:	0001e60c 	.word	0x0001e60c
    bfb8:	e000ed00 	.word	0xe000ed00
    bfbc:	0001f6d4 	.word	0x0001f6d4
    bfc0:	0001f62f 	.word	0x0001f62f
    bfc4:	0001f6e5 	.word	0x0001f6e5
    bfc8:	0001f6fe 	.word	0x0001f6fe
    bfcc:	0001f713 	.word	0x0001f713
    bfd0:	0001f72e 	.word	0x0001f72e
    bfd4:	0001f68f 	.word	0x0001f68f

0000bfd8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    bfd8:	b510      	push	{r4, lr}
    bfda:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    bfdc:	2402      	movs	r4, #2
    bfde:	4b3e      	ldr	r3, [pc, #248]	; (c0d8 <usage_fault.constprop.0+0x100>)
    bfe0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfe4:	483d      	ldr	r0, [pc, #244]	; (c0dc <usage_fault.constprop.0+0x104>)
    bfe6:	aa04      	add	r2, sp, #16
    bfe8:	9305      	str	r3, [sp, #20]
    bfea:	9404      	str	r4, [sp, #16]
    bfec:	f00e f934 	bl	1a258 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    bff0:	4b3b      	ldr	r3, [pc, #236]	; (c0e0 <usage_fault.constprop.0+0x108>)
    bff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bff4:	0199      	lsls	r1, r3, #6
    bff6:	d56c      	bpl.n	c0d2 <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    bff8:	4b3a      	ldr	r3, [pc, #232]	; (c0e4 <usage_fault.constprop.0+0x10c>)
    bffa:	4838      	ldr	r0, [pc, #224]	; (c0dc <usage_fault.constprop.0+0x104>)
    bffc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c000:	aa04      	add	r2, sp, #16
    c002:	e9cd 4304 	strd	r4, r3, [sp, #16]
    c006:	f00e f927 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    c00a:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c00c:	4b34      	ldr	r3, [pc, #208]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c010:	01da      	lsls	r2, r3, #7
    c012:	d50a      	bpl.n	c02a <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    c014:	4b34      	ldr	r3, [pc, #208]	; (c0e8 <usage_fault.constprop.0+0x110>)
    c016:	4831      	ldr	r0, [pc, #196]	; (c0dc <usage_fault.constprop.0+0x104>)
    c018:	9305      	str	r3, [sp, #20]
    c01a:	2302      	movs	r3, #2
    c01c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c020:	aa04      	add	r2, sp, #16
    c022:	9304      	str	r3, [sp, #16]
    c024:	f00e f918 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    c028:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    c02a:	4b2d      	ldr	r3, [pc, #180]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c02e:	02db      	lsls	r3, r3, #11
    c030:	d50a      	bpl.n	c048 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    c032:	2402      	movs	r4, #2
    c034:	4b2d      	ldr	r3, [pc, #180]	; (c0ec <usage_fault.constprop.0+0x114>)
    c036:	4829      	ldr	r0, [pc, #164]	; (c0dc <usage_fault.constprop.0+0x104>)
    c038:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c03c:	aa04      	add	r2, sp, #16
    c03e:	9305      	str	r3, [sp, #20]
    c040:	9404      	str	r4, [sp, #16]
    c042:	f00e f909 	bl	1a258 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    c046:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c048:	4b25      	ldr	r3, [pc, #148]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c04c:	031c      	lsls	r4, r3, #12
    c04e:	d50a      	bpl.n	c066 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    c050:	4b27      	ldr	r3, [pc, #156]	; (c0f0 <usage_fault.constprop.0+0x118>)
    c052:	4822      	ldr	r0, [pc, #136]	; (c0dc <usage_fault.constprop.0+0x104>)
    c054:	9305      	str	r3, [sp, #20]
    c056:	2302      	movs	r3, #2
    c058:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c05c:	aa04      	add	r2, sp, #16
    c05e:	9304      	str	r3, [sp, #16]
    c060:	f00e f8fa 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    c064:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c066:	4b1e      	ldr	r3, [pc, #120]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c06a:	0359      	lsls	r1, r3, #13
    c06c:	d50a      	bpl.n	c084 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    c06e:	4b21      	ldr	r3, [pc, #132]	; (c0f4 <usage_fault.constprop.0+0x11c>)
    c070:	481a      	ldr	r0, [pc, #104]	; (c0dc <usage_fault.constprop.0+0x104>)
    c072:	9305      	str	r3, [sp, #20]
    c074:	2302      	movs	r3, #2
    c076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c07a:	aa04      	add	r2, sp, #16
    c07c:	9304      	str	r3, [sp, #16]
    c07e:	f00e f8eb 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    c082:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c084:	4b16      	ldr	r3, [pc, #88]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c088:	039a      	lsls	r2, r3, #14
    c08a:	d50a      	bpl.n	c0a2 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    c08c:	4b1a      	ldr	r3, [pc, #104]	; (c0f8 <usage_fault.constprop.0+0x120>)
    c08e:	4813      	ldr	r0, [pc, #76]	; (c0dc <usage_fault.constprop.0+0x104>)
    c090:	9305      	str	r3, [sp, #20]
    c092:	2302      	movs	r3, #2
    c094:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c098:	aa04      	add	r2, sp, #16
    c09a:	9304      	str	r3, [sp, #16]
    c09c:	f00e f8dc 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    c0a0:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c0a2:	4b0f      	ldr	r3, [pc, #60]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0a6:	03db      	lsls	r3, r3, #15
    c0a8:	d50a      	bpl.n	c0c0 <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    c0aa:	4b14      	ldr	r3, [pc, #80]	; (c0fc <usage_fault.constprop.0+0x124>)
    c0ac:	480b      	ldr	r0, [pc, #44]	; (c0dc <usage_fault.constprop.0+0x104>)
    c0ae:	9305      	str	r3, [sp, #20]
    c0b0:	2302      	movs	r3, #2
    c0b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c0b6:	aa04      	add	r2, sp, #16
    c0b8:	9304      	str	r3, [sp, #16]
    c0ba:	f00e f8cd 	bl	1a258 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    c0be:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c0c0:	4a07      	ldr	r2, [pc, #28]	; (c0e0 <usage_fault.constprop.0+0x108>)
    c0c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c0c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c0c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    c0cc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    c0ce:	b006      	add	sp, #24
    c0d0:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    c0d2:	201d      	movs	r0, #29
    c0d4:	e79a      	b.n	c00c <usage_fault.constprop.0+0x34>
    c0d6:	bf00      	nop
    c0d8:	0001f746 	.word	0x0001f746
    c0dc:	0001e60c 	.word	0x0001e60c
    c0e0:	e000ed00 	.word	0xe000ed00
    c0e4:	0001f75e 	.word	0x0001f75e
    c0e8:	0001f771 	.word	0x0001f771
    c0ec:	0001f78b 	.word	0x0001f78b
    c0f0:	0001f7b5 	.word	0x0001f7b5
    c0f4:	0001f7d3 	.word	0x0001f7d3
    c0f8:	0001f7f8 	.word	0x0001f7f8
    c0fc:	0001f812 	.word	0x0001f812

0000c100 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c104:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c106:	4b7a      	ldr	r3, [pc, #488]	; (c2f0 <z_arm_fault+0x1f0>)
{
    c108:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c10a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    c10e:	468a      	mov	sl, r1
    c110:	4614      	mov	r4, r2
    c112:	2600      	movs	r6, #0
    c114:	af00      	add	r7, sp, #0
    c116:	f3c9 0808 	ubfx	r8, r9, #0, #9
    c11a:	f386 8811 	msr	BASEPRI, r6
    c11e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c122:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    c126:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    c12a:	d125      	bne.n	c178 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    c12c:	07d3      	lsls	r3, r2, #31
    c12e:	d423      	bmi.n	c178 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    c130:	0650      	lsls	r0, r2, #25
    c132:	d403      	bmi.n	c13c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c134:	0711      	lsls	r1, r2, #28
    c136:	d40f      	bmi.n	c158 <z_arm_fault+0x58>
			*nested_exc = true;
    c138:	2601      	movs	r6, #1
    c13a:	e00f      	b.n	c15c <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    c13c:	4b6d      	ldr	r3, [pc, #436]	; (c2f4 <z_arm_fault+0x1f4>)
    c13e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c142:	61fb      	str	r3, [r7, #28]
    c144:	2302      	movs	r3, #2
    c146:	486c      	ldr	r0, [pc, #432]	; (c2f8 <z_arm_fault+0x1f8>)
    c148:	61bb      	str	r3, [r7, #24]
    c14a:	f107 0218 	add.w	r2, r7, #24
    c14e:	f00e f883 	bl	1a258 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    c152:	f014 0404 	ands.w	r4, r4, #4
    c156:	d000      	beq.n	c15a <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
    c158:	4655      	mov	r5, sl
	*nested_exc = false;
    c15a:	2600      	movs	r6, #0
	*recoverable = false;
    c15c:	2300      	movs	r3, #0
    c15e:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    c160:	f1a8 0303 	sub.w	r3, r8, #3
    c164:	2b09      	cmp	r3, #9
    c166:	f200 80a2 	bhi.w	c2ae <z_arm_fault+0x1ae>
    c16a:	e8df f003 	tbb	[pc, r3]
    c16e:	9507      	.short	0x9507
    c170:	a0a09198 	.word	0xa0a09198
    c174:	9ba0a0a0 	.word	0x9ba0a0a0
		return NULL;
    c178:	4635      	mov	r5, r6
    c17a:	e7ef      	b.n	c15c <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    c17c:	46e9      	mov	r9, sp
    c17e:	f04f 0802 	mov.w	r8, #2
    c182:	4b5e      	ldr	r3, [pc, #376]	; (c2fc <z_arm_fault+0x1fc>)
    c184:	f107 0218 	add.w	r2, r7, #24
    c188:	61fb      	str	r3, [r7, #28]
    c18a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c18e:	485a      	ldr	r0, [pc, #360]	; (c2f8 <z_arm_fault+0x1f8>)
    c190:	f8c7 8018 	str.w	r8, [r7, #24]
    c194:	f00e f860 	bl	1a258 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    c198:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c19a:	4c55      	ldr	r4, [pc, #340]	; (c2f0 <z_arm_fault+0x1f0>)
	*recoverable = false;
    c19c:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c19e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c1a0:	079a      	lsls	r2, r3, #30
    c1a2:	d50b      	bpl.n	c1bc <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    c1a4:	4b56      	ldr	r3, [pc, #344]	; (c300 <z_arm_fault+0x200>)
		PR_EXC("  Debug event");
    c1a6:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    c1aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c1ae:	4852      	ldr	r0, [pc, #328]	; (c2f8 <z_arm_fault+0x1f8>)
    c1b0:	f107 0218 	add.w	r2, r7, #24
    c1b4:	f00e f850 	bl	1a258 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c1b8:	2400      	movs	r4, #0
    c1ba:	e038      	b.n	c22e <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c1bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c1be:	2b00      	cmp	r3, #0
    c1c0:	da01      	bge.n	c1c6 <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
    c1c2:	4b50      	ldr	r3, [pc, #320]	; (c304 <z_arm_fault+0x204>)
    c1c4:	e7ef      	b.n	c1a6 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c1c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c1c8:	005b      	lsls	r3, r3, #1
    c1ca:	d5f5      	bpl.n	c1b8 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
    c1cc:	4b4e      	ldr	r3, [pc, #312]	; (c308 <z_arm_fault+0x208>)
    c1ce:	f107 0218 	add.w	r2, r7, #24
    c1d2:	e9c7 8306 	strd	r8, r3, [r7, #24]
    c1d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c1da:	4847      	ldr	r0, [pc, #284]	; (c2f8 <z_arm_fault+0x1f8>)
    c1dc:	f00e f83c 	bl	1a258 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c1e0:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    c1e2:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c1e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c1e8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c1ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c1ee:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c1f2:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    c1f4:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c1f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c1fc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c1fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c202:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c206:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c20a:	429a      	cmp	r2, r3
    c20c:	d12b      	bne.n	c266 <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    c20e:	b088      	sub	sp, #32
    c210:	682b      	ldr	r3, [r5, #0]
    c212:	466a      	mov	r2, sp
    c214:	493d      	ldr	r1, [pc, #244]	; (c30c <z_arm_fault+0x20c>)
    c216:	4838      	ldr	r0, [pc, #224]	; (c2f8 <z_arm_fault+0x1f8>)
    c218:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c21c:	2303      	movs	r3, #3
    c21e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c222:	f842 3f10 	str.w	r3, [r2, #16]!
    c226:	f00e f817 	bl	1a258 <z_log_msg_static_create.constprop.0>
    c22a:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    c22c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    c22e:	79fb      	ldrb	r3, [r7, #7]
    c230:	b9ab      	cbnz	r3, c25e <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c232:	2220      	movs	r2, #32
    c234:	4629      	mov	r1, r5
    c236:	f107 0008 	add.w	r0, r7, #8
    c23a:	f00e f898 	bl	1a36e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c240:	2e00      	cmp	r6, #0
    c242:	d050      	beq.n	c2e6 <z_arm_fault+0x1e6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c244:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c248:	b922      	cbnz	r2, c254 <z_arm_fault+0x154>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c24a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c24e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c252:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    c254:	4620      	mov	r0, r4
    c256:	f107 0108 	add.w	r1, r7, #8
    c25a:	f7ff fbe9 	bl	ba30 <z_arm_fatal_error>
}
    c25e:	3728      	adds	r7, #40	; 0x28
    c260:	46bd      	mov	sp, r7
    c262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    c266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c268:	b2db      	uxtb	r3, r3
    c26a:	b123      	cbz	r3, c276 <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
    c26c:	2001      	movs	r0, #1
    c26e:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    c270:	f7ff fd66 	bl	bd40 <mem_manage_fault.constprop.0>
    c274:	e00e      	b.n	c294 <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    c276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c278:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    c27c:	d004      	beq.n	c288 <z_arm_fault+0x188>
			reason = bus_fault(esf, 1, recoverable);
    c27e:	2001      	movs	r0, #1
    c280:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    c282:	f7ff fdff 	bl	be84 <bus_fault.constprop.0>
    c286:	e005      	b.n	c294 <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    c288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c28e:	d393      	bcc.n	c1b8 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
    c290:	f7ff fea2 	bl	bfd8 <usage_fault.constprop.0>
    c294:	4604      	mov	r4, r0
    c296:	e7ca      	b.n	c22e <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    c298:	2000      	movs	r0, #0
    c29a:	1df9      	adds	r1, r7, #7
    c29c:	e7e8      	b.n	c270 <z_arm_fault+0x170>
		reason = bus_fault(esf, 0, recoverable);
    c29e:	2000      	movs	r0, #0
    c2a0:	1df9      	adds	r1, r7, #7
    c2a2:	e7ee      	b.n	c282 <z_arm_fault+0x182>
	PR_FAULT_INFO(
    c2a4:	4b1a      	ldr	r3, [pc, #104]	; (c310 <z_arm_fault+0x210>)
    c2a6:	61fb      	str	r3, [r7, #28]
    c2a8:	2302      	movs	r3, #2
    c2aa:	61bb      	str	r3, [r7, #24]
    c2ac:	e77d      	b.n	c1aa <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
    c2ae:	4a19      	ldr	r2, [pc, #100]	; (c314 <z_arm_fault+0x214>)
    c2b0:	466c      	mov	r4, sp
    c2b2:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    c2b6:	b08a      	sub	sp, #40	; 0x28
    c2b8:	4b17      	ldr	r3, [pc, #92]	; (c318 <z_arm_fault+0x218>)
    c2ba:	bf18      	it	ne
    c2bc:	4613      	movne	r3, r2
    c2be:	466a      	mov	r2, sp
    c2c0:	4916      	ldr	r1, [pc, #88]	; (c31c <z_arm_fault+0x21c>)
    c2c2:	480d      	ldr	r0, [pc, #52]	; (c2f8 <z_arm_fault+0x1f8>)
    c2c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c2c8:	f1a8 0310 	sub.w	r3, r8, #16
    c2cc:	61d3      	str	r3, [r2, #28]
    c2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
    c2d2:	8413      	strh	r3, [r2, #32]
    c2d4:	4b12      	ldr	r3, [pc, #72]	; (c320 <z_arm_fault+0x220>)
    c2d6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    c2da:	f842 3f10 	str.w	r3, [r2, #16]!
    c2de:	f00d ffbb 	bl	1a258 <z_log_msg_static_create.constprop.0>
    c2e2:	46a5      	mov	sp, r4
}
    c2e4:	e768      	b.n	c1b8 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c2e6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c2ea:	f023 0301 	bic.w	r3, r3, #1
    c2ee:	e7b0      	b.n	c252 <z_arm_fault+0x152>
    c2f0:	e000ed00 	.word	0xe000ed00
    c2f4:	0001f86b 	.word	0x0001f86b
    c2f8:	0001e60c 	.word	0x0001e60c
    c2fc:	0001f88e 	.word	0x0001f88e
    c300:	0001f8a5 	.word	0x0001f8a5
    c304:	0001f8c6 	.word	0x0001f8c6
    c308:	0001f8d4 	.word	0x0001f8d4
    c30c:	0001f8f3 	.word	0x0001f8f3
    c310:	0001f90f 	.word	0x0001f90f
    c314:	0001f852 	.word	0x0001f852
    c318:	0001f83d 	.word	0x0001f83d
    c31c:	0001f933 	.word	0x0001f933
    c320:	01000004 	.word	0x01000004

0000c324 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c324:	4b04      	ldr	r3, [pc, #16]	; (c338 <z_arm_fault_init+0x14>)
    c326:	695a      	ldr	r2, [r3, #20]
    c328:	f042 0210 	orr.w	r2, r2, #16
    c32c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    c32e:	695a      	ldr	r2, [r3, #20]
    c330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c334:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    c336:	4770      	bx	lr
    c338:	e000ed00 	.word	0xe000ed00

0000c33c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c33c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c340:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c344:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c346:	4672      	mov	r2, lr
	bl z_arm_fault
    c348:	f7ff feda 	bl	c100 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c34c:	bd01      	pop	{r0, pc}
    c34e:	bf00      	nop

0000c350 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c350:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c352:	2120      	movs	r1, #32
    c354:	4803      	ldr	r0, [pc, #12]	; (c364 <z_arm_interrupt_init+0x14>)
    c356:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c358:	3301      	adds	r3, #1
    c35a:	2b45      	cmp	r3, #69	; 0x45
    c35c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    c360:	d1f9      	bne.n	c356 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    c362:	4770      	bx	lr
    c364:	e000e100 	.word	0xe000e100

0000c368 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    c368:	2000      	movs	r0, #0
    msr CONTROL, r0
    c36a:	f380 8814 	msr	CONTROL, r0
    isb
    c36e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    c372:	2000      	movs	r0, #0
    msr MSPLIM, r0
    c374:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    c378:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c37c:	f7fd ff32 	bl	a1e4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    c380:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    c382:	490e      	ldr	r1, [pc, #56]	; (c3bc <__start+0x54>)
    str r0, [r1]
    c384:	6008      	str	r0, [r1, #0]
    dsb
    c386:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c38a:	480d      	ldr	r0, [pc, #52]	; (c3c0 <__start+0x58>)
    msr msp, r0
    c38c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    c390:	f000 f83e 	bl	c410 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c394:	2020      	movs	r0, #32
    msr BASEPRI, r0
    c396:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c39a:	480a      	ldr	r0, [pc, #40]	; (c3c4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c39c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    c3a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c3a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c3a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c3aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c3ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c3ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c3b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c3b6:	f7ff fbeb 	bl	bb90 <z_arm_prep_c>
    c3ba:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    c3bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c3c0:	2000c3e0 	.word	0x2000c3e0
    ldr r0, =z_interrupt_stacks
    c3c4:	2000b2a0 	.word	0x2000b2a0

0000c3c8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    c3c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c3cc:	4905      	ldr	r1, [pc, #20]	; (c3e4 <sys_arch_reboot+0x1c>)
    c3ce:	4b06      	ldr	r3, [pc, #24]	; (c3e8 <sys_arch_reboot+0x20>)
    c3d0:	68ca      	ldr	r2, [r1, #12]
    c3d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c3d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c3d8:	60cb      	str	r3, [r1, #12]
    c3da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c3de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c3e0:	e7fd      	b.n	c3de <sys_arch_reboot+0x16>
    c3e2:	bf00      	nop
    c3e4:	e000ed00 	.word	0xe000ed00
    c3e8:	05fa0004 	.word	0x05fa0004

0000c3ec <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    c3ec:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    c3ee:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    c3f0:	4906      	ldr	r1, [pc, #24]	; (c40c <z_arm_clear_arm_mpu_config+0x20>)
    c3f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    c3f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    c3fa:	4293      	cmp	r3, r2
    c3fc:	db00      	blt.n	c400 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    c3fe:	4770      	bx	lr
  mpu->RNR = rnr;
    c400:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    c404:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    c408:	3301      	adds	r3, #1
    c40a:	e7f6      	b.n	c3fa <z_arm_clear_arm_mpu_config+0xe>
    c40c:	e000ed00 	.word	0xe000ed00

0000c410 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    c410:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    c412:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    c414:	2400      	movs	r4, #0
    c416:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    c41a:	f7ff ffe7 	bl	c3ec <z_arm_clear_arm_mpu_config>
    c41e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    c420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c424:	4a0c      	ldr	r2, [pc, #48]	; (c458 <z_arm_init_arch_hw_at_boot+0x48>)
    c426:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c42a:	3301      	adds	r3, #1
    c42c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    c42e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    c432:	d1f8      	bne.n	c426 <z_arm_init_arch_hw_at_boot+0x16>
    c434:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    c436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c43a:	4a07      	ldr	r2, [pc, #28]	; (c458 <z_arm_init_arch_hw_at_boot+0x48>)
    c43c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c440:	3301      	adds	r3, #1
    c442:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    c444:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    c448:	d1f8      	bne.n	c43c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    c44a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    c44c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c450:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    c454:	bd10      	pop	{r4, pc}
    c456:	bf00      	nop
    c458:	e000e100 	.word	0xe000e100

0000c45c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    c45c:	4b08      	ldr	r3, [pc, #32]	; (c480 <z_impl_k_thread_abort+0x24>)
    c45e:	689b      	ldr	r3, [r3, #8]
    c460:	4283      	cmp	r3, r0
    c462:	d10b      	bne.n	c47c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c464:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    c468:	b143      	cbz	r3, c47c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c46a:	4b06      	ldr	r3, [pc, #24]	; (c484 <z_impl_k_thread_abort+0x28>)
    c46c:	685a      	ldr	r2, [r3, #4]
    c46e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    c472:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    c474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c47a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    c47c:	f00b bede 	b.w	1823c <z_thread_abort>
    c480:	20009bfc 	.word	0x20009bfc
    c484:	e000ed00 	.word	0xe000ed00

0000c488 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    c488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    c48a:	4c09      	ldr	r4, [pc, #36]	; (c4b0 <z_arm_configure_static_mpu_regions+0x28>)
    c48c:	4a09      	ldr	r2, [pc, #36]	; (c4b4 <z_arm_configure_static_mpu_regions+0x2c>)
    c48e:	4623      	mov	r3, r4
    c490:	2101      	movs	r1, #1
    c492:	4809      	ldr	r0, [pc, #36]	; (c4b8 <z_arm_configure_static_mpu_regions+0x30>)
    c494:	f000 f92a 	bl	c6ec <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    c498:	2300      	movs	r3, #0
    c49a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    c49c:	4b07      	ldr	r3, [pc, #28]	; (c4bc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    c49e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    c4a0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    c4a2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    c4a4:	9301      	str	r3, [sp, #4]
    c4a6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    c4a8:	f000 f92a 	bl	c700 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    c4ac:	b004      	add	sp, #16
    c4ae:	bd10      	pop	{r4, pc}
    c4b0:	20070000 	.word	0x20070000
    c4b4:	20008000 	.word	0x20008000
    c4b8:	0001e980 	.word	0x0001e980
    c4bc:	20008740 	.word	0x20008740

0000c4c0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    c4c0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    c4c2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    c4c4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    c4c6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    c4ca:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    c4ce:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    c4d0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    c4d2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    c4d4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    c4d8:	4905      	ldr	r1, [pc, #20]	; (c4f0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    c4da:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    c4de:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    c4e2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    c4e6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    c4ea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    c4ee:	bd10      	pop	{r4, pc}
    c4f0:	e000ed00 	.word	0xe000ed00

0000c4f4 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    c4f4:	b580      	push	{r7, lr}
    c4f6:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    c4f8:	b088      	sub	sp, #32
    c4fa:	466a      	mov	r2, sp
    c4fc:	4b07      	ldr	r3, [pc, #28]	; (c51c <region_allocate_and_init.part.0+0x28>)
    c4fe:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c502:	2303      	movs	r3, #3
    c504:	f842 3f10 	str.w	r3, [r2, #16]!
    c508:	2300      	movs	r3, #0
    c50a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c50e:	4804      	ldr	r0, [pc, #16]	; (c520 <region_allocate_and_init.part.0+0x2c>)
    c510:	f7fe fcd0 	bl	aeb4 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    c514:	f06f 0015 	mvn.w	r0, #21
    c518:	46bd      	mov	sp, r7
    c51a:	bd80      	pop	{r7, pc}
    c51c:	0001f94a 	.word	0x0001f94a
    c520:	0001e5ec 	.word	0x0001e5ec

0000c524 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c528:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    c52a:	4606      	mov	r6, r0
    c52c:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    c530:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    c532:	4d5f      	ldr	r5, [pc, #380]	; (c6b0 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    c534:	af00      	add	r7, sp, #0
    c536:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    c538:	687b      	ldr	r3, [r7, #4]
    c53a:	4599      	cmp	r9, r3
    c53c:	da35      	bge.n	c5aa <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    c53e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    c542:	f1b8 0f00 	cmp.w	r8, #0
    c546:	d054      	beq.n	c5f2 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    c548:	f1b8 0f1f 	cmp.w	r8, #31
    c54c:	d91b      	bls.n	c586 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    c54e:	f018 0f1f 	tst.w	r8, #31
    c552:	d118      	bne.n	c586 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    c554:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    c558:	f01b 0f1f 	tst.w	fp, #31
    c55c:	d113      	bne.n	c586 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c55e:	4658      	mov	r0, fp
    c560:	f00d fe7f 	bl	1a262 <arm_cmse_mpu_region_get>
    c564:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c566:	eb08 000b 	add.w	r0, r8, fp
    c56a:	3801      	subs	r0, #1
    c56c:	f00d fe79 	bl	1a262 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    c570:	4582      	cmp	sl, r0
    c572:	d01f      	beq.n	c5b4 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    c574:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    c578:	466c      	mov	r4, sp
    c57a:	b088      	sub	sp, #32
    c57c:	466a      	mov	r2, sp
    c57e:	494d      	ldr	r1, [pc, #308]	; (c6b4 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    c580:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    c584:	e005      	b.n	c592 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    c586:	466c      	mov	r4, sp
    c588:	b088      	sub	sp, #32
    c58a:	466a      	mov	r2, sp
    c58c:	4b4a      	ldr	r3, [pc, #296]	; (c6b8 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    c58e:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    c592:	2303      	movs	r3, #3
    c594:	f842 3f10 	str.w	r3, [r2, #16]!
    c598:	2300      	movs	r3, #0
    c59a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c59e:	4847      	ldr	r0, [pc, #284]	; (c6bc <mpu_configure_regions_and_partition.constprop.0+0x198>)
    c5a0:	f7fe fc88 	bl	aeb4 <z_impl_z_log_msg_static_create>
    c5a4:	46a5      	mov	sp, r4
			return -EINVAL;
    c5a6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    c5aa:	4620      	mov	r0, r4
    c5ac:	371c      	adds	r7, #28
    c5ae:	46bd      	mov	sp, r7
    c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    c5b4:	f11a 0f16 	cmn.w	sl, #22
    c5b8:	d0de      	beq.n	c578 <mpu_configure_regions_and_partition.constprop.0+0x54>
    c5ba:	4554      	cmp	r4, sl
    c5bc:	dddc      	ble.n	c578 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    c5be:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c5c2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    c5c6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    c5ca:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    c5ce:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    c5d2:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    c5d6:	e9d6 2100 	ldrd	r2, r1, [r6]
    c5da:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    c5dc:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    c5de:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    c5e2:	d11e      	bne.n	c622 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    c5e4:	45d8      	cmp	r8, fp
    c5e6:	d108      	bne.n	c5fa <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    c5e8:	4631      	mov	r1, r6
    c5ea:	fa5f f08a 	uxtb.w	r0, sl
    c5ee:	f00d fe41 	bl	1a274 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    c5f2:	f109 0901 	add.w	r9, r9, #1
    c5f6:	360c      	adds	r6, #12
    c5f8:	e79e      	b.n	c538 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    c5fa:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c5fe:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    c602:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    c606:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    c60a:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    c60c:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    c60e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    c612:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    c614:	f00d fe2e 	bl	1a274 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    c618:	f110 0f16 	cmn.w	r0, #22
    c61c:	d0c3      	beq.n	c5a6 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    c61e:	1c44      	adds	r4, r0, #1
    c620:	e7e7      	b.n	c5f2 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    c622:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    c624:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    c626:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c628:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    c62c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    c630:	d108      	bne.n	c644 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    c632:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    c636:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    c638:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c63c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    c63e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    c642:	e7e7      	b.n	c614 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    c644:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    c648:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c64c:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    c64e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    c652:	4631      	mov	r1, r6
    c654:	f00d fe0e 	bl	1a274 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    c658:	f110 0f16 	cmn.w	r0, #22
    c65c:	d0a3      	beq.n	c5a6 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    c65e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c662:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    c666:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    c668:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    c66c:	f362 0304 	bfi	r3, r2, #0, #5
    c670:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    c672:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    c676:	7c3a      	ldrb	r2, [r7, #16]
    c678:	085b      	lsrs	r3, r3, #1
    c67a:	f363 1247 	bfi	r2, r3, #5, #3
    c67e:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    c680:	e9d6 3200 	ldrd	r3, r2, [r6]
    c684:	4413      	add	r3, r2
    c686:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    c688:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    c68c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    c68e:	4443      	add	r3, r8
    c690:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    c694:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    c696:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    c69a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    c69c:	617b      	str	r3, [r7, #20]
    c69e:	d902      	bls.n	c6a6 <mpu_configure_regions_and_partition.constprop.0+0x182>
    c6a0:	f7ff ff28 	bl	c4f4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    c6a4:	e7b8      	b.n	c618 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    c6a6:	f107 0108 	add.w	r1, r7, #8
    c6aa:	f7ff ff09 	bl	c4c0 <region_init>
    c6ae:	e7b6      	b.n	c61e <mpu_configure_regions_and_partition.constprop.0+0xfa>
    c6b0:	e000ed00 	.word	0xe000ed00
    c6b4:	0001f993 	.word	0x0001f993
    c6b8:	0001f970 	.word	0x0001f970
    c6bc:	0001e5ec 	.word	0x0001e5ec

0000c6c0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c6c0:	2205      	movs	r2, #5
    c6c2:	4b04      	ldr	r3, [pc, #16]	; (c6d4 <arm_core_mpu_enable+0x14>)
    c6c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c6c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c6cc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c6d0:	4770      	bx	lr
    c6d2:	bf00      	nop
    c6d4:	e000ed00 	.word	0xe000ed00

0000c6d8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c6d8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c6dc:	2200      	movs	r2, #0
    c6de:	4b02      	ldr	r3, [pc, #8]	; (c6e8 <arm_core_mpu_disable+0x10>)
    c6e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c6e4:	4770      	bx	lr
    c6e6:	bf00      	nop
    c6e8:	e000ed00 	.word	0xe000ed00

0000c6ec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c6ec:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c6ee:	4c03      	ldr	r4, [pc, #12]	; (c6fc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    c6f0:	7822      	ldrb	r2, [r4, #0]
    c6f2:	f7ff ff17 	bl	c524 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c6f6:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c6f8:	bd10      	pop	{r4, pc}
    c6fa:	bf00      	nop
    c6fc:	20009c5d 	.word	0x20009c5d

0000c700 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    c700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c704:	4d29      	ldr	r5, [pc, #164]	; (c7ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    c706:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    c708:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c70a:	f04f 0800 	mov.w	r8, #0
    c70e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    c710:	4f27      	ldr	r7, [pc, #156]	; (c7b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c712:	45d0      	cmp	r8, sl
    c714:	da1b      	bge.n	c74e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    c716:	f8d6 9004 	ldr.w	r9, [r6, #4]
    c71a:	f1b9 0f00 	cmp.w	r9, #0
    c71e:	d03f      	beq.n	c7a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    c720:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c722:	4608      	mov	r0, r1
    c724:	9101      	str	r1, [sp, #4]
    c726:	f00d fd9c 	bl	1a262 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c72a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c72c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c72e:	eb09 0001 	add.w	r0, r9, r1
    c732:	3801      	subs	r0, #1
    c734:	f00d fd95 	bl	1a262 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    c738:	4284      	cmp	r4, r0
    c73a:	f04f 0214 	mov.w	r2, #20
    c73e:	4b1d      	ldr	r3, [pc, #116]	; (c7b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    c740:	d008      	beq.n	c754 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    c742:	fb02 f308 	mul.w	r3, r2, r8
    c746:	f06f 0215 	mvn.w	r2, #21
    c74a:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    c74e:	b003      	add	sp, #12
    c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    c754:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    c758:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    c75a:	d0f8      	beq.n	c74e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    c75c:	7819      	ldrb	r1, [r3, #0]
    c75e:	42a1      	cmp	r1, r4
    c760:	ddf5      	ble.n	c74e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    c762:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    c766:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    c76a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    c76e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    c772:	f100 0108 	add.w	r1, r0, #8
    c776:	7b00      	ldrb	r0, [r0, #12]
    c778:	f364 0004 	bfi	r0, r4, #0, #5
    c77c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    c77e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    c782:	790c      	ldrb	r4, [r1, #4]
    c784:	0840      	lsrs	r0, r0, #1
    c786:	f360 1447 	bfi	r4, r0, #5, #3
    c78a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    c78c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    c790:	f021 011f 	bic.w	r1, r1, #31
    c794:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    c796:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    c79a:	f021 011f 	bic.w	r1, r1, #31
    c79e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c7a0:	f108 0801 	add.w	r8, r8, #1
    c7a4:	3514      	adds	r5, #20
    c7a6:	360c      	adds	r6, #12
    c7a8:	e7b3      	b.n	c712 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    c7aa:	bf00      	nop
    c7ac:	20009814 	.word	0x20009814
    c7b0:	e000ed00 	.word	0xe000ed00
    c7b4:	20009c5d 	.word	0x20009c5d

0000c7b8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c7b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c7ba:	4d0e      	ldr	r5, [pc, #56]	; (c7f4 <z_arm_mpu_init+0x3c>)
    c7bc:	682c      	ldr	r4, [r5, #0]
    c7be:	2c08      	cmp	r4, #8
    c7c0:	d815      	bhi.n	c7ee <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c7c2:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    c7c4:	f7ff ff88 	bl	c6d8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    c7c8:	4b0b      	ldr	r3, [pc, #44]	; (c7f8 <z_arm_mpu_init+0x40>)
    c7ca:	4a0c      	ldr	r2, [pc, #48]	; (c7fc <z_arm_mpu_init+0x44>)
    c7cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c7d0:	4284      	cmp	r4, r0
    c7d2:	d105      	bne.n	c7e0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c7d4:	4b0a      	ldr	r3, [pc, #40]	; (c800 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c7d6:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    c7d8:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    c7da:	f7ff ff71 	bl	c6c0 <arm_core_mpu_enable>
}
    c7de:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c7e0:	6869      	ldr	r1, [r5, #4]
    c7e2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    c7e6:	f7ff fe6b 	bl	c4c0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c7ea:	3001      	adds	r0, #1
    c7ec:	e7f0      	b.n	c7d0 <z_arm_mpu_init+0x18>
		return -1;
    c7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7f2:	e7f4      	b.n	c7de <z_arm_mpu_init+0x26>
    c7f4:	0001e98c 	.word	0x0001e98c
    c7f8:	e000ed00 	.word	0xe000ed00
    c7fc:	0044ffaa 	.word	0x0044ffaa
    c800:	20009c5d 	.word	0x20009c5d

0000c804 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c804:	4b01      	ldr	r3, [pc, #4]	; (c80c <__stdout_hook_install+0x8>)
    c806:	6018      	str	r0, [r3, #0]
}
    c808:	4770      	bx	lr
    c80a:	bf00      	nop
    c80c:	20008210 	.word	0x20008210

0000c810 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    c810:	2000      	movs	r0, #0
    c812:	4b02      	ldr	r3, [pc, #8]	; (c81c <remoteproc_mgr_boot+0xc>)
    c814:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    c818:	4770      	bx	lr
    c81a:	bf00      	nop
    c81c:	40005000 	.word	0x40005000

0000c820 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    c820:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c822:	4804      	ldr	r0, [pc, #16]	; (c834 <xoshiro128_initialize+0x14>)
    c824:	f010 fec5 	bl	1d5b2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    c828:	2800      	cmp	r0, #0
}
    c82a:	bf0c      	ite	eq
    c82c:	f06f 0012 	mvneq.w	r0, #18
    c830:	2000      	movne	r0, #0
    c832:	bd08      	pop	{r3, pc}
    c834:	0001e20c 	.word	0x0001e20c

0000c838 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    c838:	4b0e      	ldr	r3, [pc, #56]	; (c874 <bt_hex+0x3c>)
    c83a:	2940      	cmp	r1, #64	; 0x40
    c83c:	bf28      	it	cs
    c83e:	2140      	movcs	r1, #64	; 0x40
{
    c840:	b570      	push	{r4, r5, r6, lr}
    c842:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    c844:	4c0c      	ldr	r4, [pc, #48]	; (c878 <bt_hex+0x40>)
    c846:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    c848:	42b0      	cmp	r0, r6
    c84a:	f103 0302 	add.w	r3, r3, #2
    c84e:	d104      	bne.n	c85a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    c850:	2300      	movs	r3, #0
    c852:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    c856:	4807      	ldr	r0, [pc, #28]	; (c874 <bt_hex+0x3c>)
    c858:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    c85a:	7802      	ldrb	r2, [r0, #0]
    c85c:	0912      	lsrs	r2, r2, #4
    c85e:	5ca2      	ldrb	r2, [r4, r2]
    c860:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    c864:	f810 2b01 	ldrb.w	r2, [r0], #1
    c868:	f002 020f 	and.w	r2, r2, #15
    c86c:	5ca2      	ldrb	r2, [r4, r2]
    c86e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    c872:	e7e9      	b.n	c848 <bt_hex+0x10>
    c874:	20009c7c 	.word	0x20009c7c
    c878:	0001f9f8 	.word	0x0001f9f8

0000c87c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    c87c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    c87e:	7803      	ldrb	r3, [r0, #0]
    c880:	b08b      	sub	sp, #44	; 0x2c
    c882:	4604      	mov	r4, r0
    c884:	ad07      	add	r5, sp, #28
    c886:	2b03      	cmp	r3, #3
    c888:	d821      	bhi.n	c8ce <bt_addr_le_str+0x52>
    c88a:	e8df f003 	tbb	[pc, r3]
    c88e:	1a02      	.short	0x1a02
    c890:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    c892:	4912      	ldr	r1, [pc, #72]	; (c8dc <bt_addr_le_str+0x60>)
		strcpy(type, "random");
    c894:	4628      	mov	r0, r5
    c896:	f00d fd0d 	bl	1a2b4 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c89a:	9505      	str	r5, [sp, #20]
    c89c:	7863      	ldrb	r3, [r4, #1]
    c89e:	211e      	movs	r1, #30
    c8a0:	9304      	str	r3, [sp, #16]
    c8a2:	78a3      	ldrb	r3, [r4, #2]
    c8a4:	4a0e      	ldr	r2, [pc, #56]	; (c8e0 <bt_addr_le_str+0x64>)
    c8a6:	9303      	str	r3, [sp, #12]
    c8a8:	78e3      	ldrb	r3, [r4, #3]
    c8aa:	480e      	ldr	r0, [pc, #56]	; (c8e4 <bt_addr_le_str+0x68>)
    c8ac:	9302      	str	r3, [sp, #8]
    c8ae:	7923      	ldrb	r3, [r4, #4]
    c8b0:	9301      	str	r3, [sp, #4]
    c8b2:	7963      	ldrb	r3, [r4, #5]
    c8b4:	9300      	str	r3, [sp, #0]
    c8b6:	79a3      	ldrb	r3, [r4, #6]
    c8b8:	f00c f85f 	bl	1897a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    c8bc:	4809      	ldr	r0, [pc, #36]	; (c8e4 <bt_addr_le_str+0x68>)
    c8be:	b00b      	add	sp, #44	; 0x2c
    c8c0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    c8c2:	4909      	ldr	r1, [pc, #36]	; (c8e8 <bt_addr_le_str+0x6c>)
    c8c4:	e7e6      	b.n	c894 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    c8c6:	4909      	ldr	r1, [pc, #36]	; (c8ec <bt_addr_le_str+0x70>)
    c8c8:	e7e4      	b.n	c894 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    c8ca:	4909      	ldr	r1, [pc, #36]	; (c8f0 <bt_addr_le_str+0x74>)
    c8cc:	e7e2      	b.n	c894 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c8ce:	210a      	movs	r1, #10
    c8d0:	4628      	mov	r0, r5
    c8d2:	4a08      	ldr	r2, [pc, #32]	; (c8f4 <bt_addr_le_str+0x78>)
    c8d4:	f00c f851 	bl	1897a <snprintk>
		break;
    c8d8:	e7df      	b.n	c89a <bt_addr_le_str+0x1e>
    c8da:	bf00      	nop
    c8dc:	0001ef99 	.word	0x0001ef99
    c8e0:	0001efbb 	.word	0x0001efbb
    c8e4:	20009c5e 	.word	0x20009c5e
    c8e8:	0001efa0 	.word	0x0001efa0
    c8ec:	0001efa7 	.word	0x0001efa7
    c8f0:	0001efb1 	.word	0x0001efb1
    c8f4:	0002106d 	.word	0x0002106d

0000c8f8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
    c8f8:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c8fa:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    c8fc:	4d09      	ldr	r5, [pc, #36]	; (c924 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c8fe:	4b0a      	ldr	r3, [pc, #40]	; (c928 <long_wq_init+0x30>)
{
    c900:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    c902:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c904:	9302      	str	r3, [sp, #8]
    c906:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    c908:	f011 f88e 	bl	1da28 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    c90c:	ab02      	add	r3, sp, #8
    c90e:	4628      	mov	r0, r5
    c910:	9300      	str	r3, [sp, #0]
    c912:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    c916:	230a      	movs	r3, #10
    c918:	4904      	ldr	r1, [pc, #16]	; (c92c <long_wq_init+0x34>)
    c91a:	f00b f8d3 	bl	17ac4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    c91e:	4620      	mov	r0, r4
    c920:	b005      	add	sp, #20
    c922:	bd30      	pop	{r4, r5, pc}
    c924:	20008f80 	.word	0x20008f80
    c928:	0001fa10 	.word	0x0001fa10
    c92c:	2000a448 	.word	0x2000a448

0000c930 <bt_long_wq_schedule>:
{
    c930:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    c932:	4801      	ldr	r0, [pc, #4]	; (c938 <bt_long_wq_schedule+0x8>)
    c934:	f00b b93c 	b.w	17bb0 <k_work_schedule_for_queue>
    c938:	20008f80 	.word	0x20008f80

0000c93c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    c93c:	4603      	mov	r3, r0
    c93e:	b430      	push	{r4, r5}
	switch (src->type) {
    c940:	781a      	ldrb	r2, [r3, #0]
{
    c942:	4608      	mov	r0, r1
	switch (src->type) {
    c944:	2a01      	cmp	r2, #1
    c946:	d013      	beq.n	c970 <uuid_to_uuid128+0x34>
    c948:	2a02      	cmp	r2, #2
    c94a:	d026      	beq.n	c99a <uuid_to_uuid128+0x5e>
    c94c:	b972      	cbnz	r2, c96c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    c94e:	4a15      	ldr	r2, [pc, #84]	; (c9a4 <uuid_to_uuid128+0x68>)
    c950:	f102 0410 	add.w	r4, r2, #16
    c954:	f852 5b04 	ldr.w	r5, [r2], #4
    c958:	42a2      	cmp	r2, r4
    c95a:	f841 5b04 	str.w	r5, [r1], #4
    c95e:	d1f9      	bne.n	c954 <uuid_to_uuid128+0x18>
    c960:	7812      	ldrb	r2, [r2, #0]
    c962:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    c964:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
    c966:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    c968:	0a1b      	lsrs	r3, r3, #8
    c96a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    c96c:	bc30      	pop	{r4, r5}
    c96e:	4770      	bx	lr
		*dst = uuid128_base;
    c970:	4a0c      	ldr	r2, [pc, #48]	; (c9a4 <uuid_to_uuid128+0x68>)
    c972:	f102 0410 	add.w	r4, r2, #16
    c976:	f852 5b04 	ldr.w	r5, [r2], #4
    c97a:	42a2      	cmp	r2, r4
    c97c:	f841 5b04 	str.w	r5, [r1], #4
    c980:	d1f9      	bne.n	c976 <uuid_to_uuid128+0x3a>
    c982:	7812      	ldrb	r2, [r2, #0]
    c984:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    c986:	685b      	ldr	r3, [r3, #4]
    c988:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c98c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    c98e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c990:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    c992:	0a1b      	lsrs	r3, r3, #8
    c994:	7382      	strb	r2, [r0, #14]
    c996:	7403      	strb	r3, [r0, #16]
}
    c998:	e7e8      	b.n	c96c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    c99a:	2211      	movs	r2, #17
}
    c99c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    c99e:	4619      	mov	r1, r3
    c9a0:	f00d bce5 	b.w	1a36e <memcpy>
    c9a4:	0001fa19 	.word	0x0001fa19

0000c9a8 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    c9a8:	2801      	cmp	r0, #1
{
    c9aa:	b538      	push	{r3, r4, r5, lr}
    c9ac:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    c9ae:	bf0c      	ite	eq
    c9b0:	4806      	ldreq	r0, [pc, #24]	; (c9cc <bt_buf_get_rx+0x24>)
    c9b2:	4807      	ldrne	r0, [pc, #28]	; (c9d0 <bt_buf_get_rx+0x28>)
    c9b4:	f00f fd67 	bl	1c486 <net_buf_alloc_fixed>
    c9b8:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c9ba:	b120      	cbz	r0, c9c6 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    c9bc:	2101      	movs	r1, #1
    c9be:	300c      	adds	r0, #12
    c9c0:	f00f fdbd 	bl	1c53e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c9c4:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c9c6:	4620      	mov	r0, r4
    c9c8:	bd38      	pop	{r3, r4, r5, pc}
    c9ca:	bf00      	nop
    c9cc:	20008690 	.word	0x20008690
    c9d0:	2000860c 	.word	0x2000860c

0000c9d4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c9d4:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c9d6:	2000      	movs	r0, #0
    c9d8:	b570      	push	{r4, r5, r6, lr}
    c9da:	460b      	mov	r3, r1
    c9dc:	490a      	ldr	r1, [pc, #40]	; (ca08 <bt_buf_get_cmd_complete+0x34>)
    c9de:	e8d1 4fef 	ldaex	r4, [r1]
    c9e2:	e8c1 0fe5 	stlex	r5, r0, [r1]
    c9e6:	2d00      	cmp	r5, #0
    c9e8:	d1f9      	bne.n	c9de <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    c9ea:	b924      	cbnz	r4, c9f6 <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c9f0:	2001      	movs	r0, #1
    c9f2:	f7ff bfd9 	b.w	c9a8 <bt_buf_get_rx>
    c9f6:	2101      	movs	r1, #1
		buf->len = 0U;
    c9f8:	8220      	strh	r0, [r4, #16]
    c9fa:	7621      	strb	r1, [r4, #24]
    c9fc:	f104 000c 	add.w	r0, r4, #12
    ca00:	f00f fd9d 	bl	1c53e <net_buf_simple_reserve>
}
    ca04:	4620      	mov	r0, r4
    ca06:	bd70      	pop	{r4, r5, r6, pc}
    ca08:	20008140 	.word	0x20008140

0000ca0c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    ca0c:	b570      	push	{r4, r5, r6, lr}
    ca0e:	4604      	mov	r4, r0
	switch (evt) {
    ca10:	2c0f      	cmp	r4, #15
{
    ca12:	460d      	mov	r5, r1
    ca14:	4610      	mov	r0, r2
    ca16:	4619      	mov	r1, r3
	switch (evt) {
    ca18:	d805      	bhi.n	ca26 <bt_buf_get_evt+0x1a>
    ca1a:	2c0d      	cmp	r4, #13
    ca1c:	d90d      	bls.n	ca3a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    ca22:	f7ff bfd7 	b.w	c9d4 <bt_buf_get_cmd_complete>
	switch (evt) {
    ca26:	2c13      	cmp	r4, #19
    ca28:	d107      	bne.n	ca3a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    ca2a:	480c      	ldr	r0, [pc, #48]	; (ca5c <bt_buf_get_evt+0x50>)
    ca2c:	f00f fd2b 	bl	1c486 <net_buf_alloc_fixed>
			if (buf) {
    ca30:	4604      	mov	r4, r0
    ca32:	b938      	cbnz	r0, ca44 <bt_buf_get_evt+0x38>
{
    ca34:	2400      	movs	r4, #0
}
    ca36:	4620      	mov	r0, r4
    ca38:	bd70      	pop	{r4, r5, r6, pc}
    ca3a:	4602      	mov	r2, r0
    ca3c:	460b      	mov	r3, r1
		if (discardable) {
    ca3e:	b145      	cbz	r5, ca52 <bt_buf_get_evt+0x46>
    ca40:	4807      	ldr	r0, [pc, #28]	; (ca60 <bt_buf_get_evt+0x54>)
    ca42:	e7f3      	b.n	ca2c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    ca44:	2101      	movs	r1, #1
    ca46:	300c      	adds	r0, #12
    ca48:	f00f fd79 	bl	1c53e <net_buf_simple_reserve>
    ca4c:	2301      	movs	r3, #1
    ca4e:	7623      	strb	r3, [r4, #24]
}
    ca50:	e7f1      	b.n	ca36 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ca52:	2001      	movs	r0, #1
}
    ca54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ca58:	f7ff bfa6 	b.w	c9a8 <bt_buf_get_rx>
    ca5c:	20008714 	.word	0x20008714
    ca60:	20008664 	.word	0x20008664

0000ca64 <ver_str>:
{
    ca64:	b570      	push	{r4, r5, r6, lr}
    ca66:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    ca68:	466c      	mov	r4, sp
{
    ca6a:	4606      	mov	r6, r0
	const char * const str[] = {
    ca6c:	4d0a      	ldr	r5, [pc, #40]	; (ca98 <ver_str+0x34>)
	if (ver < ARRAY_SIZE(str)) {
    ca6e:	2e0d      	cmp	r6, #13
	const char * const str[] = {
    ca70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ca72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ca76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ca7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca7c:	e895 0003 	ldmia.w	r5, {r0, r1}
    ca80:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    ca84:	bf9d      	ittte	ls
    ca86:	ab0e      	addls	r3, sp, #56	; 0x38
    ca88:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    ca8c:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	return "unknown";
    ca90:	4802      	ldrhi	r0, [pc, #8]	; (ca9c <ver_str+0x38>)
}
    ca92:	b00e      	add	sp, #56	; 0x38
    ca94:	bd70      	pop	{r4, r5, r6, pc}
    ca96:	bf00      	nop
    ca98:	0001e698 	.word	0x0001e698
    ca9c:	0001fa32 	.word	0x0001fa32

0000caa0 <hci_disconn_complete_prio>:
{
    caa0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    caa2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    caa4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	b963      	cbnz	r3, cac6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    caac:	4620      	mov	r0, r4
    caae:	f002 ff81 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    cab2:	4605      	mov	r5, r0
    cab4:	b940      	cbnz	r0, cac8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    cab6:	4b08      	ldr	r3, [pc, #32]	; (cad8 <hci_disconn_complete_prio+0x38>)
    cab8:	881a      	ldrh	r2, [r3, #0]
    caba:	b922      	cbnz	r2, cac6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    cabc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    cac0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    cac4:	8018      	strh	r0, [r3, #0]
}
    cac6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    cac8:	2101      	movs	r1, #1
    caca:	f002 ff7b 	bl	f9c4 <bt_conn_set_state>
	bt_conn_unref(conn);
    cace:	4628      	mov	r0, r5
}
    cad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    cad4:	f00e b859 	b.w	1ab8a <bt_conn_unref>
    cad8:	20009c38 	.word	0x20009c38

0000cadc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    cadc:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    cade:	4c08      	ldr	r4, [pc, #32]	; (cb00 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    cae0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    cae2:	2205      	movs	r2, #5
    cae4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    cae8:	f003 f9c8 	bl	fe7c <bt_conn_lookup_state_le>
		if (!conn) {
    caec:	b938      	cbnz	r0, cafe <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    caee:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    caf2:	2204      	movs	r2, #4
}
    caf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    caf8:	4902      	ldr	r1, [pc, #8]	; (cb04 <find_pending_connect.part.0+0x28>)
    cafa:	f003 b9bf 	b.w	fe7c <bt_conn_lookup_state_le>
}
    cafe:	bd10      	pop	{r4, pc}
    cb00:	20008000 	.word	0x20008000
    cb04:	0001f9de 	.word	0x0001f9de

0000cb08 <hci_data_buf_overflow>:
{
    cb08:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    cb0a:	68c3      	ldr	r3, [r0, #12]
{
    cb0c:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    cb0e:	b088      	sub	sp, #32
    cb10:	466a      	mov	r2, sp
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	4906      	ldr	r1, [pc, #24]	; (cb30 <hci_data_buf_overflow+0x28>)
    cb16:	4807      	ldr	r0, [pc, #28]	; (cb34 <hci_data_buf_overflow+0x2c>)
    cb18:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cb1c:	2303      	movs	r3, #3
    cb1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cb22:	f842 3f10 	str.w	r3, [r2, #16]!
    cb26:	f00d fcfa 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    cb2a:	46bd      	mov	sp, r7
    cb2c:	bd80      	pop	{r7, pc}
    cb2e:	bf00      	nop
    cb30:	0001fa3a 	.word	0x0001fa3a
    cb34:	0001e55c 	.word	0x0001e55c

0000cb38 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    cb38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
    cb3a:	4b06      	ldr	r3, [pc, #24]	; (cb54 <le_conn_param_neg_reply.part.0+0x1c>)
    cb3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb40:	9305      	str	r3, [sp, #20]
    cb42:	2302      	movs	r3, #2
    cb44:	4804      	ldr	r0, [pc, #16]	; (cb58 <le_conn_param_neg_reply.part.0+0x20>)
    cb46:	aa04      	add	r2, sp, #16
    cb48:	9304      	str	r3, [sp, #16]
    cb4a:	f00d fce8 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    cb4e:	b007      	add	sp, #28
    cb50:	f85d fb04 	ldr.w	pc, [sp], #4
    cb54:	0001fa62 	.word	0x0001fa62
    cb58:	0001e55c 	.word	0x0001e55c

0000cb5c <rx_queue_put>:
{
    cb5c:	b598      	push	{r3, r4, r7, lr}
    cb5e:	4601      	mov	r1, r0
    cb60:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    cb62:	480d      	ldr	r0, [pc, #52]	; (cb98 <rx_queue_put+0x3c>)
    cb64:	f00f fc96 	bl	1c494 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    cb68:	490c      	ldr	r1, [pc, #48]	; (cb9c <rx_queue_put+0x40>)
    cb6a:	480d      	ldr	r0, [pc, #52]	; (cba0 <rx_queue_put+0x44>)
    cb6c:	f010 ff4b 	bl	1da06 <k_work_submit_to_queue>
	if (err < 0) {
    cb70:	2800      	cmp	r0, #0
    cb72:	da0e      	bge.n	cb92 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
    cb74:	466c      	mov	r4, sp
    cb76:	b088      	sub	sp, #32
    cb78:	466a      	mov	r2, sp
    cb7a:	4b0a      	ldr	r3, [pc, #40]	; (cba4 <rx_queue_put+0x48>)
    cb7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cb80:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cb84:	2303      	movs	r3, #3
    cb86:	4808      	ldr	r0, [pc, #32]	; (cba8 <rx_queue_put+0x4c>)
    cb88:	f842 3f10 	str.w	r3, [r2, #16]!
    cb8c:	f00d fcc7 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cb90:	46a5      	mov	sp, r4
}
    cb92:	46bd      	mov	sp, r7
    cb94:	bd98      	pop	{r3, r4, r7, pc}
    cb96:	bf00      	nop
    cb98:	20008144 	.word	0x20008144
    cb9c:	20008250 	.word	0x20008250
    cba0:	200090b0 	.word	0x200090b0
    cba4:	0001fa7c 	.word	0x0001fa7c
    cba8:	0001e55c 	.word	0x0001e55c

0000cbac <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    cbac:	460b      	mov	r3, r1
    cbae:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    cbb0:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    cbb2:	af00      	add	r7, sp, #0
    cbb4:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    cbb6:	4629      	mov	r1, r5
    cbb8:	68d8      	ldr	r0, [r3, #12]
    cbba:	f7ff fe3d 	bl	c838 <bt_hex>
    cbbe:	b08a      	sub	sp, #40	; 0x28
    cbc0:	466a      	mov	r2, sp
    cbc2:	4b09      	ldr	r3, [pc, #36]	; (cbe8 <handle_event.part.0+0x3c>)
    cbc4:	e9c2 5007 	strd	r5, r0, [r2, #28]
    cbc8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cbcc:	f240 4302 	movw	r3, #1026	; 0x402
    cbd0:	8493      	strh	r3, [r2, #36]	; 0x24
    cbd2:	4b06      	ldr	r3, [pc, #24]	; (cbec <handle_event.part.0+0x40>)
    cbd4:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    cbd8:	4805      	ldr	r0, [pc, #20]	; (cbf0 <handle_event.part.0+0x44>)
    cbda:	f842 3f10 	str.w	r3, [r2, #16]!
    cbde:	f00d fc9e 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    cbe2:	46bd      	mov	sp, r7
    cbe4:	bdb0      	pop	{r4, r5, r7, pc}
    cbe6:	bf00      	nop
    cbe8:	0001fa99 	.word	0x0001fa99
    cbec:	01000005 	.word	0x01000005
    cbf0:	0001e55c 	.word	0x0001e55c

0000cbf4 <hci_hardware_error>:
{
    cbf4:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    cbf6:	2101      	movs	r1, #1
    cbf8:	af00      	add	r7, sp, #0
    cbfa:	300c      	adds	r0, #12
    cbfc:	f00f fcd3 	bl	1c5a6 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    cc00:	b088      	sub	sp, #32
    cc02:	466a      	mov	r2, sp
    cc04:	7803      	ldrb	r3, [r0, #0]
    cc06:	4906      	ldr	r1, [pc, #24]	; (cc20 <hci_hardware_error+0x2c>)
    cc08:	4806      	ldr	r0, [pc, #24]	; (cc24 <hci_hardware_error+0x30>)
    cc0a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cc0e:	2303      	movs	r3, #3
    cc10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc14:	f842 3f10 	str.w	r3, [r2, #16]!
    cc18:	f00d fc81 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    cc1c:	46bd      	mov	sp, r7
    cc1e:	bd80      	pop	{r7, pc}
    cc20:	0001fabb 	.word	0x0001fabb
    cc24:	0001e55c 	.word	0x0001e55c

0000cc28 <le_data_len_change>:
{
    cc28:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cc2a:	68c3      	ldr	r3, [r0, #12]
{
    cc2c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cc2e:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    cc30:	4620      	mov	r0, r4
    cc32:	f002 febf 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    cc36:	b980      	cbnz	r0, cc5a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    cc38:	466d      	mov	r5, sp
    cc3a:	b088      	sub	sp, #32
    cc3c:	466a      	mov	r2, sp
    cc3e:	4b08      	ldr	r3, [pc, #32]	; (cc60 <le_data_len_change+0x38>)
    cc40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc44:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cc48:	2303      	movs	r3, #3
    cc4a:	4806      	ldr	r0, [pc, #24]	; (cc64 <le_data_len_change+0x3c>)
    cc4c:	f842 3f10 	str.w	r3, [r2, #16]!
    cc50:	f00d fc65 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cc54:	46ad      	mov	sp, r5
}
    cc56:	46bd      	mov	sp, r7
    cc58:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    cc5a:	f00d ff96 	bl	1ab8a <bt_conn_unref>
    cc5e:	e7fa      	b.n	cc56 <le_data_len_change+0x2e>
    cc60:	0001fadd 	.word	0x0001fadd
    cc64:	0001e55c 	.word	0x0001e55c

0000cc68 <le_phy_update_complete>:
{
    cc68:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cc6a:	68c3      	ldr	r3, [r0, #12]
{
    cc6c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cc6e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    cc72:	4620      	mov	r0, r4
    cc74:	f002 fe9e 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    cc78:	b980      	cbnz	r0, cc9c <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    cc7a:	466d      	mov	r5, sp
    cc7c:	b088      	sub	sp, #32
    cc7e:	466a      	mov	r2, sp
    cc80:	4b08      	ldr	r3, [pc, #32]	; (cca4 <le_phy_update_complete+0x3c>)
    cc82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc86:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cc8a:	2303      	movs	r3, #3
    cc8c:	4806      	ldr	r0, [pc, #24]	; (cca8 <le_phy_update_complete+0x40>)
    cc8e:	f842 3f10 	str.w	r3, [r2, #16]!
    cc92:	f00d fc44 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cc96:	46ad      	mov	sp, r5
}
    cc98:	46bd      	mov	sp, r7
    cc9a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    cc9c:	f00d ff75 	bl	1ab8a <bt_conn_unref>
    cca0:	e7fa      	b.n	cc98 <le_phy_update_complete+0x30>
    cca2:	bf00      	nop
    cca4:	0001fadd 	.word	0x0001fadd
    cca8:	0001e55c 	.word	0x0001e55c

0000ccac <hci_disconn_complete>:
{
    ccac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ccb0:	68c5      	ldr	r5, [r0, #12]
{
    ccb2:	af00      	add	r7, sp, #0
	if (evt->status) {
    ccb4:	782e      	ldrb	r6, [r5, #0]
    ccb6:	b9ae      	cbnz	r6, cce4 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ccb8:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ccbc:	4640      	mov	r0, r8
    ccbe:	f002 fe79 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    ccc2:	4604      	mov	r4, r0
    ccc4:	b988      	cbnz	r0, ccea <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    ccc6:	466c      	mov	r4, sp
    ccc8:	b088      	sub	sp, #32
    ccca:	466a      	mov	r2, sp
    cccc:	4b0b      	ldr	r3, [pc, #44]	; (ccfc <hci_disconn_complete+0x50>)
    ccce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ccd2:	e9c2 3805 	strd	r3, r8, [r2, #20]
    ccd6:	2303      	movs	r3, #3
    ccd8:	4809      	ldr	r0, [pc, #36]	; (cd00 <hci_disconn_complete+0x54>)
    ccda:	f842 3f10 	str.w	r3, [r2, #16]!
    ccde:	f00d fc1e 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cce2:	46a5      	mov	sp, r4
}
    cce4:	46bd      	mov	sp, r7
    cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    ccea:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ccec:	4631      	mov	r1, r6
	conn->err = evt->reason;
    ccee:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ccf0:	f002 fe68 	bl	f9c4 <bt_conn_set_state>
		bt_conn_unref(conn);
    ccf4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    ccf6:	f00d ff48 	bl	1ab8a <bt_conn_unref>
    ccfa:	e7f3      	b.n	cce4 <hci_disconn_complete+0x38>
    ccfc:	0001fb01 	.word	0x0001fb01
    cd00:	0001e55c 	.word	0x0001e55c

0000cd04 <handle_event>:
{
    cd04:	b5b0      	push	{r4, r5, r7, lr}
    cd06:	4604      	mov	r4, r0
    cd08:	af00      	add	r7, sp, #0
    cd0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    cd0e:	4293      	cmp	r3, r2
    cd10:	d103      	bne.n	cd1a <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    cd12:	4620      	mov	r0, r4
    cd14:	f7ff ff4a 	bl	cbac <handle_event.part.0>
}
    cd18:	e018      	b.n	cd4c <handle_event+0x48>
		if (handler->event != event) {
    cd1a:	4610      	mov	r0, r2
    cd1c:	f810 5b08 	ldrb.w	r5, [r0], #8
    cd20:	42a5      	cmp	r5, r4
    cd22:	d119      	bne.n	cd58 <handle_event+0x54>
		if (buf->len < handler->min_len) {
    cd24:	8a0b      	ldrh	r3, [r1, #16]
    cd26:	7850      	ldrb	r0, [r2, #1]
    cd28:	4298      	cmp	r0, r3
    cd2a:	d911      	bls.n	cd50 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    cd2c:	466d      	mov	r5, sp
    cd2e:	b088      	sub	sp, #32
    cd30:	466a      	mov	r2, sp
    cd32:	490a      	ldr	r1, [pc, #40]	; (cd5c <handle_event+0x58>)
    cd34:	61d4      	str	r4, [r2, #28]
    cd36:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cd3a:	2304      	movs	r3, #4
    cd3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cd40:	4807      	ldr	r0, [pc, #28]	; (cd60 <handle_event+0x5c>)
    cd42:	f842 3f10 	str.w	r3, [r2, #16]!
    cd46:	f00d fbea 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cd4a:	46ad      	mov	sp, r5
}
    cd4c:	46bd      	mov	sp, r7
    cd4e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    cd50:	4608      	mov	r0, r1
    cd52:	6853      	ldr	r3, [r2, #4]
    cd54:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    cd56:	e7f9      	b.n	cd4c <handle_event+0x48>
    cd58:	4602      	mov	r2, r0
    cd5a:	e7d8      	b.n	cd0e <handle_event+0xa>
    cd5c:	0001fb27 	.word	0x0001fb27
    cd60:	0001e55c 	.word	0x0001e55c

0000cd64 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    cd66:	4855      	ldr	r0, [pc, #340]	; (cebc <rx_work_handler+0x158>)
{
    cd68:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    cd6a:	f00f fba9 	bl	1c4c0 <net_buf_slist_get>
	if (!buf) {
    cd6e:	4604      	mov	r4, r0
    cd70:	2800      	cmp	r0, #0
    cd72:	d06a      	beq.n	ce4a <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cd74:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    cd76:	2b01      	cmp	r3, #1
    cd78:	d069      	beq.n	ce4e <rx_work_handler+0xea>
    cd7a:	2b03      	cmp	r3, #3
    cd7c:	f040 8099 	bne.w	ceb2 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cd80:	8a03      	ldrh	r3, [r0, #16]
    cd82:	2b03      	cmp	r3, #3
    cd84:	d80c      	bhi.n	cda0 <rx_work_handler+0x3c>
    cd86:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    cd8a:	4a4d      	ldr	r2, [pc, #308]	; (cec0 <rx_work_handler+0x15c>)
    cd8c:	494d      	ldr	r1, [pc, #308]	; (cec4 <rx_work_handler+0x160>)
    cd8e:	484e      	ldr	r0, [pc, #312]	; (cec8 <rx_work_handler+0x164>)
    cd90:	f00c f914 	bl	18fbc <assert_print>
    cd94:	4040      	eors	r0, r0
    cd96:	f380 8811 	msr	BASEPRI, r0
    cd9a:	f04f 0003 	mov.w	r0, #3
    cd9e:	df02      	svc	2
    cda0:	2104      	movs	r1, #4
    cda2:	f104 000c 	add.w	r0, r4, #12
    cda6:	f00f fbfe 	bl	1c5a6 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    cdaa:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    cdac:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    cdae:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    cdb0:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    cdb2:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    cdb6:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    cdb8:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    cdba:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    cdbc:	d010      	beq.n	cde0 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    cdbe:	466d      	mov	r5, sp
    cdc0:	b088      	sub	sp, #32
    cdc2:	466a      	mov	r2, sp
    cdc4:	4841      	ldr	r0, [pc, #260]	; (cecc <rx_work_handler+0x168>)
    cdc6:	61d3      	str	r3, [r2, #28]
    cdc8:	2304      	movs	r3, #4
    cdca:	e9c2 0105 	strd	r0, r1, [r2, #20]
    cdce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cdd2:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    cdd6:	483e      	ldr	r0, [pc, #248]	; (ced0 <rx_work_handler+0x16c>)
    cdd8:	f00d fba1 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cddc:	46ad      	mov	sp, r5
    cdde:	e064      	b.n	ceaa <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    cde0:	f002 fde8 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    cde4:	4605      	mov	r5, r0
    cde6:	b960      	cbnz	r0, ce02 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    cde8:	466d      	mov	r5, sp
    cdea:	b088      	sub	sp, #32
    cdec:	8b63      	ldrh	r3, [r4, #26]
    cdee:	466a      	mov	r2, sp
    cdf0:	4938      	ldr	r1, [pc, #224]	; (ced4 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    cdf2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    cdf6:	2303      	movs	r3, #3
    cdf8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cdfc:	f842 3f10 	str.w	r3, [r2, #16]!
    ce00:	e7e9      	b.n	cdd6 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    ce02:	f002 fedd 	bl	fbc0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ce06:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ce08:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    ce0a:	0b32      	lsrs	r2, r6, #12
    ce0c:	4628      	mov	r0, r5
    ce0e:	f002 fc7d 	bl	f70c <bt_conn_recv>
	bt_conn_unref(conn);
    ce12:	4628      	mov	r0, r5
    ce14:	f00d feb9 	bl	1ab8a <bt_conn_unref>
	return list->head;
    ce18:	4b2f      	ldr	r3, [pc, #188]	; (ced8 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ce1a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    ce1e:	b1a3      	cbz	r3, ce4a <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ce20:	492e      	ldr	r1, [pc, #184]	; (cedc <rx_work_handler+0x178>)
    ce22:	482f      	ldr	r0, [pc, #188]	; (cee0 <rx_work_handler+0x17c>)
    ce24:	f010 fdef 	bl	1da06 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    ce28:	2800      	cmp	r0, #0
    ce2a:	da0e      	bge.n	ce4a <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
    ce2c:	466c      	mov	r4, sp
    ce2e:	b088      	sub	sp, #32
    ce30:	466a      	mov	r2, sp
    ce32:	4b2c      	ldr	r3, [pc, #176]	; (cee4 <rx_work_handler+0x180>)
    ce34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ce38:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ce3c:	2303      	movs	r3, #3
    ce3e:	4824      	ldr	r0, [pc, #144]	; (ced0 <rx_work_handler+0x16c>)
    ce40:	f842 3f10 	str.w	r3, [r2, #16]!
    ce44:	f00d fb6b 	bl	1a51e <z_log_msg_static_create.constprop.0>
    ce48:	46a5      	mov	sp, r4
		}
	}
}
    ce4a:	46bd      	mov	sp, r7
    ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ce4e:	8a03      	ldrh	r3, [r0, #16]
    ce50:	2b01      	cmp	r3, #1
    ce52:	d80c      	bhi.n	ce6e <rx_work_handler+0x10a>
    ce54:	f640 2347 	movw	r3, #2631	; 0xa47
    ce58:	4a19      	ldr	r2, [pc, #100]	; (cec0 <rx_work_handler+0x15c>)
    ce5a:	491a      	ldr	r1, [pc, #104]	; (cec4 <rx_work_handler+0x160>)
    ce5c:	481a      	ldr	r0, [pc, #104]	; (cec8 <rx_work_handler+0x164>)
    ce5e:	f00c f8ad 	bl	18fbc <assert_print>
    ce62:	4040      	eors	r0, r0
    ce64:	f380 8811 	msr	BASEPRI, r0
    ce68:	f04f 0003 	mov.w	r0, #3
    ce6c:	df02      	svc	2
    ce6e:	2102      	movs	r1, #2
    ce70:	f104 000c 	add.w	r0, r4, #12
    ce74:	f00f fb97 	bl	1c5a6 <net_buf_simple_pull_mem>
    ce78:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ce7a:	7800      	ldrb	r0, [r0, #0]
    ce7c:	f00d fb19 	bl	1a4b2 <bt_hci_evt_get_flags>
    ce80:	0783      	lsls	r3, r0, #30
    ce82:	d40c      	bmi.n	ce9e <rx_work_handler+0x13a>
    ce84:	f640 234b 	movw	r3, #2635	; 0xa4b
    ce88:	4a0d      	ldr	r2, [pc, #52]	; (cec0 <rx_work_handler+0x15c>)
    ce8a:	4917      	ldr	r1, [pc, #92]	; (cee8 <rx_work_handler+0x184>)
    ce8c:	480e      	ldr	r0, [pc, #56]	; (cec8 <rx_work_handler+0x164>)
    ce8e:	f00c f895 	bl	18fbc <assert_print>
    ce92:	4040      	eors	r0, r0
    ce94:	f380 8811 	msr	BASEPRI, r0
    ce98:	f04f 0003 	mov.w	r0, #3
    ce9c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ce9e:	2306      	movs	r3, #6
    cea0:	4621      	mov	r1, r4
    cea2:	4a12      	ldr	r2, [pc, #72]	; (ceec <rx_work_handler+0x188>)
    cea4:	7828      	ldrb	r0, [r5, #0]
    cea6:	f7ff ff2d 	bl	cd04 <handle_event>
		net_buf_unref(buf);
    ceaa:	4620      	mov	r0, r4
    ceac:	f007 f982 	bl	141b4 <net_buf_unref>
		break;
    ceb0:	e7b2      	b.n	ce18 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ceb2:	466d      	mov	r5, sp
    ceb4:	b088      	sub	sp, #32
    ceb6:	466a      	mov	r2, sp
    ceb8:	490d      	ldr	r1, [pc, #52]	; (cef0 <rx_work_handler+0x18c>)
    ceba:	e79a      	b.n	cdf2 <rx_work_handler+0x8e>
    cebc:	20008144 	.word	0x20008144
    cec0:	0001fb49 	.word	0x0001fb49
    cec4:	0001fb7d 	.word	0x0001fb7d
    cec8:	0001fb96 	.word	0x0001fb96
    cecc:	0001fbb3 	.word	0x0001fbb3
    ced0:	0001e55c 	.word	0x0001e55c
    ced4:	0001fbd7 	.word	0x0001fbd7
    ced8:	20008000 	.word	0x20008000
    cedc:	20008250 	.word	0x20008250
    cee0:	200090b0 	.word	0x200090b0
    cee4:	0001fa7c 	.word	0x0001fa7c
    cee8:	0001fbf9 	.word	0x0001fbf9
    ceec:	0001ea4c 	.word	0x0001ea4c
    cef0:	0001fc27 	.word	0x0001fc27

0000cef4 <hci_le_meta_event>:
{
    cef4:	b510      	push	{r4, lr}
    cef6:	2101      	movs	r1, #1
    cef8:	4604      	mov	r4, r0
    cefa:	300c      	adds	r0, #12
    cefc:	f00f fb53 	bl	1c5a6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    cf00:	4621      	mov	r1, r4
}
    cf02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    cf06:	230a      	movs	r3, #10
    cf08:	4a01      	ldr	r2, [pc, #4]	; (cf10 <hci_le_meta_event+0x1c>)
    cf0a:	7800      	ldrb	r0, [r0, #0]
    cf0c:	f7ff befa 	b.w	cd04 <handle_event>
    cf10:	0001ea7c 	.word	0x0001ea7c

0000cf14 <le_remote_feat_complete>:
{
    cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    cf16:	68c5      	ldr	r5, [r0, #12]
{
    cf18:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cf1a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    cf1e:	4630      	mov	r0, r6
    cf20:	f002 fd48 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    cf24:	4604      	mov	r4, r0
    cf26:	b980      	cbnz	r0, cf4a <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    cf28:	466c      	mov	r4, sp
    cf2a:	b088      	sub	sp, #32
    cf2c:	466a      	mov	r2, sp
    cf2e:	4b0f      	ldr	r3, [pc, #60]	; (cf6c <le_remote_feat_complete+0x58>)
    cf30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf34:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cf38:	2303      	movs	r3, #3
    cf3a:	480d      	ldr	r0, [pc, #52]	; (cf70 <le_remote_feat_complete+0x5c>)
    cf3c:	f842 3f10 	str.w	r3, [r2, #16]!
    cf40:	f00d faed 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cf44:	46a5      	mov	sp, r4
}
    cf46:	46bd      	mov	sp, r7
    cf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    cf4a:	782b      	ldrb	r3, [r5, #0]
    cf4c:	b923      	cbnz	r3, cf58 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    cf4e:	2208      	movs	r2, #8
    cf50:	1ce9      	adds	r1, r5, #3
    cf52:	30ad      	adds	r0, #173	; 0xad
    cf54:	f00d fa0b 	bl	1a36e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    cf58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    cf5c:	1d20      	adds	r0, r4, #4
    cf5e:	f00d fad3 	bl	1a508 <atomic_or>
	bt_conn_unref(conn);
    cf62:	4620      	mov	r0, r4
    cf64:	f00d fe11 	bl	1ab8a <bt_conn_unref>
    cf68:	e7ed      	b.n	cf46 <le_remote_feat_complete+0x32>
    cf6a:	bf00      	nop
    cf6c:	0001fadd 	.word	0x0001fadd
    cf70:	0001e55c 	.word	0x0001e55c

0000cf74 <hci_cmd_done>:
{
    cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf78:	4606      	mov	r6, r0
    cf7a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cf7c:	7a90      	ldrb	r0, [r2, #10]
{
    cf7e:	4688      	mov	r8, r1
    cf80:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cf82:	f007 f855 	bl	14030 <net_buf_pool_get>
    cf86:	4d41      	ldr	r5, [pc, #260]	; (d08c <hci_cmd_done+0x118>)
    cf88:	4285      	cmp	r5, r0
    cf8a:	d018      	beq.n	cfbe <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    cf8c:	7aa4      	ldrb	r4, [r4, #10]
    cf8e:	46e8      	mov	r8, sp
    cf90:	4620      	mov	r0, r4
    cf92:	f007 f84d 	bl	14030 <net_buf_pool_get>
    cf96:	b08a      	sub	sp, #40	; 0x28
    cf98:	466a      	mov	r2, sp
    cf9a:	4b3d      	ldr	r3, [pc, #244]	; (d090 <hci_cmd_done+0x11c>)
    cf9c:	e9c2 4007 	strd	r4, r0, [r2, #28]
    cfa0:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cfa4:	2306      	movs	r3, #6
    cfa6:	6255      	str	r5, [r2, #36]	; 0x24
    cfa8:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    cfac:	4839      	ldr	r0, [pc, #228]	; (d094 <hci_cmd_done+0x120>)
    cfae:	f842 3f10 	str.w	r3, [r2, #16]!
    cfb2:	f00d fab4 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cfb6:	46c5      	mov	sp, r8
}
    cfb8:	46bd      	mov	sp, r7
    cfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    cfbe:	4620      	mov	r0, r4
    cfc0:	f007 f83e 	bl	14040 <net_buf_id>
    cfc4:	f04f 090c 	mov.w	r9, #12
    cfc8:	4d33      	ldr	r5, [pc, #204]	; (d098 <hci_cmd_done+0x124>)
    cfca:	fb09 5000 	mla	r0, r9, r0, r5
    cfce:	8843      	ldrh	r3, [r0, #2]
    cfd0:	42b3      	cmp	r3, r6
    cfd2:	d016      	beq.n	d002 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    cfd4:	4620      	mov	r0, r4
    cfd6:	f007 f833 	bl	14040 <net_buf_id>
    cfda:	fb09 5000 	mla	r0, r9, r0, r5
    cfde:	466c      	mov	r4, sp
    cfe0:	b088      	sub	sp, #32
    cfe2:	466a      	mov	r2, sp
    cfe4:	8843      	ldrh	r3, [r0, #2]
    cfe6:	61d3      	str	r3, [r2, #28]
    cfe8:	2304      	movs	r3, #4
    cfea:	492c      	ldr	r1, [pc, #176]	; (d09c <hci_cmd_done+0x128>)
    cfec:	4829      	ldr	r0, [pc, #164]	; (d094 <hci_cmd_done+0x120>)
    cfee:	e9c2 1605 	strd	r1, r6, [r2, #20]
    cff2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    cff6:	f842 3f10 	str.w	r3, [r2, #16]!
    cffa:	f00d fa90 	bl	1a51e <z_log_msg_static_create.constprop.0>
    cffe:	46a5      	mov	sp, r4
		return;
    d000:	e7da      	b.n	cfb8 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    d002:	4e27      	ldr	r6, [pc, #156]	; (d0a0 <hci_cmd_done+0x12c>)
    d004:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
    d008:	b120      	cbz	r0, d014 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    d00a:	f007 f8d3 	bl	141b4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d00e:	2300      	movs	r3, #0
    d010:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
    d014:	4620      	mov	r0, r4
    d016:	f007 f813 	bl	14040 <net_buf_id>
    d01a:	260c      	movs	r6, #12
    d01c:	fb06 5000 	mla	r0, r6, r0, r5
    d020:	6843      	ldr	r3, [r0, #4]
    d022:	b1ab      	cbz	r3, d050 <hci_cmd_done+0xdc>
    d024:	f1b8 0f00 	cmp.w	r8, #0
    d028:	d112      	bne.n	d050 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    d02a:	4620      	mov	r0, r4
    d02c:	f007 f808 	bl	14040 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d030:	2101      	movs	r1, #1
    d032:	fb06 5000 	mla	r0, r6, r0, r5
    d036:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    d038:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    d03c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    d03e:	f003 061f 	and.w	r6, r3, #31
    d042:	40b1      	lsls	r1, r6
	if (val) {
    d044:	095b      	lsrs	r3, r3, #5
    d046:	b1da      	cbz	r2, d080 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d048:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d04c:	f00d fa5c 	bl	1a508 <atomic_or>
	if (cmd(buf)->sync) {
    d050:	4620      	mov	r0, r4
    d052:	f006 fff5 	bl	14040 <net_buf_id>
    d056:	260c      	movs	r6, #12
    d058:	fb06 5000 	mla	r0, r6, r0, r5
    d05c:	6883      	ldr	r3, [r0, #8]
    d05e:	2b00      	cmp	r3, #0
    d060:	d0aa      	beq.n	cfb8 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    d062:	4620      	mov	r0, r4
    d064:	f006 ffec 	bl	14040 <net_buf_id>
    d068:	4370      	muls	r0, r6
    d06a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    d06e:	4620      	mov	r0, r4
    d070:	f006 ffe6 	bl	14040 <net_buf_id>
    d074:	fb06 5500 	mla	r5, r6, r0, r5
    d078:	68a8      	ldr	r0, [r5, #8]
    d07a:	f00a fba1 	bl	177c0 <z_impl_k_sem_give>
}
    d07e:	e79b      	b.n	cfb8 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d080:	43c9      	mvns	r1, r1
    d082:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d086:	f00d fa4d 	bl	1a524 <atomic_and.isra.0>
    d08a:	e7e1      	b.n	d050 <hci_cmd_done+0xdc>
    d08c:	200086e8 	.word	0x200086e8
    d090:	0001fc3b 	.word	0x0001fc3b
    d094:	0001e55c 	.word	0x0001e55c
    d098:	20009828 	.word	0x20009828
    d09c:	0001fc70 	.word	0x0001fc70
    d0a0:	20008000 	.word	0x20008000

0000d0a4 <hci_cmd_status>:
{
    d0a4:	b538      	push	{r3, r4, r5, lr}
    d0a6:	2104      	movs	r1, #4
    d0a8:	4604      	mov	r4, r0
    d0aa:	300c      	adds	r0, #12
    d0ac:	f00f fa7b 	bl	1c5a6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    d0b0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    d0b2:	7801      	ldrb	r1, [r0, #0]
    d0b4:	4622      	mov	r2, r4
    d0b6:	8840      	ldrh	r0, [r0, #2]
    d0b8:	f7ff ff5c 	bl	cf74 <hci_cmd_done>
	if (ncmd) {
    d0bc:	b125      	cbz	r5, d0c8 <hci_cmd_status+0x24>
}
    d0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    d0c2:	4802      	ldr	r0, [pc, #8]	; (d0cc <hci_cmd_status+0x28>)
    d0c4:	f00a bb7c 	b.w	177c0 <z_impl_k_sem_give>
    d0c8:	bd38      	pop	{r3, r4, r5, pc}
    d0ca:	bf00      	nop
    d0cc:	20008128 	.word	0x20008128

0000d0d0 <hci_cmd_complete>:
{
    d0d0:	b538      	push	{r3, r4, r5, lr}
    d0d2:	2103      	movs	r1, #3
    d0d4:	4604      	mov	r4, r0
    d0d6:	300c      	adds	r0, #12
    d0d8:	f00f fa65 	bl	1c5a6 <net_buf_simple_pull_mem>
	status = buf->data[0];
    d0dc:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    d0de:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    d0e0:	4622      	mov	r2, r4
    d0e2:	7819      	ldrb	r1, [r3, #0]
    d0e4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    d0e8:	f7ff ff44 	bl	cf74 <hci_cmd_done>
	if (ncmd) {
    d0ec:	b125      	cbz	r5, d0f8 <hci_cmd_complete+0x28>
}
    d0ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d0f2:	4802      	ldr	r0, [pc, #8]	; (d0fc <hci_cmd_complete+0x2c>)
    d0f4:	f00a bb64 	b.w	177c0 <z_impl_k_sem_give>
    d0f8:	bd38      	pop	{r3, r4, r5, pc}
    d0fa:	bf00      	nop
    d0fc:	20008128 	.word	0x20008128

0000d100 <hci_num_completed_packets>:
{
    d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d104:	b087      	sub	sp, #28
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    d106:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    d108:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    d10c:	8a01      	ldrh	r1, [r0, #16]
    d10e:	f898 4000 	ldrb.w	r4, [r8]
{
    d112:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    d114:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    d118:	428b      	cmp	r3, r1
    d11a:	f240 808c 	bls.w	d236 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
    d11e:	466d      	mov	r5, sp
    d120:	b08a      	sub	sp, #40	; 0x28
    d122:	466a      	mov	r2, sp
    d124:	e9c2 3107 	strd	r3, r1, [r2, #28]
    d128:	2305      	movs	r3, #5
    d12a:	4845      	ldr	r0, [pc, #276]	; (d240 <hci_num_completed_packets+0x140>)
    d12c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    d130:	e9c2 0405 	strd	r0, r4, [r2, #20]
    d134:	4843      	ldr	r0, [pc, #268]	; (d244 <hci_num_completed_packets+0x144>)
    d136:	f842 3f10 	str.w	r3, [r2, #16]!
    d13a:	f00d f9f0 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d13e:	46ad      	mov	sp, r5
}
    d140:	371c      	adds	r7, #28
    d142:	46bd      	mov	sp, r7
    d144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
    d148:	466c      	mov	r4, sp
    d14a:	b088      	sub	sp, #32
    d14c:	466a      	mov	r2, sp
    d14e:	4b3e      	ldr	r3, [pc, #248]	; (d248 <hci_num_completed_packets+0x148>)
    d150:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d154:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    d158:	2303      	movs	r3, #3
    d15a:	483a      	ldr	r0, [pc, #232]	; (d244 <hci_num_completed_packets+0x144>)
    d15c:	f842 3f10 	str.w	r3, [r2, #16]!
    d160:	f00d f9dd 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d164:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    d166:	3501      	adds	r5, #1
    d168:	f898 3000 	ldrb.w	r3, [r8]
    d16c:	429d      	cmp	r5, r3
    d16e:	dae7      	bge.n	d140 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    d170:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    d174:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    d178:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    d17c:	4658      	mov	r0, fp
    d17e:	f002 fc19 	bl	f9b4 <bt_conn_lookup_handle>
		if (!conn) {
    d182:	4604      	mov	r4, r0
    d184:	2800      	cmp	r0, #0
    d186:	d0df      	beq.n	d148 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
    d188:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    d18c:	b346      	cbz	r6, d1e0 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
    d18e:	f04f 0320 	mov.w	r3, #32
    d192:	f3ef 8211 	mrs	r2, BASEPRI
    d196:	f383 8812 	msr	BASEPRI_MAX, r3
    d19a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    d19e:	69e3      	ldr	r3, [r4, #28]
    d1a0:	b16b      	cbz	r3, d1be <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
    d1a2:	3b01      	subs	r3, #1
    d1a4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    d1a6:	f382 8811 	msr	BASEPRI, r2
    d1aa:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    d1ae:	4620      	mov	r0, r4
    d1b0:	f002 fa72 	bl	f698 <bt_conn_get_pkts>
    d1b4:	3e01      	subs	r6, #1
    d1b6:	f00a fb03 	bl	177c0 <z_impl_k_sem_give>
    d1ba:	b2b6      	uxth	r6, r6
    d1bc:	e7e6      	b.n	d18c <hci_num_completed_packets+0x8c>
    d1be:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    d1c0:	b993      	cbnz	r3, d1e8 <hci_num_completed_packets+0xe8>
    d1c2:	f382 8811 	msr	BASEPRI, r2
    d1c6:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    d1ca:	2302      	movs	r3, #2
    d1cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1d0:	481c      	ldr	r0, [pc, #112]	; (d244 <hci_num_completed_packets+0x144>)
    d1d2:	f107 0210 	add.w	r2, r7, #16
    d1d6:	f8c7 a014 	str.w	sl, [r7, #20]
    d1da:	613b      	str	r3, [r7, #16]
    d1dc:	f00d f99f 	bl	1a51e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    d1e0:	4620      	mov	r0, r4
    d1e2:	f00d fcd2 	bl	1ab8a <bt_conn_unref>
    d1e6:	e7be      	b.n	d166 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d1e8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    d1ea:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d1ec:	428b      	cmp	r3, r1
	list->head = node;
    d1ee:	6160      	str	r0, [r4, #20]
	list->tail = node;
    d1f0:	bf08      	it	eq
    d1f2:	61a0      	streq	r0, [r4, #24]
    d1f4:	f382 8811 	msr	BASEPRI, r2
    d1f8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    d1fc:	f04f 0220 	mov.w	r2, #32
    d200:	f3ef 8111 	mrs	r1, BASEPRI
    d204:	f382 8812 	msr	BASEPRI_MAX, r2
    d208:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    d20c:	68da      	ldr	r2, [r3, #12]
    d20e:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    d210:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    d214:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    d218:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    d21a:	b94a      	cbnz	r2, d230 <hci_num_completed_packets+0x130>
	list->head = node;
    d21c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    d220:	f381 8811 	msr	BASEPRI, r1
    d224:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    d228:	4658      	mov	r0, fp
    d22a:	f00a fc45 	bl	17ab8 <k_work_submit>
    d22e:	e7be      	b.n	d1ae <hci_num_completed_packets+0xae>
	parent->next = child;
    d230:	6013      	str	r3, [r2, #0]
	list->tail = node;
    d232:	6263      	str	r3, [r4, #36]	; 0x24
}
    d234:	e7f4      	b.n	d220 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
    d236:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
    d238:	f8df a010 	ldr.w	sl, [pc, #16]	; d24c <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
    d23c:	46a9      	mov	r9, r5
    d23e:	e793      	b.n	d168 <hci_num_completed_packets+0x68>
    d240:	0001fca3 	.word	0x0001fca3
    d244:	0001e55c 	.word	0x0001e55c
    d248:	0001fccd 	.word	0x0001fccd
    d24c:	0001fce9 	.word	0x0001fce9

0000d250 <le_conn_update_complete>:
{
    d250:	b5f0      	push	{r4, r5, r6, r7, lr}
    d252:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    d254:	68c5      	ldr	r5, [r0, #12]
{
    d256:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    d258:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    d25c:	4630      	mov	r0, r6
    d25e:	f002 fba9 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    d262:	4604      	mov	r4, r0
    d264:	b988      	cbnz	r0, d28a <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    d266:	466c      	mov	r4, sp
    d268:	b088      	sub	sp, #32
    d26a:	466a      	mov	r2, sp
    d26c:	4b2b      	ldr	r3, [pc, #172]	; (d31c <le_conn_update_complete+0xcc>)
    d26e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d272:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d276:	2303      	movs	r3, #3
    d278:	4829      	ldr	r0, [pc, #164]	; (d320 <le_conn_update_complete+0xd0>)
    d27a:	f842 3f10 	str.w	r3, [r2, #16]!
    d27e:	f00d f94e 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d282:	46a5      	mov	sp, r4
}
    d284:	370c      	adds	r7, #12
    d286:	46bd      	mov	sp, r7
    d288:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    d28a:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
    d28c:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    d28e:	2b1a      	cmp	r3, #26
    d290:	d117      	bne.n	d2c2 <le_conn_update_complete+0x72>
    d292:	78c3      	ldrb	r3, [r0, #3]
    d294:	2b01      	cmp	r3, #1
    d296:	d128      	bne.n	d2ea <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d298:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d29c:	4630      	mov	r0, r6
    d29e:	f00d f933 	bl	1a508 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    d2a2:	0542      	lsls	r2, r0, #21
    d2a4:	d40d      	bmi.n	d2c2 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
    d2a6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    d2aa:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    d2ac:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    d2ae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    d2b2:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    d2b4:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    d2b6:	f003 f8c5 	bl	10444 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    d2ba:	4620      	mov	r0, r4
    d2bc:	f00d fc65 	bl	1ab8a <bt_conn_unref>
    d2c0:	e7e0      	b.n	d284 <le_conn_update_complete+0x34>
		if (!evt->status) {
    d2c2:	782b      	ldrb	r3, [r5, #0]
    d2c4:	b98b      	cbnz	r3, d2ea <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    d2c6:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    d2ca:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    d2ce:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    d2d2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d2d6:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    d2da:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d2de:	f46f 7180 	mvn.w	r1, #256	; 0x100
    d2e2:	4630      	mov	r0, r6
    d2e4:	f00d f91e 	bl	1a524 <atomic_and.isra.0>
}
    d2e8:	e014      	b.n	d314 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d2ea:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
    d2ee:	05db      	lsls	r3, r3, #23
    d2f0:	d5f5      	bpl.n	d2de <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    d2f2:	782b      	ldrb	r3, [r5, #0]
    d2f4:	2b20      	cmp	r3, #32
    d2f6:	d1f2      	bne.n	d2de <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
    d2f8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d0ee      	beq.n	d2de <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
    d300:	3b01      	subs	r3, #1
    d302:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    d306:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    d30a:	2300      	movs	r3, #0
    d30c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d310:	f00a fc78 	bl	17c04 <k_work_schedule>
		notify_le_param_updated(conn);
    d314:	4620      	mov	r0, r4
    d316:	f002 fc75 	bl	fc04 <notify_le_param_updated>
    d31a:	e7ce      	b.n	d2ba <le_conn_update_complete+0x6a>
    d31c:	0001fadd 	.word	0x0001fadd
    d320:	0001e55c 	.word	0x0001e55c

0000d324 <bt_hci_cmd_state_set_init>:
{
    d324:	b510      	push	{r4, lr}
	state->bit = bit;
    d326:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    d32a:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    d32e:	460c      	mov	r4, r1
	state->val = val;
    d330:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    d332:	f006 fe85 	bl	14040 <net_buf_id>
    d336:	220c      	movs	r2, #12
    d338:	4b02      	ldr	r3, [pc, #8]	; (d344 <bt_hci_cmd_state_set_init+0x20>)
    d33a:	fb02 3300 	mla	r3, r2, r0, r3
    d33e:	605c      	str	r4, [r3, #4]
}
    d340:	bd10      	pop	{r4, pc}
    d342:	bf00      	nop
    d344:	20009828 	.word	0x20009828

0000d348 <bt_hci_cmd_create>:
{
    d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    d34c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d354:	4606      	mov	r6, r0
    d356:	4817      	ldr	r0, [pc, #92]	; (d3b4 <bt_hci_cmd_create+0x6c>)
    d358:	460f      	mov	r7, r1
    d35a:	f00f f894 	bl	1c486 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    d35e:	f04f 0800 	mov.w	r8, #0
    d362:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    d364:	f100 0a0c 	add.w	sl, r0, #12
    d368:	2101      	movs	r1, #1
    d36a:	4650      	mov	r0, sl
    d36c:	f00f f8e7 	bl	1c53e <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    d370:	4620      	mov	r0, r4
    d372:	f884 8018 	strb.w	r8, [r4, #24]
    d376:	f006 fe63 	bl	14040 <net_buf_id>
    d37a:	f04f 090c 	mov.w	r9, #12
    d37e:	4d0e      	ldr	r5, [pc, #56]	; (d3b8 <bt_hci_cmd_create+0x70>)
    d380:	fb09 5000 	mla	r0, r9, r0, r5
    d384:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    d386:	4620      	mov	r0, r4
    d388:	f006 fe5a 	bl	14040 <net_buf_id>
    d38c:	fb09 5000 	mla	r0, r9, r0, r5
    d390:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    d394:	4620      	mov	r0, r4
    d396:	f006 fe53 	bl	14040 <net_buf_id>
    d39a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    d39e:	2103      	movs	r1, #3
    d3a0:	4650      	mov	r0, sl
    d3a2:	f8c5 8004 	str.w	r8, [r5, #4]
    d3a6:	f00f f8ce 	bl	1c546 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    d3aa:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    d3ac:	7087      	strb	r7, [r0, #2]
}
    d3ae:	4620      	mov	r0, r4
    d3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3b4:	200086e8 	.word	0x200086e8
    d3b8:	20009828 	.word	0x20009828

0000d3bc <bt_hci_cmd_send_sync>:
{
    d3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d3c0:	b087      	sub	sp, #28
    d3c2:	4606      	mov	r6, r0
    d3c4:	4615      	mov	r5, r2
	if (!buf) {
    d3c6:	460c      	mov	r4, r1
{
    d3c8:	af00      	add	r7, sp, #0
	if (!buf) {
    d3ca:	b921      	cbnz	r1, d3d6 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    d3cc:	f7ff ffbc 	bl	d348 <bt_hci_cmd_create>
		if (!buf) {
    d3d0:	4604      	mov	r4, r0
    d3d2:	2800      	cmp	r0, #0
    d3d4:	d05f      	beq.n	d496 <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d3d6:	2201      	movs	r2, #1
    d3d8:	2100      	movs	r1, #0
    d3da:	4638      	mov	r0, r7
    d3dc:	f010 fa63 	bl	1d8a6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    d3e0:	4620      	mov	r0, r4
    d3e2:	f006 fe2d 	bl	14040 <net_buf_id>
    d3e6:	230c      	movs	r3, #12
    d3e8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d49c <bt_hci_cmd_send_sync+0xe0>
    d3ec:	fb03 9000 	mla	r0, r3, r0, r9
    d3f0:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    d3f2:	4620      	mov	r0, r4
    d3f4:	f00f f87d 	bl	1c4f2 <net_buf_ref>
    d3f8:	4601      	mov	r1, r0
    d3fa:	4829      	ldr	r0, [pc, #164]	; (d4a0 <bt_hci_cmd_send_sync+0xe4>)
    d3fc:	f00f f877 	bl	1c4ee <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    d400:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    d404:	2300      	movs	r3, #0
    d406:	4638      	mov	r0, r7
    d408:	f00a fa00 	bl	1780c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    d40c:	4680      	mov	r8, r0
    d40e:	b188      	cbz	r0, d434 <bt_hci_cmd_send_sync+0x78>
    d410:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    d414:	4a23      	ldr	r2, [pc, #140]	; (d4a4 <bt_hci_cmd_send_sync+0xe8>)
    d416:	4924      	ldr	r1, [pc, #144]	; (d4a8 <bt_hci_cmd_send_sync+0xec>)
    d418:	4824      	ldr	r0, [pc, #144]	; (d4ac <bt_hci_cmd_send_sync+0xf0>)
    d41a:	f00b fdcf 	bl	18fbc <assert_print>
    d41e:	4642      	mov	r2, r8
    d420:	4631      	mov	r1, r6
    d422:	4823      	ldr	r0, [pc, #140]	; (d4b0 <bt_hci_cmd_send_sync+0xf4>)
    d424:	f00b fdca 	bl	18fbc <assert_print>
    d428:	4040      	eors	r0, r0
    d42a:	f380 8811 	msr	BASEPRI, r0
    d42e:	f04f 0003 	mov.w	r0, #3
    d432:	df02      	svc	2
	status = cmd(buf)->status;
    d434:	4620      	mov	r0, r4
    d436:	f006 fe03 	bl	14040 <net_buf_id>
    d43a:	230c      	movs	r3, #12
    d43c:	4358      	muls	r0, r3
    d43e:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
    d442:	f1b8 0f00 	cmp.w	r8, #0
    d446:	d01e      	beq.n	d486 <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    d448:	466d      	mov	r5, sp
    d44a:	b088      	sub	sp, #32
    d44c:	466a      	mov	r2, sp
    d44e:	4b19      	ldr	r3, [pc, #100]	; (d4b4 <bt_hci_cmd_send_sync+0xf8>)
    d450:	f8c2 801c 	str.w	r8, [r2, #28]
    d454:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d458:	2304      	movs	r3, #4
    d45a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d45e:	4816      	ldr	r0, [pc, #88]	; (d4b8 <bt_hci_cmd_send_sync+0xfc>)
    d460:	f842 3f10 	str.w	r3, [r2, #16]!
    d464:	f00d f85b 	bl	1a51e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    d468:	4620      	mov	r0, r4
    d46a:	46ad      	mov	sp, r5
    d46c:	f006 fea2 	bl	141b4 <net_buf_unref>
			return -ECONNREFUSED;
    d470:	f1b8 0f09 	cmp.w	r8, #9
    d474:	bf14      	ite	ne
    d476:	f06f 0004 	mvnne.w	r0, #4
    d47a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    d47e:	371c      	adds	r7, #28
    d480:	46bd      	mov	sp, r7
    d482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    d486:	b115      	cbz	r5, d48e <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
    d488:	602c      	str	r4, [r5, #0]
	return 0;
    d48a:	2000      	movs	r0, #0
    d48c:	e7f7      	b.n	d47e <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
    d48e:	4620      	mov	r0, r4
    d490:	f006 fe90 	bl	141b4 <net_buf_unref>
    d494:	e7f9      	b.n	d48a <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
    d496:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d49a:	e7f0      	b.n	d47e <bt_hci_cmd_send_sync+0xc2>
    d49c:	20009828 	.word	0x20009828
    d4a0:	2000814c 	.word	0x2000814c
    d4a4:	0001fb49 	.word	0x0001fb49
    d4a8:	0001fd00 	.word	0x0001fd00
    d4ac:	0001fb96 	.word	0x0001fb96
    d4b0:	0001fd09 	.word	0x0001fd09
    d4b4:	0001fd35 	.word	0x0001fd35
    d4b8:	0001e55c 	.word	0x0001e55c

0000d4bc <hci_le_read_max_data_len>:
{
    d4bc:	b570      	push	{r4, r5, r6, lr}
    d4be:	b088      	sub	sp, #32
    d4c0:	4606      	mov	r6, r0
    d4c2:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    d4c4:	f242 002f 	movw	r0, #8239	; 0x202f
    d4c8:	2100      	movs	r1, #0
    d4ca:	aa01      	add	r2, sp, #4
    d4cc:	f7ff ff76 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    d4d0:	4604      	mov	r4, r0
    d4d2:	b160      	cbz	r0, d4ee <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
    d4d4:	4b0b      	ldr	r3, [pc, #44]	; (d504 <hci_le_read_max_data_len+0x48>)
    d4d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d4da:	9307      	str	r3, [sp, #28]
    d4dc:	2302      	movs	r3, #2
    d4de:	480a      	ldr	r0, [pc, #40]	; (d508 <hci_le_read_max_data_len+0x4c>)
    d4e0:	aa06      	add	r2, sp, #24
    d4e2:	9306      	str	r3, [sp, #24]
    d4e4:	f00d f81b 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    d4e8:	4620      	mov	r0, r4
    d4ea:	b008      	add	sp, #32
    d4ec:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    d4ee:	9801      	ldr	r0, [sp, #4]
    d4f0:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    d4f2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    d4f6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    d4f8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    d4fc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    d4fe:	f006 fe59 	bl	141b4 <net_buf_unref>
	return 0;
    d502:	e7f1      	b.n	d4e8 <hci_le_read_max_data_len+0x2c>
    d504:	0001fd51 	.word	0x0001fd51
    d508:	0001e55c 	.word	0x0001e55c

0000d50c <bt_hci_le_rand>:
{
    d50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    d50e:	4b14      	ldr	r3, [pc, #80]	; (d560 <bt_hci_le_rand+0x54>)
{
    d510:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    d512:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
    d516:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    d518:	2b00      	cmp	r3, #0
    d51a:	da1d      	bge.n	d558 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    d51c:	b914      	cbnz	r4, d524 <bt_hci_le_rand+0x18>
	return 0;
    d51e:	4620      	mov	r0, r4
}
    d520:	b003      	add	sp, #12
    d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    d524:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    d526:	f04f 0100 	mov.w	r1, #0
    d52a:	f242 0018 	movw	r0, #8216	; 0x2018
    d52e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    d530:	4626      	mov	r6, r4
    d532:	bf28      	it	cs
    d534:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    d536:	f7ff ff41 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    d53a:	2800      	cmp	r0, #0
    d53c:	d1f0      	bne.n	d520 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    d53e:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    d540:	4632      	mov	r2, r6
    d542:	68f9      	ldr	r1, [r7, #12]
    d544:	4628      	mov	r0, r5
    d546:	3101      	adds	r1, #1
    d548:	f00c ff11 	bl	1a36e <memcpy>
		net_buf_unref(rsp);
    d54c:	4638      	mov	r0, r7
    d54e:	f006 fe31 	bl	141b4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    d552:	4435      	add	r5, r6
		len -= count;
    d554:	1ba4      	subs	r4, r4, r6
    d556:	e7e1      	b.n	d51c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    d558:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d55c:	e7e0      	b.n	d520 <bt_hci_le_rand+0x14>
    d55e:	bf00      	nop
    d560:	20008000 	.word	0x20008000

0000d564 <bt_hci_le_enh_conn_complete>:
{
    d564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d568:	b08c      	sub	sp, #48	; 0x30
    d56a:	4605      	mov	r5, r0
    d56c:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
    d56e:	4bac      	ldr	r3, [pc, #688]	; (d820 <bt_hci_le_enh_conn_complete+0x2bc>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d570:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    d574:	8819      	ldrh	r1, [r3, #0]
    d576:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
    d57a:	4291      	cmp	r1, r2
{
    d57c:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
    d57e:	bf04      	itt	eq
    d580:	801e      	strheq	r6, [r3, #0]
			return true;
    d582:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    d584:	f001 f846 	bl	e614 <bt_id_pending_keys_update>
	if (evt->status) {
    d588:	782c      	ldrb	r4, [r5, #0]
    d58a:	b3a4      	cbz	r4, d5f6 <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d58c:	2c3c      	cmp	r4, #60	; 0x3c
    d58e:	d122      	bne.n	d5d6 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    d590:	f001 fb42 	bl	ec18 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d594:	f06f 0180 	mvn.w	r1, #128	; 0x80
    d598:	3010      	adds	r0, #16
    d59a:	f00c ffc3 	bl	1a524 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    d59e:	2000      	movs	r0, #0
    d5a0:	f7ff fa9c 	bl	cadc <find_pending_connect.part.0>
		if (!conn) {
    d5a4:	4605      	mov	r5, r0
    d5a6:	b970      	cbnz	r0, d5c6 <bt_hci_le_enh_conn_complete+0x62>
			LOG_ERR("No pending peripheral connection");
    d5a8:	4b9e      	ldr	r3, [pc, #632]	; (d824 <bt_hci_le_enh_conn_complete+0x2c0>)
    d5aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d5ae:	627b      	str	r3, [r7, #36]	; 0x24
    d5b0:	2302      	movs	r3, #2
    d5b2:	489d      	ldr	r0, [pc, #628]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d5b4:	623b      	str	r3, [r7, #32]
    d5b6:	f107 0220 	add.w	r2, r7, #32
    d5ba:	f00c ffb0 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    d5be:	3728      	adds	r7, #40	; 0x28
    d5c0:	46bd      	mov	sp, r7
    d5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    d5c6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d5c8:	2100      	movs	r1, #0
    d5ca:	f002 f9fb 	bl	f9c4 <bt_conn_set_state>
		bt_conn_unref(conn);
    d5ce:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    d5d0:	f00d fadb 	bl	1ab8a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d5d4:	e7f3      	b.n	d5be <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    d5d6:	466d      	mov	r5, sp
    d5d8:	b088      	sub	sp, #32
    d5da:	aa02      	add	r2, sp, #8
    d5dc:	4b93      	ldr	r3, [pc, #588]	; (d82c <bt_hci_le_enh_conn_complete+0x2c8>)
    d5de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d5e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d5e6:	2303      	movs	r3, #3
    d5e8:	488f      	ldr	r0, [pc, #572]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d5ea:	f842 3f10 	str.w	r3, [r2, #16]!
    d5ee:	f00c ff96 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d5f2:	46ad      	mov	sp, r5
		return;
    d5f4:	e7e3      	b.n	d5be <bt_hci_le_enh_conn_complete+0x5a>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d5f6:	78eb      	ldrb	r3, [r5, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d5f8:	f105 0904 	add.w	r9, r5, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d5fc:	2b01      	cmp	r3, #1
    d5fe:	bf08      	it	eq
    d600:	4b8b      	ldreq	r3, [pc, #556]	; (d830 <bt_hci_le_enh_conn_complete+0x2cc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d602:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d604:	bf08      	it	eq
    d606:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d60a:	f00c ff4e 	bl	1a4aa <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    d60e:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d610:	b348      	cbz	r0, d666 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    d612:	f107 0010 	add.w	r0, r7, #16
    d616:	f00c ff3e 	bl	1a496 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
    d61a:	2206      	movs	r2, #6
    d61c:	f105 0111 	add.w	r1, r5, #17
    d620:	f107 0009 	add.w	r0, r7, #9
    d624:	f00c fea3 	bl	1a36e <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
    d628:	2301      	movs	r3, #1
    d62a:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    d62c:	78eb      	ldrb	r3, [r5, #3]
    d62e:	2b01      	cmp	r3, #1
    d630:	d029      	beq.n	d686 <bt_hci_le_enh_conn_complete+0x122>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    d632:	4648      	mov	r0, r9
    d634:	f7ff f922 	bl	c87c <bt_addr_le_str>
    d638:	466c      	mov	r4, sp
    d63a:	b088      	sub	sp, #32
    d63c:	aa02      	add	r2, sp, #8
    d63e:	4b7d      	ldr	r3, [pc, #500]	; (d834 <bt_hci_le_enh_conn_complete+0x2d0>)
    d640:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    d644:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d648:	f44f 7300 	mov.w	r3, #512	; 0x200
    d64c:	8393      	strh	r3, [r2, #28]
    d64e:	4b7a      	ldr	r3, [pc, #488]	; (d838 <bt_hci_le_enh_conn_complete+0x2d4>)
    d650:	4875      	ldr	r0, [pc, #468]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d652:	f842 3f10 	str.w	r3, [r2, #16]!
    d656:	f00c ff62 	bl	1a51e <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    d65a:	211f      	movs	r1, #31
    d65c:	46a5      	mov	sp, r4
    d65e:	4640      	mov	r0, r8
    d660:	f00c ff78 	bl	1a554 <bt_hci_disconnect>
		return;
    d664:	e7ab      	b.n	d5be <bt_hci_le_enh_conn_complete+0x5a>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
    d666:	4620      	mov	r0, r4
    d668:	f00d f8d1 	bl	1a80e <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    d66c:	2207      	movs	r2, #7
    d66e:	4601      	mov	r1, r0
    d670:	f107 0010 	add.w	r0, r7, #16
    d674:	f00c fe7b 	bl	1a36e <memcpy>
    d678:	2207      	movs	r2, #7
    d67a:	4649      	mov	r1, r9
    d67c:	f107 0008 	add.w	r0, r7, #8
    d680:	f00c fe75 	bl	1a36e <memcpy>
}
    d684:	e7d2      	b.n	d62c <bt_hci_le_enh_conn_complete+0xc8>
    d686:	f107 0010 	add.w	r0, r7, #16
    d68a:	f7ff fa27 	bl	cadc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d68e:	78eb      	ldrb	r3, [r5, #3]
    d690:	4604      	mov	r4, r0
    d692:	2b01      	cmp	r3, #1
    d694:	d10a      	bne.n	d6ac <bt_hci_le_enh_conn_complete+0x148>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    d696:	f001 fabf 	bl	ec18 <bt_le_adv_lookup_legacy>
    d69a:	4682      	mov	sl, r0
    d69c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    d6a0:	3010      	adds	r0, #16
    d6a2:	f00c ff3f 	bl	1a524 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    d6a6:	4650      	mov	r0, sl
    d6a8:	f00d f9c9 	bl	1aa3e <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    d6ac:	2c00      	cmp	r4, #0
    d6ae:	d0c0      	beq.n	d632 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = sys_le16_to_cpu(evt->handle);
    d6b0:	4620      	mov	r0, r4
    d6b2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	memcpy(dst, src, sizeof(*dst));
    d6b6:	2207      	movs	r2, #7
    d6b8:	f820 3b88 	strh.w	r3, [r0], #136
    d6bc:	f107 0110 	add.w	r1, r7, #16
    d6c0:	f00c fe55 	bl	1a36e <memcpy>
	conn->err = 0U;
    d6c4:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    d6c6:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    d6ca:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    d6ce:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    d6d2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d6d6:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    d6da:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    d6de:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    d6e0:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d6e2:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    d6e4:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d6e6:	d118      	bne.n	d71a <bt_hci_le_enh_conn_complete+0x1b6>
    d6e8:	2207      	movs	r2, #7
    d6ea:	f107 0108 	add.w	r1, r7, #8
    d6ee:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    d6f2:	f00c fe3c 	bl	1a36e <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    d6f6:	f001 fa8f 	bl	ec18 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    d6fa:	7a21      	ldrb	r1, [r4, #8]
    d6fc:	4d4c      	ldr	r5, [pc, #304]	; (d830 <bt_hci_le_enh_conn_complete+0x2cc>)
    d6fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    d702:	4429      	add	r1, r5
    d704:	2207      	movs	r2, #7
    d706:	f104 0096 	add.w	r0, r4, #150	; 0x96
    d70a:	f00c fe30 	bl	1a36e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    d70e:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    d712:	065d      	lsls	r5, r3, #25
    d714:	d501      	bpl.n	d71a <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    d716:	f001 fc47 	bl	efa8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    d71a:	2107      	movs	r1, #7
    d71c:	4620      	mov	r0, r4
    d71e:	f002 f951 	bl	f9c4 <bt_conn_set_state>
	if (is_disconnected) {
    d722:	b11e      	cbz	r6, d72c <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    d724:	2101      	movs	r1, #1
    d726:	4620      	mov	r0, r4
    d728:	f002 f94c 	bl	f9c4 <bt_conn_set_state>
	bt_conn_connected(conn);
    d72c:	4620      	mov	r0, r4
    d72e:	f00d fa62 	bl	1abf6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    d732:	7b63      	ldrb	r3, [r4, #13]
    d734:	2b07      	cmp	r3, #7
    d736:	d16e      	bne.n	d816 <bt_hci_le_enh_conn_complete+0x2b2>
    d738:	1d23      	adds	r3, r4, #4
    d73a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    d73e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d742:	4d3b      	ldr	r5, [pc, #236]	; (d830 <bt_hci_le_enh_conn_complete+0x2cc>)
    d744:	d129      	bne.n	d79a <bt_hci_le_enh_conn_complete+0x236>
    d746:	78e3      	ldrb	r3, [r4, #3]
    d748:	b11b      	cbz	r3, d752 <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    d74a:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d74e:	0718      	lsls	r0, r3, #28
    d750:	d523      	bpl.n	d79a <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    d752:	2102      	movs	r1, #2
    d754:	f242 0016 	movw	r0, #8214	; 0x2016
    d758:	f7ff fdf6 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    d75c:	4606      	mov	r6, r0
    d75e:	2800      	cmp	r0, #0
    d760:	d05b      	beq.n	d81a <bt_hci_le_enh_conn_complete+0x2b6>
    d762:	2102      	movs	r1, #2
    d764:	300c      	adds	r0, #12
    d766:	f00e feee 	bl	1c546 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d76a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    d76c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    d76e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    d770:	4631      	mov	r1, r6
    d772:	f242 0016 	movw	r0, #8214	; 0x2016
    d776:	f7ff fe21 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    d77a:	b170      	cbz	r0, d79a <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
    d77c:	466e      	mov	r6, sp
    d77e:	b088      	sub	sp, #32
    d780:	aa02      	add	r2, sp, #8
    d782:	4b2e      	ldr	r3, [pc, #184]	; (d83c <bt_hci_le_enh_conn_complete+0x2d8>)
    d784:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d788:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d78c:	2303      	movs	r3, #3
    d78e:	4826      	ldr	r0, [pc, #152]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d790:	f842 3f10 	str.w	r3, [r2, #16]!
    d794:	f00c fec3 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d798:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d79a:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
    d79e:	07d9      	lsls	r1, r3, #31
    d7a0:	d516      	bpl.n	d7d0 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    d7a2:	2100      	movs	r1, #0
    d7a4:	2302      	movs	r3, #2
    d7a6:	4620      	mov	r0, r4
    d7a8:	461a      	mov	r2, r3
    d7aa:	9100      	str	r1, [sp, #0]
    d7ac:	f00c ff0b 	bl	1a5c6 <bt_le_set_phy>
		if (err) {
    d7b0:	b170      	cbz	r0, d7d0 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
    d7b2:	466e      	mov	r6, sp
    d7b4:	b088      	sub	sp, #32
    d7b6:	aa02      	add	r2, sp, #8
    d7b8:	4b21      	ldr	r3, [pc, #132]	; (d840 <bt_hci_le_enh_conn_complete+0x2dc>)
    d7ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d7be:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d7c2:	2303      	movs	r3, #3
    d7c4:	4818      	ldr	r0, [pc, #96]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d7c6:	f842 3f10 	str.w	r3, [r2, #16]!
    d7ca:	f00c fea8 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d7ce:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    d7d0:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d7d4:	069a      	lsls	r2, r3, #26
    d7d6:	d51e      	bpl.n	d816 <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    d7d8:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
    d7dc:	689b      	ldr	r3, [r3, #8]
    d7de:	079b      	lsls	r3, r3, #30
    d7e0:	d519      	bpl.n	d816 <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d7e2:	1db9      	adds	r1, r7, #6
    d7e4:	1d38      	adds	r0, r7, #4
    d7e6:	f7ff fe69 	bl	d4bc <hci_le_read_max_data_len>
			if (!err) {
    d7ea:	b9a0      	cbnz	r0, d816 <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
    d7ec:	4620      	mov	r0, r4
    d7ee:	88fa      	ldrh	r2, [r7, #6]
    d7f0:	88b9      	ldrh	r1, [r7, #4]
    d7f2:	f00c feca 	bl	1a58a <bt_le_set_data_len>
				if (err) {
    d7f6:	b170      	cbz	r0, d816 <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
    d7f8:	466d      	mov	r5, sp
    d7fa:	b088      	sub	sp, #32
    d7fc:	aa02      	add	r2, sp, #8
    d7fe:	4b11      	ldr	r3, [pc, #68]	; (d844 <bt_hci_le_enh_conn_complete+0x2e0>)
    d800:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d804:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d808:	2303      	movs	r3, #3
    d80a:	4807      	ldr	r0, [pc, #28]	; (d828 <bt_hci_le_enh_conn_complete+0x2c4>)
    d80c:	f842 3f10 	str.w	r3, [r2, #16]!
    d810:	f00c fe85 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d814:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    d816:	4620      	mov	r0, r4
    d818:	e6da      	b.n	d5d0 <bt_hci_le_enh_conn_complete+0x6c>
		return -ENOBUFS;
    d81a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d81e:	e7ad      	b.n	d77c <bt_hci_le_enh_conn_complete+0x218>
    d820:	20009c38 	.word	0x20009c38
    d824:	0001fd71 	.word	0x0001fd71
    d828:	0001e55c 	.word	0x0001e55c
    d82c:	0001fd92 	.word	0x0001fd92
    d830:	20008000 	.word	0x20008000
    d834:	0001fdab 	.word	0x0001fdab
    d838:	01000003 	.word	0x01000003
    d83c:	0001fdc7 	.word	0x0001fdc7
    d840:	0001fde8 	.word	0x0001fde8
    d844:	0001fdff 	.word	0x0001fdff

0000d848 <le_legacy_conn_complete>:
{
    d848:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    d84a:	68c1      	ldr	r1, [r0, #12]
{
    d84c:	b088      	sub	sp, #32
	enh.status         = evt->status;
    d84e:	780b      	ldrb	r3, [r1, #0]
	memcpy(dst, src, sizeof(*dst));
    d850:	4c17      	ldr	r4, [pc, #92]	; (d8b0 <le_legacy_conn_complete+0x68>)
    d852:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    d856:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	memcpy(dst, src, sizeof(*dst));
    d85a:	2207      	movs	r2, #7
    d85c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    d860:	78cb      	ldrb	r3, [r1, #3]
    d862:	a801      	add	r0, sp, #4
    d864:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    d868:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d86c:	3104      	adds	r1, #4
    d86e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    d872:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    d876:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    d87a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d87e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    d882:	7b4b      	ldrb	r3, [r1, #13]
    d884:	f88d 301d 	strb.w	r3, [sp, #29]
    d888:	f00c fd71 	bl	1a36e <memcpy>
	memcpy(dst, src, sizeof(*dst));
    d88c:	4621      	mov	r1, r4
    d88e:	2206      	movs	r2, #6
    d890:	f10d 000b 	add.w	r0, sp, #11
    d894:	f00c fd6b 	bl	1a36e <memcpy>
    d898:	2206      	movs	r2, #6
    d89a:	4621      	mov	r1, r4
    d89c:	f10d 0011 	add.w	r0, sp, #17
    d8a0:	f00c fd65 	bl	1a36e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    d8a4:	4668      	mov	r0, sp
    d8a6:	f7ff fe5d 	bl	d564 <bt_hci_le_enh_conn_complete>
}
    d8aa:	b008      	add	sp, #32
    d8ac:	bd10      	pop	{r4, pc}
    d8ae:	bf00      	nop
    d8b0:	0001f9f2 	.word	0x0001f9f2

0000d8b4 <bt_security_err_get>:
	switch (hci_err) {
    d8b4:	2829      	cmp	r0, #41	; 0x29
    d8b6:	bf9a      	itte	ls
    d8b8:	4b01      	ldrls	r3, [pc, #4]	; (d8c0 <bt_security_err_get+0xc>)
    d8ba:	5c18      	ldrbls	r0, [r3, r0]
{
    d8bc:	2009      	movhi	r0, #9
}
    d8be:	4770      	bx	lr
    d8c0:	0002016e 	.word	0x0002016e

0000d8c4 <hci_encrypt_key_refresh_complete>:
{
    d8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8c6:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    d8c8:	68c3      	ldr	r3, [r0, #12]
{
    d8ca:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    d8cc:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    d8d0:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    d8d2:	4630      	mov	r0, r6
    d8d4:	f002 f86e 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    d8d8:	4604      	mov	r4, r0
    d8da:	b988      	cbnz	r0, d900 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    d8dc:	466c      	mov	r4, sp
    d8de:	b088      	sub	sp, #32
    d8e0:	466a      	mov	r2, sp
    d8e2:	4b1f      	ldr	r3, [pc, #124]	; (d960 <hci_encrypt_key_refresh_complete+0x9c>)
    d8e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d8e8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d8ec:	2303      	movs	r3, #3
    d8ee:	481d      	ldr	r0, [pc, #116]	; (d964 <hci_encrypt_key_refresh_complete+0xa0>)
    d8f0:	f842 3f10 	str.w	r3, [r2, #16]!
    d8f4:	f00c fe13 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d8f8:	46a5      	mov	sp, r4
}
    d8fa:	371c      	adds	r7, #28
    d8fc:	46bd      	mov	sp, r7
    d8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    d900:	b15d      	cbz	r5, d91a <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d902:	4628      	mov	r0, r5
    d904:	f7ff ffd6 	bl	d8b4 <bt_security_err_get>
    d908:	4629      	mov	r1, r5
    d90a:	4602      	mov	r2, r0
    d90c:	4620      	mov	r0, r4
    d90e:	f002 fa21 	bl	fd54 <bt_conn_security_changed>
	bt_conn_unref(conn);
    d912:	4620      	mov	r0, r4
    d914:	f00d f939 	bl	1ab8a <bt_conn_unref>
    d918:	e7ef      	b.n	d8fa <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
    d91a:	7883      	ldrb	r3, [r0, #2]
    d91c:	2b01      	cmp	r3, #1
    d91e:	d1f0      	bne.n	d902 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
    d920:	f006 f988 	bl	13c34 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    d924:	4620      	mov	r0, r4
    d926:	f00c fdd6 	bl	1a4d6 <update_sec_level>
    d92a:	2800      	cmp	r0, #0
    d92c:	d1e9      	bne.n	d902 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d92e:	2005      	movs	r0, #5
    d930:	f7ff ffc0 	bl	d8b4 <bt_security_err_get>
    d934:	2105      	movs	r1, #5
    d936:	4602      	mov	r2, r0
    d938:	4620      	mov	r0, r4
    d93a:	f002 fa0b 	bl	fd54 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
    d93e:	4b0a      	ldr	r3, [pc, #40]	; (d968 <hci_encrypt_key_refresh_complete+0xa4>)
    d940:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d944:	617b      	str	r3, [r7, #20]
    d946:	2302      	movs	r3, #2
    d948:	4806      	ldr	r0, [pc, #24]	; (d964 <hci_encrypt_key_refresh_complete+0xa0>)
    d94a:	f107 0210 	add.w	r2, r7, #16
    d94e:	613b      	str	r3, [r7, #16]
    d950:	f00c fde5 	bl	1a51e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    d954:	2105      	movs	r1, #5
    d956:	4620      	mov	r0, r4
    d958:	f00d f956 	bl	1ac08 <bt_conn_disconnect>
    d95c:	e7d9      	b.n	d912 <hci_encrypt_key_refresh_complete+0x4e>
    d95e:	bf00      	nop
    d960:	0001fb01 	.word	0x0001fb01
    d964:	0001e55c 	.word	0x0001e55c
    d968:	0001fe1b 	.word	0x0001fe1b

0000d96c <hci_encrypt_change>:
{
    d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d970:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    d972:	68c6      	ldr	r6, [r0, #12]
{
    d974:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d976:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
    d97a:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    d97c:	4640      	mov	r0, r8
    d97e:	f002 f819 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    d982:	4604      	mov	r4, r0
    d984:	b990      	cbnz	r0, d9ac <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    d986:	466c      	mov	r4, sp
    d988:	b088      	sub	sp, #32
    d98a:	466a      	mov	r2, sp
    d98c:	4b23      	ldr	r3, [pc, #140]	; (da1c <hci_encrypt_change+0xb0>)
    d98e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d992:	e9c2 3805 	strd	r3, r8, [r2, #20]
    d996:	2303      	movs	r3, #3
    d998:	4821      	ldr	r0, [pc, #132]	; (da20 <hci_encrypt_change+0xb4>)
    d99a:	f842 3f10 	str.w	r3, [r2, #16]!
    d99e:	f00c fdbe 	bl	1a51e <z_log_msg_static_create.constprop.0>
    d9a2:	46a5      	mov	sp, r4
}
    d9a4:	3718      	adds	r7, #24
    d9a6:	46bd      	mov	sp, r7
    d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
    d9ac:	b15d      	cbz	r5, d9c6 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
    d9ae:	4628      	mov	r0, r5
    d9b0:	f7ff ff80 	bl	d8b4 <bt_security_err_get>
    d9b4:	4629      	mov	r1, r5
    d9b6:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d9b8:	4620      	mov	r0, r4
    d9ba:	f002 f9cb 	bl	fd54 <bt_conn_security_changed>
	bt_conn_unref(conn);
    d9be:	4620      	mov	r0, r4
    d9c0:	f00d f8e3 	bl	1ab8a <bt_conn_unref>
    d9c4:	e7ee      	b.n	d9a4 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
    d9c6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    d9c8:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    d9ca:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    d9cc:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    d9ce:	d005      	beq.n	d9dc <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d9d0:	2000      	movs	r0, #0
    d9d2:	f7ff ff6f 	bl	d8b4 <bt_security_err_get>
    d9d6:	2100      	movs	r1, #0
    d9d8:	4602      	mov	r2, r0
    d9da:	e7ed      	b.n	d9b8 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    d9dc:	b10b      	cbz	r3, d9e2 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
    d9de:	f006 f929 	bl	13c34 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    d9e2:	4620      	mov	r0, r4
    d9e4:	f00c fd77 	bl	1a4d6 <update_sec_level>
    d9e8:	2800      	cmp	r0, #0
    d9ea:	d1f1      	bne.n	d9d0 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d9ec:	2005      	movs	r0, #5
    d9ee:	f7ff ff61 	bl	d8b4 <bt_security_err_get>
    d9f2:	2105      	movs	r1, #5
    d9f4:	4602      	mov	r2, r0
    d9f6:	4620      	mov	r0, r4
    d9f8:	f002 f9ac 	bl	fd54 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
    d9fc:	4b09      	ldr	r3, [pc, #36]	; (da24 <hci_encrypt_change+0xb8>)
    d9fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    da02:	617b      	str	r3, [r7, #20]
    da04:	2302      	movs	r3, #2
    da06:	4806      	ldr	r0, [pc, #24]	; (da20 <hci_encrypt_change+0xb4>)
    da08:	f107 0210 	add.w	r2, r7, #16
    da0c:	613b      	str	r3, [r7, #16]
    da0e:	f00c fd86 	bl	1a51e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    da12:	2105      	movs	r1, #5
    da14:	4620      	mov	r0, r4
    da16:	f00d f8f7 	bl	1ac08 <bt_conn_disconnect>
    da1a:	e7d0      	b.n	d9be <hci_encrypt_change+0x52>
    da1c:	0001fb01 	.word	0x0001fb01
    da20:	0001e55c 	.word	0x0001e55c
    da24:	0001fe1b 	.word	0x0001fe1b

0000da28 <bt_send>:
	return bt_dev.drv->send(buf);
    da28:	4b02      	ldr	r3, [pc, #8]	; (da34 <bt_send+0xc>)
    da2a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
    da2e:	695b      	ldr	r3, [r3, #20]
    da30:	4718      	bx	r3
    da32:	bf00      	nop
    da34:	20008000 	.word	0x20008000

0000da38 <bt_hci_cmd_send>:
{
    da38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da3a:	4605      	mov	r5, r0
	if (!buf) {
    da3c:	460c      	mov	r4, r1
{
    da3e:	af00      	add	r7, sp, #0
	if (!buf) {
    da40:	b919      	cbnz	r1, da4a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    da42:	f7ff fc81 	bl	d348 <bt_hci_cmd_create>
		if (!buf) {
    da46:	4604      	mov	r4, r0
    da48:	b318      	cbz	r0, da92 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    da4a:	f640 4335 	movw	r3, #3125	; 0xc35
    da4e:	429d      	cmp	r5, r3
    da50:	d119      	bne.n	da86 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    da52:	4620      	mov	r0, r4
    da54:	f7ff ffe8 	bl	da28 <bt_send>
		if (err) {
    da58:	4605      	mov	r5, r0
    da5a:	b188      	cbz	r0, da80 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
    da5c:	466e      	mov	r6, sp
    da5e:	b088      	sub	sp, #32
    da60:	466a      	mov	r2, sp
    da62:	4b0d      	ldr	r3, [pc, #52]	; (da98 <bt_hci_cmd_send+0x60>)
    da64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    da68:	e9c2 3005 	strd	r3, r0, [r2, #20]
    da6c:	2303      	movs	r3, #3
    da6e:	480b      	ldr	r0, [pc, #44]	; (da9c <bt_hci_cmd_send+0x64>)
    da70:	f842 3f10 	str.w	r3, [r2, #16]!
    da74:	f00c fd53 	bl	1a51e <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    da78:	4620      	mov	r0, r4
    da7a:	46b5      	mov	sp, r6
    da7c:	f006 fb9a 	bl	141b4 <net_buf_unref>
}
    da80:	4628      	mov	r0, r5
    da82:	46bd      	mov	sp, r7
    da84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    da86:	4621      	mov	r1, r4
    da88:	4805      	ldr	r0, [pc, #20]	; (daa0 <bt_hci_cmd_send+0x68>)
    da8a:	f00e fd30 	bl	1c4ee <net_buf_put>
	return 0;
    da8e:	2500      	movs	r5, #0
    da90:	e7f6      	b.n	da80 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    da92:	f06f 0568 	mvn.w	r5, #104	; 0x68
    da96:	e7f3      	b.n	da80 <bt_hci_cmd_send+0x48>
    da98:	0001fe41 	.word	0x0001fe41
    da9c:	0001e55c 	.word	0x0001e55c
    daa0:	2000814c 	.word	0x2000814c

0000daa4 <bt_hci_host_num_completed_packets>:
{
    daa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daa8:	b086      	sub	sp, #24
    daaa:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    daac:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
    daae:	7e46      	ldrb	r6, [r0, #25]
{
    dab0:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    dab2:	7a80      	ldrb	r0, [r0, #10]
    dab4:	f006 fabc 	bl	14030 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    dab8:	4621      	mov	r1, r4
    daba:	f00f fee6 	bl	1d88a <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    dabe:	4b2d      	ldr	r3, [pc, #180]	; (db74 <bt_hci_host_num_completed_packets+0xd0>)
    dac0:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
    dac4:	069b      	lsls	r3, r3, #26
    dac6:	d513      	bpl.n	daf0 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    dac8:	4630      	mov	r0, r6
    daca:	f002 fb5b 	bl	10184 <bt_conn_lookup_index>
	if (!conn) {
    dace:	4604      	mov	r4, r0
    dad0:	b990      	cbnz	r0, daf8 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
    dad2:	466c      	mov	r4, sp
    dad4:	b088      	sub	sp, #32
    dad6:	466a      	mov	r2, sp
    dad8:	4b27      	ldr	r3, [pc, #156]	; (db78 <bt_hci_host_num_completed_packets+0xd4>)
    dada:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    dade:	e9c2 3605 	strd	r3, r6, [r2, #20]
    dae2:	2303      	movs	r3, #3
    dae4:	4825      	ldr	r0, [pc, #148]	; (db7c <bt_hci_host_num_completed_packets+0xd8>)
    dae6:	f842 3f10 	str.w	r3, [r2, #16]!
    daea:	f00c fd18 	bl	1a51e <z_log_msg_static_create.constprop.0>
    daee:	46a5      	mov	sp, r4
}
    daf0:	3718      	adds	r7, #24
    daf2:	46bd      	mov	sp, r7
    daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    daf8:	7b43      	ldrb	r3, [r0, #13]
    dafa:	3b07      	subs	r3, #7
    dafc:	2b01      	cmp	r3, #1
    dafe:	d90e      	bls.n	db1e <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
    db00:	4b1f      	ldr	r3, [pc, #124]	; (db80 <bt_hci_host_num_completed_packets+0xdc>)
    db02:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    db06:	617b      	str	r3, [r7, #20]
    db08:	2302      	movs	r3, #2
    db0a:	481c      	ldr	r0, [pc, #112]	; (db7c <bt_hci_host_num_completed_packets+0xd8>)
    db0c:	613b      	str	r3, [r7, #16]
    db0e:	f107 0210 	add.w	r2, r7, #16
    db12:	f00c fd04 	bl	1a51e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    db16:	4620      	mov	r0, r4
    db18:	f00d f837 	bl	1ab8a <bt_conn_unref>
		return;
    db1c:	e7e8      	b.n	daf0 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    db1e:	f00d f834 	bl	1ab8a <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    db22:	2105      	movs	r1, #5
    db24:	f640 4035 	movw	r0, #3125	; 0xc35
    db28:	f7ff fc0e 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    db2c:	4604      	mov	r4, r0
    db2e:	b958      	cbnz	r0, db48 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
    db30:	4b14      	ldr	r3, [pc, #80]	; (db84 <bt_hci_host_num_completed_packets+0xe0>)
    db32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    db36:	617b      	str	r3, [r7, #20]
    db38:	2302      	movs	r3, #2
    db3a:	4810      	ldr	r0, [pc, #64]	; (db7c <bt_hci_host_num_completed_packets+0xd8>)
    db3c:	613b      	str	r3, [r7, #16]
    db3e:	f107 0210 	add.w	r2, r7, #16
    db42:	f00c fcec 	bl	1a51e <z_log_msg_static_create.constprop.0>
		return;
    db46:	e7d3      	b.n	daf0 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    db48:	f100 080c 	add.w	r8, r0, #12
    db4c:	2101      	movs	r1, #1
    db4e:	4640      	mov	r0, r8
    db50:	f00e fcf9 	bl	1c546 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    db54:	2601      	movs	r6, #1
    db56:	2104      	movs	r1, #4
    db58:	7006      	strb	r6, [r0, #0]
    db5a:	4640      	mov	r0, r8
    db5c:	f00e fcf3 	bl	1c546 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    db60:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    db62:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    db64:	7086      	strb	r6, [r0, #2]
    db66:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    db68:	4621      	mov	r1, r4
    db6a:	f640 4035 	movw	r0, #3125	; 0xc35
    db6e:	f7ff ff63 	bl	da38 <bt_hci_cmd_send>
    db72:	e7bd      	b.n	daf0 <bt_hci_host_num_completed_packets+0x4c>
    db74:	20008000 	.word	0x20008000
    db78:	0001fe63 	.word	0x0001fe63
    db7c:	0001e55c 	.word	0x0001e55c
    db80:	0001fe8c 	.word	0x0001fe8c
    db84:	0001feb8 	.word	0x0001feb8

0000db88 <le_ltk_request>:
{
    db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db8c:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    db8e:	68c4      	ldr	r4, [r0, #12]
{
    db90:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
    db92:	8826      	ldrh	r6, [r4, #0]
    db94:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
    db98:	4640      	mov	r0, r8
    db9a:	f001 ff0b 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    db9e:	4605      	mov	r5, r0
    dba0:	b990      	cbnz	r0, dbc8 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    dba2:	466c      	mov	r4, sp
    dba4:	b088      	sub	sp, #32
    dba6:	aa02      	add	r2, sp, #8
    dba8:	4b28      	ldr	r3, [pc, #160]	; (dc4c <le_ltk_request+0xc4>)
    dbaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dbae:	e9c2 3805 	strd	r3, r8, [r2, #20]
    dbb2:	2303      	movs	r3, #3
    dbb4:	4826      	ldr	r0, [pc, #152]	; (dc50 <le_ltk_request+0xc8>)
    dbb6:	f842 3f10 	str.w	r3, [r2, #16]!
    dbba:	f00c fcb0 	bl	1a51e <z_log_msg_static_create.constprop.0>
    dbbe:	46a5      	mov	sp, r4
}
    dbc0:	3728      	adds	r7, #40	; 0x28
    dbc2:	46bd      	mov	sp, r7
    dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    dbc8:	f8d4 2002 	ldr.w	r2, [r4, #2]
    dbcc:	f8d4 3006 	ldr.w	r3, [r4, #6]
    dbd0:	9701      	str	r7, [sp, #4]
    dbd2:	8961      	ldrh	r1, [r4, #10]
    dbd4:	9100      	str	r1, [sp, #0]
    dbd6:	f00e fa75 	bl	1c0c4 <bt_smp_request_ltk>
    dbda:	b328      	cbz	r0, dc28 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    dbdc:	2112      	movs	r1, #18
    dbde:	f242 001a 	movw	r0, #8218	; 0x201a
    dbe2:	f7ff fbb1 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    dbe6:	4604      	mov	r4, r0
    dbe8:	b970      	cbnz	r0, dc08 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
    dbea:	4b1a      	ldr	r3, [pc, #104]	; (dc54 <le_ltk_request+0xcc>)
    dbec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dbf0:	627b      	str	r3, [r7, #36]	; 0x24
    dbf2:	2302      	movs	r3, #2
    dbf4:	4816      	ldr	r0, [pc, #88]	; (dc50 <le_ltk_request+0xc8>)
    dbf6:	623b      	str	r3, [r7, #32]
    dbf8:	f107 0220 	add.w	r2, r7, #32
    dbfc:	f00c fc8f 	bl	1a51e <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
    dc00:	4628      	mov	r0, r5
    dc02:	f00c ffc2 	bl	1ab8a <bt_conn_unref>
    dc06:	e7db      	b.n	dbc0 <le_ltk_request+0x38>
    dc08:	2112      	movs	r1, #18
    dc0a:	300c      	adds	r0, #12
    dc0c:	f00e fc9b 	bl	1c546 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    dc10:	4639      	mov	r1, r7
    dc12:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    dc14:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    dc18:	f00c fba9 	bl	1a36e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    dc1c:	4621      	mov	r1, r4
    dc1e:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    dc22:	f7ff ff09 	bl	da38 <bt_hci_cmd_send>
    dc26:	e7eb      	b.n	dc00 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    dc28:	2102      	movs	r1, #2
    dc2a:	f242 001b 	movw	r0, #8219	; 0x201b
    dc2e:	f7ff fb8b 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    dc32:	4604      	mov	r4, r0
    dc34:	2800      	cmp	r0, #0
    dc36:	d0d8      	beq.n	dbea <le_ltk_request+0x62>
    dc38:	2102      	movs	r1, #2
    dc3a:	300c      	adds	r0, #12
    dc3c:	f00e fc83 	bl	1c546 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    dc40:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    dc42:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    dc44:	f242 001b 	movw	r0, #8219	; 0x201b
    dc48:	e7eb      	b.n	dc22 <le_ltk_request+0x9a>
    dc4a:	bf00      	nop
    dc4c:	0001fadd 	.word	0x0001fadd
    dc50:	0001e55c 	.word	0x0001e55c
    dc54:	0001fedb 	.word	0x0001fedb

0000dc58 <le_conn_param_req>:
{
    dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc5c:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    dc5e:	68c3      	ldr	r3, [r0, #12]
{
    dc60:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    dc62:	78d9      	ldrb	r1, [r3, #3]
    dc64:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    dc66:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    dc6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    dc6e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    dc70:	7959      	ldrb	r1, [r3, #5]
    dc72:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    dc74:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    dc78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    dc7c:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    dc7e:	799a      	ldrb	r2, [r3, #6]
    dc80:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    dc82:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    dc84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    dc88:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    dc8a:	7a1a      	ldrb	r2, [r3, #8]
    dc8c:	7a5b      	ldrb	r3, [r3, #9]
    dc8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    dc92:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    dc94:	f001 fe8e 	bl	f9b4 <bt_conn_lookup_handle>
	if (!conn) {
    dc98:	4606      	mov	r6, r0
    dc9a:	b9b0      	cbnz	r0, dcca <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    dc9c:	466d      	mov	r5, sp
    dc9e:	b088      	sub	sp, #32
    dca0:	466a      	mov	r2, sp
    dca2:	4b20      	ldr	r3, [pc, #128]	; (dd24 <le_conn_param_req+0xcc>)
    dca4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dca8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dcac:	2303      	movs	r3, #3
    dcae:	481e      	ldr	r0, [pc, #120]	; (dd28 <le_conn_param_req+0xd0>)
    dcb0:	f842 3f10 	str.w	r3, [r2, #16]!
    dcb4:	f00c fc33 	bl	1a51e <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    dcb8:	2102      	movs	r1, #2
    dcba:	46ad      	mov	sp, r5
    dcbc:	4620      	mov	r0, r4
    dcbe:	f00c fcce 	bl	1a65e <le_conn_param_neg_reply>
}
    dcc2:	3708      	adds	r7, #8
    dcc4:	46bd      	mov	sp, r7
    dcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    dcca:	4639      	mov	r1, r7
    dccc:	f001 ffda 	bl	fc84 <le_param_req>
    dcd0:	b938      	cbnz	r0, dce2 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    dcd2:	211e      	movs	r1, #30
    dcd4:	4620      	mov	r0, r4
    dcd6:	f00c fcc2 	bl	1a65e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    dcda:	4630      	mov	r0, r6
    dcdc:	f00c ff55 	bl	1ab8a <bt_conn_unref>
    dce0:	e7ef      	b.n	dcc2 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    dce2:	210e      	movs	r1, #14
    dce4:	f242 0020 	movw	r0, #8224	; 0x2020
    dce8:	f7ff fb2e 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    dcec:	4605      	mov	r5, r0
    dcee:	2800      	cmp	r0, #0
    dcf0:	d0f3      	beq.n	dcda <le_conn_param_req+0x82>
    dcf2:	210e      	movs	r1, #14
    dcf4:	300c      	adds	r0, #12
    dcf6:	f00e fc26 	bl	1c546 <net_buf_simple_add>
    dcfa:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    dcfc:	220e      	movs	r2, #14
    dcfe:	2100      	movs	r1, #0
    dd00:	f00c fb40 	bl	1a384 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    dd04:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    dd08:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    dd0a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    dd0c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    dd0e:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    dd10:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    dd14:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    dd16:	88bb      	ldrh	r3, [r7, #4]
    dd18:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    dd1a:	88fb      	ldrh	r3, [r7, #6]
    dd1c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    dd1e:	f7ff fe8b 	bl	da38 <bt_hci_cmd_send>
    dd22:	e7da      	b.n	dcda <le_conn_param_req+0x82>
    dd24:	0001fadd 	.word	0x0001fadd
    dd28:	0001e55c 	.word	0x0001e55c

0000dd2c <hci_tx_thread>:
{
    dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    dd30:	f8df 8154 	ldr.w	r8, [pc, #340]	; de88 <hci_tx_thread+0x15c>
{
    dd34:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    dd36:	f8df 9154 	ldr.w	r9, [pc, #340]	; de8c <hci_tx_thread+0x160>
{
    dd3a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    dd3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    dd40:	4853      	ldr	r0, [pc, #332]	; (de90 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    dd42:	f36f 3394 	bfc	r3, #14, #7
    dd46:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    dd4a:	f001 fdeb 	bl	f924 <bt_conn_prepare_events>
    dd4e:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    dd50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd58:	4629      	mov	r1, r5
    dd5a:	484b      	ldr	r0, [pc, #300]	; (de88 <hci_tx_thread+0x15c>)
    dd5c:	f00a fcdc 	bl	18718 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    dd60:	b160      	cbz	r0, dd7c <hci_tx_thread+0x50>
    dd62:	f640 23c8 	movw	r3, #2760	; 0xac8
    dd66:	464a      	mov	r2, r9
    dd68:	494a      	ldr	r1, [pc, #296]	; (de94 <hci_tx_thread+0x168>)
    dd6a:	484b      	ldr	r0, [pc, #300]	; (de98 <hci_tx_thread+0x16c>)
    dd6c:	f00b f926 	bl	18fbc <assert_print>
    dd70:	4040      	eors	r0, r0
    dd72:	f380 8811 	msr	BASEPRI, r0
    dd76:	f04f 0003 	mov.w	r0, #3
    dd7a:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    dd7c:	f04f 0a03 	mov.w	sl, #3
{
    dd80:	4e41      	ldr	r6, [pc, #260]	; (de88 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    dd82:	b915      	cbnz	r5, dd8a <hci_tx_thread+0x5e>
	z_impl_k_yield();
    dd84:	f00a f9b8 	bl	180f8 <z_impl_k_yield>
	while (1) {
    dd88:	e7d8      	b.n	dd3c <hci_tx_thread+0x10>
		switch (ev->state) {
    dd8a:	68f3      	ldr	r3, [r6, #12]
    dd8c:	f3c3 3386 	ubfx	r3, r3, #14, #7
    dd90:	2b02      	cmp	r3, #2
    dd92:	d960      	bls.n	de56 <hci_tx_thread+0x12a>
    dd94:	2b04      	cmp	r3, #4
    dd96:	d168      	bne.n	de6a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    dd98:	7b33      	ldrb	r3, [r6, #12]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d15e      	bne.n	de5c <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    dd9e:	2200      	movs	r2, #0
    dda0:	2300      	movs	r3, #0
    dda2:	483e      	ldr	r0, [pc, #248]	; (de9c <hci_tx_thread+0x170>)
    dda4:	f00e fb74 	bl	1c490 <net_buf_get>
	BT_ASSERT(buf);
    dda8:	4604      	mov	r4, r0
    ddaa:	b960      	cbnz	r0, ddc6 <hci_tx_thread+0x9a>
    ddac:	f640 235a 	movw	r3, #2650	; 0xa5a
    ddb0:	464a      	mov	r2, r9
    ddb2:	493b      	ldr	r1, [pc, #236]	; (dea0 <hci_tx_thread+0x174>)
    ddb4:	4838      	ldr	r0, [pc, #224]	; (de98 <hci_tx_thread+0x16c>)
    ddb6:	f00b f901 	bl	18fbc <assert_print>
    ddba:	4040      	eors	r0, r0
    ddbc:	f380 8811 	msr	BASEPRI, r0
    ddc0:	f04f 0003 	mov.w	r0, #3
    ddc4:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    ddc6:	f8df b0dc 	ldr.w	fp, [pc, #220]	; dea4 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    ddca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ddce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ddd2:	4835      	ldr	r0, [pc, #212]	; (dea8 <hci_tx_thread+0x17c>)
    ddd4:	f009 fd1a 	bl	1780c <z_impl_k_sem_take>
    ddd8:	f8db 3140 	ldr.w	r3, [fp, #320]	; 0x140
    dddc:	b18b      	cbz	r3, de02 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
    ddde:	4b33      	ldr	r3, [pc, #204]	; (deac <hci_tx_thread+0x180>)
    dde0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dde4:	617b      	str	r3, [r7, #20]
    dde6:	2302      	movs	r3, #2
    dde8:	4831      	ldr	r0, [pc, #196]	; (deb0 <hci_tx_thread+0x184>)
    ddea:	f107 0210 	add.w	r2, r7, #16
    ddee:	613b      	str	r3, [r7, #16]
    ddf0:	f00c fb95 	bl	1a51e <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    ddf4:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
    ddf8:	f006 f9dc 	bl	141b4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ddfc:	2300      	movs	r3, #0
    ddfe:	f8cb 3140 	str.w	r3, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
    de02:	4620      	mov	r0, r4
    de04:	f00e fb75 	bl	1c4f2 <net_buf_ref>
    de08:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
    de0c:	4620      	mov	r0, r4
    de0e:	f7ff fe0b 	bl	da28 <bt_send>
	if (err) {
    de12:	b300      	cbz	r0, de56 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    de14:	46eb      	mov	fp, sp
    de16:	b088      	sub	sp, #32
    de18:	466a      	mov	r2, sp
    de1a:	4b26      	ldr	r3, [pc, #152]	; (deb4 <hci_tx_thread+0x188>)
    de1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    de20:	e9c2 3005 	strd	r3, r0, [r2, #20]
    de24:	2303      	movs	r3, #3
    de26:	4822      	ldr	r0, [pc, #136]	; (deb0 <hci_tx_thread+0x184>)
    de28:	f842 3f10 	str.w	r3, [r2, #16]!
    de2c:	f00c fb77 	bl	1a51e <z_log_msg_static_create.constprop.0>
    de30:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    de32:	481d      	ldr	r0, [pc, #116]	; (dea8 <hci_tx_thread+0x17c>)
    de34:	f009 fcc4 	bl	177c0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    de38:	4620      	mov	r0, r4
    de3a:	f006 f901 	bl	14040 <net_buf_id>
    de3e:	220c      	movs	r2, #12
    de40:	4b1d      	ldr	r3, [pc, #116]	; (deb8 <hci_tx_thread+0x18c>)
    de42:	211f      	movs	r1, #31
    de44:	fb02 3000 	mla	r0, r2, r0, r3
    de48:	4622      	mov	r2, r4
    de4a:	8840      	ldrh	r0, [r0, #2]
    de4c:	f7ff f892 	bl	cf74 <hci_cmd_done>
		net_buf_unref(buf);
    de50:	4620      	mov	r0, r4
    de52:	f006 f9af 	bl	141b4 <net_buf_unref>
	for (; count; ev++, count--) {
    de56:	3614      	adds	r6, #20
    de58:	3d01      	subs	r5, #1
    de5a:	e792      	b.n	dd82 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    de5c:	2b01      	cmp	r3, #1
    de5e:	d1fa      	bne.n	de56 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    de60:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    de62:	3838      	subs	r0, #56	; 0x38
    de64:	f002 f8ec 	bl	10040 <bt_conn_process_tx>
    de68:	e7f5      	b.n	de56 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    de6a:	466c      	mov	r4, sp
    de6c:	b088      	sub	sp, #32
    de6e:	466a      	mov	r2, sp
    de70:	4912      	ldr	r1, [pc, #72]	; (debc <hci_tx_thread+0x190>)
    de72:	480f      	ldr	r0, [pc, #60]	; (deb0 <hci_tx_thread+0x184>)
		switch (ev->state) {
    de74:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    de78:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    de7c:	f842 af10 	str.w	sl, [r2, #16]!
    de80:	f00c fb4d 	bl	1a51e <z_log_msg_static_create.constprop.0>
    de84:	46a5      	mov	sp, r4
    de86:	e7e6      	b.n	de56 <hci_tx_thread+0x12a>
    de88:	20008214 	.word	0x20008214
    de8c:	0001fb49 	.word	0x0001fb49
    de90:	20008228 	.word	0x20008228
    de94:	0001fd00 	.word	0x0001fd00
    de98:	0001fb96 	.word	0x0001fb96
    de9c:	2000814c 	.word	0x2000814c
    dea0:	0002120a 	.word	0x0002120a
    dea4:	20008000 	.word	0x20008000
    dea8:	20008128 	.word	0x20008128
    deac:	0001fef2 	.word	0x0001fef2
    deb0:	0001e55c 	.word	0x0001e55c
    deb4:	0001fe41 	.word	0x0001fe41
    deb8:	20009828 	.word	0x20009828
    debc:	0001ff0d 	.word	0x0001ff0d

0000dec0 <hci_event_prio>:
{
    dec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dec4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    dec6:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    deca:	4630      	mov	r0, r6
    decc:	f00e fb7b 	bl	1c5c6 <net_buf_simple_headroom>
	state->len = buf->len;
    ded0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    ded4:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ded6:	f1b8 0f01 	cmp.w	r8, #1
    deda:	d80c      	bhi.n	def6 <hci_event_prio+0x36>
    dedc:	f640 636f 	movw	r3, #3695	; 0xe6f
    dee0:	4a1b      	ldr	r2, [pc, #108]	; (df50 <hci_event_prio+0x90>)
    dee2:	491c      	ldr	r1, [pc, #112]	; (df54 <hci_event_prio+0x94>)
    dee4:	481c      	ldr	r0, [pc, #112]	; (df58 <hci_event_prio+0x98>)
    dee6:	f00b f869 	bl	18fbc <assert_print>
    deea:	4040      	eors	r0, r0
    deec:	f380 8811 	msr	BASEPRI, r0
    def0:	f04f 0003 	mov.w	r0, #3
    def4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    def6:	4630      	mov	r0, r6
    def8:	2102      	movs	r1, #2
    defa:	f00e fb54 	bl	1c5a6 <net_buf_simple_pull_mem>
    defe:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    df00:	7800      	ldrb	r0, [r0, #0]
    df02:	f00c fad6 	bl	1a4b2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    df06:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    df08:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    df0a:	d40c      	bmi.n	df26 <hci_event_prio+0x66>
    df0c:	f640 6373 	movw	r3, #3699	; 0xe73
    df10:	4a0f      	ldr	r2, [pc, #60]	; (df50 <hci_event_prio+0x90>)
    df12:	4912      	ldr	r1, [pc, #72]	; (df5c <hci_event_prio+0x9c>)
    df14:	4810      	ldr	r0, [pc, #64]	; (df58 <hci_event_prio+0x98>)
    df16:	f00b f851 	bl	18fbc <assert_print>
    df1a:	4040      	eors	r0, r0
    df1c:	f380 8811 	msr	BASEPRI, r0
    df20:	f04f 0003 	mov.w	r0, #3
    df24:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    df26:	2305      	movs	r3, #5
    df28:	4621      	mov	r1, r4
    df2a:	4a0d      	ldr	r2, [pc, #52]	; (df60 <hci_event_prio+0xa0>)
    df2c:	7838      	ldrb	r0, [r7, #0]
    df2e:	f7fe fee9 	bl	cd04 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    df32:	07b3      	lsls	r3, r6, #30
    df34:	d507      	bpl.n	df46 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    df36:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    df38:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    df3c:	fa13 f585 	uxtah	r5, r3, r5
    df40:	60e5      	str	r5, [r4, #12]
}
    df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    df46:	4620      	mov	r0, r4
}
    df48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    df4c:	f006 b932 	b.w	141b4 <net_buf_unref>
    df50:	0001fb49 	.word	0x0001fb49
    df54:	0001fb7d 	.word	0x0001fb7d
    df58:	0001fb96 	.word	0x0001fb96
    df5c:	0001ff2e 	.word	0x0001ff2e
    df60:	0001ea24 	.word	0x0001ea24

0000df64 <bt_recv>:
{
    df64:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    df66:	7e03      	ldrb	r3, [r0, #24]
    df68:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    df6a:	2b01      	cmp	r3, #1
{
    df6c:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    df6e:	d006      	beq.n	df7e <bt_recv+0x1a>
    df70:	2b03      	cmp	r3, #3
    df72:	d112      	bne.n	df9a <bt_recv+0x36>
			rx_queue_put(buf);
    df74:	f7fe fdf2 	bl	cb5c <rx_queue_put>
		return 0;
    df78:	2000      	movs	r0, #0
}
    df7a:	46bd      	mov	sp, r7
    df7c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    df7e:	68c3      	ldr	r3, [r0, #12]
    df80:	7818      	ldrb	r0, [r3, #0]
    df82:	f00c fa96 	bl	1a4b2 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    df86:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    df88:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    df8a:	d502      	bpl.n	df92 <bt_recv+0x2e>
			hci_event_prio(buf);
    df8c:	4620      	mov	r0, r4
    df8e:	f7ff ff97 	bl	dec0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    df92:	07ab      	lsls	r3, r5, #30
    df94:	d5f0      	bpl.n	df78 <bt_recv+0x14>
			rx_queue_put(buf);
    df96:	4620      	mov	r0, r4
    df98:	e7ec      	b.n	df74 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    df9a:	466d      	mov	r5, sp
    df9c:	b088      	sub	sp, #32
    df9e:	466a      	mov	r2, sp
    dfa0:	4908      	ldr	r1, [pc, #32]	; (dfc4 <bt_recv+0x60>)
    dfa2:	4809      	ldr	r0, [pc, #36]	; (dfc8 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    dfa4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    dfa8:	2303      	movs	r3, #3
    dfaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dfae:	f842 3f10 	str.w	r3, [r2, #16]!
    dfb2:	f00c fab4 	bl	1a51e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    dfb6:	4620      	mov	r0, r4
    dfb8:	46ad      	mov	sp, r5
    dfba:	f006 f8fb 	bl	141b4 <net_buf_unref>
		return -EINVAL;
    dfbe:	f06f 0015 	mvn.w	r0, #21
    dfc2:	e7da      	b.n	df7a <bt_recv+0x16>
    dfc4:	0001ff47 	.word	0x0001ff47
    dfc8:	0001e55c 	.word	0x0001e55c

0000dfcc <bt_hci_driver_register>:
	if (bt_dev.drv) {
    dfcc:	4a08      	ldr	r2, [pc, #32]	; (dff0 <bt_hci_driver_register+0x24>)
{
    dfce:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    dfd0:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
    dfd4:	b930      	cbnz	r0, dfe4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    dfd6:	68d9      	ldr	r1, [r3, #12]
    dfd8:	b139      	cbz	r1, dfea <bt_hci_driver_register+0x1e>
    dfda:	6959      	ldr	r1, [r3, #20]
    dfdc:	b129      	cbz	r1, dfea <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    dfde:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
    dfe2:	4770      	bx	lr
		return -EALREADY;
    dfe4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    dfe8:	4770      	bx	lr
		return -EINVAL;
    dfea:	f06f 0015 	mvn.w	r0, #21
}
    dfee:	4770      	bx	lr
    dff0:	20008000 	.word	0x20008000

0000dff4 <bt_finalize_init>:
{
    dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    dff8:	4c45      	ldr	r4, [pc, #276]	; (e110 <bt_finalize_init+0x11c>)
{
    dffa:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    dffc:	2104      	movs	r1, #4
    dffe:	af00      	add	r7, sp, #0
    e000:	4844      	ldr	r0, [pc, #272]	; (e114 <bt_finalize_init+0x120>)
    e002:	f00c fa81 	bl	1a508 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    e006:	4d44      	ldr	r5, [pc, #272]	; (e118 <bt_finalize_init+0x124>)
    e008:	79e2      	ldrb	r2, [r4, #7]
    e00a:	4b44      	ldr	r3, [pc, #272]	; (e11c <bt_finalize_init+0x128>)
    e00c:	4620      	mov	r0, r4
    e00e:	2a01      	cmp	r2, #1
    e010:	bf88      	it	hi
    e012:	461d      	movhi	r5, r3
    e014:	466e      	mov	r6, sp
    e016:	f7fe fc31 	bl	c87c <bt_addr_le_str>
    e01a:	b08a      	sub	sp, #40	; 0x28
    e01c:	466b      	mov	r3, sp
    e01e:	4940      	ldr	r1, [pc, #256]	; (e120 <bt_finalize_init+0x12c>)
    e020:	61d8      	str	r0, [r3, #28]
    e022:	e9c3 1505 	strd	r1, r5, [r3, #20]
    e026:	493f      	ldr	r1, [pc, #252]	; (e124 <bt_finalize_init+0x130>)
    e028:	f103 0210 	add.w	r2, r3, #16
    e02c:	6079      	str	r1, [r7, #4]
    e02e:	1d38      	adds	r0, r7, #4
    e030:	f103 011f 	add.w	r1, r3, #31
    e034:	f103 0523 	add.w	r5, r3, #35	; 0x23
    e038:	f810 cb01 	ldrb.w	ip, [r0], #1
    e03c:	f801 cf01 	strb.w	ip, [r1, #1]!
    e040:	42a9      	cmp	r1, r5
    e042:	d1f9      	bne.n	e038 <bt_finalize_init+0x44>
	for (i = 1; i < bt_dev.id_count; i++) {
    e044:	2501      	movs	r5, #1
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    e046:	4938      	ldr	r1, [pc, #224]	; (e128 <bt_finalize_init+0x134>)
    e048:	4838      	ldr	r0, [pc, #224]	; (e12c <bt_finalize_init+0x138>)
    e04a:	6119      	str	r1, [r3, #16]
    e04c:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    e050:	f00c fa65 	bl	1a51e <z_log_msg_static_create.constprop.0>
    e054:	f8df b0b8 	ldr.w	fp, [pc, #184]	; e110 <bt_finalize_init+0x11c>
    e058:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    e05a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; e130 <bt_finalize_init+0x13c>
    e05e:	4e35      	ldr	r6, [pc, #212]	; (e134 <bt_finalize_init+0x140>)
    e060:	f8df 90c8 	ldr.w	r9, [pc, #200]	; e12c <bt_finalize_init+0x138>
	for (i = 1; i < bt_dev.id_count; i++) {
    e064:	79e3      	ldrb	r3, [r4, #7]
    e066:	f10b 0b07 	add.w	fp, fp, #7
    e06a:	429d      	cmp	r5, r3
    e06c:	db39      	blt.n	e0e2 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    e06e:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
    e072:	466e      	mov	r6, sp
    e074:	4628      	mov	r0, r5
    e076:	f7fe fcf5 	bl	ca64 <ver_str>
    e07a:	b08c      	sub	sp, #48	; 0x30
    e07c:	466a      	mov	r2, sp
    e07e:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    e082:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    e086:	e9c2 5107 	strd	r5, r1, [r2, #28]
    e08a:	f44f 7500 	mov.w	r5, #512	; 0x200
    e08e:	6253      	str	r3, [r2, #36]	; 0x24
    e090:	f8df c0a4 	ldr.w	ip, [pc, #164]	; e138 <bt_finalize_init+0x144>
    e094:	4b29      	ldr	r3, [pc, #164]	; (e13c <bt_finalize_init+0x148>)
    e096:	e9c2 c005 	strd	ip, r0, [r2, #20]
    e09a:	8515      	strh	r5, [r2, #40]	; 0x28
    e09c:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    e0a0:	f842 3f10 	str.w	r3, [r2, #16]!
    e0a4:	4821      	ldr	r0, [pc, #132]	; (e12c <bt_finalize_init+0x138>)
    e0a6:	f00c fa3a 	bl	1a51e <z_log_msg_static_create.constprop.0>
    e0aa:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    e0ac:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
    e0b0:	4630      	mov	r0, r6
    e0b2:	f7fe fcd7 	bl	ca64 <ver_str>
    e0b6:	b08a      	sub	sp, #40	; 0x28
    e0b8:	466a      	mov	r2, sp
    e0ba:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    e0be:	4920      	ldr	r1, [pc, #128]	; (e140 <bt_finalize_init+0x14c>)
    e0c0:	e9c2 6307 	strd	r6, r3, [r2, #28]
    e0c4:	4b1f      	ldr	r3, [pc, #124]	; (e144 <bt_finalize_init+0x150>)
    e0c6:	e9c2 1005 	strd	r1, r0, [r2, #20]
    e0ca:	8495      	strh	r5, [r2, #36]	; 0x24
    e0cc:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    e0d0:	4816      	ldr	r0, [pc, #88]	; (e12c <bt_finalize_init+0x138>)
    e0d2:	f842 3f10 	str.w	r3, [r2, #16]!
    e0d6:	f00c fa22 	bl	1a51e <z_log_msg_static_create.constprop.0>
}
    e0da:	370c      	adds	r7, #12
    e0dc:	46bd      	mov	sp, r7
    e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    e0e2:	4658      	mov	r0, fp
    e0e4:	f7fe fbca 	bl	c87c <bt_addr_le_str>
    e0e8:	46ea      	mov	sl, sp
    e0ea:	b08a      	sub	sp, #40	; 0x28
    e0ec:	466a      	mov	r2, sp
    e0ee:	f240 3301 	movw	r3, #769	; 0x301
    e0f2:	e9c2 6505 	strd	r6, r5, [r2, #20]
    e0f6:	61d0      	str	r0, [r2, #28]
    e0f8:	8413      	strh	r3, [r2, #32]
    e0fa:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    e0fe:	4648      	mov	r0, r9
    e100:	f842 8f10 	str.w	r8, [r2, #16]!
    e104:	f00c fa0b 	bl	1a51e <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    e108:	3501      	adds	r5, #1
    e10a:	46d5      	mov	sp, sl
    e10c:	e7aa      	b.n	e064 <bt_finalize_init+0x70>
    e10e:	bf00      	nop
    e110:	20008000 	.word	0x20008000
    e114:	200080d4 	.word	0x200080d4
    e118:	00021839 	.word	0x00021839
    e11c:	0001ff5b 	.word	0x0001ff5b
    e120:	0001ff5f 	.word	0x0001ff5f
    e124:	03010200 	.word	0x03010200
    e128:	02000004 	.word	0x02000004
    e12c:	0001e55c 	.word	0x0001e55c
    e130:	01000004 	.word	0x01000004
    e134:	0001ff6e 	.word	0x0001ff6e
    e138:	0001ff7f 	.word	0x0001ff7f
    e13c:	01000006 	.word	0x01000006
    e140:	0001ffbd 	.word	0x0001ffbd
    e144:	01000005 	.word	0x01000005

0000e148 <init_work>:
{
    e148:	b510      	push	{r4, lr}
	err = bt_init();
    e14a:	f7fa f96d 	bl	8428 <bt_init>
	if (ready_cb) {
    e14e:	4b03      	ldr	r3, [pc, #12]	; (e15c <init_work+0x14>)
    e150:	681b      	ldr	r3, [r3, #0]
    e152:	b113      	cbz	r3, e15a <init_work+0x12>
}
    e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    e158:	4718      	bx	r3
}
    e15a:	bd10      	pop	{r4, pc}
    e15c:	200098a0 	.word	0x200098a0

0000e160 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    e160:	b5f0      	push	{r4, r5, r6, r7, lr}
    e162:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    e164:	4d3b      	ldr	r5, [pc, #236]	; (e254 <bt_enable+0xf4>)
{
    e166:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    e168:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
    e16c:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    e16e:	b983      	cbnz	r3, e192 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
    e170:	4b39      	ldr	r3, [pc, #228]	; (e258 <bt_enable+0xf8>)
		return -ENODEV;
    e172:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
    e176:	617b      	str	r3, [r7, #20]
    e178:	2302      	movs	r3, #2
    e17a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e17e:	4837      	ldr	r0, [pc, #220]	; (e25c <bt_enable+0xfc>)
    e180:	f107 0210 	add.w	r2, r7, #16
    e184:	613b      	str	r3, [r7, #16]
    e186:	f00c f9ca 	bl	1a51e <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    e18a:	4620      	mov	r0, r4
    e18c:	371c      	adds	r7, #28
    e18e:	46bd      	mov	sp, r7
    e190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e192:	f06f 0102 	mvn.w	r1, #2
    e196:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    e19a:	f00c f9c3 	bl	1a524 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e19e:	2101      	movs	r1, #1
    e1a0:	f00c f9b2 	bl	1a508 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e1a4:	ea10 0401 	ands.w	r4, r0, r1
    e1a8:	d150      	bne.n	e24c <bt_enable+0xec>
	ready_cb = cb;
    e1aa:	4b2d      	ldr	r3, [pc, #180]	; (e260 <bt_enable+0x100>)
    e1ac:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e1ae:	460a      	mov	r2, r1
    e1b0:	f505 7094 	add.w	r0, r5, #296	; 0x128
    e1b4:	f00f fb77 	bl	1d8a6 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    e1b8:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
    e1bc:	f00f fb4e 	bl	1d85c <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e1c0:	2200      	movs	r2, #0
    e1c2:	2300      	movs	r3, #0
    e1c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e1c8:	f06f 0308 	mvn.w	r3, #8
    e1cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e1d0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e1d4:	e9cd 4400 	strd	r4, r4, [sp]
    e1d8:	4b22      	ldr	r3, [pc, #136]	; (e264 <bt_enable+0x104>)
    e1da:	4923      	ldr	r1, [pc, #140]	; (e268 <bt_enable+0x108>)
    e1dc:	9404      	str	r4, [sp, #16]
    e1de:	4823      	ldr	r0, [pc, #140]	; (e26c <bt_enable+0x10c>)
    e1e0:	f009 f960 	bl	174a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e1e4:	4922      	ldr	r1, [pc, #136]	; (e270 <bt_enable+0x110>)
    e1e6:	4821      	ldr	r0, [pc, #132]	; (e26c <bt_enable+0x10c>)
    e1e8:	f00f faa9 	bl	1d73e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    e1ec:	4821      	ldr	r0, [pc, #132]	; (e274 <bt_enable+0x114>)
    e1ee:	f00f fc1b 	bl	1da28 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    e1f2:	f06f 0307 	mvn.w	r3, #7
    e1f6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    e1fa:	491f      	ldr	r1, [pc, #124]	; (e278 <bt_enable+0x118>)
    e1fc:	481d      	ldr	r0, [pc, #116]	; (e274 <bt_enable+0x114>)
    e1fe:	9400      	str	r4, [sp, #0]
    e200:	f009 fc60 	bl	17ac4 <k_work_queue_start>
    e204:	491d      	ldr	r1, [pc, #116]	; (e27c <bt_enable+0x11c>)
    e206:	481b      	ldr	r0, [pc, #108]	; (e274 <bt_enable+0x114>)
    e208:	f00f fa99 	bl	1d73e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    e20c:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
    e210:	68db      	ldr	r3, [r3, #12]
    e212:	4798      	blx	r3
	if (err) {
    e214:	4604      	mov	r4, r0
    e216:	b178      	cbz	r0, e238 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
    e218:	466d      	mov	r5, sp
    e21a:	b088      	sub	sp, #32
    e21c:	462a      	mov	r2, r5
    e21e:	4b18      	ldr	r3, [pc, #96]	; (e280 <bt_enable+0x120>)
    e220:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e224:	e9c5 3005 	strd	r3, r0, [r5, #20]
    e228:	2303      	movs	r3, #3
    e22a:	480c      	ldr	r0, [pc, #48]	; (e25c <bt_enable+0xfc>)
    e22c:	f842 3f10 	str.w	r3, [r2, #16]!
    e230:	f00c f975 	bl	1a51e <z_log_msg_static_create.constprop.0>
    e234:	46ad      	mov	sp, r5
		return err;
    e236:	e7a8      	b.n	e18a <bt_enable+0x2a>
	if (!cb) {
    e238:	b91e      	cbnz	r6, e242 <bt_enable+0xe2>
		return bt_init();
    e23a:	f7fa f8f5 	bl	8428 <bt_init>
    e23e:	4604      	mov	r4, r0
    e240:	e7a3      	b.n	e18a <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    e242:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    e246:	f009 fc37 	bl	17ab8 <k_work_submit>
	return 0;
    e24a:	e79e      	b.n	e18a <bt_enable+0x2a>
		return -EALREADY;
    e24c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e250:	e79b      	b.n	e18a <bt_enable+0x2a>
    e252:	bf00      	nop
    e254:	20008000 	.word	0x20008000
    e258:	0002012d 	.word	0x0002012d
    e25c:	0001e55c 	.word	0x0001e55c
    e260:	200098a0 	.word	0x200098a0
    e264:	0000dd2d 	.word	0x0000dd2d
    e268:	2000a960 	.word	0x2000a960
    e26c:	20009028 	.word	0x20009028
    e270:	00020146 	.word	0x00020146
    e274:	200090b0 	.word	0x200090b0
    e278:	2000ad60 	.word	0x2000ad60
    e27c:	0002014c 	.word	0x0002014c
    e280:	00020152 	.word	0x00020152

0000e284 <bt_is_ready>:
    e284:	4b02      	ldr	r3, [pc, #8]	; (e290 <bt_is_ready+0xc>)
    e286:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    e28a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e28e:	4770      	bx	lr
    e290:	200080d4 	.word	0x200080d4

0000e294 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    e294:	4800      	ldr	r0, [pc, #0]	; (e298 <bt_get_name+0x4>)
    e296:	4770      	bx	lr
    e298:	0001f18f 	.word	0x0001f18f

0000e29c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e29e:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e2a0:	2500      	movs	r5, #0
    e2a2:	4f09      	ldr	r7, [pc, #36]	; (e2c8 <id_find+0x2c>)
    e2a4:	79fb      	ldrb	r3, [r7, #7]
    e2a6:	b2ec      	uxtb	r4, r5
    e2a8:	42a3      	cmp	r3, r4
    e2aa:	d802      	bhi.n	e2b2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e2ac:	f06f 0001 	mvn.w	r0, #1
    e2b0:	e009      	b.n	e2c6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    e2b2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e2b6:	4630      	mov	r0, r6
    e2b8:	4439      	add	r1, r7
    e2ba:	f00c f9f6 	bl	1a6aa <bt_addr_le_eq>
    e2be:	3501      	adds	r5, #1
    e2c0:	2800      	cmp	r0, #0
    e2c2:	d0ef      	beq.n	e2a4 <id_find+0x8>
    e2c4:	4620      	mov	r0, r4
}
    e2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2c8:	20008000 	.word	0x20008000

0000e2cc <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e2ce:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e2d0:	460d      	mov	r5, r1
    e2d2:	b171      	cbz	r1, e2f2 <id_create.constprop.0+0x26>
    e2d4:	4628      	mov	r0, r5
    e2d6:	4912      	ldr	r1, [pc, #72]	; (e320 <id_create.constprop.0+0x54>)
    e2d8:	f00c f9e7 	bl	1a6aa <bt_addr_le_eq>
    e2dc:	b948      	cbnz	r0, e2f2 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e2de:	4629      	mov	r1, r5
    e2e0:	4810      	ldr	r0, [pc, #64]	; (e324 <id_create.constprop.0+0x58>)
    e2e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e2e6:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e2e8:	f00c f9e7 	bl	1a6ba <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    e2ec:	2000      	movs	r0, #0
}
    e2ee:	b003      	add	sp, #12
    e2f0:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    e2f2:	4668      	mov	r0, sp
    e2f4:	f00c f8c1 	bl	1a47a <bt_addr_le_create_static>
			if (err) {
    e2f8:	2800      	cmp	r0, #0
    e2fa:	d1f8      	bne.n	e2ee <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
    e2fc:	4668      	mov	r0, sp
    e2fe:	f7ff ffcd 	bl	e29c <id_find>
    e302:	2800      	cmp	r0, #0
    e304:	daf5      	bge.n	e2f2 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e306:	4b07      	ldr	r3, [pc, #28]	; (e324 <id_create.constprop.0+0x58>)
    e308:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e30c:	441c      	add	r4, r3
    e30e:	4669      	mov	r1, sp
    e310:	4620      	mov	r0, r4
    e312:	f00c f9d2 	bl	1a6ba <bt_addr_le_copy>
		if (addr) {
    e316:	2d00      	cmp	r5, #0
    e318:	d0e8      	beq.n	e2ec <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e31a:	4621      	mov	r1, r4
    e31c:	4628      	mov	r0, r5
    e31e:	e7e3      	b.n	e2e8 <id_create.constprop.0+0x1c>
    e320:	0001f9e5 	.word	0x0001f9e5
    e324:	20008000 	.word	0x20008000

0000e328 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e328:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
    e32a:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e32c:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
    e32e:	4604      	mov	r4, r0
    e330:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e332:	4608      	mov	r0, r1
    e334:	f001 fda2 	bl	fe7c <bt_conn_lookup_state_le>
	if (conn) {
    e338:	4606      	mov	r6, r0
    e33a:	b188      	cbz	r0, e360 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e33c:	4b49      	ldr	r3, [pc, #292]	; (e464 <bt_id_add.part.0+0x13c>)
    e33e:	e8d3 1fef 	ldaex	r1, [r3]
    e342:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    e346:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e34a:	2a00      	cmp	r2, #0
    e34c:	d1f7      	bne.n	e33e <bt_id_add.part.0+0x16>
	keys->state |= flag;
    e34e:	7a23      	ldrb	r3, [r4, #8]
    e350:	f043 0301 	orr.w	r3, r3, #1
    e354:	7223      	strb	r3, [r4, #8]
}
    e356:	b007      	add	sp, #28
    e358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    e35c:	f00c bc15 	b.w	1ab8a <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
    e360:	4d41      	ldr	r5, [pc, #260]	; (e468 <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    e362:	4601      	mov	r1, r0
    e364:	4841      	ldr	r0, [pc, #260]	; (e46c <bt_id_add.part.0+0x144>)
    e366:	f000 fc51 	bl	ec0c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    e36a:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e36e:	b173      	cbz	r3, e38e <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    e370:	4630      	mov	r0, r6
    e372:	f00c f9e2 	bl	1a73a <addr_res_enable>
		if (err) {
    e376:	b150      	cbz	r0, e38e <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
    e378:	4b3d      	ldr	r3, [pc, #244]	; (e470 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
    e37a:	9305      	str	r3, [sp, #20]
    e37c:	2302      	movs	r3, #2
    e37e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e382:	9304      	str	r3, [sp, #16]
    e384:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
    e386:	483b      	ldr	r0, [pc, #236]	; (e474 <bt_id_add.part.0+0x14c>)
    e388:	f00c f9d4 	bl	1a734 <z_log_msg_static_create.constprop.0>
		goto done;
    e38c:	e026      	b.n	e3dc <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    e38e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
    e392:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    e396:	429a      	cmp	r2, r3
    e398:	d12a      	bne.n	e3f0 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
    e39a:	2602      	movs	r6, #2
    e39c:	4b36      	ldr	r3, [pc, #216]	; (e478 <bt_id_add.part.0+0x150>)
    e39e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e3a2:	4834      	ldr	r0, [pc, #208]	; (e474 <bt_id_add.part.0+0x14c>)
    e3a4:	aa04      	add	r2, sp, #16
    e3a6:	9305      	str	r3, [sp, #20]
    e3a8:	9604      	str	r6, [sp, #16]
    e3aa:	f00c f9c3 	bl	1a734 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    e3ae:	2200      	movs	r2, #0
    e3b0:	f242 0029 	movw	r0, #8233	; 0x2029
    e3b4:	4611      	mov	r1, r2
    e3b6:	f7ff f801 	bl	d3bc <bt_hci_cmd_send_sync>
		if (err) {
    e3ba:	b130      	cbz	r0, e3ca <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
    e3bc:	4b2f      	ldr	r3, [pc, #188]	; (e47c <bt_id_add.part.0+0x154>)
    e3be:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
    e3c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e3c6:	aa04      	add	r2, sp, #16
    e3c8:	e7dd      	b.n	e386 <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
    e3ca:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e3ce:	3301      	adds	r3, #1
    e3d0:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
    e3d4:	7a23      	ldrb	r3, [r4, #8]
    e3d6:	f043 0304 	orr.w	r3, r3, #4
    e3da:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    e3dc:	2001      	movs	r0, #1
    e3de:	f00c f9ac 	bl	1a73a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    e3e2:	2100      	movs	r1, #0
    e3e4:	4826      	ldr	r0, [pc, #152]	; (e480 <bt_id_add.part.0+0x158>)
}
    e3e6:	b007      	add	sp, #28
    e3e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    e3ec:	f000 bc0e 	b.w	ec0c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    e3f0:	4622      	mov	r2, r4
    e3f2:	1c67      	adds	r7, r4, #1
    e3f4:	4639      	mov	r1, r7
    e3f6:	f812 0b2a 	ldrb.w	r0, [r2], #42
    e3fa:	f00c f961 	bl	1a6c0 <hci_id_add>
	if (err) {
    e3fe:	4606      	mov	r6, r0
    e400:	b120      	cbz	r0, e40c <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
    e402:	4b20      	ldr	r3, [pc, #128]	; (e484 <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
    e404:	9305      	str	r3, [sp, #20]
    e406:	2302      	movs	r3, #2
    e408:	9304      	str	r3, [sp, #16]
    e40a:	e7da      	b.n	e3c2 <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
    e40c:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e410:	3301      	adds	r3, #1
    e412:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
    e416:	7a23      	ldrb	r3, [r4, #8]
    e418:	f043 0304 	orr.w	r3, r3, #4
    e41c:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    e41e:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
    e422:	075b      	lsls	r3, r3, #29
    e424:	d401      	bmi.n	e42a <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
    e426:	4b18      	ldr	r3, [pc, #96]	; (e488 <bt_id_add.part.0+0x160>)
    e428:	e7a7      	b.n	e37a <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
    e42a:	4639      	mov	r1, r7
    e42c:	4668      	mov	r0, sp
    e42e:	f00c f944 	bl	1a6ba <bt_addr_le_copy>
	cp.mode = mode;
    e432:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    e434:	2108      	movs	r1, #8
    e436:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    e43a:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    e43e:	f7fe ff83 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    e442:	4604      	mov	r4, r0
    e444:	b160      	cbz	r0, e460 <bt_id_add.part.0+0x138>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e446:	2208      	movs	r2, #8
    e448:	4669      	mov	r1, sp
    e44a:	300c      	adds	r0, #12
    e44c:	f00e f881 	bl	1c552 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    e450:	4632      	mov	r2, r6
    e452:	4621      	mov	r1, r4
    e454:	f242 004e 	movw	r0, #8270	; 0x204e
    e458:	f7fe ffb0 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    e45c:	2800      	cmp	r0, #0
    e45e:	d0bd      	beq.n	e3dc <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
    e460:	4b0a      	ldr	r3, [pc, #40]	; (e48c <bt_id_add.part.0+0x164>)
    e462:	e7cf      	b.n	e404 <bt_id_add.part.0+0xdc>
    e464:	200080d4 	.word	0x200080d4
    e468:	20008000 	.word	0x20008000
    e46c:	0001a7eb 	.word	0x0001a7eb
    e470:	0002028b 	.word	0x0002028b
    e474:	0001e574 	.word	0x0001e574
    e478:	000202b0 	.word	0x000202b0
    e47c:	000202e1 	.word	0x000202e1
    e480:	0001a76b 	.word	0x0001a76b
    e484:	00020301 	.word	0x00020301
    e488:	00020321 	.word	0x00020321
    e48c:	0002034b 	.word	0x0002034b

0000e490 <set_random_address>:
{
    e490:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    e492:	2206      	movs	r2, #6
    e494:	4912      	ldr	r1, [pc, #72]	; (e4e0 <set_random_address+0x50>)
    e496:	4605      	mov	r5, r0
    e498:	f00b ff59 	bl	1a34e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e49c:	b1d8      	cbz	r0, e4d6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e49e:	2106      	movs	r1, #6
    e4a0:	f242 0005 	movw	r0, #8197	; 0x2005
    e4a4:	f7fe ff50 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    e4a8:	4604      	mov	r4, r0
    e4aa:	b1b0      	cbz	r0, e4da <set_random_address+0x4a>
    e4ac:	2206      	movs	r2, #6
    e4ae:	4629      	mov	r1, r5
    e4b0:	300c      	adds	r0, #12
    e4b2:	f00e f84e 	bl	1c552 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e4b6:	2200      	movs	r2, #0
    e4b8:	4621      	mov	r1, r4
    e4ba:	f242 0005 	movw	r0, #8197	; 0x2005
    e4be:	f7fe ff7d 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    e4c2:	b948      	cbnz	r0, e4d8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    e4c4:	2206      	movs	r2, #6
    e4c6:	4629      	mov	r1, r5
    e4c8:	4805      	ldr	r0, [pc, #20]	; (e4e0 <set_random_address+0x50>)
    e4ca:	f00b ff50 	bl	1a36e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e4ce:	2201      	movs	r2, #1
    e4d0:	4b04      	ldr	r3, [pc, #16]	; (e4e4 <set_random_address+0x54>)
    e4d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    e4d6:	2000      	movs	r0, #0
}
    e4d8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    e4da:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e4de:	e7fb      	b.n	e4d8 <set_random_address+0x48>
    e4e0:	20008069 	.word	0x20008069
    e4e4:	20008000 	.word	0x20008000

0000e4e8 <bt_id_del.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e4e8:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
    e4ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e4ee:	b087      	sub	sp, #28
    e4f0:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e4f2:	2206      	movs	r2, #6
    e4f4:	4608      	mov	r0, r1
void bt_id_del(struct bt_keys *keys)
    e4f6:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    e4f8:	f001 fcc0 	bl	fe7c <bt_conn_lookup_state_le>
	if (conn) {
    e4fc:	4605      	mov	r5, r0
    e4fe:	b190      	cbz	r0, e526 <bt_id_del.part.0+0x3e>
    e500:	4b3c      	ldr	r3, [pc, #240]	; (e5f4 <bt_id_del.part.0+0x10c>)
    e502:	e8d3 1fef 	ldaex	r1, [r3]
    e506:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    e50a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e50e:	2a00      	cmp	r2, #0
    e510:	d1f7      	bne.n	e502 <bt_id_del.part.0+0x1a>
	keys->state |= flag;
    e512:	7a23      	ldrb	r3, [r4, #8]
    e514:	f043 0302 	orr.w	r3, r3, #2
    e518:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    e51a:	f00c fb36 	bl	1ab8a <bt_conn_unref>
}
    e51e:	371c      	adds	r7, #28
    e520:	46bd      	mov	sp, r7
    e522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    e526:	4601      	mov	r1, r0
    e528:	4833      	ldr	r0, [pc, #204]	; (e5f8 <bt_id_del.part.0+0x110>)
    e52a:	f000 fb6f 	bl	ec0c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    e52e:	4628      	mov	r0, r5
    e530:	f00c f903 	bl	1a73a <addr_res_enable>
	if (err) {
    e534:	4d31      	ldr	r5, [pc, #196]	; (e5fc <bt_id_del.part.0+0x114>)
    e536:	4606      	mov	r6, r0
    e538:	b1d0      	cbz	r0, e570 <bt_id_del.part.0+0x88>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
    e53a:	466c      	mov	r4, sp
    e53c:	b088      	sub	sp, #32
    e53e:	466b      	mov	r3, sp
    e540:	4a2f      	ldr	r2, [pc, #188]	; (e600 <bt_id_del.part.0+0x118>)
    e542:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e546:	e9c3 2005 	strd	r2, r0, [r3, #20]
    e54a:	461a      	mov	r2, r3
    e54c:	2303      	movs	r3, #3
    e54e:	482d      	ldr	r0, [pc, #180]	; (e604 <bt_id_del.part.0+0x11c>)
    e550:	f842 3f10 	str.w	r3, [r2, #16]!
    e554:	f00c f8ee 	bl	1a734 <z_log_msg_static_create.constprop.0>
    e558:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
    e55a:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e55e:	b113      	cbz	r3, e566 <bt_id_del.part.0+0x7e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    e560:	2001      	movs	r0, #1
    e562:	f00c f8ea 	bl	1a73a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    e566:	2100      	movs	r1, #0
    e568:	4827      	ldr	r0, [pc, #156]	; (e608 <bt_id_del.part.0+0x120>)
    e56a:	f000 fb4f 	bl	ec0c <bt_le_ext_adv_foreach>
    e56e:	e7d6      	b.n	e51e <bt_id_del.part.0+0x36>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    e570:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e574:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
    e578:	429a      	cmp	r2, r3
    e57a:	d20c      	bcs.n	e596 <bt_id_del.part.0+0xae>
		bt_dev.le.rl_entries--;
    e57c:	3b01      	subs	r3, #1
    e57e:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
    e582:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    e584:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    e586:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    e58a:	2002      	movs	r0, #2
    e58c:	491f      	ldr	r1, [pc, #124]	; (e60c <bt_id_del.part.0+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    e58e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
    e590:	f005 fc2c 	bl	13dec <bt_keys_foreach_type>
		goto done;
    e594:	e7e1      	b.n	e55a <bt_id_del.part.0+0x72>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    e596:	2107      	movs	r1, #7
    e598:	f242 0028 	movw	r0, #8232	; 0x2028
    e59c:	f7fe fed4 	bl	d348 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    e5a0:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    e5a4:	4680      	mov	r8, r0
    e5a6:	b958      	cbnz	r0, e5c0 <bt_id_del.part.0+0xd8>
		LOG_ERR("Failed to remove IRK from controller");
    e5a8:	4b19      	ldr	r3, [pc, #100]	; (e610 <bt_id_del.part.0+0x128>)
    e5aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e5ae:	617b      	str	r3, [r7, #20]
    e5b0:	2302      	movs	r3, #2
    e5b2:	4814      	ldr	r0, [pc, #80]	; (e604 <bt_id_del.part.0+0x11c>)
    e5b4:	f107 0210 	add.w	r2, r7, #16
    e5b8:	613b      	str	r3, [r7, #16]
    e5ba:	f00c f8bb 	bl	1a734 <z_log_msg_static_create.constprop.0>
		goto done;
    e5be:	e7cc      	b.n	e55a <bt_id_del.part.0+0x72>
	return net_buf_simple_add(&buf->b, len);
    e5c0:	2107      	movs	r1, #7
    e5c2:	300c      	adds	r0, #12
    e5c4:	f00d ffbf 	bl	1c546 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    e5c8:	4649      	mov	r1, r9
    e5ca:	f00c f876 	bl	1a6ba <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    e5ce:	4632      	mov	r2, r6
    e5d0:	4641      	mov	r1, r8
    e5d2:	f242 0028 	movw	r0, #8232	; 0x2028
    e5d6:	f7fe fef1 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    e5da:	2800      	cmp	r0, #0
    e5dc:	d1e4      	bne.n	e5a8 <bt_id_del.part.0+0xc0>
	bt_dev.le.rl_entries--;
    e5de:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
    e5e2:	3b01      	subs	r3, #1
    e5e4:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
    e5e8:	7a23      	ldrb	r3, [r4, #8]
    e5ea:	f023 0304 	bic.w	r3, r3, #4
    e5ee:	7223      	strb	r3, [r4, #8]
    e5f0:	e7b3      	b.n	e55a <bt_id_del.part.0+0x72>
    e5f2:	bf00      	nop
    e5f4:	200080d4 	.word	0x200080d4
    e5f8:	0001a7eb 	.word	0x0001a7eb
    e5fc:	20008000 	.word	0x20008000
    e600:	00020366 	.word	0x00020366
    e604:	0001e574 	.word	0x0001e574
    e608:	0001a76b 	.word	0x0001a76b
    e60c:	0001a71f 	.word	0x0001a71f
    e610:	00020393 	.word	0x00020393

0000e614 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e614:	4b08      	ldr	r3, [pc, #32]	; (e638 <bt_id_pending_keys_update+0x24>)
    e616:	e8d3 2fef 	ldaex	r2, [r3]
    e61a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    e61e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e622:	2800      	cmp	r0, #0
    e624:	d1f7      	bne.n	e616 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    e626:	0413      	lsls	r3, r2, #16
    e628:	d504      	bpl.n	e634 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
    e62a:	2200      	movs	r2, #0
    e62c:	2002      	movs	r0, #2
    e62e:	4903      	ldr	r1, [pc, #12]	; (e63c <bt_id_pending_keys_update+0x28>)
    e630:	f005 bbdc 	b.w	13dec <bt_keys_foreach_type>
}
    e634:	4770      	bx	lr
    e636:	bf00      	nop
    e638:	200080d4 	.word	0x200080d4
    e63c:	0001a86d 	.word	0x0001a86d

0000e640 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
    e640:	2300      	movs	r3, #0
{
    e642:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
    e644:	4905      	ldr	r1, [pc, #20]	; (e65c <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
    e646:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
    e64a:	466a      	mov	r2, sp
    e64c:	2002      	movs	r0, #2
    e64e:	f005 fbcd 	bl	13dec <bt_keys_foreach_type>
}
    e652:	9801      	ldr	r0, [sp, #4]
    e654:	b003      	add	sp, #12
    e656:	f85d fb04 	ldr.w	pc, [sp], #4
    e65a:	bf00      	nop
    e65c:	0001a791 	.word	0x0001a791

0000e660 <bt_id_add>:
	CHECKIF(keys == NULL) {
    e660:	4603      	mov	r3, r0
{
    e662:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
    e664:	b170      	cbz	r0, e684 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    e666:	490a      	ldr	r1, [pc, #40]	; (e690 <bt_id_add+0x30>)
    e668:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
    e66c:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
    e670:	b10c      	cbz	r4, e676 <bt_id_add+0x16>
    e672:	4294      	cmp	r4, r2
    e674:	d208      	bcs.n	e688 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    e676:	3201      	adds	r2, #1
    e678:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
    e67c:	7a1a      	ldrb	r2, [r3, #8]
    e67e:	f042 0204 	orr.w	r2, r2, #4
    e682:	721a      	strb	r2, [r3, #8]
}
    e684:	bc10      	pop	{r4}
    e686:	4770      	bx	lr
    e688:	bc10      	pop	{r4}
    e68a:	f7ff be4d 	b.w	e328 <bt_id_add.part.0>
    e68e:	bf00      	nop
    e690:	20008000 	.word	0x20008000

0000e694 <bt_id_del>:
	CHECKIF(keys == NULL) {
    e694:	4603      	mov	r3, r0
{
    e696:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
    e698:	b198      	cbz	r0, e6c2 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
    e69a:	4c0b      	ldr	r4, [pc, #44]	; (e6c8 <bt_id_del+0x34>)
    e69c:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    e6a0:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
    e6a4:	b129      	cbz	r1, e6b2 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    e6a6:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
    e6a8:	428a      	cmp	r2, r1
    e6aa:	dc03      	bgt.n	e6b4 <bt_id_del+0x20>
}
    e6ac:	bc10      	pop	{r4}
    e6ae:	f7ff bf1b 	b.w	e4e8 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
    e6b2:	b112      	cbz	r2, e6ba <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
    e6b4:	3a01      	subs	r2, #1
    e6b6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
    e6ba:	7a1a      	ldrb	r2, [r3, #8]
    e6bc:	f022 0204 	bic.w	r2, r2, #4
    e6c0:	721a      	strb	r2, [r3, #8]
}
    e6c2:	bc10      	pop	{r4}
    e6c4:	4770      	bx	lr
    e6c6:	bf00      	nop
    e6c8:	20008000 	.word	0x20008000

0000e6cc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    e6cc:	b570      	push	{r4, r5, r6, lr}
    e6ce:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e6d0:	4604      	mov	r4, r0
{
    e6d2:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e6d4:	b920      	cbnz	r0, e6e0 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    e6d6:	b31d      	cbz	r5, e720 <bt_id_create+0x54>
			return -EINVAL;
    e6d8:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    e6dc:	b006      	add	sp, #24
    e6de:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e6e0:	4920      	ldr	r1, [pc, #128]	; (e764 <bt_id_create+0x98>)
    e6e2:	f00b ffe2 	bl	1a6aa <bt_addr_le_eq>
    e6e6:	2800      	cmp	r0, #0
    e6e8:	d1f5      	bne.n	e6d6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    e6ea:	7823      	ldrb	r3, [r4, #0]
    e6ec:	2b01      	cmp	r3, #1
    e6ee:	d104      	bne.n	e6fa <bt_id_create+0x2e>
    e6f0:	79a3      	ldrb	r3, [r4, #6]
    e6f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e6f6:	2bc0      	cmp	r3, #192	; 0xc0
    e6f8:	d00a      	beq.n	e710 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
    e6fa:	4b1b      	ldr	r3, [pc, #108]	; (e768 <bt_id_create+0x9c>)
    e6fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e700:	9305      	str	r3, [sp, #20]
    e702:	2302      	movs	r3, #2
    e704:	4819      	ldr	r0, [pc, #100]	; (e76c <bt_id_create+0xa0>)
    e706:	aa04      	add	r2, sp, #16
    e708:	9304      	str	r3, [sp, #16]
    e70a:	f00c f813 	bl	1a734 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    e70e:	e7e3      	b.n	e6d8 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    e710:	4620      	mov	r0, r4
    e712:	f7ff fdc3 	bl	e29c <id_find>
    e716:	2800      	cmp	r0, #0
    e718:	dbdd      	blt.n	e6d6 <bt_id_create+0xa>
			return -EALREADY;
    e71a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e71e:	e7dd      	b.n	e6dc <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    e720:	4d13      	ldr	r5, [pc, #76]	; (e770 <bt_id_create+0xa4>)
    e722:	79eb      	ldrb	r3, [r5, #7]
    e724:	2b01      	cmp	r3, #1
    e726:	d01a      	beq.n	e75e <bt_id_create+0x92>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e728:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    e72c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e730:	07db      	lsls	r3, r3, #31
    e732:	d50b      	bpl.n	e74c <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    e734:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    e736:	4621      	mov	r1, r4
    e738:	4630      	mov	r0, r6
    e73a:	f7ff fdc7 	bl	e2cc <id_create.constprop.0>
	if (err) {
    e73e:	2800      	cmp	r0, #0
    e740:	d1cc      	bne.n	e6dc <bt_id_create+0x10>
		bt_dev.id_count++;
    e742:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    e744:	4630      	mov	r0, r6
		bt_dev.id_count++;
    e746:	3301      	adds	r3, #1
    e748:	71eb      	strb	r3, [r5, #7]
	return new_id;
    e74a:	e7c7      	b.n	e6dc <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    e74c:	2c00      	cmp	r4, #0
    e74e:	d0c3      	beq.n	e6d8 <bt_id_create+0xc>
    e750:	4620      	mov	r0, r4
    e752:	4904      	ldr	r1, [pc, #16]	; (e764 <bt_id_create+0x98>)
    e754:	f00b ffa9 	bl	1a6aa <bt_addr_le_eq>
    e758:	2800      	cmp	r0, #0
    e75a:	d0eb      	beq.n	e734 <bt_id_create+0x68>
    e75c:	e7bc      	b.n	e6d8 <bt_id_create+0xc>
		return -ENOMEM;
    e75e:	f06f 000b 	mvn.w	r0, #11
    e762:	e7bb      	b.n	e6dc <bt_id_create+0x10>
    e764:	0001f9e5 	.word	0x0001f9e5
    e768:	000203b8 	.word	0x000203b8
    e76c:	0001e574 	.word	0x0001e574
    e770:	20008000 	.word	0x20008000

0000e774 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    e774:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    e776:	4604      	mov	r4, r0
{
    e778:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    e77a:	b960      	cbnz	r0, e796 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
    e77c:	4b1a      	ldr	r3, [pc, #104]	; (e7e8 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
    e77e:	9307      	str	r3, [sp, #28]
    e780:	2302      	movs	r3, #2
    e782:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e786:	4819      	ldr	r0, [pc, #100]	; (e7ec <bt_id_read_public_addr+0x78>)
    e788:	aa06      	add	r2, sp, #24
    e78a:	9306      	str	r3, [sp, #24]
    e78c:	f00b ffd2 	bl	1a734 <z_log_msg_static_create.constprop.0>
		return 0U;
    e790:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e792:	b008      	add	sp, #32
    e794:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e796:	2100      	movs	r1, #0
    e798:	f241 0009 	movw	r0, #4105	; 0x1009
    e79c:	aa01      	add	r2, sp, #4
    e79e:	f7fe fe0d 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    e7a2:	4606      	mov	r6, r0
    e7a4:	b108      	cbz	r0, e7aa <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
    e7a6:	4b12      	ldr	r3, [pc, #72]	; (e7f0 <bt_id_read_public_addr+0x7c>)
    e7a8:	e7e9      	b.n	e77e <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    e7aa:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    e7ac:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e7ae:	68dd      	ldr	r5, [r3, #12]
    e7b0:	4910      	ldr	r1, [pc, #64]	; (e7f4 <bt_id_read_public_addr+0x80>)
    e7b2:	3501      	adds	r5, #1
    e7b4:	4628      	mov	r0, r5
    e7b6:	f00b fdca 	bl	1a34e <memcmp>
    e7ba:	b918      	cbnz	r0, e7c4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    e7bc:	9801      	ldr	r0, [sp, #4]
    e7be:	f005 fcf9 	bl	141b4 <net_buf_unref>
		return 0U;
    e7c2:	e7e5      	b.n	e790 <bt_id_read_public_addr+0x1c>
    e7c4:	2206      	movs	r2, #6
    e7c6:	4628      	mov	r0, r5
    e7c8:	490b      	ldr	r1, [pc, #44]	; (e7f8 <bt_id_read_public_addr+0x84>)
    e7ca:	f00b fdc0 	bl	1a34e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e7ce:	2800      	cmp	r0, #0
    e7d0:	d0f4      	beq.n	e7bc <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    e7d2:	2206      	movs	r2, #6
    e7d4:	4629      	mov	r1, r5
    e7d6:	1c60      	adds	r0, r4, #1
    e7d8:	f00b fdc9 	bl	1a36e <memcpy>
	net_buf_unref(rsp);
    e7dc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e7de:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    e7e0:	f005 fce8 	bl	141b4 <net_buf_unref>
	return 1U;
    e7e4:	2001      	movs	r0, #1
    e7e6:	e7d4      	b.n	e792 <bt_id_read_public_addr+0x1e>
    e7e8:	000203e6 	.word	0x000203e6
    e7ec:	0001e574 	.word	0x0001e574
    e7f0:	000203ff 	.word	0x000203ff
    e7f4:	0001f9f2 	.word	0x0001f9f2
    e7f8:	0001f9ec 	.word	0x0001f9ec

0000e7fc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e7fc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e7fe:	4668      	mov	r0, sp
    e800:	f7ff ffb8 	bl	e774 <bt_id_read_public_addr>
    e804:	4b04      	ldr	r3, [pc, #16]	; (e818 <bt_setup_public_id_addr+0x1c>)
    e806:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    e808:	b118      	cbz	r0, e812 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e80a:	4669      	mov	r1, sp
    e80c:	2000      	movs	r0, #0
    e80e:	f7ff fd5d 	bl	e2cc <id_create.constprop.0>
}
    e812:	b003      	add	sp, #12
    e814:	f85d fb04 	ldr.w	pc, [sp], #4
    e818:	20008000 	.word	0x20008000

0000e81c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e820:	4b22      	ldr	r3, [pc, #136]	; (e8ac <bt_read_static_addr+0x90>)
{
    e822:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e824:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
    e828:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e82a:	07db      	lsls	r3, r3, #31
{
    e82c:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e82e:	d40e      	bmi.n	e84e <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
    e830:	4b1f      	ldr	r3, [pc, #124]	; (e8b0 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
    e832:	9307      	str	r3, [sp, #28]
		return 0;
    e834:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
    e836:	2302      	movs	r3, #2
    e838:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e83c:	481d      	ldr	r0, [pc, #116]	; (e8b4 <bt_read_static_addr+0x98>)
    e83e:	aa06      	add	r2, sp, #24
    e840:	9306      	str	r3, [sp, #24]
    e842:	f00b ff77 	bl	1a734 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    e846:	4628      	mov	r0, r5
    e848:	b008      	add	sp, #32
    e84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e84e:	2100      	movs	r1, #0
    e850:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e854:	aa01      	add	r2, sp, #4
    e856:	f7fe fdb1 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    e85a:	4604      	mov	r4, r0
    e85c:	b108      	cbz	r0, e862 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
    e85e:	4b16      	ldr	r3, [pc, #88]	; (e8b8 <bt_read_static_addr+0x9c>)
    e860:	e7e7      	b.n	e832 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    e862:	9b01      	ldr	r3, [sp, #4]
    e864:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    e866:	7875      	ldrb	r5, [r6, #1]
    e868:	3602      	adds	r6, #2
    e86a:	4545      	cmp	r5, r8
    e86c:	bf28      	it	cs
    e86e:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e870:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    e874:	42a5      	cmp	r5, r4
    e876:	dc0f      	bgt.n	e898 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    e878:	9801      	ldr	r0, [sp, #4]
    e87a:	f005 fc9b 	bl	141b4 <net_buf_unref>
	if (!cnt) {
    e87e:	2d00      	cmp	r5, #0
    e880:	d1e1      	bne.n	e846 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
    e882:	4b0e      	ldr	r3, [pc, #56]	; (e8bc <bt_read_static_addr+0xa0>)
    e884:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e888:	9307      	str	r3, [sp, #28]
    e88a:	2302      	movs	r3, #2
    e88c:	4809      	ldr	r0, [pc, #36]	; (e8b4 <bt_read_static_addr+0x98>)
    e88e:	aa06      	add	r2, sp, #24
    e890:	9306      	str	r3, [sp, #24]
    e892:	f00b ff4f 	bl	1a734 <z_log_msg_static_create.constprop.0>
    e896:	e7d6      	b.n	e846 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e898:	4631      	mov	r1, r6
    e89a:	fb08 7004 	mla	r0, r8, r4, r7
    e89e:	2216      	movs	r2, #22
    e8a0:	f00b fd65 	bl	1a36e <memcpy>
	for (i = 0; i < cnt; i++) {
    e8a4:	3401      	adds	r4, #1
    e8a6:	3616      	adds	r6, #22
    e8a8:	e7e4      	b.n	e874 <bt_read_static_addr+0x58>
    e8aa:	bf00      	nop
    e8ac:	20008000 	.word	0x20008000
    e8b0:	0002041d 	.word	0x0002041d
    e8b4:	0001e574 	.word	0x0001e574
    e8b8:	00020449 	.word	0x00020449
    e8bc:	00020469 	.word	0x00020469

0000e8c0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e8c2:	4e15      	ldr	r6, [pc, #84]	; (e918 <bt_setup_random_id_addr+0x58>)
{
    e8c4:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    e8c6:	79f4      	ldrb	r4, [r6, #7]
    e8c8:	b92c      	cbnz	r4, e8d6 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e8ca:	2101      	movs	r1, #1
    e8cc:	a802      	add	r0, sp, #8
    e8ce:	f7ff ffa5 	bl	e81c <bt_read_static_addr>
    e8d2:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    e8d4:	b9c8      	cbnz	r0, e90a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    e8d6:	2100      	movs	r1, #0
    e8d8:	4608      	mov	r0, r1
}
    e8da:	b009      	add	sp, #36	; 0x24
    e8dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    e8e0:	f7ff bef4 	b.w	e6cc <bt_id_create>
    e8e4:	ab02      	add	r3, sp, #8
    e8e6:	fb07 3105 	mla	r1, r7, r5, r3
    e8ea:	2206      	movs	r2, #6
    e8ec:	f10d 0001 	add.w	r0, sp, #1
    e8f0:	f00b fd3d 	bl	1a36e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    e8f4:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    e8f6:	4669      	mov	r1, sp
    e8f8:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    e8fa:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    e8fe:	f7ff fce5 	bl	e2cc <id_create.constprop.0>
				if (err) {
    e902:	3401      	adds	r4, #1
    e904:	b110      	cbz	r0, e90c <bt_setup_random_id_addr+0x4c>
}
    e906:	b009      	add	sp, #36	; 0x24
    e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    e90a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    e90c:	79f3      	ldrb	r3, [r6, #7]
    e90e:	b2e5      	uxtb	r5, r4
    e910:	42ab      	cmp	r3, r5
    e912:	d8e7      	bhi.n	e8e4 <bt_setup_random_id_addr+0x24>
			return 0;
    e914:	2000      	movs	r0, #0
    e916:	e7f6      	b.n	e906 <bt_setup_random_id_addr+0x46>
    e918:	20008000 	.word	0x20008000

0000e91c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e920:	4690      	mov	r8, r2
    e922:	460e      	mov	r6, r1
    e924:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    e926:	4602      	mov	r2, r0
    e928:	2800      	cmp	r0, #0
    e92a:	d04b      	beq.n	e9c4 <bt_id_set_adv_own_addr+0xa8>
    e92c:	2b00      	cmp	r3, #0
    e92e:	d049      	beq.n	e9c4 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e930:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    e932:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e934:	d531      	bpl.n	e99a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e936:	4f25      	ldr	r7, [pc, #148]	; (e9cc <bt_id_set_adv_own_addr+0xb0>)
    e938:	f1b8 0f00 	cmp.w	r8, #0
    e93c:	d013      	beq.n	e966 <bt_id_set_adv_own_addr+0x4a>
    e93e:	0688      	lsls	r0, r1, #26
    e940:	d40a      	bmi.n	e958 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e942:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e946:	5cfb      	ldrb	r3, [r7, r3]
    e948:	2b01      	cmp	r3, #1
    e94a:	d015      	beq.n	e978 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    e94c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e94e:	06b2      	lsls	r2, r6, #26
    e950:	d50f      	bpl.n	e972 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e952:	f043 0302 	orr.w	r3, r3, #2
    e956:	e00b      	b.n	e970 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e958:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    e95c:	0659      	lsls	r1, r3, #25
    e95e:	d4f0      	bmi.n	e942 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    e960:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e964:	e006      	b.n	e974 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e966:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e96a:	5cfb      	ldrb	r3, [r7, r3]
    e96c:	2b01      	cmp	r3, #1
    e96e:	d003      	beq.n	e978 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    e970:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    e972:	2000      	movs	r0, #0
}
    e974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e978:	2107      	movs	r1, #7
    e97a:	fb01 7104 	mla	r1, r1, r4, r7
    e97e:	4610      	mov	r0, r2
    e980:	3101      	adds	r1, #1
    e982:	f00b ff50 	bl	1a826 <bt_id_set_adv_random_addr>
				if (err) {
    e986:	2800      	cmp	r0, #0
    e988:	d1f4      	bne.n	e974 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    e98a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e98e:	5d3b      	ldrb	r3, [r7, r4]
    e990:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e992:	f1b8 0f00 	cmp.w	r8, #0
    e996:	d0ec      	beq.n	e972 <bt_id_set_adv_own_addr+0x56>
    e998:	e7d9      	b.n	e94e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e99a:	074b      	lsls	r3, r1, #29
    e99c:	d50e      	bpl.n	e9bc <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e99e:	4e0b      	ldr	r6, [pc, #44]	; (e9cc <bt_id_set_adv_own_addr+0xb0>)
    e9a0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    e9a4:	5df3      	ldrb	r3, [r6, r7]
    e9a6:	2b01      	cmp	r3, #1
    e9a8:	d1e2      	bne.n	e970 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e9aa:	2107      	movs	r1, #7
    e9ac:	fb11 3104 	smlabb	r1, r1, r4, r3
    e9b0:	4431      	add	r1, r6
    e9b2:	f00b ff38 	bl	1a826 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    e9b6:	5df3      	ldrb	r3, [r6, r7]
    e9b8:	702b      	strb	r3, [r5, #0]
		if (err) {
    e9ba:	e7db      	b.n	e974 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    e9bc:	f00b ff3b 	bl	1a836 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e9c0:	2301      	movs	r3, #1
    e9c2:	e7f9      	b.n	e9b8 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    e9c4:	f06f 0015 	mvn.w	r0, #21
    e9c8:	e7d4      	b.n	e974 <bt_id_set_adv_own_addr+0x58>
    e9ca:	bf00      	nop
    e9cc:	20008000 	.word	0x20008000

0000e9d0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    e9d0:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e9d2:	4d13      	ldr	r5, [pc, #76]	; (ea20 <bt_id_init+0x50>)
{
    e9d4:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e9d6:	79eb      	ldrb	r3, [r5, #7]
    e9d8:	b11b      	cbz	r3, e9e2 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    e9da:	2400      	movs	r4, #0
}
    e9dc:	4620      	mov	r0, r4
    e9de:	b007      	add	sp, #28
    e9e0:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    e9e2:	f7ff ff0b 	bl	e7fc <bt_setup_public_id_addr>
		if (err) {
    e9e6:	4604      	mov	r4, r0
    e9e8:	b150      	cbz	r0, ea00 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
    e9ea:	4b0e      	ldr	r3, [pc, #56]	; (ea24 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
    e9ec:	9305      	str	r3, [sp, #20]
    e9ee:	2302      	movs	r3, #2
    e9f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e9f4:	480c      	ldr	r0, [pc, #48]	; (ea28 <bt_id_init+0x58>)
    e9f6:	aa04      	add	r2, sp, #16
    e9f8:	9304      	str	r3, [sp, #16]
    e9fa:	f00b fe9b 	bl	1a734 <z_log_msg_static_create.constprop.0>
			return err;
    e9fe:	e7ed      	b.n	e9dc <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ea00:	79eb      	ldrb	r3, [r5, #7]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d1e9      	bne.n	e9da <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    ea06:	f7ff ff5b 	bl	e8c0 <bt_setup_random_id_addr>
		if (err) {
    ea0a:	4604      	mov	r4, r0
    ea0c:	2800      	cmp	r0, #0
    ea0e:	d1ec      	bne.n	e9ea <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    ea10:	1c68      	adds	r0, r5, #1
    ea12:	f7ff fd3d 	bl	e490 <set_random_address>
		if (err) {
    ea16:	4604      	mov	r4, r0
    ea18:	2800      	cmp	r0, #0
    ea1a:	d0df      	beq.n	e9dc <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
    ea1c:	4b03      	ldr	r3, [pc, #12]	; (ea2c <bt_id_init+0x5c>)
    ea1e:	e7e5      	b.n	e9ec <bt_id_init+0x1c>
    ea20:	20008000 	.word	0x20008000
    ea24:	00020492 	.word	0x00020492
    ea28:	0001e574 	.word	0x0001e574
    ea2c:	000204b1 	.word	0x000204b1

0000ea30 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea34:	460c      	mov	r4, r1
    ea36:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ea38:	2120      	movs	r1, #32
{
    ea3a:	4692      	mov	sl, r2
    ea3c:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ea3e:	f7fe fc83 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    ea42:	4605      	mov	r5, r0
    ea44:	2800      	cmp	r0, #0
    ea46:	d05b      	beq.n	eb00 <hci_set_ad+0xd0>
    ea48:	2120      	movs	r1, #32
    ea4a:	300c      	adds	r0, #12
    ea4c:	f00d fd7b 	bl	1c546 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    ea50:	2220      	movs	r2, #32
    ea52:	4681      	mov	r9, r0
    ea54:	2100      	movs	r1, #0
    ea56:	f00b fc95 	bl	1a384 <memset>
	uint8_t set_data_len = 0;
    ea5a:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    ea5c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    ea60:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    ea64:	2300      	movs	r3, #0
    ea66:	f8d4 8000 	ldr.w	r8, [r4]
    ea6a:	6862      	ldr	r2, [r4, #4]
    ea6c:	4293      	cmp	r3, r2
    ea6e:	d30c      	bcc.n	ea8a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    ea70:	3408      	adds	r4, #8
    ea72:	45a2      	cmp	sl, r4
    ea74:	d1f6      	bne.n	ea64 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    ea76:	2200      	movs	r2, #0
    ea78:	4629      	mov	r1, r5
    ea7a:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    ea7c:	f889 6000 	strb.w	r6, [r9]
}
    ea80:	b009      	add	sp, #36	; 0x24
    ea82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    ea86:	f7fe bc99 	b.w	d3bc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    ea8a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    ea8e:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    ea90:	1811      	adds	r1, r2, r0
    ea92:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    ea94:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    ea98:	d91b      	bls.n	ead2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    ea9a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    ea9e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    eaa2:	d101      	bne.n	eaa8 <hci_set_ad+0x78>
    eaa4:	2a00      	cmp	r2, #0
    eaa6:	dc12      	bgt.n	eace <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
    eaa8:	4b17      	ldr	r3, [pc, #92]	; (eb08 <hci_set_ad+0xd8>)
    eaaa:	9307      	str	r3, [sp, #28]
    eaac:	2302      	movs	r3, #2
    eaae:	9306      	str	r3, [sp, #24]
    eab0:	2300      	movs	r3, #0
    eab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eab6:	4815      	ldr	r0, [pc, #84]	; (eb0c <hci_set_ad+0xdc>)
    eab8:	aa06      	add	r2, sp, #24
    eaba:	f7fc f9fb 	bl	aeb4 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    eabe:	4628      	mov	r0, r5
    eac0:	f005 fb78 	bl	141b4 <net_buf_unref>
					return -EINVAL;
    eac4:	f06f 0015 	mvn.w	r0, #21
}
    eac8:	b009      	add	sp, #36	; 0x24
    eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    eace:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    ead2:	b2d7      	uxtb	r7, r2
    ead4:	1c79      	adds	r1, r7, #1
    ead6:	f80b 1006 	strb.w	r1, [fp, r6]
    eada:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    eadc:	b2c9      	uxtb	r1, r1
    eade:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    eae2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    eae6:	fa5b f080 	uxtab	r0, fp, r0
    eaea:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    eaec:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    eaee:	f00b fc3e 	bl	1a36e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    eaf2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    eaf4:	4437      	add	r7, r6
    eaf6:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    eaf8:	3301      	adds	r3, #1
    eafa:	f108 0808 	add.w	r8, r8, #8
    eafe:	e7b4      	b.n	ea6a <hci_set_ad+0x3a>
		return -ENOBUFS;
    eb00:	f06f 0068 	mvn.w	r0, #104	; 0x68
    eb04:	e7e0      	b.n	eac8 <hci_set_ad+0x98>
    eb06:	bf00      	nop
    eb08:	000204d4 	.word	0x000204d4
    eb0c:	0001e524 	.word	0x0001e524

0000eb10 <adv_is_directed>:
	return memcmp(a, b, sizeof(*a));
    eb10:	2207      	movs	r2, #7

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    eb12:	b508      	push	{r3, lr}
    eb14:	4903      	ldr	r1, [pc, #12]	; (eb24 <adv_is_directed+0x14>)
    eb16:	3009      	adds	r0, #9
    eb18:	f00b fc19 	bl	1a34e <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    eb1c:	3800      	subs	r0, #0
    eb1e:	bf18      	it	ne
    eb20:	2001      	movne	r0, #1
    eb22:	bd08      	pop	{r3, pc}
    eb24:	0001f9e5 	.word	0x0001f9e5

0000eb28 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    eb28:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    eb2a:	4b15      	ldr	r3, [pc, #84]	; (eb80 <le_adv_start_add_conn+0x58>)
    eb2c:	7802      	ldrb	r2, [r0, #0]
{
    eb2e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    eb30:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
    eb34:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    eb36:	f7ff ffeb 	bl	eb10 <adv_is_directed>
    eb3a:	4603      	mov	r3, r0
    eb3c:	7820      	ldrb	r0, [r4, #0]
    eb3e:	b96b      	cbnz	r3, eb5c <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    eb40:	4910      	ldr	r1, [pc, #64]	; (eb84 <le_adv_start_add_conn+0x5c>)
    eb42:	f001 f935 	bl	fdb0 <bt_conn_add_le>
		if (!conn) {
    eb46:	4604      	mov	r4, r0
    eb48:	b910      	cbnz	r0, eb50 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    eb4a:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    eb4e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    eb50:	2104      	movs	r1, #4
    eb52:	f000 ff37 	bl	f9c4 <bt_conn_set_state>
		return 0;
    eb56:	2000      	movs	r0, #0
		*out_conn = conn;
    eb58:	602c      	str	r4, [r5, #0]
    eb5a:	e7f8      	b.n	eb4e <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    eb5c:	f104 0609 	add.w	r6, r4, #9
    eb60:	4631      	mov	r1, r6
    eb62:	f001 f95b 	bl	fe1c <bt_conn_exists_le>
    eb66:	b940      	cbnz	r0, eb7a <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    eb68:	7820      	ldrb	r0, [r4, #0]
    eb6a:	4631      	mov	r1, r6
    eb6c:	f001 f920 	bl	fdb0 <bt_conn_add_le>
	if (!conn) {
    eb70:	4604      	mov	r4, r0
    eb72:	2800      	cmp	r0, #0
    eb74:	d0e9      	beq.n	eb4a <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    eb76:	2105      	movs	r1, #5
    eb78:	e7eb      	b.n	eb52 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    eb7a:	f06f 0015 	mvn.w	r0, #21
    eb7e:	e7e6      	b.n	eb4e <le_adv_start_add_conn+0x26>
    eb80:	20008000 	.word	0x20008000
    eb84:	0001f9de 	.word	0x0001f9de

0000eb88 <valid_adv_param>:
{
    eb88:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb8a:	6843      	ldr	r3, [r0, #4]
{
    eb8c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb8e:	0558      	lsls	r0, r3, #21
    eb90:	d501      	bpl.n	eb96 <valid_adv_param+0xe>
		return false;
    eb92:	2000      	movs	r0, #0
}
    eb94:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    eb96:	6922      	ldr	r2, [r4, #16]
    eb98:	b10a      	cbz	r2, eb9e <valid_adv_param+0x16>
    eb9a:	07d9      	lsls	r1, r3, #31
    eb9c:	d5f9      	bpl.n	eb92 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    eb9e:	4d19      	ldr	r5, [pc, #100]	; (ec04 <valid_adv_param+0x7c>)
    eba0:	7820      	ldrb	r0, [r4, #0]
    eba2:	79eb      	ldrb	r3, [r5, #7]
    eba4:	4283      	cmp	r3, r0
    eba6:	d9f4      	bls.n	eb92 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    eba8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ebac:	2207      	movs	r2, #7
    ebae:	4916      	ldr	r1, [pc, #88]	; (ec08 <valid_adv_param+0x80>)
    ebb0:	4428      	add	r0, r5
    ebb2:	f00b fbcc 	bl	1a34e <memcmp>
	if (param->id >= bt_dev.id_count ||
    ebb6:	2800      	cmp	r0, #0
    ebb8:	d0eb      	beq.n	eb92 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ebba:	6860      	ldr	r0, [r4, #4]
    ebbc:	07c2      	lsls	r2, r0, #31
    ebbe:	d406      	bmi.n	ebce <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    ebc0:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    ebc4:	2b08      	cmp	r3, #8
    ebc6:	d802      	bhi.n	ebce <valid_adv_param+0x46>
    ebc8:	68a3      	ldr	r3, [r4, #8]
    ebca:	2b9f      	cmp	r3, #159	; 0x9f
    ebcc:	d9e1      	bls.n	eb92 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    ebce:	f010 0f30 	tst.w	r0, #48	; 0x30
    ebd2:	d002      	beq.n	ebda <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    ebd4:	6923      	ldr	r3, [r4, #16]
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	d0db      	beq.n	eb92 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    ebda:	06c3      	lsls	r3, r0, #27
    ebdc:	d401      	bmi.n	ebe2 <valid_adv_param+0x5a>
    ebde:	6923      	ldr	r3, [r4, #16]
    ebe0:	b943      	cbnz	r3, ebf4 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    ebe2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    ebe6:	429a      	cmp	r2, r3
    ebe8:	d8d3      	bhi.n	eb92 <valid_adv_param+0xa>
    ebea:	2a1f      	cmp	r2, #31
    ebec:	d9d1      	bls.n	eb92 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    ebee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    ebf2:	d8ce      	bhi.n	eb92 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    ebf4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    ebf8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    ebfc:	bf18      	it	ne
    ebfe:	2001      	movne	r0, #1
    ec00:	e7c8      	b.n	eb94 <valid_adv_param+0xc>
    ec02:	bf00      	nop
    ec04:	20008000 	.word	0x20008000
    ec08:	0001f9e5 	.word	0x0001f9e5

0000ec0c <bt_le_ext_adv_foreach>:
{
    ec0c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    ec0e:	4801      	ldr	r0, [pc, #4]	; (ec14 <bt_le_ext_adv_foreach+0x8>)
    ec10:	4718      	bx	r3
    ec12:	bf00      	nop
    ec14:	20008018 	.word	0x20008018

0000ec18 <bt_le_adv_lookup_legacy>:
}
    ec18:	4800      	ldr	r0, [pc, #0]	; (ec1c <bt_le_adv_lookup_legacy+0x4>)
    ec1a:	4770      	bx	lr
    ec1c:	20008018 	.word	0x20008018

0000ec20 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec24:	b093      	sub	sp, #76	; 0x4c
    ec26:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    ec28:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    ec2a:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    ec2e:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    ec30:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ec34:	4892      	ldr	r0, [pc, #584]	; (ee80 <bt_le_adv_start_legacy+0x260>)
    ec36:	bf18      	it	ne
    ec38:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    ec3a:	9307      	str	r3, [sp, #28]
    ec3c:	f00b fe35 	bl	1a8aa <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ec40:	0747      	lsls	r7, r0, #29
{
    ec42:	460d      	mov	r5, r1
    ec44:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ec46:	f140 8112 	bpl.w	ee6e <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    ec4a:	4608      	mov	r0, r1
    ec4c:	f7ff ff9c 	bl	eb88 <valid_adv_param>
    ec50:	b928      	cbnz	r0, ec5e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    ec52:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    ec56:	4620      	mov	r0, r4
    ec58:	b013      	add	sp, #76	; 0x4c
    ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    ec5e:	4628      	mov	r0, r5
    ec60:	f00b fe00 	bl	1a864 <bt_id_adv_random_addr_check>
    ec64:	4681      	mov	r9, r0
    ec66:	2800      	cmp	r0, #0
    ec68:	d0f3      	beq.n	ec52 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ec6a:	f106 0810 	add.w	r8, r6, #16
    ec6e:	4640      	mov	r0, r8
    ec70:	f00b fe1b 	bl	1a8aa <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ec74:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    ec78:	0600      	lsls	r0, r0, #24
    ec7a:	f100 80fb 	bmi.w	ee74 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    ec7e:	220f      	movs	r2, #15
    ec80:	4639      	mov	r1, r7
    ec82:	a808      	add	r0, sp, #32
    ec84:	f00b fb7e 	bl	1a384 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    ec88:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    ec8a:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    ec8c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    ec90:	68eb      	ldr	r3, [r5, #12]
    ec92:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    ec96:	f00b fdf9 	bl	1a88c <get_adv_channel_map>
	if (adv->id != param->id) {
    ec9a:	7832      	ldrb	r2, [r6, #0]
    ec9c:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    ec9e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    eca2:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    eca4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    eca8:	d004      	beq.n	ecb4 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ecaa:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    ecae:	4874      	ldr	r0, [pc, #464]	; (ee80 <bt_le_adv_start_legacy+0x260>)
    ecb0:	f00b fdfe 	bl	1a8b0 <atomic_and>
	adv->id = param->id;
    ecb4:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    ecb6:	4a73      	ldr	r2, [pc, #460]	; (ee84 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    ecb8:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    ecba:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    ecbe:	4630      	mov	r0, r6
    ecc0:	4622      	mov	r2, r4
    ecc2:	6869      	ldr	r1, [r5, #4]
    ecc4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    ecc8:	f7ff fe28 	bl	e91c <bt_id_set_adv_own_addr>
	if (err) {
    eccc:	4604      	mov	r4, r0
    ecce:	2800      	cmp	r0, #0
    ecd0:	d1c1      	bne.n	ec56 <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    ecd2:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ecd4:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    ecd8:	f1ba 0f00 	cmp.w	sl, #0
    ecdc:	d013      	beq.n	ed06 <bt_le_adv_start_legacy+0xe6>
    ecde:	6929      	ldr	r1, [r5, #16]
    ece0:	f00b fb45 	bl	1a36e <memcpy>
	name_type = get_adv_name_type_param(param);
    ece4:	4628      	mov	r0, r5
    ece6:	f00b fe73 	bl	1a9d0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ecea:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    ecec:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ecee:	07d9      	lsls	r1, r3, #31
    ecf0:	d416      	bmi.n	ed20 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    ecf2:	059b      	lsls	r3, r3, #22
    ecf4:	d403      	bmi.n	ecfe <bt_le_adv_start_legacy+0xde>
    ecf6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ecf8:	b90b      	cbnz	r3, ecfe <bt_le_adv_start_legacy+0xde>
    ecfa:	2f02      	cmp	r7, #2
    ecfc:	d15a      	bne.n	edb4 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    ecfe:	2302      	movs	r3, #2
    ed00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ed04:	e01a      	b.n	ed3c <bt_le_adv_start_legacy+0x11c>
    ed06:	4960      	ldr	r1, [pc, #384]	; (ee88 <bt_le_adv_start_legacy+0x268>)
    ed08:	f00b fb31 	bl	1a36e <memcpy>
	name_type = get_adv_name_type_param(param);
    ed0c:	4628      	mov	r0, r5
    ed0e:	f00b fe5f 	bl	1a9d0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ed12:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    ed14:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ed16:	07da      	lsls	r2, r3, #31
    ed18:	d5eb      	bpl.n	ecf2 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    ed1a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    ed1e:	e00d      	b.n	ed3c <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    ed20:	f013 0f10 	tst.w	r3, #16
    ed24:	bf0c      	ite	eq
    ed26:	2301      	moveq	r3, #1
    ed28:	2304      	movne	r3, #4
    ed2a:	2207      	movs	r2, #7
    ed2c:	6929      	ldr	r1, [r5, #16]
    ed2e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ed32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    ed36:	46a1      	mov	r9, r4
    ed38:	f00b fb19 	bl	1a36e <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    ed3c:	210f      	movs	r1, #15
    ed3e:	f242 0006 	movw	r0, #8198	; 0x2006
    ed42:	f7fe fb01 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    ed46:	4604      	mov	r4, r0
    ed48:	2800      	cmp	r0, #0
    ed4a:	f000 8096 	beq.w	ee7a <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ed4e:	220f      	movs	r2, #15
    ed50:	a908      	add	r1, sp, #32
    ed52:	300c      	adds	r0, #12
    ed54:	f00d fbfd 	bl	1c552 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    ed58:	4621      	mov	r1, r4
    ed5a:	2200      	movs	r2, #0
    ed5c:	f242 0006 	movw	r0, #8198	; 0x2006
    ed60:	f7fe fb2c 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    ed64:	4604      	mov	r4, r0
    ed66:	2800      	cmp	r0, #0
    ed68:	f47f af75 	bne.w	ec56 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    ed6c:	f1ba 0f00 	cmp.w	sl, #0
    ed70:	d026      	beq.n	edc0 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ed72:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ed74:	07dc      	lsls	r4, r3, #31
    ed76:	d431      	bmi.n	eddc <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    ed78:	2101      	movs	r1, #1
    ed7a:	4630      	mov	r0, r6
    ed7c:	f00b fe38 	bl	1a9f0 <bt_le_adv_set_enable_legacy>
	if (err) {
    ed80:	4604      	mov	r4, r0
    ed82:	2800      	cmp	r0, #0
    ed84:	d06b      	beq.n	ee5e <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
    ed86:	4b41      	ldr	r3, [pc, #260]	; (ee8c <bt_le_adv_start_legacy+0x26c>)
    ed88:	9311      	str	r3, [sp, #68]	; 0x44
    ed8a:	2302      	movs	r3, #2
    ed8c:	9310      	str	r3, [sp, #64]	; 0x40
    ed8e:	2300      	movs	r3, #0
    ed90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ed94:	483e      	ldr	r0, [pc, #248]	; (ee90 <bt_le_adv_start_legacy+0x270>)
    ed96:	aa10      	add	r2, sp, #64	; 0x40
    ed98:	f7fc f88c 	bl	aeb4 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ed9c:	9d07      	ldr	r5, [sp, #28]
    ed9e:	2d00      	cmp	r5, #0
    eda0:	f43f af59 	beq.w	ec56 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eda4:	4628      	mov	r0, r5
    eda6:	2100      	movs	r1, #0
    eda8:	f000 fe0c 	bl	f9c4 <bt_conn_set_state>
			bt_conn_unref(conn);
    edac:	4628      	mov	r0, r5
    edae:	f00b feec 	bl	1ab8a <bt_conn_unref>
    edb2:	e750      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    edb4:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    edb6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    edba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    edbe:	e7bd      	b.n	ed3c <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    edc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    edc2:	4659      	mov	r1, fp
    edc4:	9300      	str	r3, [sp, #0]
    edc6:	4630      	mov	r0, r6
    edc8:	e9cd 9701 	strd	r9, r7, [sp, #4]
    edcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    edce:	9a05      	ldr	r2, [sp, #20]
    edd0:	f00b fd8c 	bl	1a8ec <le_adv_update.constprop.0>
		if (err) {
    edd4:	4604      	mov	r4, r0
    edd6:	2800      	cmp	r0, #0
    edd8:	d0cb      	beq.n	ed72 <bt_le_adv_start_legacy+0x152>
    edda:	e73c      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    eddc:	4630      	mov	r0, r6
    edde:	a907      	add	r1, sp, #28
    ede0:	f7ff fea2 	bl	eb28 <le_adv_start_add_conn>
		if (err) {
    ede4:	4604      	mov	r4, r0
    ede6:	2800      	cmp	r0, #0
    ede8:	d0c6      	beq.n	ed78 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    edea:	f110 0f0c 	cmn.w	r0, #12
    edee:	f47f af32 	bne.w	ec56 <bt_le_adv_start_legacy+0x36>
    edf2:	f1ba 0f00 	cmp.w	sl, #0
    edf6:	f47f af2e 	bne.w	ec56 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    edfa:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    edfc:	0798      	lsls	r0, r3, #30
    edfe:	f53f af2a 	bmi.w	ec56 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ee02:	686c      	ldr	r4, [r5, #4]
    ee04:	f084 0402 	eor.w	r4, r4, #2
    ee08:	f3c4 0440 	ubfx	r4, r4, #1, #1
    ee0c:	f004 0201 	and.w	r2, r4, #1
    ee10:	210e      	movs	r1, #14
    ee12:	4640      	mov	r0, r8
    ee14:	f00b fd57 	bl	1a8c6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    ee18:	1e7b      	subs	r3, r7, #1
    ee1a:	425a      	negs	r2, r3
    ee1c:	415a      	adcs	r2, r3
    ee1e:	2108      	movs	r1, #8
    ee20:	4640      	mov	r0, r8
    ee22:	f00b fd50 	bl	1a8c6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    ee26:	1eb9      	subs	r1, r7, #2
    ee28:	424a      	negs	r2, r1
    ee2a:	414a      	adcs	r2, r1
    ee2c:	4640      	mov	r0, r8
    ee2e:	2109      	movs	r1, #9
    ee30:	f00b fd49 	bl	1a8c6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    ee34:	686a      	ldr	r2, [r5, #4]
    ee36:	210a      	movs	r1, #10
    ee38:	4640      	mov	r0, r8
    ee3a:	f002 0201 	and.w	r2, r2, #1
    ee3e:	f00b fd42 	bl	1a8c6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    ee42:	464a      	mov	r2, r9
    ee44:	210b      	movs	r1, #11
    ee46:	4640      	mov	r0, r8
    ee48:	f00b fd3d 	bl	1a8c6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    ee4c:	686a      	ldr	r2, [r5, #4]
    ee4e:	210d      	movs	r1, #13
    ee50:	4640      	mov	r0, r8
    ee52:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ee56:	f00b fd36 	bl	1a8c6 <atomic_set_bit_to>
	return 0;
    ee5a:	2400      	movs	r4, #0
    ee5c:	e6fb      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ee5e:	9807      	ldr	r0, [sp, #28]
    ee60:	b108      	cbz	r0, ee66 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    ee62:	f00b fe92 	bl	1ab8a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ee66:	f1ba 0f00 	cmp.w	sl, #0
    ee6a:	d1cf      	bne.n	ee0c <bt_le_adv_start_legacy+0x1ec>
    ee6c:	e7c9      	b.n	ee02 <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    ee6e:	f06f 040a 	mvn.w	r4, #10
    ee72:	e6f0      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    ee74:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ee78:	e6ed      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    ee7a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ee7e:	e6ea      	b.n	ec56 <bt_le_adv_start_legacy+0x36>
    ee80:	200080d4 	.word	0x200080d4
    ee84:	20008000 	.word	0x20008000
    ee88:	0001f9e5 	.word	0x0001f9e5
    ee8c:	000204ed 	.word	0x000204ed
    ee90:	0001e524 	.word	0x0001e524

0000ee94 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    ee94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ee96:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ee98:	9a06      	ldr	r2, [sp, #24]
{
    ee9a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ee9c:	e9cd 3200 	strd	r3, r2, [sp]
    eea0:	462b      	mov	r3, r5
    eea2:	460a      	mov	r2, r1
    eea4:	4601      	mov	r1, r0
    eea6:	4811      	ldr	r0, [pc, #68]	; (eeec <bt_le_adv_start+0x58>)
    eea8:	f7ff feba 	bl	ec20 <bt_le_adv_start_legacy>
    eeac:	4621      	mov	r1, r4
    eeae:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    eeb0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    eeb2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    eeb6:	429d      	cmp	r5, r3
    eeb8:	d102      	bne.n	eec0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    eeba:	4630      	mov	r0, r6
    eebc:	b002      	add	sp, #8
    eebe:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    eec0:	880a      	ldrh	r2, [r1, #0]
    eec2:	4282      	cmp	r2, r0
    eec4:	d104      	bne.n	eed0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    eec6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    eec8:	b112      	cbz	r2, eed0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    eeca:	7812      	ldrb	r2, [r2, #0]
    eecc:	07d2      	lsls	r2, r2, #31
    eece:	d402      	bmi.n	eed6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    eed0:	3301      	adds	r3, #1
    eed2:	3108      	adds	r1, #8
    eed4:	e7ef      	b.n	eeb6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    eed6:	4906      	ldr	r1, [pc, #24]	; (eef0 <bt_le_adv_start+0x5c>)
    eed8:	4806      	ldr	r0, [pc, #24]	; (eef4 <bt_le_adv_start+0x60>)
    eeda:	f00e fdab 	bl	1da34 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    eede:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    eee2:	2300      	movs	r3, #0
    eee4:	4803      	ldr	r0, [pc, #12]	; (eef4 <bt_le_adv_start+0x60>)
    eee6:	f008 fec1 	bl	17c6c <k_work_reschedule>
    eeea:	e7e6      	b.n	eeba <bt_le_adv_start+0x26>
    eeec:	20008018 	.word	0x20008018
    eef0:	0000ef71 	.word	0x0000ef71
    eef4:	20008030 	.word	0x20008030

0000eef8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    eef8:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    eefa:	4819      	ldr	r0, [pc, #100]	; (ef60 <bt_le_adv_stop+0x68>)
    eefc:	f00b fd9f 	bl	1aa3e <bt_le_lim_adv_cancel_timeout>
    ef00:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    ef04:	4817      	ldr	r0, [pc, #92]	; (ef64 <bt_le_adv_stop+0x6c>)
    ef06:	f00b fcd3 	bl	1a8b0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ef0a:	4816      	ldr	r0, [pc, #88]	; (ef64 <bt_le_adv_stop+0x6c>)
    ef0c:	f00b fccd 	bl	1a8aa <atomic_get>
    ef10:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ef12:	061a      	lsls	r2, r3, #24
    ef14:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    ef18:	d521      	bpl.n	ef5e <bt_le_adv_stop+0x66>
    ef1a:	4812      	ldr	r0, [pc, #72]	; (ef64 <bt_le_adv_stop+0x6c>)
    ef1c:	f00b fcc5 	bl	1a8aa <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ef20:	0543      	lsls	r3, r0, #21
    ef22:	d512      	bpl.n	ef4a <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    ef24:	480e      	ldr	r0, [pc, #56]	; (ef60 <bt_le_adv_stop+0x68>)
    ef26:	f7ff fdf3 	bl	eb10 <adv_is_directed>
    ef2a:	4b0f      	ldr	r3, [pc, #60]	; (ef68 <bt_le_adv_stop+0x70>)
    ef2c:	b998      	cbnz	r0, ef56 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    ef2e:	2204      	movs	r2, #4
    ef30:	490e      	ldr	r1, [pc, #56]	; (ef6c <bt_le_adv_stop+0x74>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ef32:	7e18      	ldrb	r0, [r3, #24]
    ef34:	f000 ffa2 	bl	fe7c <bt_conn_lookup_state_le>
    ef38:	4604      	mov	r4, r0
	if (conn) {
    ef3a:	b130      	cbz	r0, ef4a <bt_le_adv_stop+0x52>
		conn->err = status;
    ef3c:	2100      	movs	r1, #0
    ef3e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ef40:	f000 fd40 	bl	f9c4 <bt_conn_set_state>
		bt_conn_unref(conn);
    ef44:	4620      	mov	r0, r4
    ef46:	f00b fe20 	bl	1ab8a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    ef4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    ef4e:	2100      	movs	r1, #0
    ef50:	4803      	ldr	r0, [pc, #12]	; (ef60 <bt_le_adv_stop+0x68>)
    ef52:	f00b bd4d 	b.w	1a9f0 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ef56:	2205      	movs	r2, #5
    ef58:	f103 0121 	add.w	r1, r3, #33	; 0x21
    ef5c:	e7e9      	b.n	ef32 <bt_le_adv_stop+0x3a>
}
    ef5e:	bd10      	pop	{r4, pc}
    ef60:	20008018 	.word	0x20008018
    ef64:	20008028 	.word	0x20008028
    ef68:	20008000 	.word	0x20008000
    ef6c:	0001f9de 	.word	0x0001f9de

0000ef70 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    ef70:	b598      	push	{r3, r4, r7, lr}
    ef72:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    ef74:	f7ff ffc0 	bl	eef8 <bt_le_adv_stop>
#endif
	if (err) {
    ef78:	b178      	cbz	r0, ef9a <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
    ef7a:	466c      	mov	r4, sp
    ef7c:	b088      	sub	sp, #32
    ef7e:	466a      	mov	r2, sp
    ef80:	4b07      	ldr	r3, [pc, #28]	; (efa0 <adv_timeout+0x30>)
    ef82:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ef86:	2303      	movs	r3, #3
    ef88:	f842 3f10 	str.w	r3, [r2, #16]!
    ef8c:	2300      	movs	r3, #0
    ef8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ef92:	4804      	ldr	r0, [pc, #16]	; (efa4 <adv_timeout+0x34>)
    ef94:	f7fb ff8e 	bl	aeb4 <z_impl_z_log_msg_static_create>
    ef98:	46a5      	mov	sp, r4
	}
}
    ef9a:	46bd      	mov	sp, r7
    ef9c:	bd98      	pop	{r3, r4, r7, pc}
    ef9e:	bf00      	nop
    efa0:	00020508 	.word	0x00020508
    efa4:	0001e524 	.word	0x0001e524

0000efa8 <bt_le_adv_resume>:
{
    efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efaa:	b083      	sub	sp, #12
    efac:	4837      	ldr	r0, [pc, #220]	; (f08c <bt_le_adv_resume+0xe4>)
    efae:	af00      	add	r7, sp, #0
    efb0:	f00b fc7b 	bl	1a8aa <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    efb4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    efb8:	4c34      	ldr	r4, [pc, #208]	; (f08c <bt_le_adv_resume+0xe4>)
    efba:	d041      	beq.n	f040 <bt_le_adv_resume+0x98>
    efbc:	4620      	mov	r0, r4
    efbe:	f00b fc74 	bl	1a8aa <atomic_get>
    efc2:	0603      	lsls	r3, r0, #24
    efc4:	d43c      	bmi.n	f040 <bt_le_adv_resume+0x98>
    efc6:	4620      	mov	r0, r4
    efc8:	f00b fc6f 	bl	1a8aa <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    efcc:	0546      	lsls	r6, r0, #21
    efce:	d537      	bpl.n	f040 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
    efd0:	1d39      	adds	r1, r7, #4
    efd2:	f1a4 0010 	sub.w	r0, r4, #16
    efd6:	f7ff fda7 	bl	eb28 <le_adv_start_add_conn>
	if (err) {
    efda:	bb88      	cbnz	r0, f040 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
    efdc:	f1a4 0010 	sub.w	r0, r4, #16
    efe0:	f7ff fd96 	bl	eb10 <adv_is_directed>
    efe4:	4602      	mov	r2, r0
    efe6:	4620      	mov	r0, r4
    efe8:	f00b fc5f 	bl	1a8aa <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    efec:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eff0:	4620      	mov	r0, r4
    eff2:	f00b fc5a 	bl	1a8aa <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    eff6:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    effa:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    effc:	ea4f 0141 	mov.w	r1, r1, lsl #1
    f000:	4822      	ldr	r0, [pc, #136]	; (f08c <bt_le_adv_resume+0xe4>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    f002:	bf48      	it	mi
    f004:	f041 0101 	orrmi.w	r1, r1, #1
    f008:	f00b fc4f 	bl	1a8aa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    f00c:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    f00e:	bf48      	it	mi
    f010:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    f014:	481e      	ldr	r0, [pc, #120]	; (f090 <bt_le_adv_resume+0xe8>)
    f016:	1cfb      	adds	r3, r7, #3
    f018:	f7ff fc80 	bl	e91c <bt_id_set_adv_own_addr>
		if (err) {
    f01c:	4605      	mov	r5, r0
    f01e:	b190      	cbz	r0, f046 <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
    f020:	466c      	mov	r4, sp
    f022:	b088      	sub	sp, #32
    f024:	466a      	mov	r2, sp
    f026:	4b1b      	ldr	r3, [pc, #108]	; (f094 <bt_le_adv_resume+0xec>)
    f028:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f02c:	2303      	movs	r3, #3
    f02e:	f842 3f10 	str.w	r3, [r2, #16]!
    f032:	2300      	movs	r3, #0
    f034:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f038:	4817      	ldr	r0, [pc, #92]	; (f098 <bt_le_adv_resume+0xf0>)
    f03a:	f7fb ff3b 	bl	aeb4 <z_impl_z_log_msg_static_create>
    f03e:	46a5      	mov	sp, r4
}
    f040:	370c      	adds	r7, #12
    f042:	46bd      	mov	sp, r7
    f044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
    f046:	2101      	movs	r1, #1
    f048:	4811      	ldr	r0, [pc, #68]	; (f090 <bt_le_adv_resume+0xe8>)
    f04a:	f00b fcd1 	bl	1a9f0 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
    f04e:	687e      	ldr	r6, [r7, #4]
	if (err) {
    f050:	b918      	cbnz	r0, f05a <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
    f052:	4630      	mov	r0, r6
    f054:	f00b fd99 	bl	1ab8a <bt_conn_unref>
	if (persist_paused) {
    f058:	e7f2      	b.n	f040 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f05a:	4629      	mov	r1, r5
    f05c:	4630      	mov	r0, r6
    f05e:	f000 fcb1 	bl	f9c4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f062:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    f066:	4809      	ldr	r0, [pc, #36]	; (f08c <bt_le_adv_resume+0xe4>)
    f068:	f00b fc22 	bl	1a8b0 <atomic_and>
    f06c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    f06e:	4630      	mov	r0, r6
    f070:	f00b fd8b 	bl	1ab8a <bt_conn_unref>
	if (persist_paused) {
    f074:	046b      	lsls	r3, r5, #17
    f076:	d5e3      	bpl.n	f040 <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f078:	e8d4 3fef 	ldaex	r3, [r4]
    f07c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f080:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f084:	2a00      	cmp	r2, #0
    f086:	d0db      	beq.n	f040 <bt_le_adv_resume+0x98>
    f088:	e7f6      	b.n	f078 <bt_le_adv_resume+0xd0>
    f08a:	bf00      	nop
    f08c:	20008028 	.word	0x20008028
    f090:	20008018 	.word	0x20008018
    f094:	00020527 	.word	0x00020527
    f098:	0001e524 	.word	0x0001e524

0000f09c <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    f09c:	b530      	push	{r4, r5, lr}
    f09e:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    f0a0:	2120      	movs	r1, #32
    f0a2:	a80a      	add	r0, sp, #40	; 0x28
    f0a4:	f7fe fa32 	bl	d50c <bt_hci_le_rand>
	if (ret) {
    f0a8:	4604      	mov	r4, r0
    f0aa:	bb18      	cbnz	r0, f0f4 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
    f0ac:	f00e fe5e 	bl	1dd6c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    f0b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    f0b4:	fba0 2305 	umull	r2, r3, r0, r5
    f0b8:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    f0bc:	2308      	movs	r3, #8
    f0be:	0bd2      	lsrs	r2, r2, #15
    f0c0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    f0c4:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
    f0c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    f0ca:	9300      	str	r3, [sp, #0]
    f0cc:	2220      	movs	r2, #32
    f0ce:	480b      	ldr	r0, [pc, #44]	; (f0fc <prng_reseed.constprop.0+0x60>)
    f0d0:	446b      	add	r3, sp
    f0d2:	a90a      	add	r1, sp, #40	; 0x28
    f0d4:	f00b f84d 	bl	1a172 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    f0d8:	b960      	cbnz	r0, f0f4 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
    f0da:	4b09      	ldr	r3, [pc, #36]	; (f100 <prng_reseed.constprop.0+0x64>)
    f0dc:	9309      	str	r3, [sp, #36]	; 0x24
    f0de:	2302      	movs	r3, #2
    f0e0:	9308      	str	r3, [sp, #32]
    f0e2:	4623      	mov	r3, r4
    f0e4:	f06f 0404 	mvn.w	r4, #4
    f0e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f0ec:	4805      	ldr	r0, [pc, #20]	; (f104 <prng_reseed.constprop.0+0x68>)
    f0ee:	aa08      	add	r2, sp, #32
    f0f0:	f7fb fee0 	bl	aeb4 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
    f0f4:	4620      	mov	r0, r4
    f0f6:	b013      	add	sp, #76	; 0x4c
    f0f8:	bd30      	pop	{r4, r5, pc}
    f0fa:	bf00      	nop
    f0fc:	20009158 	.word	0x20009158
    f100:	00020564 	.word	0x00020564
    f104:	0001e56c 	.word	0x0001e56c

0000f108 <prng_init>:

int prng_init(void)
{
    f108:	b510      	push	{r4, lr}
    f10a:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    f10c:	2108      	movs	r1, #8
    f10e:	4668      	mov	r0, sp
    f110:	f7fe f9fc 	bl	d50c <bt_hci_le_rand>
	if (ret) {
    f114:	4604      	mov	r4, r0
    f116:	b990      	cbnz	r0, f13e <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    f118:	2208      	movs	r2, #8
    f11a:	4669      	mov	r1, sp
    f11c:	480b      	ldr	r0, [pc, #44]	; (f14c <prng_init+0x44>)
    f11e:	f00b f808 	bl	1a132 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    f122:	b978      	cbnz	r0, f144 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
    f124:	4b0a      	ldr	r3, [pc, #40]	; (f150 <prng_init+0x48>)
    f126:	9307      	str	r3, [sp, #28]
    f128:	2302      	movs	r3, #2
    f12a:	9306      	str	r3, [sp, #24]
    f12c:	4623      	mov	r3, r4
		return -EIO;
    f12e:	f06f 0404 	mvn.w	r4, #4
    f132:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f136:	4807      	ldr	r0, [pc, #28]	; (f154 <prng_init+0x4c>)
    f138:	aa06      	add	r2, sp, #24
    f13a:	f7fb febb 	bl	aeb4 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    f13e:	4620      	mov	r0, r4
    f140:	b008      	add	sp, #32
    f142:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    f144:	f7ff ffaa 	bl	f09c <prng_reseed.constprop.0>
    f148:	4604      	mov	r4, r0
    f14a:	e7f8      	b.n	f13e <prng_init+0x36>
    f14c:	20009158 	.word	0x20009158
    f150:	0002057b 	.word	0x0002057b
    f154:	0001e56c 	.word	0x0001e56c

0000f158 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    f158:	b538      	push	{r3, r4, r5, lr}
    f15a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
    f15c:	4604      	mov	r4, r0
    f15e:	b198      	cbz	r0, f188 <bt_rand+0x30>
    f160:	b191      	cbz	r1, f188 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
    f162:	4a0b      	ldr	r2, [pc, #44]	; (f190 <bt_rand+0x38>)
    f164:	f00b f81e 	bl	1a1a4 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    f168:	1c43      	adds	r3, r0, #1
    f16a:	d107      	bne.n	f17c <bt_rand+0x24>
		ret = prng_reseed(&prng);
    f16c:	f7ff ff96 	bl	f09c <prng_reseed.constprop.0>
		if (ret) {
    f170:	b948      	cbnz	r0, f186 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    f172:	4629      	mov	r1, r5
    f174:	4620      	mov	r0, r4
    f176:	4a06      	ldr	r2, [pc, #24]	; (f190 <bt_rand+0x38>)
    f178:	f00b f814 	bl	1a1a4 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    f17c:	2801      	cmp	r0, #1
    f17e:	bf0c      	ite	eq
    f180:	2000      	moveq	r0, #0
    f182:	f06f 0004 	mvnne.w	r0, #4
}
    f186:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f188:	f06f 0015 	mvn.w	r0, #21
    f18c:	e7fb      	b.n	f186 <bt_rand+0x2e>
    f18e:	bf00      	nop
    f190:	20009158 	.word	0x20009158

0000f194 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    f194:	2240      	movs	r2, #64	; 0x40
{
    f196:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    f198:	4903      	ldr	r1, [pc, #12]	; (f1a8 <bt_pub_key_is_debug+0x14>)
    f19a:	f00b f8d8 	bl	1a34e <memcmp>
}
    f19e:	fab0 f080 	clz	r0, r0
    f1a2:	0940      	lsrs	r0, r0, #5
    f1a4:	bd08      	pop	{r3, pc}
    f1a6:	bf00      	nop
    f1a8:	0002062b 	.word	0x0002062b

0000f1ac <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    f1ae:	4b3d      	ldr	r3, [pc, #244]	; (f2a4 <bt_pub_key_gen+0xf8>)
{
    f1b0:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    f1b2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
    f1b6:	f003 0306 	and.w	r3, r3, #6
    f1ba:	2b06      	cmp	r3, #6
    f1bc:	d00f      	beq.n	f1de <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
    f1be:	4b3a      	ldr	r3, [pc, #232]	; (f2a8 <bt_pub_key_gen+0xfc>)
    f1c0:	9305      	str	r3, [sp, #20]
    f1c2:	2302      	movs	r3, #2
    f1c4:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
    f1c6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    f1ca:	2300      	movs	r3, #0
    f1cc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f1d0:	4836      	ldr	r0, [pc, #216]	; (f2ac <bt_pub_key_gen+0x100>)
    f1d2:	aa04      	add	r2, sp, #16
    f1d4:	f7fb fe6e 	bl	aeb4 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    f1d8:	4628      	mov	r0, r5
    f1da:	b007      	add	sp, #28
    f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
    f1de:	2800      	cmp	r0, #0
    f1e0:	d05d      	beq.n	f29e <bt_pub_key_gen+0xf2>
	return list->head;
    f1e2:	4e33      	ldr	r6, [pc, #204]	; (f2b0 <bt_pub_key_gen+0x104>)
    f1e4:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f1e6:	b1a2      	cbz	r2, f212 <bt_pub_key_gen+0x66>
    f1e8:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    f1ea:	4283      	cmp	r3, r0
    f1ec:	d10d      	bne.n	f20a <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
    f1ee:	4b31      	ldr	r3, [pc, #196]	; (f2b4 <bt_pub_key_gen+0x108>)
    f1f0:	9305      	str	r3, [sp, #20]
    f1f2:	2302      	movs	r3, #2
    f1f4:	9304      	str	r3, [sp, #16]
    f1f6:	2300      	movs	r3, #0
    f1f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f1fc:	482b      	ldr	r0, [pc, #172]	; (f2ac <bt_pub_key_gen+0x100>)
    f1fe:	aa04      	add	r2, sp, #16
    f200:	f7fb fe58 	bl	aeb4 <z_impl_z_log_msg_static_create>
			return -EALREADY;
    f204:	f06f 0577 	mvn.w	r5, #119	; 0x77
    f208:	e7e6      	b.n	f1d8 <bt_pub_key_gen+0x2c>
	return node->next;
    f20a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f20c:	b10b      	cbz	r3, f212 <bt_pub_key_gen+0x66>
    f20e:	3b04      	subs	r3, #4
    f210:	e7eb      	b.n	f1ea <bt_pub_key_gen+0x3e>
	parent->next = child;
    f212:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    f214:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    f216:	1d03      	adds	r3, r0, #4
	list->head = node;
    f218:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    f21a:	b902      	cbnz	r2, f21e <bt_pub_key_gen+0x72>
	list->tail = node;
    f21c:	6073      	str	r3, [r6, #4]
    f21e:	4c26      	ldr	r4, [pc, #152]	; (f2b8 <bt_pub_key_gen+0x10c>)
    f220:	e8d4 7fef 	ldaex	r7, [r4]
    f224:	f047 0320 	orr.w	r3, r7, #32
    f228:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f22c:	2a00      	cmp	r2, #0
    f22e:	d1f7      	bne.n	f220 <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    f230:	f017 0720 	ands.w	r7, r7, #32
    f234:	d001      	beq.n	f23a <bt_pub_key_gen+0x8e>
	return 0;
    f236:	2500      	movs	r5, #0
    f238:	e7ce      	b.n	f1d8 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f23a:	e8d4 3fef 	ldaex	r3, [r4]
    f23e:	f023 0310 	bic.w	r3, r3, #16
    f242:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f246:	2a00      	cmp	r2, #0
    f248:	d1f7      	bne.n	f23a <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    f24a:	463a      	mov	r2, r7
    f24c:	4639      	mov	r1, r7
    f24e:	f242 0025 	movw	r0, #8229	; 0x2025
    f252:	f7fe f8b3 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    f256:	4605      	mov	r5, r0
    f258:	2800      	cmp	r0, #0
    f25a:	d0ec      	beq.n	f236 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
    f25c:	4b17      	ldr	r3, [pc, #92]	; (f2bc <bt_pub_key_gen+0x110>)
    f25e:	9305      	str	r3, [sp, #20]
    f260:	2302      	movs	r3, #2
    f262:	9304      	str	r3, [sp, #16]
    f264:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f268:	463b      	mov	r3, r7
    f26a:	4810      	ldr	r0, [pc, #64]	; (f2ac <bt_pub_key_gen+0x100>)
    f26c:	aa04      	add	r2, sp, #16
    f26e:	f7fb fe21 	bl	aeb4 <z_impl_z_log_msg_static_create>
    f272:	e8d4 3fef 	ldaex	r3, [r4]
    f276:	f023 0320 	bic.w	r3, r3, #32
    f27a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f27e:	2a00      	cmp	r2, #0
    f280:	d1f7      	bne.n	f272 <bt_pub_key_gen+0xc6>
	return list->head;
    f282:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f284:	b13c      	cbz	r4, f296 <bt_pub_key_gen+0xea>
			if (cb->func) {
    f286:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f28a:	3c04      	subs	r4, #4
			if (cb->func) {
    f28c:	b10b      	cbz	r3, f292 <bt_pub_key_gen+0xe6>
				cb->func(NULL);
    f28e:	2000      	movs	r0, #0
    f290:	4798      	blx	r3
	return node->next;
    f292:	6864      	ldr	r4, [r4, #4]
    f294:	e7f6      	b.n	f284 <bt_pub_key_gen+0xd8>
	list->head = NULL;
    f296:	2300      	movs	r3, #0
	list->tail = NULL;
    f298:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    f29c:	e79c      	b.n	f1d8 <bt_pub_key_gen+0x2c>
		return -EINVAL;
    f29e:	f06f 0515 	mvn.w	r5, #21
    f2a2:	e799      	b.n	f1d8 <bt_pub_key_gen+0x2c>
    f2a4:	20008000 	.word	0x20008000
    f2a8:	000205a4 	.word	0x000205a4
    f2ac:	0001e54c 	.word	0x0001e54c
    f2b0:	200098a8 	.word	0x200098a8
    f2b4:	000205c3 	.word	0x000205c3
    f2b8:	200080d4 	.word	0x200080d4
    f2bc:	000205df 	.word	0x000205df

0000f2c0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f2c0:	4b04      	ldr	r3, [pc, #16]	; (f2d4 <bt_pub_key_get+0x14>)
    f2c2:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
    f2c6:	f013 0f10 	tst.w	r3, #16
}
    f2ca:	4803      	ldr	r0, [pc, #12]	; (f2d8 <bt_pub_key_get+0x18>)
    f2cc:	bf08      	it	eq
    f2ce:	2000      	moveq	r0, #0
    f2d0:	4770      	bx	lr
    f2d2:	bf00      	nop
    f2d4:	200080d4 	.word	0x200080d4
    f2d8:	20009cfd 	.word	0x20009cfd

0000f2dc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
    f2e0:	4d25      	ldr	r5, [pc, #148]	; (f378 <bt_dh_key_gen+0x9c>)
{
    f2e2:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    f2e4:	682b      	ldr	r3, [r5, #0]
{
    f2e6:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
    f2e8:	428b      	cmp	r3, r1
    f2ea:	d03f      	beq.n	f36c <bt_dh_key_gen+0x90>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    f2ec:	b12b      	cbz	r3, f2fa <bt_dh_key_gen+0x1e>
		return -EBUSY;
    f2ee:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    f2f2:	4620      	mov	r0, r4
    f2f4:	46bd      	mov	sp, r7
    f2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2fa:	4b20      	ldr	r3, [pc, #128]	; (f37c <bt_dh_key_gen+0xa0>)
    f2fc:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    f300:	f3c2 1840 	ubfx	r8, r2, #5, #1
    f304:	0692      	lsls	r2, r2, #26
    f306:	d4f2      	bmi.n	f2ee <bt_dh_key_gen+0x12>
    f308:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    f30c:	06db      	lsls	r3, r3, #27
    f30e:	d530      	bpl.n	f372 <bt_dh_key_gen+0x96>
	dh_key_cb = cb;
    f310:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    f312:	f242 0026 	movw	r0, #8230	; 0x2026
    f316:	2140      	movs	r1, #64	; 0x40
    f318:	f7fe f816 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
    f31c:	4604      	mov	r4, r0
    f31e:	b310      	cbz	r0, f366 <bt_dh_key_gen+0x8a>
	return net_buf_simple_add(&buf->b, len);
    f320:	2140      	movs	r1, #64	; 0x40
    f322:	300c      	adds	r0, #12
    f324:	f00d f90f 	bl	1c546 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    f328:	2240      	movs	r2, #64	; 0x40
    f32a:	4631      	mov	r1, r6
    f32c:	f00b f81f 	bl	1a36e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    f330:	4621      	mov	r1, r4
    f332:	4642      	mov	r2, r8
    f334:	f242 0026 	movw	r0, #8230	; 0x2026
    f338:	f7fe f840 	bl	d3bc <bt_hci_cmd_send_sync>
	if (err) {
    f33c:	4604      	mov	r4, r0
    f33e:	2800      	cmp	r0, #0
    f340:	d0d7      	beq.n	f2f2 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
    f342:	2300      	movs	r3, #0
    f344:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
    f346:	466d      	mov	r5, sp
    f348:	b088      	sub	sp, #32
    f34a:	466a      	mov	r2, sp
    f34c:	490c      	ldr	r1, [pc, #48]	; (f380 <bt_dh_key_gen+0xa4>)
    f34e:	e9c2 1405 	strd	r1, r4, [r2, #20]
    f352:	2103      	movs	r1, #3
    f354:	f842 1f10 	str.w	r1, [r2, #16]!
    f358:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f35c:	4809      	ldr	r0, [pc, #36]	; (f384 <bt_dh_key_gen+0xa8>)
    f35e:	f7fb fda9 	bl	aeb4 <z_impl_z_log_msg_static_create>
    f362:	46ad      	mov	sp, r5
		return err;
    f364:	e7c5      	b.n	f2f2 <bt_dh_key_gen+0x16>
		return -ENOBUFS;
    f366:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f36a:	e7ea      	b.n	f342 <bt_dh_key_gen+0x66>
		return -EALREADY;
    f36c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f370:	e7bf      	b.n	f2f2 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
    f372:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    f376:	e7bc      	b.n	f2f2 <bt_dh_key_gen+0x16>
    f378:	200098a4 	.word	0x200098a4
    f37c:	200080d4 	.word	0x200080d4
    f380:	00020609 	.word	0x00020609
    f384:	0001e54c 	.word	0x0001e54c

0000f388 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f38a:	4c17      	ldr	r4, [pc, #92]	; (f3e8 <bt_hci_evt_le_pkey_complete+0x60>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    f38c:	68c6      	ldr	r6, [r0, #12]
    f38e:	e8d4 3fef 	ldaex	r3, [r4]
    f392:	f023 0320 	bic.w	r3, r3, #32
    f396:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f39a:	2a00      	cmp	r2, #0
    f39c:	d1f7      	bne.n	f38e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    f39e:	7833      	ldrb	r3, [r6, #0]
    f3a0:	b963      	cbnz	r3, f3bc <bt_hci_evt_le_pkey_complete+0x34>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    f3a2:	2240      	movs	r2, #64	; 0x40
    f3a4:	4811      	ldr	r0, [pc, #68]	; (f3ec <bt_hci_evt_le_pkey_complete+0x64>)
    f3a6:	1c71      	adds	r1, r6, #1
    f3a8:	f00a ffe1 	bl	1a36e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f3ac:	e8d4 3fef 	ldaex	r3, [r4]
    f3b0:	f043 0310 	orr.w	r3, r3, #16
    f3b4:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f3b8:	2a00      	cmp	r2, #0
    f3ba:	d1f7      	bne.n	f3ac <bt_hci_evt_le_pkey_complete+0x24>
	return list->head;
    f3bc:	4d0c      	ldr	r5, [pc, #48]	; (f3f0 <bt_hci_evt_le_pkey_complete+0x68>)
    f3be:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f3c0:	b16c      	cbz	r4, f3de <bt_hci_evt_le_pkey_complete+0x56>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    f3c2:	4f0a      	ldr	r7, [pc, #40]	; (f3ec <bt_hci_evt_le_pkey_complete+0x64>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f3c4:	3c04      	subs	r4, #4
		if (cb->func) {
    f3c6:	6823      	ldr	r3, [r4, #0]
    f3c8:	b12b      	cbz	r3, f3d6 <bt_hci_evt_le_pkey_complete+0x4e>
			cb->func(evt->status ? NULL : pub_key);
    f3ca:	7832      	ldrb	r2, [r6, #0]
    f3cc:	2a00      	cmp	r2, #0
    f3ce:	bf0c      	ite	eq
    f3d0:	4638      	moveq	r0, r7
    f3d2:	2000      	movne	r0, #0
    f3d4:	4798      	blx	r3
	return node->next;
    f3d6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f3d8:	b10c      	cbz	r4, f3de <bt_hci_evt_le_pkey_complete+0x56>
    f3da:	3c04      	subs	r4, #4
    f3dc:	e7f3      	b.n	f3c6 <bt_hci_evt_le_pkey_complete+0x3e>
	list->head = NULL;
    f3de:	2300      	movs	r3, #0
	list->tail = NULL;
    f3e0:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    f3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3e6:	bf00      	nop
    f3e8:	200080d4 	.word	0x200080d4
    f3ec:	20009cfd 	.word	0x20009cfd
    f3f0:	200098a8 	.word	0x200098a8

0000f3f4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    f3f4:	4905      	ldr	r1, [pc, #20]	; (f40c <bt_hci_evt_le_dhkey_complete+0x18>)
    f3f6:	680b      	ldr	r3, [r1, #0]
    f3f8:	b133      	cbz	r3, f408 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    f3fa:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    f3fc:	2000      	movs	r0, #0
    f3fe:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    f400:	7811      	ldrb	r1, [r2, #0]
    f402:	b901      	cbnz	r1, f406 <bt_hci_evt_le_dhkey_complete+0x12>
    f404:	1c50      	adds	r0, r2, #1
    f406:	4718      	bx	r3
	}
}
    f408:	4770      	bx	lr
    f40a:	bf00      	nop
    f40c:	200098a4 	.word	0x200098a4

0000f410 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    f410:	b570      	push	{r4, r5, r6, lr}
    f412:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    f414:	4b0a      	ldr	r3, [pc, #40]	; (f440 <notify_connected+0x30>)
    f416:	681d      	ldr	r5, [r3, #0]
    f418:	b925      	cbnz	r5, f424 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f41a:	4d0a      	ldr	r5, [pc, #40]	; (f444 <notify_connected+0x34>)
    f41c:	4e0a      	ldr	r6, [pc, #40]	; (f448 <notify_connected+0x38>)
    f41e:	42b5      	cmp	r5, r6
    f420:	d307      	bcc.n	f432 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    f422:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    f424:	682b      	ldr	r3, [r5, #0]
    f426:	b113      	cbz	r3, f42e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    f428:	4620      	mov	r0, r4
    f42a:	7b21      	ldrb	r1, [r4, #12]
    f42c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f42e:	69ad      	ldr	r5, [r5, #24]
    f430:	e7f2      	b.n	f418 <notify_connected+0x8>
		if (cb->connected) {
    f432:	682b      	ldr	r3, [r5, #0]
    f434:	b113      	cbz	r3, f43c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    f436:	4620      	mov	r0, r4
    f438:	7b21      	ldrb	r1, [r4, #12]
    f43a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f43c:	351c      	adds	r5, #28
    f43e:	e7ee      	b.n	f41e <notify_connected+0xe>
    f440:	200098e0 	.word	0x200098e0
    f444:	0001e4ec 	.word	0x0001e4ec
    f448:	0001e4ec 	.word	0x0001e4ec

0000f44c <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
    f44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
    f44e:	4b07      	ldr	r3, [pc, #28]	; (f46c <bt_conn_create_pdu_timeout.part.0+0x20>)
    f450:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f454:	9305      	str	r3, [sp, #20]
    f456:	2302      	movs	r3, #2
    f458:	4805      	ldr	r0, [pc, #20]	; (f470 <bt_conn_create_pdu_timeout.part.0+0x24>)
    f45a:	aa04      	add	r2, sp, #16
    f45c:	9304      	str	r3, [sp, #16]
    f45e:	f00b fb4e 	bl	1aafe <z_log_msg_static_create.constprop.0>
}
    f462:	2000      	movs	r0, #0
    f464:	b007      	add	sp, #28
    f466:	f85d fb04 	ldr.w	pc, [sp], #4
    f46a:	bf00      	nop
    f46c:	00020672 	.word	0x00020672
    f470:	0001e534 	.word	0x0001e534

0000f474 <tx_notify>:
{
    f474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f478:	4604      	mov	r4, r0
	tx->cb = NULL;
    f47a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
    f47e:	4f14      	ldr	r7, [pc, #80]	; (f4d0 <tx_notify+0x5c>)
	__asm__ volatile(
    f480:	f04f 0220 	mov.w	r2, #32
    f484:	f3ef 8311 	mrs	r3, BASEPRI
    f488:	f382 8812 	msr	BASEPRI_MAX, r2
    f48c:	f3bf 8f6f 	isb	sy
	return list->head;
    f490:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    f492:	b929      	cbnz	r1, f4a0 <tx_notify+0x2c>
	__asm__ volatile(
    f494:	f383 8811 	msr	BASEPRI, r3
    f498:	f3bf 8f6f 	isb	sy
}
    f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f4a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    f4a2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f4a4:	4281      	cmp	r1, r0
	list->tail = node;
    f4a6:	bf08      	it	eq
    f4a8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    f4aa:	6222      	str	r2, [r4, #32]
    f4ac:	f383 8811 	msr	BASEPRI, r3
    f4b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    f4b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
    f4b8:	4638      	mov	r0, r7
	tx->user_data = NULL;
    f4ba:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
    f4be:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
    f4c2:	f00e f9d7 	bl	1d874 <k_queue_append>
		cb(conn, user_data, 0);
    f4c6:	2200      	movs	r2, #0
    f4c8:	4631      	mov	r1, r6
    f4ca:	4620      	mov	r0, r4
    f4cc:	47a8      	blx	r5
	while (1) {
    f4ce:	e7d7      	b.n	f480 <tx_notify+0xc>
    f4d0:	200085f4 	.word	0x200085f4

0000f4d4 <conn_tx_destroy>:
	tx->cb = NULL;
    f4d4:	2200      	movs	r2, #0
{
    f4d6:	b570      	push	{r4, r5, r6, lr}
    f4d8:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
    f4da:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    f4de:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
    f4e0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
    f4e4:	4805      	ldr	r0, [pc, #20]	; (f4fc <conn_tx_destroy+0x28>)
    f4e6:	f00e f9c5 	bl	1d874 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    f4ea:	4631      	mov	r1, r6
    f4ec:	4620      	mov	r0, r4
    f4ee:	462b      	mov	r3, r5
}
    f4f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    f4f4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
    f4f8:	4718      	bx	r3
    f4fa:	bf00      	nop
    f4fc:	200085f4 	.word	0x200085f4

0000f500 <send_frag>:
{
    f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f504:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
    f506:	f8df 9180 	ldr.w	r9, [pc, #384]	; f688 <send_frag+0x188>
{
    f50a:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
    f50c:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
    f510:	4604      	mov	r4, r0
	return NULL;
    f512:	2b00      	cmp	r3, #0
{
    f514:	af00      	add	r7, sp, #0
	return NULL;
    f516:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
    f51a:	460e      	mov	r6, r1
	return NULL;
    f51c:	bf08      	it	eq
    f51e:	2000      	moveq	r0, #0
{
    f520:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
    f522:	2200      	movs	r2, #0
    f524:	2300      	movs	r3, #0
    f526:	f008 f971 	bl	1780c <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    f52a:	2800      	cmp	r0, #0
    f52c:	f040 80a9 	bne.w	f682 <send_frag+0x182>
	if (frag) {
    f530:	2d00      	cmp	r5, #0
    f532:	f000 8085 	beq.w	f640 <send_frag+0x140>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    f536:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    f53a:	f105 0b0c 	add.w	fp, r5, #12
    f53e:	4658      	mov	r0, fp
    f540:	607b      	str	r3, [r7, #4]
    f542:	f00d f844 	bl	1c5ce <net_buf_simple_tailroom>
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	4298      	cmp	r0, r3
    f54a:	d974      	bls.n	f636 <send_frag+0x136>
	return bt_dev.le.acl_mtu;
    f54c:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f550:	f856 1f0c 	ldr.w	r1, [r6, #12]!
    f554:	4658      	mov	r0, fp
    f556:	607a      	str	r2, [r7, #4]
    f558:	f00c fffb 	bl	1c552 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    f55c:	687a      	ldr	r2, [r7, #4]
    f55e:	4630      	mov	r0, r6
    f560:	4611      	mov	r1, r2
    f562:	f00d f818 	bl	1c596 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    f566:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    f568:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    f56a:	2b07      	cmp	r3, #7
    f56c:	f040 8086 	bne.w	f67c <send_frag+0x17c>
	__asm__ volatile(
    f570:	f04f 0320 	mov.w	r3, #32
    f574:	f3ef 8211 	mrs	r2, BASEPRI
    f578:	f383 8812 	msr	BASEPRI_MAX, r3
    f57c:	f3bf 8f6f 	isb	sy
	if (tx) {
    f580:	2e00      	cmp	r6, #0
    f582:	d068      	beq.n	f656 <send_frag+0x156>
	parent->next = child;
    f584:	2300      	movs	r3, #0
    f586:	6033      	str	r3, [r6, #0]
	return list->tail;
    f588:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    f58a:	2b00      	cmp	r3, #0
    f58c:	d160      	bne.n	f650 <send_frag+0x150>
	list->head = node;
    f58e:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
    f592:	f382 8811 	msr	BASEPRI, r2
    f596:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    f59a:	2104      	movs	r1, #4
    f59c:	f105 000c 	add.w	r0, r5, #12
    f5a0:	f00c ffe8 	bl	1c574 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f5a4:	8823      	ldrh	r3, [r4, #0]
    f5a6:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    f5aa:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    f5ae:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f5b2:	8a2b      	ldrh	r3, [r5, #16]
    f5b4:	3b04      	subs	r3, #4
    f5b6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f5b8:	2302      	movs	r3, #2
	return bt_send(buf);
    f5ba:	4628      	mov	r0, r5
    f5bc:	762b      	strb	r3, [r5, #24]
    f5be:	f7fe fa33 	bl	da28 <bt_send>
	if (err) {
    f5c2:	4680      	mov	r8, r0
    f5c4:	b390      	cbz	r0, f62c <send_frag+0x12c>
		LOG_ERR("Unable to send to driver (err %d)", err);
    f5c6:	46eb      	mov	fp, sp
    f5c8:	b088      	sub	sp, #32
    f5ca:	466a      	mov	r2, sp
    f5cc:	4b2f      	ldr	r3, [pc, #188]	; (f68c <send_frag+0x18c>)
    f5ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f5d2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f5d6:	2303      	movs	r3, #3
    f5d8:	482d      	ldr	r0, [pc, #180]	; (f690 <send_frag+0x190>)
    f5da:	f842 3f10 	str.w	r3, [r2, #16]!
    f5de:	f00b fa8e 	bl	1aafe <z_log_msg_static_create.constprop.0>
    f5e2:	46dd      	mov	sp, fp
	__asm__ volatile(
    f5e4:	f04f 0320 	mov.w	r3, #32
    f5e8:	f3ef 8811 	mrs	r8, BASEPRI
    f5ec:	f383 8812 	msr	BASEPRI_MAX, r3
    f5f0:	f3bf 8f6f 	isb	sy
		if (tx) {
    f5f4:	2e00      	cmp	r6, #0
    f5f6:	d03b      	beq.n	f670 <send_frag+0x170>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
    f5f8:	4631      	mov	r1, r6
    f5fa:	f104 0014 	add.w	r0, r4, #20
    f5fe:	f00b fa58 	bl	1aab2 <sys_slist_find_and_remove>
	__asm__ volatile(
    f602:	f388 8811 	msr	BASEPRI, r8
    f606:	f3bf 8f6f 	isb	sy
		err = -EIO;
    f60a:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
    f60e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
    f612:	4820      	ldr	r0, [pc, #128]	; (f694 <send_frag+0x194>)
    f614:	2b00      	cmp	r3, #0
    f616:	bf08      	it	eq
    f618:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    f61a:	f008 f8d1 	bl	177c0 <z_impl_k_sem_give>
	if (tx) {
    f61e:	b12e      	cbz	r6, f62c <send_frag+0x12c>
		tx_data(buf)->tx = NULL;
    f620:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
    f622:	4631      	mov	r1, r6
    f624:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    f626:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
    f628:	f7ff ff54 	bl	f4d4 <conn_tx_destroy>
}
    f62c:	4640      	mov	r0, r8
    f62e:	370c      	adds	r7, #12
    f630:	46bd      	mov	sp, r7
    f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    f636:	4658      	mov	r0, fp
    f638:	f00c ffc9 	bl	1c5ce <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    f63c:	b282      	uxth	r2, r0
    f63e:	e787      	b.n	f550 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    f640:	2200      	movs	r2, #0
    f642:	2300      	movs	r3, #0
    f644:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f648:	f00c ff22 	bl	1c490 <net_buf_get>
    f64c:	4605      	mov	r5, r0
		frag = buf;
    f64e:	e78a      	b.n	f566 <send_frag+0x66>
	parent->next = child;
    f650:	601e      	str	r6, [r3, #0]
	list->tail = node;
    f652:	61a6      	str	r6, [r4, #24]
}
    f654:	e79d      	b.n	f592 <send_frag+0x92>
	return list->tail;
    f656:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    f658:	b133      	cbz	r3, f668 <send_frag+0x168>
			pending_no_cb = &tail_tx->pending_no_cb;
    f65a:	f103 0a0c 	add.w	sl, r3, #12
    f65e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    f660:	3301      	adds	r3, #1
    f662:	f8ca 3000 	str.w	r3, [sl]
    f666:	e794      	b.n	f592 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
    f668:	69e3      	ldr	r3, [r4, #28]
    f66a:	f104 0a1c 	add.w	sl, r4, #28
    f66e:	e7f7      	b.n	f660 <send_frag+0x160>
			(*pending_no_cb)--;
    f670:	f8da 3000 	ldr.w	r3, [sl]
    f674:	3b01      	subs	r3, #1
    f676:	f8ca 3000 	str.w	r3, [sl]
    f67a:	e7c2      	b.n	f602 <send_frag+0x102>
		err = -ENOTCONN;
    f67c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    f680:	e7c5      	b.n	f60e <send_frag+0x10e>
		return -ENOBUFS;
    f682:	f06f 0868 	mvn.w	r8, #104	; 0x68
    f686:	e7d1      	b.n	f62c <send_frag+0x12c>
    f688:	20008000 	.word	0x20008000
    f68c:	0001fe41 	.word	0x0001fe41
    f690:	0001e534 	.word	0x0001e534
    f694:	20008108 	.word	0x20008108

0000f698 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    f698:	4804      	ldr	r0, [pc, #16]	; (f6ac <bt_conn_get_pkts+0x14>)
    f69a:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
    f69e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    f6a2:	2b00      	cmp	r3, #0
}
    f6a4:	bf08      	it	eq
    f6a6:	2000      	moveq	r0, #0
    f6a8:	4770      	bx	lr
    f6aa:	bf00      	nop
    f6ac:	20008000 	.word	0x20008000

0000f6b0 <bt_conn_new>:
{
    f6b0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    f6b2:	2200      	movs	r2, #0
    f6b4:	4604      	mov	r4, r0
    f6b6:	428a      	cmp	r2, r1
    f6b8:	d102      	bne.n	f6c0 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    f6ba:	2400      	movs	r4, #0
}
    f6bc:	4620      	mov	r0, r4
    f6be:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f6c0:	2001      	movs	r0, #1
    f6c2:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    f6c6:	e8d3 5fef 	ldaex	r5, [r3]
    f6ca:	2d00      	cmp	r5, #0
    f6cc:	d104      	bne.n	f6d8 <bt_conn_new+0x28>
    f6ce:	e8c3 0fec 	stlex	ip, r0, [r3]
    f6d2:	f1bc 0f00 	cmp.w	ip, #0
    f6d6:	d1f6      	bne.n	f6c6 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    f6d8:	d002      	beq.n	f6e0 <bt_conn_new+0x30>
    f6da:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    f6dc:	4402      	add	r2, r0
    f6de:	e7ea      	b.n	f6b6 <bt_conn_new+0x6>
	if (!conn) {
    f6e0:	2c00      	cmp	r4, #0
    f6e2:	d0ea      	beq.n	f6ba <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    f6e4:	22bc      	movs	r2, #188	; 0xbc
    f6e6:	2100      	movs	r1, #0
    f6e8:	4620      	mov	r0, r4
    f6ea:	f00a fe4b 	bl	1a384 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    f6ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
    f6f2:	4904      	ldr	r1, [pc, #16]	; (f704 <bt_conn_new+0x54>)
    f6f4:	f00e f99e 	bl	1da34 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    f6f8:	4903      	ldr	r1, [pc, #12]	; (f708 <bt_conn_new+0x58>)
    f6fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f6fe:	f00e f955 	bl	1d9ac <k_work_init>
	return conn;
    f702:	e7db      	b.n	f6bc <bt_conn_new+0xc>
    f704:	0000ff29 	.word	0x0000ff29
    f708:	0001ab05 	.word	0x0001ab05

0000f70c <bt_conn_recv>:
{
    f70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f710:	4616      	mov	r6, r2
    f712:	b086      	sub	sp, #24
    f714:	af00      	add	r7, sp, #0
    f716:	4604      	mov	r4, r0
    f718:	460d      	mov	r5, r1
	tx_notify(conn);
    f71a:	f7ff feab 	bl	f474 <tx_notify>
	switch (flags) {
    f71e:	2e01      	cmp	r6, #1
    f720:	d030      	beq.n	f784 <bt_conn_recv+0x78>
    f722:	2e02      	cmp	r6, #2
    f724:	d16a      	bne.n	f7fc <bt_conn_recv+0xf0>
		if (conn->rx) {
    f726:	6923      	ldr	r3, [r4, #16]
    f728:	b163      	cbz	r3, f744 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
    f72a:	4b40      	ldr	r3, [pc, #256]	; (f82c <bt_conn_recv+0x120>)
    f72c:	4840      	ldr	r0, [pc, #256]	; (f830 <bt_conn_recv+0x124>)
    f72e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f732:	e9c7 6304 	strd	r6, r3, [r7, #16]
    f736:	f107 0210 	add.w	r2, r7, #16
    f73a:	f00b f9e0 	bl	1aafe <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    f73e:	4620      	mov	r0, r4
    f740:	f00b f9e3 	bl	1ab0a <bt_conn_reset_rx_state>
		conn->rx = buf;
    f744:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    f746:	6921      	ldr	r1, [r4, #16]
    f748:	8a08      	ldrh	r0, [r1, #16]
    f74a:	2801      	cmp	r0, #1
    f74c:	d930      	bls.n	f7b0 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    f74e:	68cb      	ldr	r3, [r1, #12]
    f750:	881b      	ldrh	r3, [r3, #0]
    f752:	3304      	adds	r3, #4
    f754:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    f756:	4298      	cmp	r0, r3
    f758:	d32a      	bcc.n	f7b0 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
    f75a:	d95f      	bls.n	f81c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
    f75c:	466d      	mov	r5, sp
    f75e:	b088      	sub	sp, #32
    f760:	466a      	mov	r2, sp
    f762:	61d3      	str	r3, [r2, #28]
    f764:	2304      	movs	r3, #4
    f766:	4933      	ldr	r1, [pc, #204]	; (f834 <bt_conn_recv+0x128>)
    f768:	e9c2 1005 	strd	r1, r0, [r2, #20]
    f76c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f770:	482f      	ldr	r0, [pc, #188]	; (f830 <bt_conn_recv+0x124>)
    f772:	f842 3f10 	str.w	r3, [r2, #16]!
    f776:	f00b f9c2 	bl	1aafe <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    f77a:	4620      	mov	r0, r4
    f77c:	46ad      	mov	sp, r5
    f77e:	f00b f9c4 	bl	1ab0a <bt_conn_reset_rx_state>
		return;
    f782:	e015      	b.n	f7b0 <bt_conn_recv+0xa4>
		if (!conn->rx) {
    f784:	6920      	ldr	r0, [r4, #16]
    f786:	b970      	cbnz	r0, f7a6 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
    f788:	4b2b      	ldr	r3, [pc, #172]	; (f838 <bt_conn_recv+0x12c>)
    f78a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f78e:	617b      	str	r3, [r7, #20]
    f790:	2302      	movs	r3, #2
    f792:	4827      	ldr	r0, [pc, #156]	; (f830 <bt_conn_recv+0x124>)
    f794:	613b      	str	r3, [r7, #16]
    f796:	f107 0210 	add.w	r2, r7, #16
    f79a:	f00b f9b0 	bl	1aafe <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    f79e:	4620      	mov	r0, r4
    f7a0:	f00b f9b3 	bl	1ab0a <bt_conn_reset_rx_state>
    f7a4:	e001      	b.n	f7aa <bt_conn_recv+0x9e>
		if (!buf->len) {
    f7a6:	8a2e      	ldrh	r6, [r5, #16]
    f7a8:	b936      	cbnz	r6, f7b8 <bt_conn_recv+0xac>
		net_buf_unref(buf);
    f7aa:	4628      	mov	r0, r5
    f7ac:	f004 fd02 	bl	141b4 <net_buf_unref>
}
    f7b0:	3718      	adds	r7, #24
    f7b2:	46bd      	mov	sp, r7
    f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7b8:	300c      	adds	r0, #12
    f7ba:	f00c ff08 	bl	1c5ce <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    f7be:	4286      	cmp	r6, r0
    f7c0:	d912      	bls.n	f7e8 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
    f7c2:	4b1e      	ldr	r3, [pc, #120]	; (f83c <bt_conn_recv+0x130>)
    f7c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f7c8:	617b      	str	r3, [r7, #20]
    f7ca:	2302      	movs	r3, #2
    f7cc:	4818      	ldr	r0, [pc, #96]	; (f830 <bt_conn_recv+0x124>)
    f7ce:	613b      	str	r3, [r7, #16]
    f7d0:	f107 0210 	add.w	r2, r7, #16
    f7d4:	f00b f993 	bl	1aafe <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    f7d8:	2200      	movs	r2, #0
    f7da:	4620      	mov	r0, r4
    f7dc:	6921      	ldr	r1, [r4, #16]
    f7de:	f000 fdf3 	bl	103c8 <bt_l2cap_recv>
			conn->rx = NULL;
    f7e2:	2300      	movs	r3, #0
    f7e4:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    f7e6:	e7e0      	b.n	f7aa <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f7e8:	6920      	ldr	r0, [r4, #16]
    f7ea:	8a2a      	ldrh	r2, [r5, #16]
    f7ec:	68e9      	ldr	r1, [r5, #12]
    f7ee:	300c      	adds	r0, #12
    f7f0:	f00c feaf 	bl	1c552 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    f7f4:	4628      	mov	r0, r5
    f7f6:	f004 fcdd 	bl	141b4 <net_buf_unref>
		break;
    f7fa:	e7a4      	b.n	f746 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    f7fc:	46e8      	mov	r8, sp
    f7fe:	b088      	sub	sp, #32
    f800:	466a      	mov	r2, sp
    f802:	4b0f      	ldr	r3, [pc, #60]	; (f840 <bt_conn_recv+0x134>)
    f804:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
    f808:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    f80c:	2303      	movs	r3, #3
    f80e:	4808      	ldr	r0, [pc, #32]	; (f830 <bt_conn_recv+0x124>)
    f810:	f842 3f10 	str.w	r3, [r2, #16]!
    f814:	f00b f973 	bl	1aafe <z_log_msg_static_create.constprop.0>
    f818:	46c5      	mov	sp, r8
    f81a:	e7c0      	b.n	f79e <bt_conn_recv+0x92>
	conn->rx = NULL;
    f81c:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
    f81e:	2201      	movs	r2, #1
    f820:	4620      	mov	r0, r4
	conn->rx = NULL;
    f822:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    f824:	f000 fdd0 	bl	103c8 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    f828:	e7c2      	b.n	f7b0 <bt_conn_recv+0xa4>
    f82a:	bf00      	nop
    f82c:	0002069b 	.word	0x0002069b
    f830:	0001e534 	.word	0x0001e534
    f834:	0002071b 	.word	0x0002071b
    f838:	000206b8 	.word	0x000206b8
    f83c:	000206d6 	.word	0x000206d6
    f840:	000206fd 	.word	0x000206fd

0000f844 <bt_conn_send_cb>:
{
    f844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f848:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f84a:	7acb      	ldrb	r3, [r1, #11]
{
    f84c:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f84e:	2b07      	cmp	r3, #7
{
    f850:	460d      	mov	r5, r1
    f852:	4617      	mov	r7, r2
    f854:	b086      	sub	sp, #24
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f856:	d80e      	bhi.n	f876 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
    f858:	4b2c      	ldr	r3, [pc, #176]	; (f90c <bt_conn_send_cb+0xc8>)
    f85a:	482d      	ldr	r0, [pc, #180]	; (f910 <bt_conn_send_cb+0xcc>)
    f85c:	9305      	str	r3, [sp, #20]
    f85e:	2302      	movs	r3, #2
    f860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f864:	aa04      	add	r2, sp, #16
    f866:	9304      	str	r3, [sp, #16]
    f868:	f00b f949 	bl	1aafe <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f86c:	f06f 0015 	mvn.w	r0, #21
}
    f870:	b006      	add	sp, #24
    f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    f876:	7b43      	ldrb	r3, [r0, #13]
    f878:	2b07      	cmp	r3, #7
    f87a:	d00c      	beq.n	f896 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
    f87c:	4b25      	ldr	r3, [pc, #148]	; (f914 <bt_conn_send_cb+0xd0>)
    f87e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f882:	9305      	str	r3, [sp, #20]
    f884:	2302      	movs	r3, #2
    f886:	4822      	ldr	r0, [pc, #136]	; (f910 <bt_conn_send_cb+0xcc>)
    f888:	aa04      	add	r2, sp, #16
    f88a:	9304      	str	r3, [sp, #16]
    f88c:	f00b f937 	bl	1aafe <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
    f890:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f894:	e7ec      	b.n	f870 <bt_conn_send_cb+0x2c>
	if (cb) {
    f896:	2a00      	cmp	r2, #0
    f898:	d033      	beq.n	f902 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
    f89a:	f008 fcc9 	bl	18230 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    f89e:	4b1e      	ldr	r3, [pc, #120]	; (f918 <bt_conn_send_cb+0xd4>)
    f8a0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    f8a2:	481e      	ldr	r0, [pc, #120]	; (f91c <bt_conn_send_cb+0xd8>)
    f8a4:	bf07      	ittee	eq
    f8a6:	2200      	moveq	r2, #0
    f8a8:	2300      	moveq	r3, #0
    f8aa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    f8ae:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    f8b2:	f007 ff51 	bl	17758 <z_impl_k_queue_get>
    f8b6:	4604      	mov	r4, r0
		if (!tx) {
    f8b8:	b328      	cbz	r0, f906 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
    f8ba:	7b73      	ldrb	r3, [r6, #13]
    f8bc:	2b07      	cmp	r3, #7
    f8be:	d012      	beq.n	f8e6 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
    f8c0:	4b17      	ldr	r3, [pc, #92]	; (f920 <bt_conn_send_cb+0xdc>)
    f8c2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f8c6:	9305      	str	r3, [sp, #20]
    f8c8:	2302      	movs	r3, #2
    f8ca:	4811      	ldr	r0, [pc, #68]	; (f910 <bt_conn_send_cb+0xcc>)
    f8cc:	aa04      	add	r2, sp, #16
    f8ce:	9304      	str	r3, [sp, #16]
    f8d0:	f00b f915 	bl	1aafe <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
    f8d4:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
    f8d6:	4621      	mov	r1, r4
	tx->user_data = NULL;
    f8d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
    f8dc:	480f      	ldr	r0, [pc, #60]	; (f91c <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
    f8de:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
    f8e0:	f00d ffc8 	bl	1d874 <k_queue_append>
}
    f8e4:	e7d4      	b.n	f890 <bt_conn_send_cb+0x4c>
		tx->pending_no_cb = 0U;
    f8e6:	2300      	movs	r3, #0
		tx->user_data = user_data;
    f8e8:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    f8ec:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    f8ee:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
    f8f0:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
    f8f2:	f106 0038 	add.w	r0, r6, #56	; 0x38
    f8f6:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
    f8f8:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
    f8fa:	f00c fdf8 	bl	1c4ee <net_buf_put>
	return 0;
    f8fe:	4620      	mov	r0, r4
    f900:	e7b6      	b.n	f870 <bt_conn_send_cb+0x2c>
    f902:	4614      	mov	r4, r2
    f904:	e7f3      	b.n	f8ee <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
    f906:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f90a:	e7b1      	b.n	f870 <bt_conn_send_cb+0x2c>
    f90c:	00020736 	.word	0x00020736
    f910:	0001e534 	.word	0x0001e534
    f914:	00020753 	.word	0x00020753
    f918:	200096d8 	.word	0x200096d8
    f91c:	200085f4 	.word	0x200085f4
    f920:	00020762 	.word	0x00020762

0000f924 <bt_conn_prepare_events>:
{
    f924:	b570      	push	{r4, r5, r6, lr}
    f926:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    f928:	481e      	ldr	r0, [pc, #120]	; (f9a4 <bt_conn_prepare_events+0x80>)
    f92a:	f00e fbbe 	bl	1e0aa <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f92e:	2200      	movs	r2, #0
    f930:	2101      	movs	r1, #1
    f932:	4620      	mov	r0, r4
    f934:	4b1b      	ldr	r3, [pc, #108]	; (f9a4 <bt_conn_prepare_events+0x80>)
    f936:	f00e fb9b 	bl	1e070 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
    f93a:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f93e:	4b1a      	ldr	r3, [pc, #104]	; (f9a8 <bt_conn_prepare_events+0x84>)
    f940:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
    f944:	b90a      	cbnz	r2, f94a <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f946:	2001      	movs	r0, #1
}
    f948:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    f94a:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
    f94e:	f813 3caf 	ldrb.w	r3, [r3, #-175]
    f952:	b953      	cbnz	r3, f96a <bt_conn_prepare_events+0x46>
    f954:	f06f 0140 	mvn.w	r1, #64	; 0x40
    f958:	1d28      	adds	r0, r5, #4
    f95a:	f00b f8c5 	bl	1aae8 <atomic_and>
    f95e:	0643      	lsls	r3, r0, #25
    f960:	d503      	bpl.n	f96a <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
    f962:	4628      	mov	r0, r5
    f964:	f00b f8da 	bl	1ab1c <conn_cleanup>
		return -ENOTCONN;
    f968:	e7ed      	b.n	f946 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    f96a:	7b6b      	ldrb	r3, [r5, #13]
    f96c:	2b07      	cmp	r3, #7
    f96e:	d1ea      	bne.n	f946 <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
    f970:	4b0e      	ldr	r3, [pc, #56]	; (f9ac <bt_conn_prepare_events+0x88>)
    f972:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    f976:	2a00      	cmp	r2, #0
    f978:	d0e5      	beq.n	f946 <bt_conn_prepare_events+0x22>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    f97a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
    f97e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    f980:	b159      	cbz	r1, f99a <bt_conn_prepare_events+0x76>
    f982:	b952      	cbnz	r2, f99a <bt_conn_prepare_events+0x76>
		k_poll_event_init(&events[0],
    f984:	2102      	movs	r1, #2
    f986:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
    f98a:	4630      	mov	r0, r6
    f98c:	f00e fb70 	bl	1e070 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    f990:	2301      	movs	r3, #1
			ev_count++;
    f992:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    f994:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    f998:	e7d6      	b.n	f948 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
    f99a:	2200      	movs	r2, #0
    f99c:	2104      	movs	r1, #4
    f99e:	4b04      	ldr	r3, [pc, #16]	; (f9b0 <bt_conn_prepare_events+0x8c>)
    f9a0:	e7f3      	b.n	f98a <bt_conn_prepare_events+0x66>
    f9a2:	bf00      	nop
    f9a4:	20008260 	.word	0x20008260
    f9a8:	2000934c 	.word	0x2000934c
    f9ac:	20008000 	.word	0x20008000
    f9b0:	200092c8 	.word	0x200092c8

0000f9b4 <bt_conn_lookup_handle>:
{
    f9b4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    f9b6:	2101      	movs	r1, #1
    f9b8:	4801      	ldr	r0, [pc, #4]	; (f9c0 <bt_conn_lookup_handle+0xc>)
    f9ba:	f00b b8fa 	b.w	1abb2 <conn_lookup_handle>
    f9be:	bf00      	nop
    f9c0:	20009290 	.word	0x20009290

0000f9c4 <bt_conn_set_state>:
{
    f9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    f9c8:	7b46      	ldrb	r6, [r0, #13]
{
    f9ca:	4604      	mov	r4, r0
	if (conn->state == state) {
    f9cc:	428e      	cmp	r6, r1
{
    f9ce:	460d      	mov	r5, r1
    f9d0:	af00      	add	r7, sp, #0
	if (conn->state == state) {
    f9d2:	d119      	bne.n	fa08 <bt_conn_set_state+0x44>
	switch (state) {
    f9d4:	2e08      	cmp	r6, #8
    f9d6:	bf98      	it	ls
    f9d8:	4b70      	ldrls	r3, [pc, #448]	; (fb9c <bt_conn_set_state+0x1d8>)
		LOG_WRN("no transition %s", state2str(state));
    f9da:	466c      	mov	r4, sp
    f9dc:	b088      	sub	sp, #32
    f9de:	bf94      	ite	ls
    f9e0:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
    f9e4:	4b6e      	ldrhi	r3, [pc, #440]	; (fba0 <bt_conn_set_state+0x1dc>)
		LOG_WRN("no transition %s", state2str(state));
    f9e6:	466a      	mov	r2, sp
    f9e8:	496e      	ldr	r1, [pc, #440]	; (fba4 <bt_conn_set_state+0x1e0>)
    f9ea:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f9ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    f9f2:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    f9f6:	8393      	strh	r3, [r2, #28]
    f9f8:	4b6b      	ldr	r3, [pc, #428]	; (fba8 <bt_conn_set_state+0x1e4>)
    f9fa:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
    f9fe:	486b      	ldr	r0, [pc, #428]	; (fbac <bt_conn_set_state+0x1e8>)
    fa00:	f00b f87d 	bl	1aafe <z_log_msg_static_create.constprop.0>
    fa04:	46a5      	mov	sp, r4
    fa06:	e04b      	b.n	faa0 <bt_conn_set_state+0xdc>
	conn->state = state;
    fa08:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    fa0a:	b926      	cbnz	r6, fa16 <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
    fa0c:	7883      	ldrb	r3, [r0, #2]
    fa0e:	2b08      	cmp	r3, #8
    fa10:	d001      	beq.n	fa16 <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
    fa12:	f00b f8a6 	bl	1ab62 <bt_conn_ref>
	switch (conn->state) {
    fa16:	7b63      	ldrb	r3, [r4, #13]
    fa18:	2b08      	cmp	r3, #8
    fa1a:	f200 80ba 	bhi.w	fb92 <bt_conn_set_state+0x1ce>
    fa1e:	e8df f003 	tbb	[pc, r3]
    fa22:	0542      	.short	0x0542
    fa24:	3f3f3f3f 	.word	0x3f3f3f3f
    fa28:	243f      	.short	0x243f
    fa2a:	3f          	.byte	0x3f
    fa2b:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    fa2c:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
    fa30:	4d5f      	ldr	r5, [pc, #380]	; (fbb0 <bt_conn_set_state+0x1ec>)
	return NULL;
    fa32:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
    fa36:	f04f 0220 	mov.w	r2, #32
    fa3a:	f3ef 8311 	mrs	r3, BASEPRI
    fa3e:	f382 8812 	msr	BASEPRI_MAX, r2
    fa42:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    fa46:	69e2      	ldr	r2, [r4, #28]
    fa48:	2a00      	cmp	r2, #0
    fa4a:	d07d      	beq.n	fb48 <bt_conn_set_state+0x184>
			conn->pending_no_cb--;
    fa4c:	3a01      	subs	r2, #1
    fa4e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    fa50:	f383 8811 	msr	BASEPRI, r3
    fa54:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    fa58:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	bf14      	ite	ne
    fa60:	4630      	movne	r0, r6
    fa62:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    fa64:	f007 feac 	bl	177c0 <z_impl_k_sem_give>
}
    fa68:	e7e5      	b.n	fa36 <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    fa6a:	78a3      	ldrb	r3, [r4, #2]
    fa6c:	2b04      	cmp	r3, #4
    fa6e:	d017      	beq.n	faa0 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
    fa70:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fa74:	f00d fef2 	bl	1d85c <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    fa78:	2100      	movs	r1, #0
    fa7a:	484e      	ldr	r0, [pc, #312]	; (fbb4 <bt_conn_set_state+0x1f0>)
    fa7c:	f008 fea8 	bl	187d0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    fa80:	2300      	movs	r3, #0
	list->tail = NULL;
    fa82:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fa86:	78e3      	ldrb	r3, [r4, #3]
    fa88:	2b01      	cmp	r3, #1
    fa8a:	d109      	bne.n	faa0 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
    fa8c:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
    fa8e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
    fa92:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    fa96:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fa9a:	2300      	movs	r3, #0
    fa9c:	f008 f8b2 	bl	17c04 <k_work_schedule>
}
    faa0:	46bd      	mov	sp, r7
    faa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    faa6:	78a3      	ldrb	r3, [r4, #2]
    faa8:	2b04      	cmp	r3, #4
    faaa:	d103      	bne.n	fab4 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
    faac:	4620      	mov	r0, r4
    faae:	f00b f86c 	bl	1ab8a <bt_conn_unref>
			break;
    fab2:	e7f5      	b.n	faa0 <bt_conn_set_state+0xdc>
		switch (old_state) {
    fab4:	2e08      	cmp	r6, #8
    fab6:	d8f3      	bhi.n	faa0 <bt_conn_set_state+0xdc>
    fab8:	a301      	add	r3, pc, #4	; (adr r3, fac0 <bt_conn_set_state+0xfc>)
    faba:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    fabe:	bf00      	nop
    fac0:	0000fb31 	.word	0x0000fb31
    fac4:	0000fae5 	.word	0x0000fae5
    fac8:	0000fb23 	.word	0x0000fb23
    facc:	0000faad 	.word	0x0000faad
    fad0:	0000faad 	.word	0x0000faad
    fad4:	0000fb23 	.word	0x0000fb23
    fad8:	0000fb23 	.word	0x0000fb23
    fadc:	0000fb31 	.word	0x0000fb31
    fae0:	0000fb31 	.word	0x0000fb31
			tx_notify(conn);
    fae4:	4620      	mov	r0, r4
    fae6:	f7ff fcc5 	bl	f474 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    faea:	78a3      	ldrb	r3, [r4, #2]
    faec:	2b01      	cmp	r3, #1
    faee:	d10a      	bne.n	fb06 <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    faf0:	f104 0558 	add.w	r5, r4, #88	; 0x58
    faf4:	4628      	mov	r0, r5
    faf6:	f00d ffa9 	bl	1da4c <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    fafa:	f010 0f0c 	tst.w	r0, #12
    fafe:	d002      	beq.n	fb06 <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
    fb00:	4628      	mov	r0, r5
    fb02:	f00d ffa5 	bl	1da50 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fb06:	3404      	adds	r4, #4
    fb08:	e8d4 3fef 	ldaex	r3, [r4]
    fb0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb10:	e8c4 3fe2 	stlex	r2, r3, [r4]
    fb14:	2a00      	cmp	r2, #0
    fb16:	d1f7      	bne.n	fb08 <bt_conn_set_state+0x144>
    fb18:	2100      	movs	r1, #0
    fb1a:	4826      	ldr	r0, [pc, #152]	; (fbb4 <bt_conn_set_state+0x1f0>)
    fb1c:	f008 fe58 	bl	187d0 <z_impl_k_poll_signal_raise>
    fb20:	e7be      	b.n	faa0 <bt_conn_set_state+0xdc>
			if (conn->err) {
    fb22:	7b23      	ldrb	r3, [r4, #12]
    fb24:	2b00      	cmp	r3, #0
    fb26:	d0c1      	beq.n	faac <bt_conn_set_state+0xe8>
				notify_connected(conn);
    fb28:	4620      	mov	r0, r4
    fb2a:	f7ff fc71 	bl	f410 <notify_connected>
    fb2e:	e7bd      	b.n	faac <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
    fb30:	466c      	mov	r4, sp
    fb32:	b088      	sub	sp, #32
    fb34:	466a      	mov	r2, sp
    fb36:	4b20      	ldr	r3, [pc, #128]	; (fbb8 <bt_conn_set_state+0x1f4>)
		LOG_WRN("no valid (%u) state was set", state);
    fb38:	e9c2 3505 	strd	r3, r5, [r2, #20]
    fb3c:	2303      	movs	r3, #3
    fb3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fb42:	f842 3f10 	str.w	r3, [r2, #16]!
    fb46:	e75a      	b.n	f9fe <bt_conn_set_state+0x3a>
	return list->head;
    fb48:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    fb4a:	b921      	cbnz	r1, fb56 <bt_conn_set_state+0x192>
    fb4c:	f383 8811 	msr	BASEPRI, r3
    fb50:	f3bf 8f6f 	isb	sy
		if (!node) {
    fb54:	e7a4      	b.n	faa0 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fb56:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    fb58:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fb5a:	4281      	cmp	r1, r0
	list->tail = node;
    fb5c:	bf08      	it	eq
    fb5e:	61a2      	streq	r2, [r4, #24]
	list->head = node;
    fb60:	6162      	str	r2, [r4, #20]
    fb62:	f383 8811 	msr	BASEPRI, r3
    fb66:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    fb6a:	f04f 0220 	mov.w	r2, #32
    fb6e:	f3ef 8311 	mrs	r3, BASEPRI
    fb72:	f382 8812 	msr	BASEPRI_MAX, r2
    fb76:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    fb7a:	68ca      	ldr	r2, [r1, #12]
    fb7c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    fb7e:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
    fb82:	f383 8811 	msr	BASEPRI, r3
    fb86:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    fb8a:	4620      	mov	r0, r4
    fb8c:	f7ff fca2 	bl	f4d4 <conn_tx_destroy>
    fb90:	e762      	b.n	fa58 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
    fb92:	466c      	mov	r4, sp
    fb94:	b088      	sub	sp, #32
    fb96:	466a      	mov	r2, sp
    fb98:	4b08      	ldr	r3, [pc, #32]	; (fbbc <bt_conn_set_state+0x1f8>)
    fb9a:	e7cd      	b.n	fb38 <bt_conn_set_state+0x174>
    fb9c:	0001eadc 	.word	0x0001eadc
    fba0:	00020788 	.word	0x00020788
    fba4:	00020792 	.word	0x00020792
    fba8:	01000003 	.word	0x01000003
    fbac:	0001e534 	.word	0x0001e534
    fbb0:	20008000 	.word	0x20008000
    fbb4:	20008260 	.word	0x20008260
    fbb8:	000207a3 	.word	0x000207a3
    fbbc:	000207ba 	.word	0x000207ba

0000fbc0 <bt_conn_index>:
		index = conn - acl_conns;
    fbc0:	4b03      	ldr	r3, [pc, #12]	; (fbd0 <bt_conn_index+0x10>)
    fbc2:	1ac0      	subs	r0, r0, r3
    fbc4:	4b03      	ldr	r3, [pc, #12]	; (fbd4 <bt_conn_index+0x14>)
    fbc6:	1180      	asrs	r0, r0, #6
    fbc8:	4358      	muls	r0, r3
}
    fbca:	b2c0      	uxtb	r0, r0
    fbcc:	4770      	bx	lr
    fbce:	bf00      	nop
    fbd0:	20009290 	.word	0x20009290
    fbd4:	aaaaaaab 	.word	0xaaaaaaab

0000fbd8 <bt_conn_create_pdu_timeout>:
{
    fbd8:	b538      	push	{r3, r4, r5, lr}
    fbda:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    fbdc:	4908      	ldr	r1, [pc, #32]	; (fc00 <bt_conn_create_pdu_timeout+0x28>)
    fbde:	2800      	cmp	r0, #0
    fbe0:	bf08      	it	eq
    fbe2:	4608      	moveq	r0, r1
    fbe4:	f00c fc4f 	bl	1c486 <net_buf_alloc_fixed>
	if (!buf) {
    fbe8:	4604      	mov	r4, r0
    fbea:	b918      	cbnz	r0, fbf4 <bt_conn_create_pdu_timeout+0x1c>
}
    fbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fbf0:	f7ff bc2c 	b.w	f44c <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
    fbf4:	1d69      	adds	r1, r5, #5
    fbf6:	300c      	adds	r0, #12
    fbf8:	f00c fca1 	bl	1c53e <net_buf_simple_reserve>
    fbfc:	4620      	mov	r0, r4
    fbfe:	bd38      	pop	{r3, r4, r5, pc}
    fc00:	20008638 	.word	0x20008638

0000fc04 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc06:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    fc08:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fc0a:	e8d0 3faf 	lda	r3, [r0]
    fc0e:	059b      	lsls	r3, r3, #22
    fc10:	d511      	bpl.n	fc36 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
    fc12:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    fc16:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    fc1a:	429a      	cmp	r2, r3
    fc1c:	d80b      	bhi.n	fc36 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
    fc1e:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    fc22:	429a      	cmp	r2, r3
    fc24:	d307      	bcc.n	fc36 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    fc26:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    fc2a:	429a      	cmp	r2, r3
    fc2c:	d103      	bne.n	fc36 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fc2e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    fc32:	f00a ff59 	bl	1aae8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    fc36:	4b10      	ldr	r3, [pc, #64]	; (fc78 <notify_le_param_updated+0x74>)
    fc38:	681d      	ldr	r5, [r3, #0]
    fc3a:	b925      	cbnz	r5, fc46 <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fc3c:	4d0f      	ldr	r5, [pc, #60]	; (fc7c <notify_le_param_updated+0x78>)
    fc3e:	4f10      	ldr	r7, [pc, #64]	; (fc80 <notify_le_param_updated+0x7c>)
    fc40:	42bd      	cmp	r5, r7
    fc42:	d30c      	bcc.n	fc5e <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    fc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    fc46:	68ee      	ldr	r6, [r5, #12]
    fc48:	b13e      	cbz	r6, fc5a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    fc4a:	4620      	mov	r0, r4
    fc4c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    fc50:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    fc54:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    fc58:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    fc5a:	69ad      	ldr	r5, [r5, #24]
    fc5c:	e7ed      	b.n	fc3a <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
    fc5e:	68ee      	ldr	r6, [r5, #12]
    fc60:	b13e      	cbz	r6, fc72 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    fc62:	4620      	mov	r0, r4
    fc64:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    fc68:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    fc6c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    fc70:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fc72:	351c      	adds	r5, #28
    fc74:	e7e4      	b.n	fc40 <notify_le_param_updated+0x3c>
    fc76:	bf00      	nop
    fc78:	200098e0 	.word	0x200098e0
    fc7c:	0001e4ec 	.word	0x0001e4ec
    fc80:	0001e4ec 	.word	0x0001e4ec

0000fc84 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    fc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc88:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    fc8a:	4608      	mov	r0, r1
{
    fc8c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    fc8e:	f00a fcc5 	bl	1a61c <bt_le_conn_params_valid>
    fc92:	4605      	mov	r5, r0
    fc94:	b918      	cbnz	r0, fc9e <le_param_req+0x1a>
		return false;
    fc96:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    fc98:	4628      	mov	r0, r5
    fc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    fc9e:	4b13      	ldr	r3, [pc, #76]	; (fcec <le_param_req+0x68>)
    fca0:	681e      	ldr	r6, [r3, #0]
    fca2:	b946      	cbnz	r6, fcb6 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fca4:	4e12      	ldr	r6, [pc, #72]	; (fcf0 <le_param_req+0x6c>)
    fca6:	f8df 804c 	ldr.w	r8, [pc, #76]	; fcf4 <le_param_req+0x70>
    fcaa:	4546      	cmp	r6, r8
    fcac:	d2f4      	bcs.n	fc98 <le_param_req+0x14>
		if (!cb->le_param_req) {
    fcae:	68b3      	ldr	r3, [r6, #8]
    fcb0:	b983      	cbnz	r3, fcd4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fcb2:	361c      	adds	r6, #28
    fcb4:	e7f9      	b.n	fcaa <le_param_req+0x26>
		if (!cb->le_param_req) {
    fcb6:	68b3      	ldr	r3, [r6, #8]
    fcb8:	b90b      	cbnz	r3, fcbe <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    fcba:	69b6      	ldr	r6, [r6, #24]
    fcbc:	e7f1      	b.n	fca2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    fcbe:	4621      	mov	r1, r4
    fcc0:	4638      	mov	r0, r7
    fcc2:	4798      	blx	r3
    fcc4:	2800      	cmp	r0, #0
    fcc6:	d0e6      	beq.n	fc96 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    fcc8:	4620      	mov	r0, r4
    fcca:	f00a fca7 	bl	1a61c <bt_le_conn_params_valid>
    fcce:	2800      	cmp	r0, #0
    fcd0:	d1f3      	bne.n	fcba <le_param_req+0x36>
    fcd2:	e7e0      	b.n	fc96 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    fcd4:	4621      	mov	r1, r4
    fcd6:	4638      	mov	r0, r7
    fcd8:	4798      	blx	r3
    fcda:	2800      	cmp	r0, #0
    fcdc:	d0db      	beq.n	fc96 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    fcde:	4620      	mov	r0, r4
    fce0:	f00a fc9c 	bl	1a61c <bt_le_conn_params_valid>
    fce4:	2800      	cmp	r0, #0
    fce6:	d1e4      	bne.n	fcb2 <le_param_req+0x2e>
    fce8:	e7d5      	b.n	fc96 <le_param_req+0x12>
    fcea:	bf00      	nop
    fcec:	200098e0 	.word	0x200098e0
    fcf0:	0001e4ec 	.word	0x0001e4ec
    fcf4:	0001e4ec 	.word	0x0001e4ec

0000fcf8 <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
    fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    fcfc:	78c3      	ldrb	r3, [r0, #3]
{
    fcfe:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    fd00:	b973      	cbnz	r3, fd20 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    fd02:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    fd06:	4b10      	ldr	r3, [pc, #64]	; (fd48 <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    fd08:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    fd0c:	681d      	ldr	r5, [r3, #0]
    fd0e:	b955      	cbnz	r5, fd26 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd10:	4d0e      	ldr	r5, [pc, #56]	; (fd4c <bt_conn_identity_resolved+0x54>)
    fd12:	4f0f      	ldr	r7, [pc, #60]	; (fd50 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    fd14:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd18:	42bd      	cmp	r5, r7
    fd1a:	d30c      	bcc.n	fd36 <bt_conn_identity_resolved+0x3e>
		}
	}
}
    fd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    fd20:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    fd24:	e7ef      	b.n	fd06 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    fd26:	692b      	ldr	r3, [r5, #16]
    fd28:	b11b      	cbz	r3, fd32 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    fd2a:	463a      	mov	r2, r7
    fd2c:	4631      	mov	r1, r6
    fd2e:	4620      	mov	r0, r4
    fd30:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    fd32:	69ad      	ldr	r5, [r5, #24]
    fd34:	e7eb      	b.n	fd0e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    fd36:	692b      	ldr	r3, [r5, #16]
    fd38:	b11b      	cbz	r3, fd42 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    fd3a:	4642      	mov	r2, r8
    fd3c:	4631      	mov	r1, r6
    fd3e:	4620      	mov	r0, r4
    fd40:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd42:	351c      	adds	r5, #28
    fd44:	e7e8      	b.n	fd18 <bt_conn_identity_resolved+0x20>
    fd46:	bf00      	nop
    fd48:	200098e0 	.word	0x200098e0
    fd4c:	0001e4ec 	.word	0x0001e4ec
    fd50:	0001e4ec 	.word	0x0001e4ec

0000fd54 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    fd56:	7a43      	ldrb	r3, [r0, #9]
{
    fd58:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
    fd5a:	7283      	strb	r3, [r0, #10]
{
    fd5c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    fd5e:	f00b f84f 	bl	1ae00 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    fd62:	4b0c      	ldr	r3, [pc, #48]	; (fd94 <bt_conn_security_changed+0x40>)
    fd64:	681d      	ldr	r5, [r3, #0]
    fd66:	b925      	cbnz	r5, fd72 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd68:	4d0b      	ldr	r5, [pc, #44]	; (fd98 <bt_conn_security_changed+0x44>)
    fd6a:	4f0c      	ldr	r7, [pc, #48]	; (fd9c <bt_conn_security_changed+0x48>)
    fd6c:	42bd      	cmp	r5, r7
    fd6e:	d308      	bcc.n	fd82 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    fd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    fd72:	696b      	ldr	r3, [r5, #20]
    fd74:	b11b      	cbz	r3, fd7e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    fd76:	4632      	mov	r2, r6
    fd78:	4620      	mov	r0, r4
    fd7a:	7a61      	ldrb	r1, [r4, #9]
    fd7c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    fd7e:	69ad      	ldr	r5, [r5, #24]
    fd80:	e7f1      	b.n	fd66 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    fd82:	696b      	ldr	r3, [r5, #20]
    fd84:	b11b      	cbz	r3, fd8e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    fd86:	4632      	mov	r2, r6
    fd88:	4620      	mov	r0, r4
    fd8a:	7a61      	ldrb	r1, [r4, #9]
    fd8c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd8e:	351c      	adds	r5, #28
    fd90:	e7ec      	b.n	fd6c <bt_conn_security_changed+0x18>
    fd92:	bf00      	nop
    fd94:	200098e0 	.word	0x200098e0
    fd98:	0001e4ec 	.word	0x0001e4ec
    fd9c:	0001e4ec 	.word	0x0001e4ec

0000fda0 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    fda0:	4b02      	ldr	r3, [pc, #8]	; (fdac <bt_conn_cb_register+0xc>)
    fda2:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    fda4:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    fda6:	6182      	str	r2, [r0, #24]
}
    fda8:	4770      	bx	lr
    fdaa:	bf00      	nop
    fdac:	200098e0 	.word	0x200098e0

0000fdb0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    fdb0:	b570      	push	{r4, r5, r6, lr}
    fdb2:	4606      	mov	r6, r0
    fdb4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    fdb6:	480a      	ldr	r0, [pc, #40]	; (fde0 <bt_conn_add_le+0x30>)
    fdb8:	2101      	movs	r1, #1
    fdba:	f7ff fc79 	bl	f6b0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    fdbe:	4604      	mov	r4, r0
    fdc0:	b160      	cbz	r0, fddc <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    fdc2:	7206      	strb	r6, [r0, #8]
    fdc4:	2207      	movs	r2, #7
    fdc6:	4629      	mov	r1, r5
    fdc8:	3088      	adds	r0, #136	; 0x88
    fdca:	f00a fad0 	bl	1a36e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    fdce:	2301      	movs	r3, #1
    fdd0:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    fdd2:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    fdd4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    fdd6:	4b03      	ldr	r3, [pc, #12]	; (fde4 <bt_conn_add_le+0x34>)
    fdd8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    fddc:	4620      	mov	r0, r4
    fdde:	bd70      	pop	{r4, r5, r6, pc}
    fde0:	20009290 	.word	0x20009290
    fde4:	00280018 	.word	0x00280018

0000fde8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fdec:	480a      	ldr	r0, [pc, #40]	; (fe18 <bt_conn_lookup_addr_le+0x30>)
{
    fdee:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fdf0:	f00a feb7 	bl	1ab62 <bt_conn_ref>
    fdf4:	4604      	mov	r4, r0

		if (!conn) {
    fdf6:	b120      	cbz	r0, fe02 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fdf8:	7883      	ldrb	r3, [r0, #2]
    fdfa:	2b01      	cmp	r3, #1
    fdfc:	d004      	beq.n	fe08 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    fdfe:	f00a fec4 	bl	1ab8a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    fe02:	2400      	movs	r4, #0
}
    fe04:	4620      	mov	r0, r4
    fe06:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    fe08:	4632      	mov	r2, r6
    fe0a:	4629      	mov	r1, r5
    fe0c:	f00a ff61 	bl	1acd2 <bt_conn_is_peer_addr_le>
    fe10:	2800      	cmp	r0, #0
    fe12:	d1f7      	bne.n	fe04 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    fe14:	4620      	mov	r0, r4
    fe16:	e7f2      	b.n	fdfe <bt_conn_lookup_addr_le+0x16>
    fe18:	20009290 	.word	0x20009290

0000fe1c <bt_conn_exists_le>:
{
    fe1c:	b5b0      	push	{r4, r5, r7, lr}
    fe1e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    fe20:	f7ff ffe2 	bl	fde8 <bt_conn_lookup_addr_le>
	if (conn) {
    fe24:	4604      	mov	r4, r0
    fe26:	b1e8      	cbz	r0, fe64 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    fe28:	7b43      	ldrb	r3, [r0, #13]
    fe2a:	466d      	mov	r5, sp
    fe2c:	2b08      	cmp	r3, #8
    fe2e:	bf98      	it	ls
    fe30:	4a0d      	ldrls	r2, [pc, #52]	; (fe68 <bt_conn_exists_le+0x4c>)
    fe32:	b088      	sub	sp, #32
    fe34:	bf94      	ite	ls
    fe36:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    fe3a:	4b0c      	ldrhi	r3, [pc, #48]	; (fe6c <bt_conn_exists_le+0x50>)
    fe3c:	466a      	mov	r2, sp
    fe3e:	490c      	ldr	r1, [pc, #48]	; (fe70 <bt_conn_exists_le+0x54>)
    fe40:	480c      	ldr	r0, [pc, #48]	; (fe74 <bt_conn_exists_le+0x58>)
    fe42:	e9c2 1305 	strd	r1, r3, [r2, #20]
    fe46:	f44f 7300 	mov.w	r3, #512	; 0x200
    fe4a:	8393      	strh	r3, [r2, #28]
    fe4c:	4b0a      	ldr	r3, [pc, #40]	; (fe78 <bt_conn_exists_le+0x5c>)
    fe4e:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    fe52:	f842 3f10 	str.w	r3, [r2, #16]!
    fe56:	f00a fe52 	bl	1aafe <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    fe5a:	4620      	mov	r0, r4
    fe5c:	46ad      	mov	sp, r5
    fe5e:	f00a fe94 	bl	1ab8a <bt_conn_unref>
		return true;
    fe62:	2001      	movs	r0, #1
}
    fe64:	46bd      	mov	sp, r7
    fe66:	bdb0      	pop	{r4, r5, r7, pc}
    fe68:	0001eadc 	.word	0x0001eadc
    fe6c:	00020788 	.word	0x00020788
    fe70:	000207d6 	.word	0x000207d6
    fe74:	0001e534 	.word	0x0001e534
    fe78:	01000003 	.word	0x01000003

0000fe7c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe80:	480e      	ldr	r0, [pc, #56]	; (febc <bt_conn_lookup_state_le+0x40>)
{
    fe82:	460e      	mov	r6, r1
    fe84:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fe86:	f00a fe6c 	bl	1ab62 <bt_conn_ref>

		if (!conn) {
    fe8a:	4604      	mov	r4, r0
    fe8c:	b120      	cbz	r0, fe98 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fe8e:	7883      	ldrb	r3, [r0, #2]
    fe90:	2b01      	cmp	r3, #1
    fe92:	d003      	beq.n	fe9c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    fe94:	f00a fe79 	bl	1ab8a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    fe98:	2400      	movs	r4, #0
    fe9a:	e00d      	b.n	feb8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    fe9c:	b136      	cbz	r6, feac <bt_conn_lookup_state_le+0x30>
    fe9e:	4632      	mov	r2, r6
    fea0:	4629      	mov	r1, r5
    fea2:	f00a ff16 	bl	1acd2 <bt_conn_is_peer_addr_le>
    fea6:	b908      	cbnz	r0, feac <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    fea8:	4620      	mov	r0, r4
    feaa:	e7f3      	b.n	fe94 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    feac:	7b63      	ldrb	r3, [r4, #13]
    feae:	42bb      	cmp	r3, r7
    feb0:	d1fa      	bne.n	fea8 <bt_conn_lookup_state_le+0x2c>
    feb2:	7a23      	ldrb	r3, [r4, #8]
    feb4:	42ab      	cmp	r3, r5
    feb6:	d1f7      	bne.n	fea8 <bt_conn_lookup_state_le+0x2c>
}
    feb8:	4620      	mov	r0, r4
    feba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    febc:	20009290 	.word	0x20009290

0000fec0 <send_conn_le_param_update>:
{
    fec0:	b538      	push	{r3, r4, r5, lr}
    fec2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    fec4:	4608      	mov	r0, r1
{
    fec6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    fec8:	f00a fba8 	bl	1a61c <bt_le_conn_params_valid>
    fecc:	b338      	cbz	r0, ff1e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    fece:	4b15      	ldr	r3, [pc, #84]	; (ff24 <send_conn_le_param_update+0x64>)
    fed0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    fed4:	0799      	lsls	r1, r3, #30
    fed6:	d407      	bmi.n	fee8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    fed8:	78e3      	ldrb	r3, [r4, #3]
    feda:	b173      	cbz	r3, fefa <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    fedc:	4629      	mov	r1, r5
    fede:	4620      	mov	r0, r4
}
    fee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    fee4:	f000 baae 	b.w	10444 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    fee8:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    feec:	079a      	lsls	r2, r3, #30
    feee:	d5f3      	bpl.n	fed8 <send_conn_le_param_update+0x18>
    fef0:	1d23      	adds	r3, r4, #4
    fef2:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    fef6:	055b      	lsls	r3, r3, #21
    fef8:	d4ee      	bmi.n	fed8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    fefa:	4629      	mov	r1, r5
    fefc:	4620      	mov	r0, r4
    fefe:	f00a ff0a 	bl	1ad16 <bt_conn_le_conn_update>
		if (rc == 0) {
    ff02:	b958      	cbnz	r0, ff1c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    ff04:	882b      	ldrh	r3, [r5, #0]
    ff06:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    ff0a:	886b      	ldrh	r3, [r5, #2]
    ff0c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    ff10:	88ab      	ldrh	r3, [r5, #4]
    ff12:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    ff16:	88eb      	ldrh	r3, [r5, #6]
    ff18:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    ff1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ff1e:	f06f 0015 	mvn.w	r0, #21
    ff22:	e7fb      	b.n	ff1c <send_conn_le_param_update+0x5c>
    ff24:	20008000 	.word	0x20008000

0000ff28 <deferred_work>:
{
    ff28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff2c:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
    ff2e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    ff32:	4604      	mov	r4, r0
    ff34:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    ff36:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    ff3a:	bb0b      	cbnz	r3, ff80 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
    ff3c:	4630      	mov	r0, r6
    ff3e:	f00a ff47 	bl	1add0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    ff42:	4b35      	ldr	r3, [pc, #212]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    ff44:	681d      	ldr	r5, [r3, #0]
    ff46:	b95d      	cbnz	r5, ff60 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ff48:	4d34      	ldr	r5, [pc, #208]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ff4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>
    ff4e:	4545      	cmp	r5, r8
    ff50:	d30e      	bcc.n	ff70 <deferred_work+0x48>
		bt_conn_unref(conn);
    ff52:	4630      	mov	r0, r6
    ff54:	f00a fe19 	bl	1ab8a <bt_conn_unref>
}
    ff58:	3708      	adds	r7, #8
    ff5a:	46bd      	mov	sp, r7
    ff5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
    ff60:	686b      	ldr	r3, [r5, #4]
    ff62:	b11b      	cbz	r3, ff6c <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
    ff64:	4630      	mov	r0, r6
    ff66:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ff6a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ff6c:	69ad      	ldr	r5, [r5, #24]
    ff6e:	e7ea      	b.n	ff46 <deferred_work+0x1e>
		if (cb->disconnected) {
    ff70:	686b      	ldr	r3, [r5, #4]
    ff72:	b11b      	cbz	r3, ff7c <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
    ff74:	4630      	mov	r0, r6
    ff76:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ff7a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ff7c:	351c      	adds	r5, #28
    ff7e:	e7e6      	b.n	ff4e <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
    ff80:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ff84:	2b01      	cmp	r3, #1
    ff86:	d1e7      	bne.n	ff58 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
    ff88:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ff8c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    ff90:	4628      	mov	r0, r5
    ff92:	f00a fda9 	bl	1aae8 <atomic_and>
    ff96:	0581      	lsls	r1, r0, #22
    ff98:	d526      	bpl.n	ffe8 <deferred_work+0xc0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ff9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
    ff9c:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ff9e:	603b      	str	r3, [r7, #0]
    ffa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
    ffa2:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ffa4:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
    ffa6:	f7ff ff8b 	bl	fec0 <send_conn_le_param_update>
		if (!err) {
    ffaa:	b968      	cbnz	r0, ffc8 <deferred_work+0xa0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ffac:	f46f 7180 	mvn.w	r1, #256	; 0x100
    ffb0:	4628      	mov	r0, r5
    ffb2:	f00a fd99 	bl	1aae8 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ffb6:	e8d5 3fef 	ldaex	r3, [r5]
    ffba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ffbe:	e8c5 3fe2 	stlex	r2, r3, [r5]
    ffc2:	2a00      	cmp	r2, #0
    ffc4:	d0c8      	beq.n	ff58 <deferred_work+0x30>
    ffc6:	e7f6      	b.n	ffb6 <deferred_work+0x8e>
			LOG_WRN("Send LE param update failed (err %d)", err);
    ffc8:	466c      	mov	r4, sp
    ffca:	b088      	sub	sp, #32
    ffcc:	466a      	mov	r2, sp
    ffce:	4b15      	ldr	r3, [pc, #84]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
			LOG_WRN("Send auto LE param update failed (err %d)",
    ffd0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ffd4:	2303      	movs	r3, #3
    ffd6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ffda:	4813      	ldr	r0, [pc, #76]	; (10028 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28>)
    ffdc:	f842 3f10 	str.w	r3, [r2, #16]!
    ffe0:	f00a fd8d 	bl	1aafe <z_log_msg_static_create.constprop.0>
    ffe4:	46a5      	mov	sp, r4
    ffe6:	e7e6      	b.n	ffb6 <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
    ffe8:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    ffec:	4a0f      	ldr	r2, [pc, #60]	; (1002c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2c>)
		err = send_conn_le_param_update(conn, param);
    ffee:	4639      	mov	r1, r7
    fff0:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
    fff2:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
    fff6:	f7ff ff63 	bl	fec0 <send_conn_le_param_update>
		if (!err) {
    fffa:	b940      	cbnz	r0, 1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
    fffc:	e8d5 3fef 	ldaex	r3, [r5]
   10000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10004:	e8c5 3fe2 	stlex	r2, r3, [r5]
   10008:	2a00      	cmp	r2, #0
   1000a:	d0d4      	beq.n	ffb6 <deferred_work+0x8e>
   1000c:	e7f6      	b.n	fffc <deferred_work+0xd4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1000e:	466c      	mov	r4, sp
   10010:	b088      	sub	sp, #32
   10012:	466a      	mov	r2, sp
   10014:	4b06      	ldr	r3, [pc, #24]	; (10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>)
   10016:	e7db      	b.n	ffd0 <deferred_work+0xa8>
   10018:	200098e0 	.word	0x200098e0
   1001c:	0001e4ec 	.word	0x0001e4ec
   10020:	0001e4ec 	.word	0x0001e4ec
   10024:	000207f9 	.word	0x000207f9
   10028:	0001e534 	.word	0x0001e534
   1002c:	00280018 	.word	0x00280018
   10030:	0002081e 	.word	0x0002081e

00010034 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   10034:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10036:	4801      	ldr	r0, [pc, #4]	; (1003c <bt_conn_create_frag_timeout+0x8>)
   10038:	f7ff bdce 	b.w	fbd8 <bt_conn_create_pdu_timeout>
   1003c:	200086bc 	.word	0x200086bc

00010040 <bt_conn_process_tx>:
{
   10040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10044:	7b43      	ldrb	r3, [r0, #13]
{
   10046:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   10048:	b95b      	cbnz	r3, 10062 <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1004a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1004e:	3004      	adds	r0, #4
   10050:	f00a fd4a 	bl	1aae8 <atomic_and>
   10054:	0643      	lsls	r3, r0, #25
   10056:	d504      	bpl.n	10062 <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   10058:	4628      	mov	r0, r5
}
   1005a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   1005e:	f00a bd5d 	b.w	1ab1c <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   10062:	f105 0038 	add.w	r0, r5, #56	; 0x38
   10066:	f00d fc1a 	bl	1d89e <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   1006a:	4604      	mov	r4, r0
   1006c:	b960      	cbnz	r0, 10088 <bt_conn_process_tx+0x48>
   1006e:	f44f 735d 	mov.w	r3, #884	; 0x374
   10072:	4a33      	ldr	r2, [pc, #204]	; (10140 <bt_conn_process_tx+0x100>)
   10074:	4933      	ldr	r1, [pc, #204]	; (10144 <bt_conn_process_tx+0x104>)
   10076:	4834      	ldr	r0, [pc, #208]	; (10148 <bt_conn_process_tx+0x108>)
   10078:	f008 ffa0 	bl	18fbc <assert_print>
   1007c:	4040      	eors	r0, r0
   1007e:	f380 8811 	msr	BASEPRI, r0
   10082:	f04f 0003 	mov.w	r0, #3
   10086:	df02      	svc	2
	buf = net_buf_ref(buf);
   10088:	4620      	mov	r0, r4
   1008a:	f00c fa32 	bl	1c4f2 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   1008e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1014c <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   10092:	8a02      	ldrh	r2, [r0, #16]
   10094:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
   10098:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1009a:	429a      	cmp	r2, r3
   1009c:	7f02      	ldrb	r2, [r0, #28]
   1009e:	d807      	bhi.n	100b0 <bt_conn_process_tx+0x70>
   100a0:	b932      	cbnz	r2, 100b0 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   100a2:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   100a4:	4621      	mov	r1, r4
   100a6:	4628      	mov	r0, r5
   100a8:	f7ff fa2a 	bl	f500 <send_frag>
   100ac:	4606      	mov	r6, r0
   100ae:	e030      	b.n	10112 <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   100b0:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   100b2:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   100b6:	8a22      	ldrh	r2, [r4, #16]
   100b8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   100bc:	429a      	cmp	r2, r3
   100be:	d804      	bhi.n	100ca <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   100c0:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
   100c2:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
   100c4:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   100c6:	2303      	movs	r3, #3
   100c8:	e7ec      	b.n	100a4 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   100ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   100ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   100d2:	2000      	movs	r0, #0
   100d4:	f7ff ffae 	bl	10034 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   100d8:	7b6b      	ldrb	r3, [r5, #13]
		frag = bt_conn_create_frag(0);
   100da:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   100dc:	2b07      	cmp	r3, #7
   100de:	d006      	beq.n	100ee <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   100e0:	f004 f868 	bl	141b4 <net_buf_unref>
	net_buf_unref(buf);
   100e4:	4620      	mov	r0, r4
}
   100e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   100ea:	f004 b863 	b.w	141b4 <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
   100ee:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
   100f0:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   100f4:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   100f8:	463b      	mov	r3, r7
   100fa:	4621      	mov	r1, r4
   100fc:	4628      	mov	r0, r5
   100fe:	f7ff f9ff 	bl	f500 <send_frag>
		if (err) {
   10102:	4606      	mov	r6, r0
   10104:	b1b8      	cbz	r0, 10136 <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   10106:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
   1010a:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
   1010c:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   1010e:	f004 f851 	bl	141b4 <net_buf_unref>
	net_buf_unref(buf);
   10112:	4620      	mov	r0, r4
   10114:	f004 f84e 	bl	141b4 <net_buf_unref>
	if (err  == -EIO) {
   10118:	3605      	adds	r6, #5
   1011a:	d10e      	bne.n	1013a <bt_conn_process_tx+0xfa>
		tx_data(buf)->tx = NULL;
   1011c:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1011e:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
   10120:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   10122:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   10124:	f004 f846 	bl	141b4 <net_buf_unref>
		if (tx) {
   10128:	b13e      	cbz	r6, 1013a <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   1012a:	4631      	mov	r1, r6
   1012c:	4628      	mov	r0, r5
}
   1012e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   10132:	f7ff b9cf 	b.w	f4d4 <conn_tx_destroy>
		flags = FRAG_CONT;
   10136:	2701      	movs	r7, #1
   10138:	e7bd      	b.n	100b6 <bt_conn_process_tx+0x76>
}
   1013a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1013e:	bf00      	nop
   10140:	00020848 	.word	0x00020848
   10144:	0002120a 	.word	0x0002120a
   10148:	0001fb96 	.word	0x0001fb96
   1014c:	20008000 	.word	0x20008000

00010150 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   10150:	4b0b      	ldr	r3, [pc, #44]	; (10180 <bt_conn_auth_cb_register+0x30>)
   10152:	b158      	cbz	r0, 1016c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   10154:	681a      	ldr	r2, [r3, #0]
   10156:	b962      	cbnz	r2, 10172 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   10158:	6902      	ldr	r2, [r0, #16]
   1015a:	b93a      	cbnz	r2, 1016c <bt_conn_auth_cb_register+0x1c>
   1015c:	6802      	ldr	r2, [r0, #0]
   1015e:	b95a      	cbnz	r2, 10178 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   10160:	6842      	ldr	r2, [r0, #4]
   10162:	b94a      	cbnz	r2, 10178 <bt_conn_auth_cb_register+0x28>
   10164:	6882      	ldr	r2, [r0, #8]
   10166:	b93a      	cbnz	r2, 10178 <bt_conn_auth_cb_register+0x28>
   10168:	6942      	ldr	r2, [r0, #20]
   1016a:	b92a      	cbnz	r2, 10178 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1016c:	6018      	str	r0, [r3, #0]
		return 0;
   1016e:	2000      	movs	r0, #0
   10170:	4770      	bx	lr
		return -EALREADY;
   10172:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10176:	4770      	bx	lr
		return -EINVAL;
   10178:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1017c:	4770      	bx	lr
   1017e:	bf00      	nop
   10180:	200098ec 	.word	0x200098ec

00010184 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   10184:	b910      	cbnz	r0, 1018c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   10186:	4802      	ldr	r0, [pc, #8]	; (10190 <bt_conn_lookup_index+0xc>)
   10188:	f00a bceb 	b.w	1ab62 <bt_conn_ref>
}
   1018c:	2000      	movs	r0, #0
   1018e:	4770      	bx	lr
   10190:	20009290 	.word	0x20009290

00010194 <bt_conn_init>:

int bt_conn_init(void)
{
   10194:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   10196:	480c      	ldr	r0, [pc, #48]	; (101c8 <bt_conn_init+0x34>)
   10198:	f00d fb60 	bl	1d85c <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1019c:	490b      	ldr	r1, [pc, #44]	; (101cc <bt_conn_init+0x38>)
   1019e:	480a      	ldr	r0, [pc, #40]	; (101c8 <bt_conn_init+0x34>)
   101a0:	f00d fb68 	bl	1d874 <k_queue_append>
   101a4:	490a      	ldr	r1, [pc, #40]	; (101d0 <bt_conn_init+0x3c>)
   101a6:	4808      	ldr	r0, [pc, #32]	; (101c8 <bt_conn_init+0x34>)
   101a8:	f00d fb64 	bl	1d874 <k_queue_append>
   101ac:	4909      	ldr	r1, [pc, #36]	; (101d4 <bt_conn_init+0x40>)
   101ae:	4806      	ldr	r0, [pc, #24]	; (101c8 <bt_conn_init+0x34>)
   101b0:	f00d fb60 	bl	1d874 <k_queue_append>
	}

	bt_att_init();
   101b4:	f001 f8c2 	bl	1133c <bt_att_init>

	err = bt_smp_init();
   101b8:	f003 fddc 	bl	13d74 <bt_smp_init>
	if (err) {
   101bc:	4604      	mov	r4, r0
   101be:	b908      	cbnz	r0, 101c4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   101c0:	f00a fe69 	bl	1ae96 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   101c4:	4620      	mov	r0, r4
   101c6:	bd10      	pop	{r4, pc}
   101c8:	200085f4 	.word	0x200085f4
   101cc:	200098b0 	.word	0x200098b0
   101d0:	200098c0 	.word	0x200098c0
   101d4:	200098d0 	.word	0x200098d0

000101d8 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   101d8:	b580      	push	{r7, lr}
   101da:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   101dc:	b088      	sub	sp, #32
   101de:	466a      	mov	r2, sp
   101e0:	4b06      	ldr	r3, [pc, #24]	; (101fc <l2cap_create_le_sig_pdu.part.0+0x24>)
   101e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   101e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   101ea:	2303      	movs	r3, #3
   101ec:	4804      	ldr	r0, [pc, #16]	; (10200 <l2cap_create_le_sig_pdu.part.0+0x28>)
   101ee:	f842 3f10 	str.w	r3, [r2, #16]!
   101f2:	f00a fdb9 	bl	1ad68 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   101f6:	2000      	movs	r0, #0
   101f8:	46bd      	mov	sp, r7
   101fa:	bd80      	pop	{r7, pc}
   101fc:	000208f1 	.word	0x000208f1
   10200:	0001e584 	.word	0x0001e584

00010204 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   10204:	b580      	push	{r7, lr}
   10206:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   10208:	b088      	sub	sp, #32
   1020a:	466a      	mov	r2, sp
   1020c:	4b07      	ldr	r3, [pc, #28]	; (1022c <l2cap_accept.part.0+0x28>)
   1020e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10212:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10216:	2303      	movs	r3, #3
   10218:	4805      	ldr	r0, [pc, #20]	; (10230 <l2cap_accept.part.0+0x2c>)
   1021a:	f842 3f10 	str.w	r3, [r2, #16]!
   1021e:	f00a fda3 	bl	1ad68 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   10222:	f06f 000b 	mvn.w	r0, #11
   10226:	46bd      	mov	sp, r7
   10228:	bd80      	pop	{r7, pc}
   1022a:	bf00      	nop
   1022c:	00020919 	.word	0x00020919
   10230:	0001e584 	.word	0x0001e584

00010234 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   10234:	4b04      	ldr	r3, [pc, #16]	; (10248 <l2cap_accept+0x14>)
   10236:	681a      	ldr	r2, [r3, #0]
   10238:	b10a      	cbz	r2, 1023e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1023a:	f7ff bfe3 	b.w	10204 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1023e:	4803      	ldr	r0, [pc, #12]	; (1024c <l2cap_accept+0x18>)
   10240:	6058      	str	r0, [r3, #4]
}
   10242:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   10244:	600b      	str	r3, [r1, #0]
}
   10246:	4770      	bx	lr
   10248:	200098f0 	.word	0x200098f0
   1024c:	0001eb20 	.word	0x0001eb20

00010250 <bt_l2cap_connected>:
{
   10250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10252:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10254:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   10256:	4d1f      	ldr	r5, [pc, #124]	; (102d4 <bt_l2cap_connected+0x84>)
   10258:	4f1f      	ldr	r7, [pc, #124]	; (102d8 <bt_l2cap_connected+0x88>)
   1025a:	42bd      	cmp	r5, r7
   1025c:	d301      	bcc.n	10262 <bt_l2cap_connected+0x12>
}
   1025e:	b003      	add	sp, #12
   10260:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   10262:	4620      	mov	r0, r4
   10264:	686b      	ldr	r3, [r5, #4]
   10266:	a901      	add	r1, sp, #4
   10268:	4798      	blx	r3
   1026a:	2800      	cmp	r0, #0
   1026c:	db2c      	blt.n	102c8 <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1026e:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   10270:	882a      	ldrh	r2, [r5, #0]
   10272:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   10274:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   10276:	68a8      	ldr	r0, [r5, #8]
   10278:	f103 0210 	add.w	r2, r3, #16
   1027c:	e8d2 1fef 	ldaex	r1, [r2]
   10280:	e8c2 6fec 	stlex	ip, r6, [r2]
   10284:	f1bc 0f00 	cmp.w	ip, #0
   10288:	d1f8      	bne.n	1027c <bt_l2cap_connected+0x2c>
	parent->next = child;
   1028a:	609e      	str	r6, [r3, #8]
	return list->tail;
   1028c:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1028e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   10292:	b9d9      	cbnz	r1, 102cc <bt_l2cap_connected+0x7c>
	list->head = node;
   10294:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   10298:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1029a:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1029c:	9801      	ldr	r0, [sp, #4]
   1029e:	6843      	ldr	r3, [r0, #4]
   102a0:	681b      	ldr	r3, [r3, #0]
   102a2:	b103      	cbz	r3, 102a6 <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   102a4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   102a6:	9b01      	ldr	r3, [sp, #4]
   102a8:	3310      	adds	r3, #16
   102aa:	e8d3 1fef 	ldaex	r1, [r3]
   102ae:	f041 0101 	orr.w	r1, r1, #1
   102b2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   102b6:	2a00      	cmp	r2, #0
   102b8:	d1f7      	bne.n	102aa <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   102ba:	9801      	ldr	r0, [sp, #4]
   102bc:	6843      	ldr	r3, [r0, #4]
   102be:	69db      	ldr	r3, [r3, #28]
   102c0:	b113      	cbz	r3, 102c8 <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   102c2:	f100 0110 	add.w	r1, r0, #16
   102c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   102c8:	350c      	adds	r5, #12
   102ca:	e7c6      	b.n	1025a <bt_l2cap_connected+0xa>
	parent->next = child;
   102cc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   102ce:	6562      	str	r2, [r4, #84]	; 0x54
}
   102d0:	e7e2      	b.n	10298 <bt_l2cap_connected+0x48>
   102d2:	bf00      	nop
   102d4:	0001e4c8 	.word	0x0001e4c8
   102d8:	0001e4ec 	.word	0x0001e4ec

000102dc <l2cap_recv>:
{
   102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   102de:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   102e0:	8a0b      	ldrh	r3, [r1, #16]
{
   102e2:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   102e4:	2b03      	cmp	r3, #3
{
   102e6:	460d      	mov	r5, r1
   102e8:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   102ea:	d80b      	bhi.n	10304 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   102ec:	4b30      	ldr	r3, [pc, #192]	; (103b0 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   102ee:	617b      	str	r3, [r7, #20]
   102f0:	2302      	movs	r3, #2
   102f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   102f6:	482f      	ldr	r0, [pc, #188]	; (103b4 <l2cap_recv+0xd8>)
   102f8:	613b      	str	r3, [r7, #16]
   102fa:	f107 0210 	add.w	r2, r7, #16
   102fe:	f00a fd33 	bl	1ad68 <z_log_msg_static_create.constprop.0>
		return 0;
   10302:	e019      	b.n	10338 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   10304:	2104      	movs	r1, #4
   10306:	f105 000c 	add.w	r0, r5, #12
   1030a:	f00c f94c 	bl	1c5a6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1030e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   10310:	8843      	ldrh	r3, [r0, #2]
   10312:	4604      	mov	r4, r0
	if (buf->len != len) {
   10314:	4299      	cmp	r1, r3
   10316:	d013      	beq.n	10340 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   10318:	466c      	mov	r4, sp
   1031a:	b088      	sub	sp, #32
   1031c:	aa02      	add	r2, sp, #8
   1031e:	61d3      	str	r3, [r2, #28]
   10320:	2304      	movs	r3, #4
   10322:	4825      	ldr	r0, [pc, #148]	; (103b8 <l2cap_recv+0xdc>)
   10324:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10328:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1032c:	4821      	ldr	r0, [pc, #132]	; (103b4 <l2cap_recv+0xd8>)
   1032e:	f842 3f10 	str.w	r3, [r2, #16]!
   10332:	f00a fd19 	bl	1ad68 <z_log_msg_static_create.constprop.0>
   10336:	46a5      	mov	sp, r4
}
   10338:	2000      	movs	r0, #0
   1033a:	371c      	adds	r7, #28
   1033c:	46bd      	mov	sp, r7
   1033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   10340:	7843      	ldrb	r3, [r0, #1]
   10342:	b90b      	cbnz	r3, 10348 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   10344:	4b1d      	ldr	r3, [pc, #116]	; (103bc <l2cap_recv+0xe0>)
   10346:	e7d2      	b.n	102ee <l2cap_recv+0x12>
	switch (hdr->code) {
   10348:	7803      	ldrb	r3, [r0, #0]
   1034a:	2b01      	cmp	r3, #1
   1034c:	d0f4      	beq.n	10338 <l2cap_recv+0x5c>
   1034e:	2b13      	cmp	r3, #19
   10350:	d103      	bne.n	1035a <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   10352:	2901      	cmp	r1, #1
   10354:	d8f0      	bhi.n	10338 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   10356:	4b1a      	ldr	r3, [pc, #104]	; (103c0 <l2cap_recv+0xe4>)
   10358:	e7c9      	b.n	102ee <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1035a:	466d      	mov	r5, sp
   1035c:	b088      	sub	sp, #32
   1035e:	aa02      	add	r2, sp, #8
   10360:	4918      	ldr	r1, [pc, #96]	; (103c4 <l2cap_recv+0xe8>)
   10362:	4814      	ldr	r0, [pc, #80]	; (103b4 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   10364:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   10368:	2303      	movs	r3, #3
   1036a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1036e:	f842 3f10 	str.w	r3, [r2, #16]!
   10372:	f00a fcf9 	bl	1ad68 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   10376:	2202      	movs	r2, #2
   10378:	46ad      	mov	sp, r5
   1037a:	7861      	ldrb	r1, [r4, #1]
   1037c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1037e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   10380:	f00a fcf5 	bl	1ad6e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   10384:	4604      	mov	r4, r0
   10386:	2800      	cmp	r0, #0
   10388:	d0d6      	beq.n	10338 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1038a:	2102      	movs	r1, #2
   1038c:	300c      	adds	r0, #12
   1038e:	f00c f8da 	bl	1c546 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   10392:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   10394:	4622      	mov	r2, r4
   10396:	7003      	strb	r3, [r0, #0]
   10398:	7043      	strb	r3, [r0, #1]
   1039a:	2105      	movs	r1, #5
   1039c:	4628      	mov	r0, r5
   1039e:	9300      	str	r3, [sp, #0]
   103a0:	f00a fd4e 	bl	1ae40 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   103a4:	2800      	cmp	r0, #0
   103a6:	d0c7      	beq.n	10338 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   103a8:	4620      	mov	r0, r4
   103aa:	f003 ff03 	bl	141b4 <net_buf_unref>
   103ae:	e7c3      	b.n	10338 <l2cap_recv+0x5c>
   103b0:	00020940 	.word	0x00020940
   103b4:	0001e584 	.word	0x0001e584
   103b8:	0002095e 	.word	0x0002095e
   103bc:	0002097f 	.word	0x0002097f
   103c0:	000209a0 	.word	0x000209a0
   103c4:	000209bc 	.word	0x000209bc

000103c8 <bt_l2cap_recv>:
{
   103c8:	b5b0      	push	{r4, r5, r7, lr}
   103ca:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   103cc:	8a0b      	ldrh	r3, [r1, #16]
{
   103ce:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   103d0:	2b03      	cmp	r3, #3
{
   103d2:	460c      	mov	r4, r1
   103d4:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   103d6:	d810      	bhi.n	103fa <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   103d8:	4b17      	ldr	r3, [pc, #92]	; (10438 <bt_l2cap_recv+0x70>)
   103da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   103de:	617b      	str	r3, [r7, #20]
   103e0:	2302      	movs	r3, #2
   103e2:	4816      	ldr	r0, [pc, #88]	; (1043c <bt_l2cap_recv+0x74>)
   103e4:	f107 0210 	add.w	r2, r7, #16
   103e8:	613b      	str	r3, [r7, #16]
   103ea:	f00a fcbd 	bl	1ad68 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   103ee:	4620      	mov	r0, r4
   103f0:	f003 fee0 	bl	141b4 <net_buf_unref>
}
   103f4:	3718      	adds	r7, #24
   103f6:	46bd      	mov	sp, r7
   103f8:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   103fa:	2104      	movs	r1, #4
   103fc:	f104 000c 	add.w	r0, r4, #12
   10400:	f00c f8d1 	bl	1c5a6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   10404:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   10406:	4628      	mov	r0, r5
   10408:	f00a fd3c 	bl	1ae84 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1040c:	b978      	cbnz	r0, 1042e <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1040e:	466d      	mov	r5, sp
   10410:	b088      	sub	sp, #32
   10412:	466a      	mov	r2, sp
   10414:	4b0a      	ldr	r3, [pc, #40]	; (10440 <bt_l2cap_recv+0x78>)
   10416:	4809      	ldr	r0, [pc, #36]	; (1043c <bt_l2cap_recv+0x74>)
   10418:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1041c:	2303      	movs	r3, #3
   1041e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10422:	f842 3f10 	str.w	r3, [r2, #16]!
   10426:	f00a fc9f 	bl	1ad68 <z_log_msg_static_create.constprop.0>
   1042a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1042c:	e7df      	b.n	103ee <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1042e:	6843      	ldr	r3, [r0, #4]
   10430:	4621      	mov	r1, r4
   10432:	695b      	ldr	r3, [r3, #20]
   10434:	4798      	blx	r3
   10436:	e7da      	b.n	103ee <bt_l2cap_recv+0x26>
   10438:	000209e4 	.word	0x000209e4
   1043c:	0001e584 	.word	0x0001e584
   10440:	00020a01 	.word	0x00020a01

00010444 <bt_l2cap_update_conn_param>:
{
   10444:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   10446:	4b17      	ldr	r3, [pc, #92]	; (104a4 <bt_l2cap_update_conn_param+0x60>)
{
   10448:	460e      	mov	r6, r1
	ident++;
   1044a:	7819      	ldrb	r1, [r3, #0]
{
   1044c:	4605      	mov	r5, r0
	ident++;
   1044e:	3101      	adds	r1, #1
   10450:	b2c9      	uxtb	r1, r1
   10452:	2901      	cmp	r1, #1
   10454:	bf38      	it	cc
   10456:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   10458:	2208      	movs	r2, #8
   1045a:	2012      	movs	r0, #18
	ident++;
   1045c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1045e:	f00a fc86 	bl	1ad6e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   10462:	4604      	mov	r4, r0
   10464:	b1d0      	cbz	r0, 1049c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   10466:	2108      	movs	r1, #8
   10468:	300c      	adds	r0, #12
   1046a:	f00c f86c 	bl	1c546 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1046e:	8833      	ldrh	r3, [r6, #0]
   10470:	4622      	mov	r2, r4
   10472:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   10474:	8873      	ldrh	r3, [r6, #2]
   10476:	2105      	movs	r1, #5
   10478:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1047a:	88b3      	ldrh	r3, [r6, #4]
   1047c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1047e:	88f3      	ldrh	r3, [r6, #6]
   10480:	80c3      	strh	r3, [r0, #6]
   10482:	2300      	movs	r3, #0
   10484:	4628      	mov	r0, r5
   10486:	9300      	str	r3, [sp, #0]
   10488:	f00a fcda 	bl	1ae40 <bt_l2cap_send_cb>
	if (err) {
   1048c:	4605      	mov	r5, r0
   1048e:	b110      	cbz	r0, 10496 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   10490:	4620      	mov	r0, r4
   10492:	f003 fe8f 	bl	141b4 <net_buf_unref>
}
   10496:	4628      	mov	r0, r5
   10498:	b002      	add	sp, #8
   1049a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1049c:	f06f 050b 	mvn.w	r5, #11
   104a0:	e7f9      	b.n	10496 <bt_l2cap_update_conn_param+0x52>
   104a2:	bf00      	nop
   104a4:	20009d3d 	.word	0x20009d3d

000104a8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   104a8:	2823      	cmp	r0, #35	; 0x23
   104aa:	d81f      	bhi.n	104ec <att_op_get_type+0x44>
   104ac:	281a      	cmp	r0, #26
   104ae:	d804      	bhi.n	104ba <att_op_get_type+0x12>
   104b0:	1e43      	subs	r3, r0, #1
   104b2:	2b18      	cmp	r3, #24
   104b4:	d90e      	bls.n	104d4 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   104b6:	2006      	movs	r0, #6
   104b8:	4770      	bx	lr
	switch (op) {
   104ba:	f1a0 031b 	sub.w	r3, r0, #27
   104be:	2b08      	cmp	r3, #8
   104c0:	d81e      	bhi.n	10500 <att_op_get_type+0x58>
   104c2:	e8df f003 	tbb	[pc, r3]
   104c6:	1d05      	.short	0x1d05
   104c8:	191d231b 	.word	0x191d231b
   104cc:	1d25      	.short	0x1d25
   104ce:	05          	.byte	0x05
   104cf:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   104d0:	2003      	movs	r0, #3
   104d2:	4770      	bx	lr
   104d4:	2301      	movs	r3, #1
	switch (op) {
   104d6:	4a0f      	ldr	r2, [pc, #60]	; (10514 <att_op_get_type+0x6c>)
   104d8:	4083      	lsls	r3, r0
   104da:	401a      	ands	r2, r3
   104dc:	b9c2      	cbnz	r2, 10510 <att_op_get_type+0x68>
   104de:	4a0e      	ldr	r2, [pc, #56]	; (10518 <att_op_get_type+0x70>)
   104e0:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   104e2:	2a00      	cmp	r2, #0
   104e4:	bf14      	ite	ne
   104e6:	2001      	movne	r0, #1
   104e8:	2006      	moveq	r0, #6
   104ea:	4770      	bx	lr
	switch (op) {
   104ec:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   104f0:	2b52      	cmp	r3, #82	; 0x52
   104f2:	d105      	bne.n	10500 <att_op_get_type+0x58>
		return ATT_COMMAND;
   104f4:	2000      	movs	r0, #0
}
   104f6:	4770      	bx	lr
		return ATT_REQUEST;
   104f8:	2001      	movs	r0, #1
   104fa:	4770      	bx	lr
		return ATT_INDICATION;
   104fc:	2005      	movs	r0, #5
   104fe:	4770      	bx	lr
		return ATT_COMMAND;
   10500:	f010 0f40 	tst.w	r0, #64	; 0x40
   10504:	bf0c      	ite	eq
   10506:	2006      	moveq	r0, #6
   10508:	2000      	movne	r0, #0
   1050a:	4770      	bx	lr
	switch (op) {
   1050c:	2004      	movs	r0, #4
   1050e:	4770      	bx	lr
		return ATT_RESPONSE;
   10510:	2002      	movs	r0, #2
   10512:	4770      	bx	lr
   10514:	028aaaaa 	.word	0x028aaaaa
   10518:	01455554 	.word	0x01455554

0001051c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1051c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1051e:	3804      	subs	r0, #4
   10520:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   10522:	a901      	add	r1, sp, #4
   10524:	4802      	ldr	r0, [pc, #8]	; (10530 <bt_att_released+0x14>)
   10526:	f00d f8db 	bl	1d6e0 <k_mem_slab_free>
}
   1052a:	b003      	add	sp, #12
   1052c:	f85d fb04 	ldr.w	pc, [sp], #4
   10530:	20008534 	.word	0x20008534

00010534 <tx_meta_data_free>:
{
   10534:	b510      	push	{r4, lr}
   10536:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   10538:	2100      	movs	r1, #0
   1053a:	2214      	movs	r2, #20
   1053c:	f009 ff22 	bl	1a384 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   10540:	4621      	mov	r1, r4
}
   10542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   10546:	4801      	ldr	r0, [pc, #4]	; (1054c <tx_meta_data_free+0x18>)
   10548:	f00d b994 	b.w	1d874 <k_queue_append>
   1054c:	200085dc 	.word	0x200085dc

00010550 <find_type_cb>:
{
   10550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10554:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   10556:	f8d2 a000 	ldr.w	sl, [r2]
{
   1055a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1055c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10560:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   10562:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10564:	f642 0301 	movw	r3, #10241	; 0x2801
{
   10568:	4680      	mov	r8, r0
   1056a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1056c:	6800      	ldr	r0, [r0, #0]
   1056e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   10572:	85fb      	strh	r3, [r7, #46]	; 0x2e
   10574:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   10578:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1057a:	f009 ff35 	bl	1a3e8 <bt_uuid_cmp>
   1057e:	2800      	cmp	r0, #0
   10580:	d070      	beq.n	10664 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   10582:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10586:	f8d8 0000 	ldr.w	r0, [r8]
   1058a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1058e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   10590:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   10594:	f009 ff28 	bl	1a3e8 <bt_uuid_cmp>
   10598:	b138      	cbz	r0, 105aa <find_type_cb+0x5a>
		if (data->group &&
   1059a:	68a3      	ldr	r3, [r4, #8]
   1059c:	b11b      	cbz	r3, 105a6 <find_type_cb+0x56>
   1059e:	885a      	ldrh	r2, [r3, #2]
   105a0:	42b2      	cmp	r2, r6
   105a2:	d200      	bcs.n	105a6 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   105a4:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   105a6:	2001      	movs	r0, #1
   105a8:	e009      	b.n	105be <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   105aa:	6861      	ldr	r1, [r4, #4]
   105ac:	4608      	mov	r0, r1
   105ae:	f00a fc7d 	bl	1aeac <net_buf_frags_len>
   105b2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   105b6:	1a1b      	subs	r3, r3, r0
   105b8:	2b03      	cmp	r3, #3
   105ba:	d804      	bhi.n	105c6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   105bc:	2000      	movs	r0, #0
}
   105be:	3744      	adds	r7, #68	; 0x44
   105c0:	46bd      	mov	sp, r7
   105c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   105c6:	4608      	mov	r0, r1
   105c8:	f00b ff97 	bl	1c4fa <net_buf_frag_last>
   105cc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   105ce:	6860      	ldr	r0, [r4, #4]
   105d0:	f00a fc6c 	bl	1aeac <net_buf_frags_len>
   105d4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   105d8:	f105 090c 	add.w	r9, r5, #12
   105dc:	ebab 0b00 	sub.w	fp, fp, r0
   105e0:	4648      	mov	r0, r9
   105e2:	f00b fff4 	bl	1c5ce <net_buf_simple_tailroom>
   105e6:	4558      	cmp	r0, fp
   105e8:	d93f      	bls.n	1066a <find_type_cb+0x11a>
   105ea:	6860      	ldr	r0, [r4, #4]
   105ec:	f00a fc5e 	bl	1aeac <net_buf_frags_len>
   105f0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   105f4:	1a18      	subs	r0, r3, r0
	if (!len) {
   105f6:	b970      	cbnz	r0, 10616 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   105f8:	6863      	ldr	r3, [r4, #4]
   105fa:	7a98      	ldrb	r0, [r3, #10]
   105fc:	f003 fd18 	bl	14030 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   10600:	2200      	movs	r2, #0
   10602:	2300      	movs	r3, #0
   10604:	f00b ff3f 	bl	1c486 <net_buf_alloc_fixed>
		if (!frag) {
   10608:	4605      	mov	r5, r0
   1060a:	2800      	cmp	r0, #0
   1060c:	d0d6      	beq.n	105bc <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1060e:	4601      	mov	r1, r0
   10610:	6860      	ldr	r0, [r4, #4]
   10612:	f00b ff83 	bl	1c51c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   10616:	2300      	movs	r3, #0
   10618:	9300      	str	r3, [sp, #0]
   1061a:	4641      	mov	r1, r8
   1061c:	f8d8 a004 	ldr.w	sl, [r8, #4]
   10620:	2310      	movs	r3, #16
   10622:	6878      	ldr	r0, [r7, #4]
   10624:	f107 0208 	add.w	r2, r7, #8
   10628:	47d0      	blx	sl
	if (read < 0) {
   1062a:	f1b0 0800 	subs.w	r8, r0, #0
   1062e:	db19      	blt.n	10664 <find_type_cb+0x114>
	if (read != data->value_len) {
   10630:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   10632:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   10634:	4542      	cmp	r2, r8
   10636:	d03f      	beq.n	106b8 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   10638:	4601      	mov	r1, r0
   1063a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1063e:	f009 ff01 	bl	1a444 <bt_uuid_create>
   10642:	b9b0      	cbnz	r0, 10672 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   10644:	466d      	mov	r5, sp
   10646:	b088      	sub	sp, #32
   10648:	7c23      	ldrb	r3, [r4, #16]
   1064a:	aa02      	add	r2, sp, #8
   1064c:	491d      	ldr	r1, [pc, #116]	; (106c4 <find_type_cb+0x174>)
   1064e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   10652:	2303      	movs	r3, #3
   10654:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10658:	481b      	ldr	r0, [pc, #108]	; (106c8 <find_type_cb+0x178>)
   1065a:	f842 3f10 	str.w	r3, [r2, #16]!
   1065e:	f00a fd10 	bl	1b082 <z_log_msg_static_create.constprop.0>
   10662:	46ad      	mov	sp, r5
	data->group = NULL;
   10664:	2300      	movs	r3, #0
   10666:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   10668:	e79d      	b.n	105a6 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1066a:	4648      	mov	r0, r9
   1066c:	f00b ffaf 	bl	1c5ce <net_buf_simple_tailroom>
   10670:	e7c1      	b.n	105f6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   10672:	fa5f f288 	uxtb.w	r2, r8
   10676:	f107 0108 	add.w	r1, r7, #8
   1067a:	f107 0018 	add.w	r0, r7, #24
   1067e:	f009 fee1 	bl	1a444 <bt_uuid_create>
   10682:	b930      	cbnz	r0, 10692 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   10684:	466d      	mov	r5, sp
   10686:	b088      	sub	sp, #32
   10688:	aa02      	add	r2, sp, #8
   1068a:	4b10      	ldr	r3, [pc, #64]	; (106cc <find_type_cb+0x17c>)
   1068c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   10690:	e7df      	b.n	10652 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   10692:	f107 0118 	add.w	r1, r7, #24
   10696:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1069a:	f009 fea5 	bl	1a3e8 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1069e:	2800      	cmp	r0, #0
   106a0:	d1e0      	bne.n	10664 <find_type_cb+0x114>
	data->err = 0x00;
   106a2:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   106a4:	2104      	movs	r1, #4
   106a6:	7463      	strb	r3, [r4, #17]
   106a8:	f105 000c 	add.w	r0, r5, #12
   106ac:	f00b ff4b 	bl	1c546 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   106b0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   106b2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   106b4:	68a3      	ldr	r3, [r4, #8]
   106b6:	e775      	b.n	105a4 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   106b8:	f107 0108 	add.w	r1, r7, #8
   106bc:	f009 fe47 	bl	1a34e <memcmp>
   106c0:	e7ed      	b.n	1069e <find_type_cb+0x14e>
   106c2:	bf00      	nop
   106c4:	00020a3d 	.word	0x00020a3d
   106c8:	0001e52c 	.word	0x0001e52c
   106cc:	00020a5c 	.word	0x00020a5c

000106d0 <chan_send>:
{
   106d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   106d4:	4606      	mov	r6, r0
   106d6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   106d8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   106dc:	68cb      	ldr	r3, [r1, #12]
{
   106de:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   106e0:	2102      	movs	r1, #2
   106e2:	3034      	adds	r0, #52	; 0x34
   106e4:	f00a fbfc 	bl	1aee0 <atomic_test_bit>
   106e8:	b970      	cbnz	r0, 10708 <chan_send+0x38>
		return -EINVAL;
   106ea:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   106ee:	4b2e      	ldr	r3, [pc, #184]	; (107a8 <chan_send+0xd8>)
   106f0:	482e      	ldr	r0, [pc, #184]	; (107ac <chan_send+0xdc>)
   106f2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   106f6:	aa06      	add	r2, sp, #24
   106f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   106fc:	f00a fcc1 	bl	1b082 <z_log_msg_static_create.constprop.0>
}
   10700:	4628      	mov	r0, r5
   10702:	b009      	add	sp, #36	; 0x24
   10704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	2bd2      	cmp	r3, #210	; 0xd2
   1070c:	d117      	bne.n	1073e <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   1070e:	6833      	ldr	r3, [r6, #0]
   10710:	4621      	mov	r1, r4
   10712:	6818      	ldr	r0, [r3, #0]
   10714:	f00b fd60 	bl	1c1d8 <bt_smp_sign>
		if (err) {
   10718:	4605      	mov	r5, r0
   1071a:	b180      	cbz	r0, 1073e <chan_send+0x6e>
			LOG_ERR("Error signing data");
   1071c:	4b24      	ldr	r3, [pc, #144]	; (107b0 <chan_send+0xe0>)
   1071e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10722:	9307      	str	r3, [sp, #28]
   10724:	2302      	movs	r3, #2
   10726:	aa06      	add	r2, sp, #24
   10728:	4820      	ldr	r0, [pc, #128]	; (107ac <chan_send+0xdc>)
   1072a:	9306      	str	r3, [sp, #24]
   1072c:	f00a fca9 	bl	1b082 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   10730:	69a0      	ldr	r0, [r4, #24]
   10732:	f7ff feff 	bl	10534 <tx_meta_data_free>
			net_buf_unref(buf);
   10736:	4620      	mov	r0, r4
   10738:	f003 fd3c 	bl	141b4 <net_buf_unref>
			return err;
   1073c:	e7e0      	b.n	10700 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   1073e:	f104 000c 	add.w	r0, r4, #12
   10742:	f00b ff40 	bl	1c5c6 <net_buf_simple_headroom>
	state->len = buf->len;
   10746:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1074a:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1074e:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   10750:	4607      	mov	r7, r0
   10752:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   10754:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   10756:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   10758:	7818      	ldrb	r0, [r3, #0]
   1075a:	f7ff fea5 	bl	104a8 <att_op_get_type>
	switch (op_type) {
   1075e:	2805      	cmp	r0, #5
   10760:	bf98      	it	ls
   10762:	4b14      	ldrls	r3, [pc, #80]	; (107b4 <chan_send+0xe4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   10764:	4622      	mov	r2, r4
   10766:	bf94      	ite	ls
   10768:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1076c:	4b12      	ldrhi	r3, [pc, #72]	; (107b8 <chan_send+0xe8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1076e:	4628      	mov	r0, r5
   10770:	f8cd 9000 	str.w	r9, [sp]
   10774:	f00a fb64 	bl	1ae40 <bt_l2cap_send_cb>
	if (err) {
   10778:	4605      	mov	r5, r0
   1077a:	2800      	cmp	r0, #0
   1077c:	d0c0      	beq.n	10700 <chan_send+0x30>
		if (err == -ENOBUFS) {
   1077e:	f110 0f69 	cmn.w	r0, #105	; 0x69
   10782:	d109      	bne.n	10798 <chan_send+0xc8>
			LOG_ERR("Ran out of TX buffers or contexts.");
   10784:	4b0d      	ldr	r3, [pc, #52]	; (107bc <chan_send+0xec>)
   10786:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1078a:	9307      	str	r3, [sp, #28]
   1078c:	2302      	movs	r3, #2
   1078e:	4807      	ldr	r0, [pc, #28]	; (107ac <chan_send+0xdc>)
   10790:	aa06      	add	r2, sp, #24
   10792:	9306      	str	r3, [sp, #24]
   10794:	f00a fc75 	bl	1b082 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   10798:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1079a:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1079e:	fa13 f787 	uxtah	r7, r3, r7
   107a2:	60e7      	str	r7, [r4, #12]
}
   107a4:	e7ac      	b.n	10700 <chan_send+0x30>
   107a6:	bf00      	nop
   107a8:	00020a7b 	.word	0x00020a7b
   107ac:	0001e52c 	.word	0x0001e52c
   107b0:	00020a95 	.word	0x00020a95
   107b4:	0001eb48 	.word	0x0001eb48
   107b8:	0001b467 	.word	0x0001b467
   107bc:	00020aa8 	.word	0x00020aa8

000107c0 <att_get>:
{
   107c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   107c2:	7b43      	ldrb	r3, [r0, #13]
   107c4:	2b07      	cmp	r3, #7
   107c6:	d00d      	beq.n	107e4 <att_get+0x24>
		LOG_WRN("Not connected");
   107c8:	4b13      	ldr	r3, [pc, #76]	; (10818 <att_get+0x58>)
   107ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   107ce:	9305      	str	r3, [sp, #20]
   107d0:	2302      	movs	r3, #2
   107d2:	aa04      	add	r2, sp, #16
   107d4:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   107d6:	4811      	ldr	r0, [pc, #68]	; (1081c <att_get+0x5c>)
   107d8:	f00a fc53 	bl	1b082 <z_log_msg_static_create.constprop.0>
		return NULL;
   107dc:	2000      	movs	r0, #0
}
   107de:	b007      	add	sp, #28
   107e0:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   107e4:	2104      	movs	r1, #4
   107e6:	f00a fb4d 	bl	1ae84 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   107ea:	4603      	mov	r3, r0
   107ec:	b938      	cbnz	r0, 107fe <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   107ee:	4b0c      	ldr	r3, [pc, #48]	; (10820 <att_get+0x60>)
   107f0:	9305      	str	r3, [sp, #20]
   107f2:	2302      	movs	r3, #2
   107f4:	9304      	str	r3, [sp, #16]
   107f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107fa:	aa04      	add	r2, sp, #16
   107fc:	e7eb      	b.n	107d6 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   107fe:	2102      	movs	r1, #2
   10800:	3030      	adds	r0, #48	; 0x30
   10802:	f00a fb6d 	bl	1aee0 <atomic_test_bit>
   10806:	b918      	cbnz	r0, 10810 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   10808:	4b06      	ldr	r3, [pc, #24]	; (10824 <att_get+0x64>)
   1080a:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1080e:	e7f2      	b.n	107f6 <att_get+0x36>
	return att_chan->att;
   10810:	f853 0c04 	ldr.w	r0, [r3, #-4]
   10814:	e7e3      	b.n	107de <att_get+0x1e>
   10816:	bf00      	nop
   10818:	00020acb 	.word	0x00020acb
   1081c:	0001e52c 	.word	0x0001e52c
   10820:	00020ad9 	.word	0x00020ad9
   10824:	00020a7b 	.word	0x00020a7b

00010828 <bt_att_connected>:
{
   10828:	b510      	push	{r4, lr}
   1082a:	4604      	mov	r4, r0
   1082c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10830:	e8d3 1fef 	ldaex	r1, [r3]
   10834:	f041 0104 	orr.w	r1, r1, #4
   10838:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1083c:	2a00      	cmp	r2, #0
   1083e:	d1f7      	bne.n	10830 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10840:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   10842:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10844:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10846:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   10848:	f00a fbd8 	bl	1affc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1084c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   10850:	4903      	ldr	r1, [pc, #12]	; (10860 <bt_att_connected+0x38>)
   10852:	f00d f8ef 	bl	1da34 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   10856:	6820      	ldr	r0, [r4, #0]
}
   10858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1085c:	f001 bd3e 	b.w	122dc <bt_gatt_connected>
   10860:	00011545 	.word	0x00011545

00010864 <read_group_cb>:
{
   10864:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10868:	f04f 0800 	mov.w	r8, #0
   1086c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   10870:	4605      	mov	r5, r0
   10872:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10874:	6800      	ldr	r0, [r0, #0]
   10876:	a902      	add	r1, sp, #8
{
   10878:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1087a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1087c:	f88d 8008 	strb.w	r8, [sp, #8]
   10880:	f8ad 300a 	strh.w	r3, [sp, #10]
   10884:	f009 fdb0 	bl	1a3e8 <bt_uuid_cmp>
   10888:	b1a0      	cbz	r0, 108b4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1088a:	f642 0301 	movw	r3, #10241	; 0x2801
   1088e:	6828      	ldr	r0, [r5, #0]
   10890:	a903      	add	r1, sp, #12
   10892:	f88d 800c 	strb.w	r8, [sp, #12]
   10896:	f8ad 300e 	strh.w	r3, [sp, #14]
   1089a:	f009 fda5 	bl	1a3e8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1089e:	b148      	cbz	r0, 108b4 <read_group_cb+0x50>
		if (data->group &&
   108a0:	6923      	ldr	r3, [r4, #16]
   108a2:	b11b      	cbz	r3, 108ac <read_group_cb+0x48>
   108a4:	885a      	ldrh	r2, [r3, #2]
   108a6:	42b2      	cmp	r2, r6
   108a8:	d200      	bcs.n	108ac <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   108aa:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   108ac:	2001      	movs	r0, #1
}
   108ae:	b004      	add	sp, #16
   108b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   108b4:	6861      	ldr	r1, [r4, #4]
   108b6:	6828      	ldr	r0, [r5, #0]
   108b8:	f009 fd96 	bl	1a3e8 <bt_uuid_cmp>
   108bc:	b110      	cbz	r0, 108c4 <read_group_cb+0x60>
		data->group = NULL;
   108be:	2300      	movs	r3, #0
   108c0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   108c2:	e7f3      	b.n	108ac <read_group_cb+0x48>
	if (data->rsp->len &&
   108c4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   108c6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   108c8:	781a      	ldrb	r2, [r3, #0]
   108ca:	b132      	cbz	r2, 108da <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   108cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   108ce:	8a01      	ldrh	r1, [r0, #16]
   108d0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   108d2:	4293      	cmp	r3, r2
   108d4:	da01      	bge.n	108da <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   108d6:	2000      	movs	r0, #0
   108d8:	e7e9      	b.n	108ae <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   108da:	2104      	movs	r1, #4
   108dc:	300c      	adds	r0, #12
   108de:	f00b fe32 	bl	1c546 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   108e2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   108e4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   108e6:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   108e8:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   108ea:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   108ec:	4b07      	ldr	r3, [pc, #28]	; (1090c <read_group_cb+0xa8>)
   108ee:	9401      	str	r4, [sp, #4]
   108f0:	9300      	str	r3, [sp, #0]
   108f2:	4638      	mov	r0, r7
   108f4:	2300      	movs	r3, #0
   108f6:	68a2      	ldr	r2, [r4, #8]
   108f8:	f00a fc05 	bl	1b106 <att_chan_read>
	if (read < 0) {
   108fc:	2800      	cmp	r0, #0
   108fe:	dbea      	blt.n	108d6 <read_group_cb+0x72>
	if (!data->group) {
   10900:	6920      	ldr	r0, [r4, #16]
   10902:	3800      	subs	r0, #0
   10904:	bf18      	it	ne
   10906:	2001      	movne	r0, #1
   10908:	e7d1      	b.n	108ae <read_group_cb+0x4a>
   1090a:	bf00      	nop
   1090c:	0001b063 	.word	0x0001b063

00010910 <read_type_cb>:
{
   10910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   10914:	6817      	ldr	r7, [r2, #0]
{
   10916:	4605      	mov	r5, r0
   10918:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1091a:	6800      	ldr	r0, [r0, #0]
   1091c:	6851      	ldr	r1, [r2, #4]
{
   1091e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   10920:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10922:	f009 fd61 	bl	1a3e8 <bt_uuid_cmp>
   10926:	4681      	mov	r9, r0
   10928:	2800      	cmp	r0, #0
   1092a:	d13c      	bne.n	109a6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1092c:	4630      	mov	r0, r6
   1092e:	2295      	movs	r2, #149	; 0x95
   10930:	4629      	mov	r1, r5
   10932:	f00b f92d 	bl	1bb90 <bt_gatt_check_perm>
   10936:	4606      	mov	r6, r0
   10938:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1093a:	b140      	cbz	r0, 1094e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1093c:	68e3      	ldr	r3, [r4, #12]
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	b10b      	cbz	r3, 10946 <read_type_cb+0x36>
			data->err = 0x00;
   10942:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   10946:	2000      	movs	r0, #0
}
   10948:	b003      	add	sp, #12
   1094a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1094e:	68a0      	ldr	r0, [r4, #8]
   10950:	f00b fdd3 	bl	1c4fa <net_buf_frag_last>
   10954:	2102      	movs	r1, #2
   10956:	300c      	adds	r0, #12
   10958:	f00b fdf5 	bl	1c546 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1095c:	4b13      	ldr	r3, [pc, #76]	; (109ac <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1095e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   10960:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10964:	9300      	str	r3, [sp, #0]
   10966:	9401      	str	r4, [sp, #4]
   10968:	4633      	mov	r3, r6
   1096a:	4629      	mov	r1, r5
   1096c:	4638      	mov	r0, r7
   1096e:	68a2      	ldr	r2, [r4, #8]
   10970:	f00a fbc9 	bl	1b106 <att_chan_read>
	if (read < 0) {
   10974:	2800      	cmp	r0, #0
   10976:	da07      	bge.n	10988 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   10978:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1097c:	bf32      	itee	cc
   1097e:	200e      	movcc	r0, #14
		return -err;
   10980:	4240      	negcs	r0, r0
   10982:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   10984:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   10986:	e7de      	b.n	10946 <read_type_cb+0x36>
	if (!data->item) {
   10988:	6923      	ldr	r3, [r4, #16]
   1098a:	2b00      	cmp	r3, #0
   1098c:	d0db      	beq.n	10946 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1098e:	68a0      	ldr	r0, [r4, #8]
   10990:	f00a fa8c 	bl	1aeac <net_buf_frags_len>
   10994:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   10996:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   10998:	68e3      	ldr	r3, [r4, #12]
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	4298      	cmp	r0, r3
   1099e:	bf94      	ite	ls
   109a0:	2000      	movls	r0, #0
   109a2:	2001      	movhi	r0, #1
   109a4:	e7d0      	b.n	10948 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   109a6:	2001      	movs	r0, #1
   109a8:	e7ce      	b.n	10948 <read_type_cb+0x38>
   109aa:	bf00      	nop
   109ac:	0001aebd 	.word	0x0001aebd

000109b0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109b4:	b082      	sub	sp, #8
   109b6:	af00      	add	r7, sp, #0
   109b8:	4604      	mov	r4, r0
   109ba:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   109bc:	2200      	movs	r2, #0
   109be:	2300      	movs	r3, #0
   109c0:	4639      	mov	r1, r7
   109c2:	4838      	ldr	r0, [pc, #224]	; (10aa4 <bt_att_accept+0xf4>)
   109c4:	f006 fd10 	bl	173e8 <k_mem_slab_alloc>
   109c8:	4605      	mov	r5, r0
   109ca:	b1a8      	cbz	r0, 109f8 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   109cc:	466d      	mov	r5, sp
   109ce:	b088      	sub	sp, #32
   109d0:	466a      	mov	r2, sp
   109d2:	4b35      	ldr	r3, [pc, #212]	; (10aa8 <bt_att_accept+0xf8>)
   109d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109d8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   109dc:	2303      	movs	r3, #3
   109de:	4833      	ldr	r0, [pc, #204]	; (10aac <bt_att_accept+0xfc>)
   109e0:	f842 3f10 	str.w	r3, [r2, #16]!
   109e4:	f00a fb4d 	bl	1b082 <z_log_msg_static_create.constprop.0>
   109e8:	46ad      	mov	sp, r5
		return -ENOMEM;
   109ea:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   109ee:	4628      	mov	r0, r5
   109f0:	3708      	adds	r7, #8
   109f2:	46bd      	mov	sp, r7
   109f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   109f8:	f007 fc1a 	bl	18230 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   109fc:	4b2c      	ldr	r3, [pc, #176]	; (10ab0 <bt_att_accept+0x100>)
	(void)memset(att, 0, sizeof(*att));
   109fe:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   10a00:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   10a02:	222c      	movs	r2, #44	; 0x2c
   10a04:	6838      	ldr	r0, [r7, #0]
   10a06:	f009 fcbd 	bl	1a384 <memset>
	att->conn = conn;
   10a0a:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10a0c:	2200      	movs	r2, #0
	att->conn = conn;
   10a0e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   10a10:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10a12:	2300      	movs	r3, #0
	list->tail = NULL;
   10a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
   10a18:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   10a1c:	4825      	ldr	r0, [pc, #148]	; (10ab4 <bt_att_accept+0x104>)
   10a1e:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   10a20:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10a22:	f006 fce1 	bl	173e8 <k_mem_slab_alloc>
   10a26:	4605      	mov	r5, r0
   10a28:	b180      	cbz	r0, 10a4c <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   10a2a:	6823      	ldr	r3, [r4, #0]
   10a2c:	466c      	mov	r4, sp
   10a2e:	b088      	sub	sp, #32
   10a30:	466a      	mov	r2, sp
   10a32:	4921      	ldr	r1, [pc, #132]	; (10ab8 <bt_att_accept+0x108>)
   10a34:	481d      	ldr	r0, [pc, #116]	; (10aac <bt_att_accept+0xfc>)
   10a36:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10a3a:	2303      	movs	r3, #3
   10a3c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10a40:	f842 3f10 	str.w	r3, [r2, #16]!
   10a44:	f00a fb1d 	bl	1b082 <z_log_msg_static_create.constprop.0>
   10a48:	46a5      	mov	sp, r4
	if (!chan) {
   10a4a:	e7ce      	b.n	109ea <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   10a4c:	4601      	mov	r1, r0
   10a4e:	2290      	movs	r2, #144	; 0x90
   10a50:	6878      	ldr	r0, [r7, #4]
   10a52:	f009 fc97 	bl	1a384 <memset>
	chan->chan.chan.ops = &ops;
   10a56:	6878      	ldr	r0, [r7, #4]
   10a58:	4b18      	ldr	r3, [pc, #96]	; (10abc <bt_att_accept+0x10c>)
   10a5a:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   10a5c:	303c      	adds	r0, #60	; 0x3c
   10a5e:	f00c fefd 	bl	1d85c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	3334      	adds	r3, #52	; 0x34
   10a66:	e8d3 2fef 	ldaex	r2, [r3]
   10a6a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   10a6e:	2900      	cmp	r1, #0
   10a70:	d1f9      	bne.n	10a66 <bt_att_accept+0xb6>
	chan->att = att;
   10a72:	687b      	ldr	r3, [r7, #4]
   10a74:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   10a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   10a78:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   10a7c:	b91b      	cbnz	r3, 10a86 <bt_att_accept+0xd6>
   10a7e:	f104 000c 	add.w	r0, r4, #12
   10a82:	f00c feeb 	bl	1d85c <z_impl_k_queue_init>
	return list->head;
   10a86:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   10a88:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
   10a8c:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   10a90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   10a92:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   10a94:	b902      	cbnz	r2, 10a98 <bt_att_accept+0xe8>
	list->tail = node;
   10a96:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   10a98:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d0a5      	beq.n	109ea <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   10a9e:	3304      	adds	r3, #4
   10aa0:	6033      	str	r3, [r6, #0]
	return 0;
   10aa2:	e7a4      	b.n	109ee <bt_att_accept+0x3e>
   10aa4:	20008518 	.word	0x20008518
   10aa8:	00020af4 	.word	0x00020af4
   10aac:	0001e52c 	.word	0x0001e52c
   10ab0:	2000995c 	.word	0x2000995c
   10ab4:	20008534 	.word	0x20008534
   10ab8:	00020b19 	.word	0x00020b19
   10abc:	20008270 	.word	0x20008270

00010ac0 <bt_att_chan_create_pdu>:
{
   10ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10ac4:	b086      	sub	sp, #24
   10ac6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10ac8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10aca:	1c53      	adds	r3, r2, #1
   10acc:	428b      	cmp	r3, r1
{
   10ace:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10ad0:	d915      	bls.n	10afe <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   10ad2:	466c      	mov	r4, sp
   10ad4:	b088      	sub	sp, #32
   10ad6:	466a      	mov	r2, sp
   10ad8:	482d      	ldr	r0, [pc, #180]	; (10b90 <bt_att_chan_create_pdu+0xd0>)
   10ada:	61d3      	str	r3, [r2, #28]
   10adc:	2304      	movs	r3, #4
   10ade:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10ae2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10ae6:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   10aea:	482a      	ldr	r0, [pc, #168]	; (10b94 <bt_att_chan_create_pdu+0xd4>)
   10aec:	f00a fac9 	bl	1b082 <z_log_msg_static_create.constprop.0>
   10af0:	46a5      	mov	sp, r4
		return NULL;
   10af2:	2400      	movs	r4, #0
}
   10af4:	4620      	mov	r0, r4
   10af6:	3718      	adds	r7, #24
   10af8:	46bd      	mov	sp, r7
   10afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   10afe:	4628      	mov	r0, r5
   10b00:	f7ff fcd2 	bl	104a8 <att_op_get_type>
   10b04:	2802      	cmp	r0, #2
   10b06:	d019      	beq.n	10b3c <bt_att_chan_create_pdu+0x7c>
   10b08:	2804      	cmp	r0, #4
   10b0a:	d017      	beq.n	10b3c <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   10b0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   10b10:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   10b14:	2100      	movs	r1, #0
   10b16:	4642      	mov	r2, r8
   10b18:	464b      	mov	r3, r9
   10b1a:	4608      	mov	r0, r1
   10b1c:	f00a f98d 	bl	1ae3a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   10b20:	4604      	mov	r4, r0
   10b22:	b980      	cbnz	r0, 10b46 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   10b24:	466c      	mov	r4, sp
   10b26:	b088      	sub	sp, #32
   10b28:	466a      	mov	r2, sp
   10b2a:	4b1b      	ldr	r3, [pc, #108]	; (10b98 <bt_att_chan_create_pdu+0xd8>)
   10b2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10b30:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10b34:	2303      	movs	r3, #3
   10b36:	f842 3f10 	str.w	r3, [r2, #16]!
   10b3a:	e7d6      	b.n	10aea <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   10b3c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   10b40:	f04f 0900 	mov.w	r9, #0
   10b44:	e7e6      	b.n	10b14 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   10b46:	f007 fb73 	bl	18230 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10b4a:	4b14      	ldr	r3, [pc, #80]	; (10b9c <bt_att_chan_create_pdu+0xdc>)
   10b4c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10b4e:	4814      	ldr	r0, [pc, #80]	; (10ba0 <bt_att_chan_create_pdu+0xe0>)
   10b50:	bf07      	ittee	eq
   10b52:	2200      	moveq	r2, #0
   10b54:	2300      	moveq	r3, #0
   10b56:	4642      	movne	r2, r8
   10b58:	464b      	movne	r3, r9
   10b5a:	f006 fdfd 	bl	17758 <z_impl_k_queue_get>
	if (!data) {
   10b5e:	b970      	cbnz	r0, 10b7e <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   10b60:	4b10      	ldr	r3, [pc, #64]	; (10ba4 <bt_att_chan_create_pdu+0xe4>)
   10b62:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10b66:	617b      	str	r3, [r7, #20]
   10b68:	2302      	movs	r3, #2
   10b6a:	480a      	ldr	r0, [pc, #40]	; (10b94 <bt_att_chan_create_pdu+0xd4>)
   10b6c:	f107 0210 	add.w	r2, r7, #16
   10b70:	613b      	str	r3, [r7, #16]
   10b72:	f00a fa86 	bl	1b082 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   10b76:	4620      	mov	r0, r4
   10b78:	f003 fb1c 	bl	141b4 <net_buf_unref>
		return NULL;
   10b7c:	e7b9      	b.n	10af2 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   10b7e:	61a0      	str	r0, [r4, #24]
   10b80:	2101      	movs	r1, #1
   10b82:	f104 000c 	add.w	r0, r4, #12
   10b86:	f00b fcde 	bl	1c546 <net_buf_simple_add>
	hdr->code = op;
   10b8a:	7005      	strb	r5, [r0, #0]
	return buf;
   10b8c:	e7b2      	b.n	10af4 <bt_att_chan_create_pdu+0x34>
   10b8e:	bf00      	nop
   10b90:	00020b3e 	.word	0x00020b3e
   10b94:	0001e52c 	.word	0x0001e52c
   10b98:	000208f1 	.word	0x000208f1
   10b9c:	200096d8 	.word	0x200096d8
   10ba0:	200085dc 	.word	0x200085dc
   10ba4:	00020b63 	.word	0x00020b63

00010ba8 <bt_att_recv>:
{
   10ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bac:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   10bae:	8a0b      	ldrh	r3, [r1, #16]
{
   10bb0:	4682      	mov	sl, r0
   10bb2:	460c      	mov	r4, r1
   10bb4:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   10bb6:	b97b      	cbnz	r3, 10bd8 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   10bb8:	4b4c      	ldr	r3, [pc, #304]	; (10cec <bt_att_recv+0x144>)
   10bba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10bbe:	617b      	str	r3, [r7, #20]
   10bc0:	2302      	movs	r3, #2
   10bc2:	f107 0210 	add.w	r2, r7, #16
   10bc6:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   10bc8:	4849      	ldr	r0, [pc, #292]	; (10cf0 <bt_att_recv+0x148>)
   10bca:	f00a fa5a 	bl	1b082 <z_log_msg_static_create.constprop.0>
}
   10bce:	2000      	movs	r0, #0
   10bd0:	371c      	adds	r7, #28
   10bd2:	46bd      	mov	sp, r7
   10bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10bd8:	2101      	movs	r1, #1
   10bda:	f104 000c 	add.w	r0, r4, #12
   10bde:	f00b fce2 	bl	1c5a6 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   10be2:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   10be6:	4605      	mov	r5, r0
   10be8:	2b00      	cmp	r3, #0
   10bea:	d0f0      	beq.n	10bce <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10bec:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   10bee:	7801      	ldrb	r1, [r0, #0]
   10bf0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 10cf4 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   10bf4:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   10bf8:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   10bfc:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   10c00:	4288      	cmp	r0, r1
   10c02:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   10c06:	d114      	bne.n	10c32 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   10c08:	f892 9002 	ldrb.w	r9, [r2, #2]
   10c0c:	f1b9 0f01 	cmp.w	r9, #1
   10c10:	d131      	bne.n	10c76 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   10c12:	2100      	movs	r1, #0
   10c14:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   10c18:	f00a fb26 	bl	1b268 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   10c1c:	2800      	cmp	r0, #0
   10c1e:	d035      	beq.n	10c8c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   10c20:	4b35      	ldr	r3, [pc, #212]	; (10cf8 <bt_att_recv+0x150>)
   10c22:	617b      	str	r3, [r7, #20]
   10c24:	2302      	movs	r3, #2
   10c26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10c2a:	613b      	str	r3, [r7, #16]
   10c2c:	f107 0210 	add.w	r2, r7, #16
   10c30:	e7ca      	b.n	10bc8 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10c32:	3301      	adds	r3, #1
   10c34:	2b0e      	cmp	r3, #14
   10c36:	d1df      	bne.n	10bf8 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   10c38:	466c      	mov	r4, sp
   10c3a:	b088      	sub	sp, #32
   10c3c:	466a      	mov	r2, sp
   10c3e:	4b2f      	ldr	r3, [pc, #188]	; (10cfc <bt_att_recv+0x154>)
   10c40:	482b      	ldr	r0, [pc, #172]	; (10cf0 <bt_att_recv+0x148>)
   10c42:	e9c2 3105 	strd	r3, r1, [r2, #20]
   10c46:	2303      	movs	r3, #3
   10c48:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10c4c:	f842 3f10 	str.w	r3, [r2, #16]!
   10c50:	f00a fa17 	bl	1b082 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   10c54:	7829      	ldrb	r1, [r5, #0]
   10c56:	46a5      	mov	sp, r4
   10c58:	4608      	mov	r0, r1
   10c5a:	f7ff fc25 	bl	104a8 <att_op_get_type>
   10c5e:	2800      	cmp	r0, #0
   10c60:	d0b5      	beq.n	10bce <bt_att_recv+0x26>
   10c62:	2805      	cmp	r0, #5
   10c64:	d0b3      	beq.n	10bce <bt_att_recv+0x26>
	if (!req) {
   10c66:	2900      	cmp	r1, #0
   10c68:	d0b1      	beq.n	10bce <bt_att_recv+0x26>
   10c6a:	2306      	movs	r3, #6
   10c6c:	2200      	movs	r2, #0
   10c6e:	4630      	mov	r0, r6
   10c70:	f00a fc54 	bl	1b51c <send_err_rsp.part.0>
   10c74:	e7ab      	b.n	10bce <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   10c76:	f1b9 0f05 	cmp.w	r9, #5
   10c7a:	d107      	bne.n	10c8c <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   10c7c:	2101      	movs	r1, #1
   10c7e:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   10c82:	f00a faf1 	bl	1b268 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   10c86:	b108      	cbz	r0, 10c8c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   10c88:	4b1d      	ldr	r3, [pc, #116]	; (10d00 <bt_att_recv+0x158>)
   10c8a:	e7ca      	b.n	10c22 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   10c8c:	44d8      	add	r8, fp
   10c8e:	8a23      	ldrh	r3, [r4, #16]
   10c90:	f898 2001 	ldrb.w	r2, [r8, #1]
   10c94:	429a      	cmp	r2, r3
   10c96:	d916      	bls.n	10cc6 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   10c98:	46e9      	mov	r9, sp
   10c9a:	b088      	sub	sp, #32
   10c9c:	466a      	mov	r2, sp
   10c9e:	7829      	ldrb	r1, [r5, #0]
   10ca0:	2404      	movs	r4, #4
   10ca2:	4818      	ldr	r0, [pc, #96]	; (10d04 <bt_att_recv+0x15c>)
   10ca4:	61d1      	str	r1, [r2, #28]
   10ca6:	e9c2 0305 	strd	r0, r3, [r2, #20]
   10caa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10cae:	4810      	ldr	r0, [pc, #64]	; (10cf0 <bt_att_recv+0x148>)
   10cb0:	f842 4f10 	str.w	r4, [r2, #16]!
   10cb4:	f00a f9e5 	bl	1b082 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   10cb8:	f898 3002 	ldrb.w	r3, [r8, #2]
   10cbc:	46cd      	mov	sp, r9
   10cbe:	2b01      	cmp	r3, #1
   10cc0:	d185      	bne.n	10bce <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   10cc2:	4623      	mov	r3, r4
   10cc4:	e00c      	b.n	10ce0 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   10cc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10cca:	4621      	mov	r1, r4
   10ccc:	4630      	mov	r0, r6
   10cce:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   10cd0:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   10cd4:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   10cd6:	f47f af7a 	bne.w	10bce <bt_att_recv+0x26>
   10cda:	2800      	cmp	r0, #0
   10cdc:	f43f af77 	beq.w	10bce <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   10ce0:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   10ce2:	2900      	cmp	r1, #0
   10ce4:	f43f af73 	beq.w	10bce <bt_att_recv+0x26>
   10ce8:	e7c0      	b.n	10c6c <bt_att_recv+0xc4>
   10cea:	bf00      	nop
   10cec:	00020b82 	.word	0x00020b82
   10cf0:	0001e52c 	.word	0x0001e52c
   10cf4:	0001eb60 	.word	0x0001eb60
   10cf8:	00020bb7 	.word	0x00020bb7
   10cfc:	00020b9d 	.word	0x00020b9d
   10d00:	00020bd3 	.word	0x00020bd3
   10d04:	00020bf2 	.word	0x00020bf2

00010d08 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d0a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10d0c:	6803      	ldr	r3, [r0, #0]
   10d0e:	460d      	mov	r5, r1
   10d10:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10d12:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10d14:	bf18      	it	ne
   10d16:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10d18:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10d1a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10d1c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10d1e:	f00a fffe 	bl	1bd1e <bt_gatt_change_aware>
   10d22:	b948      	cbnz	r0, 10d38 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10d24:	2105      	movs	r1, #5
   10d26:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10d2a:	f00a fa9d 	bl	1b268 <atomic_test_and_set_bit>
   10d2e:	2800      	cmp	r0, #0
   10d30:	d048      	beq.n	10dc4 <att_write_rsp.constprop.0+0xbc>
			return 0;
   10d32:	2000      	movs	r0, #0
}
   10d34:	b007      	add	sp, #28
   10d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   10d38:	2e00      	cmp	r6, #0
   10d3a:	d045      	beq.n	10dc8 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   10d3c:	2218      	movs	r2, #24
   10d3e:	2100      	movs	r1, #0
   10d40:	4668      	mov	r0, sp
   10d42:	f009 fb1f 	bl	1a384 <memset>
	if (rsp) {
   10d46:	bb67      	cbnz	r7, 10da2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   10d48:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10d4a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   10d4c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10d4e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   10d50:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   10d52:	2300      	movs	r3, #0
   10d54:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   10d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10d5a:	4a1c      	ldr	r2, [pc, #112]	; (10dcc <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   10d5c:	9303      	str	r3, [sp, #12]
	data.len = len;
   10d5e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   10d62:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   10d66:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   10d6a:	2301      	movs	r3, #1
   10d6c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10d70:	466b      	mov	r3, sp
   10d72:	f00a f8ec 	bl	1af4e <bt_gatt_foreach_attr>
	if (data.err) {
   10d76:	f89d 3014 	ldrb.w	r3, [sp, #20]
   10d7a:	b1e3      	cbz	r3, 10db6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   10d7c:	2f00      	cmp	r7, #0
   10d7e:	d0d8      	beq.n	10d32 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10d80:	9b01      	ldr	r3, [sp, #4]
   10d82:	6998      	ldr	r0, [r3, #24]
   10d84:	f7ff fbd6 	bl	10534 <tx_meta_data_free>
			net_buf_unref(data.buf);
   10d88:	9801      	ldr	r0, [sp, #4]
   10d8a:	f003 fa13 	bl	141b4 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   10d8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   10d92:	2d00      	cmp	r5, #0
   10d94:	d0cd      	beq.n	10d32 <att_write_rsp.constprop.0+0x2a>
   10d96:	4632      	mov	r2, r6
   10d98:	4629      	mov	r1, r5
   10d9a:	4620      	mov	r0, r4
   10d9c:	f00a fbbe 	bl	1b51c <send_err_rsp.part.0>
   10da0:	e7c7      	b.n	10d32 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   10da2:	2200      	movs	r2, #0
   10da4:	4639      	mov	r1, r7
   10da6:	4620      	mov	r0, r4
   10da8:	f7ff fe8a 	bl	10ac0 <bt_att_chan_create_pdu>
   10dac:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   10dae:	2800      	cmp	r0, #0
   10db0:	d1ca      	bne.n	10d48 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   10db2:	200e      	movs	r0, #14
   10db4:	e7be      	b.n	10d34 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   10db6:	9901      	ldr	r1, [sp, #4]
   10db8:	2900      	cmp	r1, #0
   10dba:	d0ba      	beq.n	10d32 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   10dbc:	4620      	mov	r0, r4
   10dbe:	f00a f994 	bl	1b0ea <bt_att_chan_send_rsp>
   10dc2:	e7b6      	b.n	10d32 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10dc4:	2012      	movs	r0, #18
   10dc6:	e7b5      	b.n	10d34 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   10dc8:	2001      	movs	r0, #1
   10dca:	e7b3      	b.n	10d34 <att_write_rsp.constprop.0+0x2c>
   10dcc:	0001aeed 	.word	0x0001aeed

00010dd0 <bt_att_create_pdu>:
{
   10dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10dd2:	af00      	add	r7, sp, #0
   10dd4:	460e      	mov	r6, r1
   10dd6:	4615      	mov	r5, r2
	att = att_get(conn);
   10dd8:	f7ff fcf2 	bl	107c0 <att_get>
	if (!att) {
   10ddc:	b1e0      	cbz	r0, 10e18 <bt_att_create_pdu+0x48>
	return list->head;
   10dde:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10de0:	4618      	mov	r0, r3
   10de2:	b11b      	cbz	r3, 10dec <bt_att_create_pdu+0x1c>
	return node->next;
   10de4:	f850 3988 	ldr.w	r3, [r0], #-136
   10de8:	b103      	cbz	r3, 10dec <bt_att_create_pdu+0x1c>
   10dea:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10dec:	1c6c      	adds	r4, r5, #1
   10dee:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10df0:	b118      	cbz	r0, 10dfa <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10df2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10df4:	42a1      	cmp	r1, r4
   10df6:	d219      	bcs.n	10e2c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10df8:	b983      	cbnz	r3, 10e1c <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   10dfa:	466d      	mov	r5, sp
   10dfc:	b088      	sub	sp, #32
   10dfe:	466a      	mov	r2, sp
   10e00:	4b0e      	ldr	r3, [pc, #56]	; (10e3c <bt_att_create_pdu+0x6c>)
   10e02:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10e06:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10e0a:	2303      	movs	r3, #3
   10e0c:	480c      	ldr	r0, [pc, #48]	; (10e40 <bt_att_create_pdu+0x70>)
   10e0e:	f842 3f10 	str.w	r3, [r2, #16]!
   10e12:	f00a f936 	bl	1b082 <z_log_msg_static_create.constprop.0>
   10e16:	46ad      	mov	sp, r5
		return NULL;
   10e18:	2000      	movs	r0, #0
   10e1a:	e00b      	b.n	10e34 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10e1c:	4618      	mov	r0, r3
   10e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10e22:	b14b      	cbz	r3, 10e38 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10e24:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10e26:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10e28:	428a      	cmp	r2, r1
   10e2a:	d8f7      	bhi.n	10e1c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   10e2c:	462a      	mov	r2, r5
   10e2e:	4631      	mov	r1, r6
   10e30:	f7ff fe46 	bl	10ac0 <bt_att_chan_create_pdu>
}
   10e34:	46bd      	mov	sp, r7
   10e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10e38:	4614      	mov	r4, r2
   10e3a:	e7da      	b.n	10df2 <bt_att_create_pdu+0x22>
   10e3c:	00020c11 	.word	0x00020c11
   10e40:	0001e52c 	.word	0x0001e52c

00010e44 <att_read_group_req>:
{
   10e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   10e48:	8a0e      	ldrh	r6, [r1, #16]
{
   10e4a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   10e4c:	3e04      	subs	r6, #4
   10e4e:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   10e50:	2e02      	cmp	r6, #2
{
   10e52:	4608      	mov	r0, r1
   10e54:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   10e56:	d001      	beq.n	10e5c <att_read_group_req+0x18>
   10e58:	2e10      	cmp	r6, #16
   10e5a:	d16a      	bne.n	10f32 <att_read_group_req+0xee>
   10e5c:	2104      	movs	r1, #4
   10e5e:	300c      	adds	r0, #12
   10e60:	f00b fba1 	bl	1c5a6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10e64:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   10e68:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10e6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10e6c:	1d01      	adds	r1, r0, #4
   10e6e:	4632      	mov	r2, r6
   10e70:	4640      	mov	r0, r8
   10e72:	f009 fae7 	bl	1a444 <bt_uuid_create>
   10e76:	2800      	cmp	r0, #0
   10e78:	d05d      	beq.n	10f36 <att_read_group_req+0xf2>
	if (!start || !end) {
   10e7a:	2d00      	cmp	r5, #0
   10e7c:	d03a      	beq.n	10ef4 <att_read_group_req+0xb0>
   10e7e:	2600      	movs	r6, #0
   10e80:	2f00      	cmp	r7, #0
   10e82:	d036      	beq.n	10ef2 <att_read_group_req+0xae>
	if (start > end) {
   10e84:	42bd      	cmp	r5, r7
   10e86:	d835      	bhi.n	10ef4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10e88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10e8c:	4640      	mov	r0, r8
   10e8e:	a901      	add	r1, sp, #4
   10e90:	f88d 6004 	strb.w	r6, [sp, #4]
   10e94:	f8ad 3006 	strh.w	r3, [sp, #6]
   10e98:	f009 faa6 	bl	1a3e8 <bt_uuid_cmp>
   10e9c:	bb70      	cbnz	r0, 10efc <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   10e9e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   10ea0:	2214      	movs	r2, #20
   10ea2:	2100      	movs	r1, #0
   10ea4:	a807      	add	r0, sp, #28
   10ea6:	f009 fa6d 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   10eaa:	2201      	movs	r2, #1
   10eac:	2111      	movs	r1, #17
   10eae:	4630      	mov	r0, r6
   10eb0:	f7ff ff8e 	bl	10dd0 <bt_att_create_pdu>
   10eb4:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   10eb6:	2800      	cmp	r0, #0
   10eb8:	d03d      	beq.n	10f36 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   10eba:	2101      	movs	r1, #1
   10ebc:	300c      	adds	r0, #12
	data.uuid = uuid;
   10ebe:	e9cd 4807 	strd	r4, r8, [sp, #28]
   10ec2:	f00b fb40 	bl	1c546 <net_buf_simple_add>
	data.rsp->len = 0U;
   10ec6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   10ec8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10eca:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   10ecc:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10ece:	4a1b      	ldr	r2, [pc, #108]	; (10f3c <att_read_group_req+0xf8>)
	data.group = NULL;
   10ed0:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10ed2:	4628      	mov	r0, r5
   10ed4:	ab07      	add	r3, sp, #28
   10ed6:	f00a f83a 	bl	1af4e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   10eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	bb1b      	cbnz	r3, 10f28 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ee2:	6998      	ldr	r0, [r3, #24]
   10ee4:	f7ff fb26 	bl	10534 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10eea:	f003 f963 	bl	141b4 <net_buf_unref>
	if (!req) {
   10eee:	230a      	movs	r3, #10
   10ef0:	e001      	b.n	10ef6 <att_read_group_req+0xb2>
			*err = 0U;
   10ef2:	463d      	mov	r5, r7
	if (!req) {
   10ef4:	2301      	movs	r3, #1
   10ef6:	462a      	mov	r2, r5
   10ef8:	2110      	movs	r1, #16
   10efa:	e00e      	b.n	10f1a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   10efc:	f642 0301 	movw	r3, #10241	; 0x2801
   10f00:	4640      	mov	r0, r8
   10f02:	a907      	add	r1, sp, #28
   10f04:	f88d 601c 	strb.w	r6, [sp, #28]
   10f08:	f8ad 301e 	strh.w	r3, [sp, #30]
   10f0c:	f009 fa6c 	bl	1a3e8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10f10:	2800      	cmp	r0, #0
   10f12:	d0c4      	beq.n	10e9e <att_read_group_req+0x5a>
	if (!req) {
   10f14:	2310      	movs	r3, #16
   10f16:	462a      	mov	r2, r5
   10f18:	4619      	mov	r1, r3
   10f1a:	4620      	mov	r0, r4
   10f1c:	f00a fafe 	bl	1b51c <send_err_rsp.part.0>
		return 0;
   10f20:	2000      	movs	r0, #0
}
   10f22:	b00c      	add	sp, #48	; 0x30
   10f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   10f28:	4620      	mov	r0, r4
   10f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   10f2c:	f00a f8dd 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   10f30:	e7f6      	b.n	10f20 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   10f32:	2004      	movs	r0, #4
   10f34:	e7f5      	b.n	10f22 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   10f36:	200e      	movs	r0, #14
   10f38:	e7f3      	b.n	10f22 <att_read_group_req+0xde>
   10f3a:	bf00      	nop
   10f3c:	00010865 	.word	0x00010865

00010f40 <att_read_mult_vl_req>:
{
   10f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10f44:	6846      	ldr	r6, [r0, #4]
{
   10f46:	4604      	mov	r4, r0
   10f48:	460d      	mov	r5, r1
   10f4a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   10f4c:	2101      	movs	r1, #1
   10f4e:	4630      	mov	r0, r6
   10f50:	f00a fee5 	bl	1bd1e <bt_gatt_change_aware>
   10f54:	b950      	cbnz	r0, 10f6c <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10f56:	2105      	movs	r1, #5
   10f58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10f5c:	f00a f984 	bl	1b268 <atomic_test_and_set_bit>
   10f60:	2800      	cmp	r0, #0
   10f62:	d13b      	bne.n	10fdc <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10f64:	2012      	movs	r0, #18
}
   10f66:	b005      	add	sp, #20
   10f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   10f6c:	2210      	movs	r2, #16
   10f6e:	2100      	movs	r1, #0
   10f70:	4668      	mov	r0, sp
   10f72:	f009 fa07 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   10f76:	2200      	movs	r2, #0
   10f78:	2121      	movs	r1, #33	; 0x21
   10f7a:	4630      	mov	r0, r6
   10f7c:	f7ff ff28 	bl	10dd0 <bt_att_create_pdu>
   10f80:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   10f82:	b368      	cbz	r0, 10fe0 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10f84:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   10f88:	f8df 9058 	ldr.w	r9, [pc, #88]	; 10fe4 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   10f8c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   10f8e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   10f92:	8a2b      	ldrh	r3, [r5, #16]
   10f94:	2b01      	cmp	r3, #1
   10f96:	d804      	bhi.n	10fa2 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   10f98:	4620      	mov	r0, r4
   10f9a:	9902      	ldr	r1, [sp, #8]
   10f9c:	f00a f8a5 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   10fa0:	e01c      	b.n	10fdc <att_read_mult_vl_req+0x9c>
   10fa2:	4638      	mov	r0, r7
   10fa4:	f00b fb07 	bl	1c5b6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   10fa8:	466b      	mov	r3, sp
   10faa:	464a      	mov	r2, r9
   10fac:	4601      	mov	r1, r0
   10fae:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10fb0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   10fb4:	f009 ffcb 	bl	1af4e <bt_gatt_foreach_attr>
		if (data.err) {
   10fb8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d0e8      	beq.n	10f92 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10fc0:	9b02      	ldr	r3, [sp, #8]
   10fc2:	6998      	ldr	r0, [r3, #24]
   10fc4:	f7ff fab6 	bl	10534 <tx_meta_data_free>
			net_buf_unref(data.buf);
   10fc8:	9802      	ldr	r0, [sp, #8]
   10fca:	f003 f8f3 	bl	141b4 <net_buf_unref>
	if (!req) {
   10fce:	4632      	mov	r2, r6
   10fd0:	2120      	movs	r1, #32
   10fd2:	4620      	mov	r0, r4
   10fd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10fd8:	f00a faa0 	bl	1b51c <send_err_rsp.part.0>
			return 0;
   10fdc:	2000      	movs	r0, #0
   10fde:	e7c2      	b.n	10f66 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   10fe0:	200e      	movs	r0, #14
   10fe2:	e7c0      	b.n	10f66 <att_read_mult_vl_req+0x26>
   10fe4:	0001b2d1 	.word	0x0001b2d1

00010fe8 <att_read_mult_req>:
{
   10fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10fec:	6846      	ldr	r6, [r0, #4]
{
   10fee:	4604      	mov	r4, r0
   10ff0:	460d      	mov	r5, r1
   10ff2:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   10ff4:	2101      	movs	r1, #1
   10ff6:	4630      	mov	r0, r6
   10ff8:	f00a fe91 	bl	1bd1e <bt_gatt_change_aware>
   10ffc:	b950      	cbnz	r0, 11014 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10ffe:	2105      	movs	r1, #5
   11000:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11004:	f00a f930 	bl	1b268 <atomic_test_and_set_bit>
   11008:	2800      	cmp	r0, #0
   1100a:	d13b      	bne.n	11084 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1100c:	2012      	movs	r0, #18
}
   1100e:	b005      	add	sp, #20
   11010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   11014:	2210      	movs	r2, #16
   11016:	2100      	movs	r1, #0
   11018:	4668      	mov	r0, sp
   1101a:	f009 f9b3 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1101e:	2200      	movs	r2, #0
   11020:	210f      	movs	r1, #15
   11022:	4630      	mov	r0, r6
   11024:	f7ff fed4 	bl	10dd0 <bt_att_create_pdu>
   11028:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1102a:	b368      	cbz	r0, 11088 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1102c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11030:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1108c <att_read_mult_req+0xa4>
	data.chan = chan;
   11034:	9400      	str	r4, [sp, #0]
   11036:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1103a:	8a2b      	ldrh	r3, [r5, #16]
   1103c:	2b01      	cmp	r3, #1
   1103e:	d804      	bhi.n	1104a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   11040:	4620      	mov	r0, r4
   11042:	9902      	ldr	r1, [sp, #8]
   11044:	f00a f851 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   11048:	e01c      	b.n	11084 <att_read_mult_req+0x9c>
   1104a:	4638      	mov	r0, r7
   1104c:	f00b fab3 	bl	1c5b6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11050:	466b      	mov	r3, sp
   11052:	464a      	mov	r2, r9
   11054:	4601      	mov	r1, r0
   11056:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11058:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1105c:	f009 ff77 	bl	1af4e <bt_gatt_foreach_attr>
		if (data.err) {
   11060:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11064:	2b00      	cmp	r3, #0
   11066:	d0e8      	beq.n	1103a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11068:	9b02      	ldr	r3, [sp, #8]
   1106a:	6998      	ldr	r0, [r3, #24]
   1106c:	f7ff fa62 	bl	10534 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11070:	9802      	ldr	r0, [sp, #8]
   11072:	f003 f89f 	bl	141b4 <net_buf_unref>
	if (!req) {
   11076:	4632      	mov	r2, r6
   11078:	210e      	movs	r1, #14
   1107a:	4620      	mov	r0, r4
   1107c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11080:	f00a fa4c 	bl	1b51c <send_err_rsp.part.0>
			return 0;
   11084:	2000      	movs	r0, #0
   11086:	e7c2      	b.n	1100e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   11088:	200e      	movs	r0, #14
   1108a:	e7c0      	b.n	1100e <att_read_mult_req+0x26>
   1108c:	0001b28b 	.word	0x0001b28b

00011090 <att_read_rsp>:
{
   11090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11094:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   11098:	4604      	mov	r4, r0
   1109a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1109c:	4640      	mov	r0, r8
   1109e:	2101      	movs	r1, #1
{
   110a0:	4617      	mov	r7, r2
   110a2:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   110a4:	f00a fe3b 	bl	1bd1e <bt_gatt_change_aware>
   110a8:	b948      	cbnz	r0, 110be <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   110aa:	2105      	movs	r1, #5
   110ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   110b0:	f00a f8da 	bl	1b268 <atomic_test_and_set_bit>
   110b4:	bb78      	cbnz	r0, 11116 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   110b6:	2012      	movs	r0, #18
}
   110b8:	b004      	add	sp, #16
   110ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   110be:	b38d      	cbz	r5, 11124 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   110c0:	2210      	movs	r2, #16
   110c2:	2100      	movs	r1, #0
   110c4:	4668      	mov	r0, sp
   110c6:	f009 f95d 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   110ca:	2200      	movs	r2, #0
   110cc:	4639      	mov	r1, r7
   110ce:	4640      	mov	r0, r8
   110d0:	f7ff fe7e 	bl	10dd0 <bt_att_create_pdu>
   110d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   110d6:	b338      	cbz	r0, 11128 <att_read_rsp+0x98>
	data.offset = offset;
   110d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   110dc:	4629      	mov	r1, r5
	data.offset = offset;
   110de:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   110e2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   110e4:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   110e6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   110ea:	4a10      	ldr	r2, [pc, #64]	; (1112c <att_read_rsp+0x9c>)
   110ec:	466b      	mov	r3, sp
	data.chan = chan;
   110ee:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   110f0:	f009 ff2d 	bl	1af4e <bt_gatt_foreach_attr>
	if (data.err) {
   110f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   110f8:	b17b      	cbz	r3, 1111a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   110fa:	9b02      	ldr	r3, [sp, #8]
   110fc:	6998      	ldr	r0, [r3, #24]
   110fe:	f7ff fa19 	bl	10534 <tx_meta_data_free>
		net_buf_unref(data.buf);
   11102:	9802      	ldr	r0, [sp, #8]
   11104:	f003 f856 	bl	141b4 <net_buf_unref>
	if (!req) {
   11108:	462a      	mov	r2, r5
   1110a:	4631      	mov	r1, r6
   1110c:	4620      	mov	r0, r4
   1110e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11112:	f00a fa03 	bl	1b51c <send_err_rsp.part.0>
			return 0;
   11116:	2000      	movs	r0, #0
   11118:	e7ce      	b.n	110b8 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1111a:	4620      	mov	r0, r4
   1111c:	9902      	ldr	r1, [sp, #8]
   1111e:	f009 ffe4 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   11122:	e7f8      	b.n	11116 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   11124:	2001      	movs	r0, #1
   11126:	e7c7      	b.n	110b8 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   11128:	200e      	movs	r0, #14
   1112a:	e7c5      	b.n	110b8 <att_read_rsp+0x28>
   1112c:	0001b28b 	.word	0x0001b28b

00011130 <att_read_type_req>:
{
   11130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11134:	8a0d      	ldrh	r5, [r1, #16]
{
   11136:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11138:	3d04      	subs	r5, #4
   1113a:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1113c:	2d02      	cmp	r5, #2
{
   1113e:	4608      	mov	r0, r1
   11140:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11142:	d001      	beq.n	11148 <att_read_type_req+0x18>
   11144:	2d10      	cmp	r5, #16
   11146:	d150      	bne.n	111ea <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   11148:	2104      	movs	r1, #4
   1114a:	300c      	adds	r0, #12
   1114c:	f00b fa2b 	bl	1c5a6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11150:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   11154:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11156:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11158:	1d01      	adds	r1, r0, #4
   1115a:	462a      	mov	r2, r5
   1115c:	4640      	mov	r0, r8
   1115e:	f009 f971 	bl	1a444 <bt_uuid_create>
   11162:	b188      	cbz	r0, 11188 <att_read_type_req+0x58>
	if (!start || !end) {
   11164:	b19e      	cbz	r6, 1118e <att_read_type_req+0x5e>
   11166:	b18f      	cbz	r7, 1118c <att_read_type_req+0x5c>
	if (start > end) {
   11168:	42b7      	cmp	r7, r6
   1116a:	d310      	bcc.n	1118e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1116c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1116e:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   11170:	2100      	movs	r1, #0
   11172:	eb0d 0002 	add.w	r0, sp, r2
   11176:	f009 f905 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1117a:	2201      	movs	r2, #1
   1117c:	2109      	movs	r1, #9
   1117e:	4628      	mov	r0, r5
   11180:	f7ff fe26 	bl	10dd0 <bt_att_create_pdu>
   11184:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   11186:	b960      	cbnz	r0, 111a2 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   11188:	200e      	movs	r0, #14
   1118a:	e007      	b.n	1119c <att_read_type_req+0x6c>
			*err = 0U;
   1118c:	463e      	mov	r6, r7
	if (!req) {
   1118e:	2301      	movs	r3, #1
   11190:	4632      	mov	r2, r6
   11192:	2108      	movs	r1, #8
   11194:	4620      	mov	r0, r4
   11196:	f00a f9c1 	bl	1b51c <send_err_rsp.part.0>
		return 0;
   1119a:	2000      	movs	r0, #0
}
   1119c:	b00c      	add	sp, #48	; 0x30
   1119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   111a2:	2101      	movs	r1, #1
   111a4:	300c      	adds	r0, #12
	data.uuid = uuid;
   111a6:	e9cd 4806 	strd	r4, r8, [sp, #24]
   111aa:	f00b f9cc 	bl	1c546 <net_buf_simple_add>
	data.rsp->len = 0U;
   111ae:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   111b0:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   111b2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   111b4:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   111b6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   111b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   111bc:	4630      	mov	r0, r6
   111be:	ab06      	add	r3, sp, #24
   111c0:	4a0b      	ldr	r2, [pc, #44]	; (111f0 <att_read_type_req+0xc0>)
   111c2:	f009 fec4 	bl	1af4e <bt_gatt_foreach_attr>
	if (data.err) {
   111c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   111ca:	b14b      	cbz	r3, 111e0 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   111cc:	9b08      	ldr	r3, [sp, #32]
   111ce:	6998      	ldr	r0, [r3, #24]
   111d0:	f7ff f9b0 	bl	10534 <tx_meta_data_free>
		net_buf_unref(data.buf);
   111d4:	9808      	ldr	r0, [sp, #32]
   111d6:	f002 ffed 	bl	141b4 <net_buf_unref>
	if (!req) {
   111da:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   111de:	e7d7      	b.n	11190 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   111e0:	4620      	mov	r0, r4
   111e2:	9908      	ldr	r1, [sp, #32]
   111e4:	f009 ff81 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   111e8:	e7d7      	b.n	1119a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   111ea:	2004      	movs	r0, #4
   111ec:	e7d6      	b.n	1119c <att_read_type_req+0x6c>
   111ee:	bf00      	nop
   111f0:	00010911 	.word	0x00010911

000111f4 <att_find_type_req>:
{
   111f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111f8:	460f      	mov	r7, r1
   111fa:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   111fc:	2106      	movs	r1, #6
   111fe:	b086      	sub	sp, #24
   11200:	f107 000c 	add.w	r0, r7, #12
   11204:	f00b f9cf 	bl	1c5a6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   11208:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1120a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1120e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   11210:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   11214:	b1c5      	cbz	r5, 11248 <att_find_type_req+0x54>
   11216:	2300      	movs	r3, #0
   11218:	f1b8 0f00 	cmp.w	r8, #0
   1121c:	d013      	beq.n	11246 <att_find_type_req+0x52>
	if (start > end) {
   1121e:	4545      	cmp	r5, r8
   11220:	d812      	bhi.n	11248 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11222:	f88d 3000 	strb.w	r3, [sp]
   11226:	f88d 3004 	strb.w	r3, [sp, #4]
   1122a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1122e:	4668      	mov	r0, sp
   11230:	a901      	add	r1, sp, #4
   11232:	f8ad 2002 	strh.w	r2, [sp, #2]
   11236:	f8ad 3006 	strh.w	r3, [sp, #6]
   1123a:	f009 f8d5 	bl	1a3e8 <bt_uuid_cmp>
   1123e:	4606      	mov	r6, r0
   11240:	b160      	cbz	r0, 1125c <att_find_type_req+0x68>
	if (!req) {
   11242:	230a      	movs	r3, #10
   11244:	e001      	b.n	1124a <att_find_type_req+0x56>
			*err = 0U;
   11246:	4645      	mov	r5, r8
	if (!req) {
   11248:	2301      	movs	r3, #1
   1124a:	462a      	mov	r2, r5
   1124c:	2106      	movs	r1, #6
   1124e:	4620      	mov	r0, r4
   11250:	f00a f964 	bl	1b51c <send_err_rsp.part.0>
		return 0;
   11254:	2000      	movs	r0, #0
}
   11256:	b006      	add	sp, #24
   11258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1125c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   11260:	4601      	mov	r1, r0
   11262:	2214      	movs	r2, #20
   11264:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   11266:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   11268:	f009 f88c 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1126c:	4632      	mov	r2, r6
   1126e:	2107      	movs	r1, #7
   11270:	4650      	mov	r0, sl
   11272:	f7ff fdad 	bl	10dd0 <bt_att_create_pdu>
   11276:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11278:	b1f8      	cbz	r0, 112ba <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1127a:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1127c:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1127e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   11282:	4628      	mov	r0, r5
   11284:	ab01      	add	r3, sp, #4
   11286:	4a0e      	ldr	r2, [pc, #56]	; (112c0 <att_find_type_req+0xcc>)
	data.value = value;
   11288:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   1128c:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   1128e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   11292:	f009 fe5c 	bl	1af4e <bt_gatt_foreach_attr>
	if (data.err) {
   11296:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1129a:	b14b      	cbz	r3, 112b0 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1129c:	9b02      	ldr	r3, [sp, #8]
   1129e:	6998      	ldr	r0, [r3, #24]
   112a0:	f7ff f948 	bl	10534 <tx_meta_data_free>
		net_buf_unref(data.buf);
   112a4:	9802      	ldr	r0, [sp, #8]
   112a6:	f002 ff85 	bl	141b4 <net_buf_unref>
	if (!req) {
   112aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   112ae:	e7cc      	b.n	1124a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   112b0:	4620      	mov	r0, r4
   112b2:	9902      	ldr	r1, [sp, #8]
   112b4:	f009 ff19 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   112b8:	e7cc      	b.n	11254 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   112ba:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   112bc:	e7cb      	b.n	11256 <att_find_type_req+0x62>
   112be:	bf00      	nop
   112c0:	00010551 	.word	0x00010551

000112c4 <att_find_info_req>:
{
   112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   112c6:	68cb      	ldr	r3, [r1, #12]
{
   112c8:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   112ca:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   112cc:	885e      	ldrh	r6, [r3, #2]
{
   112ce:	b085      	sub	sp, #20
	if (!start || !end) {
   112d0:	b195      	cbz	r5, 112f8 <att_find_info_req+0x34>
   112d2:	b186      	cbz	r6, 112f6 <att_find_info_req+0x32>
	if (start > end) {
   112d4:	42b5      	cmp	r5, r6
   112d6:	d80f      	bhi.n	112f8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   112d8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   112da:	2210      	movs	r2, #16
   112dc:	2100      	movs	r1, #0
   112de:	4668      	mov	r0, sp
   112e0:	f009 f850 	bl	1a384 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   112e4:	2200      	movs	r2, #0
   112e6:	2105      	movs	r1, #5
   112e8:	4638      	mov	r0, r7
   112ea:	f7ff fd71 	bl	10dd0 <bt_att_create_pdu>
   112ee:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   112f0:	b958      	cbnz	r0, 1130a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   112f2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   112f4:	e007      	b.n	11306 <att_find_info_req+0x42>
			*err = 0U;
   112f6:	4635      	mov	r5, r6
	if (!req) {
   112f8:	2301      	movs	r3, #1
   112fa:	462a      	mov	r2, r5
   112fc:	2104      	movs	r1, #4
   112fe:	4620      	mov	r0, r4
   11300:	f00a f90c 	bl	1b51c <send_err_rsp.part.0>
		return 0;
   11304:	2000      	movs	r0, #0
}
   11306:	b005      	add	sp, #20
   11308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1130a:	466b      	mov	r3, sp
   1130c:	4631      	mov	r1, r6
   1130e:	4628      	mov	r0, r5
   11310:	4a09      	ldr	r2, [pc, #36]	; (11338 <att_find_info_req+0x74>)
	data.chan = chan;
   11312:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11314:	f009 fe1b 	bl	1af4e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   11318:	9b02      	ldr	r3, [sp, #8]
   1131a:	b943      	cbnz	r3, 1132e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1131c:	9b01      	ldr	r3, [sp, #4]
   1131e:	6998      	ldr	r0, [r3, #24]
   11320:	f7ff f908 	bl	10534 <tx_meta_data_free>
		net_buf_unref(data.buf);
   11324:	9801      	ldr	r0, [sp, #4]
   11326:	f002 ff45 	bl	141b4 <net_buf_unref>
	if (!req) {
   1132a:	230a      	movs	r3, #10
   1132c:	e7e5      	b.n	112fa <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1132e:	4620      	mov	r0, r4
   11330:	9901      	ldr	r1, [sp, #4]
   11332:	f009 feda 	bl	1b0ea <bt_att_chan_send_rsp>
	return 0;
   11336:	e7e5      	b.n	11304 <att_find_info_req+0x40>
   11338:	0001af65 	.word	0x0001af65

0001133c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1133c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1133e:	4c0b      	ldr	r4, [pc, #44]	; (1136c <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   11340:	4d0b      	ldr	r5, [pc, #44]	; (11370 <bt_att_init+0x34>)
   11342:	4620      	mov	r0, r4
   11344:	f00c fa8a 	bl	1d85c <z_impl_k_queue_init>
   11348:	4629      	mov	r1, r5
   1134a:	4620      	mov	r0, r4
   1134c:	f00c fa92 	bl	1d874 <k_queue_append>
   11350:	4620      	mov	r0, r4
   11352:	f105 0114 	add.w	r1, r5, #20
   11356:	f00c fa8d 	bl	1d874 <k_queue_append>
   1135a:	4620      	mov	r0, r4
   1135c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   11360:	f00c fa88 	bl	1d874 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   11364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   11368:	f000 bb18 	b.w	1199c <bt_gatt_init>
   1136c:	200085dc 	.word	0x200085dc
   11370:	20009920 	.word	0x20009920

00011374 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   11374:	2300      	movs	r3, #0
{
   11376:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11378:	4605      	mov	r5, r0
   1137a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1137c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1137e:	f006 ff57 	bl	18230 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   11382:	4b0b      	ldr	r3, [pc, #44]	; (113b0 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   11384:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   11386:	681b      	ldr	r3, [r3, #0]
   11388:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1138a:	bf04      	itt	eq
   1138c:	2500      	moveq	r5, #0
   1138e:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   11390:	462a      	mov	r2, r5
   11392:	4623      	mov	r3, r4
   11394:	4807      	ldr	r0, [pc, #28]	; (113b4 <bt_att_req_alloc+0x40>)
   11396:	f006 f827 	bl	173e8 <k_mem_slab_alloc>
   1139a:	4601      	mov	r1, r0
   1139c:	b930      	cbnz	r0, 113ac <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1139e:	221c      	movs	r2, #28
   113a0:	9801      	ldr	r0, [sp, #4]
   113a2:	f008 ffef 	bl	1a384 <memset>

	return req;
   113a6:	9801      	ldr	r0, [sp, #4]
}
   113a8:	b003      	add	sp, #12
   113aa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   113ac:	2000      	movs	r0, #0
   113ae:	e7fb      	b.n	113a8 <bt_att_req_alloc+0x34>
   113b0:	2000995c 	.word	0x2000995c
   113b4:	20008550 	.word	0x20008550

000113b8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   113b8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   113ba:	6883      	ldr	r3, [r0, #8]
{
   113bc:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   113be:	b14b      	cbz	r3, 113d4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   113c0:	6998      	ldr	r0, [r3, #24]
   113c2:	f7ff f8b7 	bl	10534 <tx_meta_data_free>
		net_buf_unref(req->buf);
   113c6:	9b01      	ldr	r3, [sp, #4]
   113c8:	6898      	ldr	r0, [r3, #8]
   113ca:	f002 fef3 	bl	141b4 <net_buf_unref>
		req->buf = NULL;
   113ce:	2200      	movs	r2, #0
   113d0:	9b01      	ldr	r3, [sp, #4]
   113d2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   113d4:	4803      	ldr	r0, [pc, #12]	; (113e4 <bt_att_req_free+0x2c>)
   113d6:	a901      	add	r1, sp, #4
   113d8:	f00c f982 	bl	1d6e0 <k_mem_slab_free>
}
   113dc:	b003      	add	sp, #12
   113de:	f85d fb04 	ldr.w	pc, [sp], #4
   113e2:	bf00      	nop
   113e4:	20008550 	.word	0x20008550

000113e8 <att_handle_rsp>:
{
   113e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113ec:	4604      	mov	r4, r0
   113ee:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   113f0:	3058      	adds	r0, #88	; 0x58
{
   113f2:	460e      	mov	r6, r1
   113f4:	4617      	mov	r7, r2
   113f6:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   113f8:	f00c fb2a 	bl	1da50 <k_work_cancel_delayable>
	if (!chan->req) {
   113fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   113fe:	b980      	cbnz	r0, 11422 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   11400:	4b19      	ldr	r3, [pc, #100]	; (11468 <att_handle_rsp+0x80>)
   11402:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11406:	9307      	str	r3, [sp, #28]
   11408:	2302      	movs	r3, #2
   1140a:	4818      	ldr	r0, [pc, #96]	; (1146c <att_handle_rsp+0x84>)
   1140c:	aa06      	add	r2, sp, #24
   1140e:	9306      	str	r3, [sp, #24]
   11410:	f009 fe37 	bl	1b082 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   11414:	6820      	ldr	r0, [r4, #0]
   11416:	f009 ffbc 	bl	1b392 <att_req_send_process>
}
   1141a:	2000      	movs	r0, #0
   1141c:	b008      	add	sp, #32
   1141e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   11422:	4b13      	ldr	r3, [pc, #76]	; (11470 <att_handle_rsp+0x88>)
   11424:	f04f 0800 	mov.w	r8, #0
   11428:	4298      	cmp	r0, r3
   1142a:	d102      	bne.n	11432 <att_handle_rsp+0x4a>
		chan->req = NULL;
   1142c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   11430:	e7f0      	b.n	11414 <att_handle_rsp+0x2c>
	func = chan->req->func;
   11432:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   11436:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1143a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1143c:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   11440:	f7ff ffba 	bl	113b8 <bt_att_req_free>
	att_req_send_process(chan->att);
   11444:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   11446:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1144a:	f009 ffa2 	bl	1b392 <att_req_send_process>
	if (func) {
   1144e:	f1b9 0f00 	cmp.w	r9, #0
   11452:	d0e2      	beq.n	1141a <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   11454:	6820      	ldr	r0, [r4, #0]
   11456:	f8cd a000 	str.w	sl, [sp]
   1145a:	463b      	mov	r3, r7
   1145c:	4632      	mov	r2, r6
   1145e:	4629      	mov	r1, r5
   11460:	6800      	ldr	r0, [r0, #0]
   11462:	47c8      	blx	r9
   11464:	e7d9      	b.n	1141a <att_handle_rsp+0x32>
   11466:	bf00      	nop
   11468:	00020c2c 	.word	0x00020c2c
   1146c:	0001e52c 	.word	0x0001e52c
   11470:	20009960 	.word	0x20009960

00011474 <bt_att_disconnected>:
{
   11474:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   11478:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1147c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1147e:	2e00      	cmp	r6, #0
   11480:	d05a      	beq.n	11538 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   11482:	f100 0184 	add.w	r1, r0, #132	; 0x84
   11486:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1148a:	f009 fec7 	bl	1b21c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1148e:	1f27      	subs	r7, r4, #4
   11490:	f104 0838 	add.w	r8, r4, #56	; 0x38
   11494:	2200      	movs	r2, #0
   11496:	2300      	movs	r3, #0
   11498:	4640      	mov	r0, r8
   1149a:	f00a fff9 	bl	1c490 <net_buf_get>
   1149e:	4605      	mov	r5, r0
   114a0:	bb48      	cbnz	r0, 114f6 <bt_att_disconnected+0x82>
	if (chan->req) {
   114a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   114a4:	b12b      	cbz	r3, 114b2 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   114a6:	4602      	mov	r2, r0
   114a8:	4601      	mov	r1, r0
   114aa:	230e      	movs	r3, #14
   114ac:	4638      	mov	r0, r7
   114ae:	f7ff ff9b 	bl	113e8 <att_handle_rsp>
	chan->att = NULL;
   114b2:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   114b4:	2102      	movs	r1, #2
	chan->att = NULL;
   114b6:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   114ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   114be:	f009 fec6 	bl	1b24e <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   114c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   114c4:	2b00      	cmp	r3, #0
   114c6:	d137      	bne.n	11538 <bt_att_disconnected+0xc4>
	att_reset(att);
   114c8:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   114ca:	9803      	ldr	r0, [sp, #12]
   114cc:	2200      	movs	r2, #0
   114ce:	2300      	movs	r3, #0
   114d0:	300c      	adds	r0, #12
   114d2:	f00a ffdd 	bl	1c490 <net_buf_get>
   114d6:	4605      	mov	r5, r0
   114d8:	b9a0      	cbnz	r0, 11504 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   114da:	9803      	ldr	r0, [sp, #12]
	return list->head;
   114dc:	6845      	ldr	r5, [r0, #4]
   114de:	b9c5      	cbnz	r5, 11512 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   114e0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   114e2:	a903      	add	r1, sp, #12
   114e4:	4816      	ldr	r0, [pc, #88]	; (11540 <bt_att_disconnected+0xcc>)
   114e6:	f00c f8fb 	bl	1d6e0 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   114ea:	6820      	ldr	r0, [r4, #0]
}
   114ec:	b004      	add	sp, #16
   114ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   114f2:	f000 bf47 	b.w	12384 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   114f6:	69a8      	ldr	r0, [r5, #24]
   114f8:	f7ff f81c 	bl	10534 <tx_meta_data_free>
		net_buf_unref(buf);
   114fc:	4628      	mov	r0, r5
   114fe:	f002 fe59 	bl	141b4 <net_buf_unref>
   11502:	e7c7      	b.n	11494 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   11504:	69a8      	ldr	r0, [r5, #24]
   11506:	f7ff f815 	bl	10534 <tx_meta_data_free>
		net_buf_unref(buf);
   1150a:	4628      	mov	r0, r5
   1150c:	f002 fe52 	bl	141b4 <net_buf_unref>
   11510:	e7db      	b.n	114ca <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11512:	6882      	ldr	r2, [r0, #8]
	return node->next;
   11514:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11516:	4295      	cmp	r5, r2
	list->head = node;
   11518:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1151a:	bf08      	it	eq
   1151c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1151e:	686e      	ldr	r6, [r5, #4]
   11520:	b136      	cbz	r6, 11530 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   11522:	69ab      	ldr	r3, [r5, #24]
   11524:	210e      	movs	r1, #14
   11526:	9300      	str	r3, [sp, #0]
   11528:	2300      	movs	r3, #0
   1152a:	6800      	ldr	r0, [r0, #0]
   1152c:	461a      	mov	r2, r3
   1152e:	47b0      	blx	r6
		bt_att_req_free(req);
   11530:	4628      	mov	r0, r5
   11532:	f7ff ff41 	bl	113b8 <bt_att_req_free>
   11536:	e7d0      	b.n	114da <bt_att_disconnected+0x66>
}
   11538:	b004      	add	sp, #16
   1153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1153e:	bf00      	nop
   11540:	20008518 	.word	0x20008518

00011544 <att_timeout>:
{
   11544:	b510      	push	{r4, lr}
   11546:	4604      	mov	r4, r0
   11548:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1154a:	4b08      	ldr	r3, [pc, #32]	; (1156c <att_timeout+0x28>)
   1154c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11550:	9305      	str	r3, [sp, #20]
   11552:	2302      	movs	r3, #2
   11554:	4806      	ldr	r0, [pc, #24]	; (11570 <att_timeout+0x2c>)
   11556:	aa04      	add	r2, sp, #16
   11558:	9304      	str	r3, [sp, #16]
   1155a:	f009 fd92 	bl	1b082 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1155e:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   11562:	b006      	add	sp, #24
   11564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   11568:	f7ff bf84 	b.w	11474 <bt_att_disconnected>
   1156c:	00020c43 	.word	0x00020c43
   11570:	0001e52c 	.word	0x0001e52c

00011574 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   11574:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   11576:	4606      	mov	r6, r0
   11578:	4d13      	ldr	r5, [pc, #76]	; (115c8 <find_cf_cfg+0x54>)
   1157a:	b140      	cbz	r0, 1158e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1157c:	462a      	mov	r2, r5
   1157e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   11582:	1e6c      	subs	r4, r5, #1
   11584:	f009 fba5 	bl	1acd2 <bt_conn_is_peer_addr_le>
   11588:	b198      	cbz	r0, 115b2 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1158a:	4620      	mov	r0, r4
   1158c:	e00c      	b.n	115a8 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1158e:	4628      	mov	r0, r5
   11590:	490e      	ldr	r1, [pc, #56]	; (115cc <find_cf_cfg+0x58>)
   11592:	f00a f987 	bl	1b8a4 <bt_addr_le_eq>
   11596:	b940      	cbnz	r0, 115aa <find_cf_cfg+0x36>
   11598:	490c      	ldr	r1, [pc, #48]	; (115cc <find_cf_cfg+0x58>)
   1159a:	f105 0010 	add.w	r0, r5, #16
   1159e:	f00a f981 	bl	1b8a4 <bt_addr_le_eq>
   115a2:	b120      	cbz	r0, 115ae <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   115a4:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   115a8:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   115aa:	1e68      	subs	r0, r5, #1
   115ac:	e7fc      	b.n	115a8 <find_cf_cfg+0x34>
	return NULL;
   115ae:	2000      	movs	r0, #0
   115b0:	e7fa      	b.n	115a8 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   115b2:	4630      	mov	r0, r6
   115b4:	7c21      	ldrb	r1, [r4, #16]
   115b6:	f104 0211 	add.w	r2, r4, #17
   115ba:	f009 fb8a 	bl	1acd2 <bt_conn_is_peer_addr_le>
   115be:	2800      	cmp	r0, #0
   115c0:	d0f5      	beq.n	115ae <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   115c2:	f104 0010 	add.w	r0, r4, #16
   115c6:	e7ef      	b.n	115a8 <find_cf_cfg+0x34>
   115c8:	20009995 	.word	0x20009995
   115cc:	0001f9e5 	.word	0x0001f9e5

000115d0 <find_sc_cfg>:
{
   115d0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   115d2:	4c0e      	ldr	r4, [pc, #56]	; (1160c <find_sc_cfg+0x3c>)
{
   115d4:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   115d6:	7823      	ldrb	r3, [r4, #0]
{
   115d8:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   115da:	4283      	cmp	r3, r0
   115dc:	d00c      	beq.n	115f8 <find_sc_cfg+0x28>
   115de:	7b23      	ldrb	r3, [r4, #12]
   115e0:	42ab      	cmp	r3, r5
   115e2:	d110      	bne.n	11606 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   115e4:	4631      	mov	r1, r6
   115e6:	480a      	ldr	r0, [pc, #40]	; (11610 <find_sc_cfg+0x40>)
   115e8:	f00a f95c 	bl	1b8a4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   115ec:	b158      	cbz	r0, 11606 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   115ee:	2301      	movs	r3, #1
			return &sc_cfg[i];
   115f0:	220c      	movs	r2, #12
   115f2:	fb02 4003 	mla	r0, r2, r3, r4
   115f6:	e007      	b.n	11608 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   115f8:	1c60      	adds	r0, r4, #1
   115fa:	f00a f953 	bl	1b8a4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   115fe:	2800      	cmp	r0, #0
   11600:	d0ed      	beq.n	115de <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11602:	2300      	movs	r3, #0
   11604:	e7f4      	b.n	115f0 <find_sc_cfg+0x20>
	return NULL;
   11606:	2000      	movs	r0, #0
}
   11608:	bd70      	pop	{r4, r5, r6, pc}
   1160a:	bf00      	nop
   1160c:	20009c3a 	.word	0x20009c3a
   11610:	20009c47 	.word	0x20009c47

00011614 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   11614:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   11616:	1c4a      	adds	r2, r1, #1
{
   11618:	460c      	mov	r4, r1
		if (conn) {
   1161a:	4605      	mov	r5, r0
   1161c:	b968      	cbnz	r0, 1163a <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1161e:	4610      	mov	r0, r2
   11620:	490d      	ldr	r1, [pc, #52]	; (11658 <find_ccc_cfg+0x44>)
   11622:	f00a f93f 	bl	1b8a4 <bt_addr_le_eq>
   11626:	b930      	cbnz	r0, 11636 <find_ccc_cfg+0x22>
   11628:	490b      	ldr	r1, [pc, #44]	; (11658 <find_ccc_cfg+0x44>)
   1162a:	f104 000b 	add.w	r0, r4, #11
   1162e:	f00a f939 	bl	1b8a4 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   11632:	b170      	cbz	r0, 11652 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   11634:	340a      	adds	r4, #10
   11636:	4620      	mov	r0, r4
   11638:	e00c      	b.n	11654 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1163a:	7809      	ldrb	r1, [r1, #0]
   1163c:	f009 fb49 	bl	1acd2 <bt_conn_is_peer_addr_le>
   11640:	2800      	cmp	r0, #0
   11642:	d1f8      	bne.n	11636 <find_ccc_cfg+0x22>
   11644:	4628      	mov	r0, r5
   11646:	7aa1      	ldrb	r1, [r4, #10]
   11648:	f104 020b 	add.w	r2, r4, #11
   1164c:	f009 fb41 	bl	1acd2 <bt_conn_is_peer_addr_le>
   11650:	e7ef      	b.n	11632 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   11652:	2000      	movs	r0, #0
}
   11654:	bd38      	pop	{r3, r4, r5, pc}
   11656:	bf00      	nop
   11658:	0001f9e5 	.word	0x0001f9e5

0001165c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1165c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11660:	b087      	sub	sp, #28
   11662:	461e      	mov	r6, r3
   11664:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   11668:	4681      	mov	r9, r0
   1166a:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1166c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   11670:	2b00      	cmp	r3, #0
   11672:	d14b      	bne.n	1170c <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   11674:	1e73      	subs	r3, r6, #1
   11676:	2b01      	cmp	r3, #1
   11678:	d84b      	bhi.n	11712 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1167a:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1167c:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1167e:	7815      	ldrb	r5, [r2, #0]
   11680:	bf18      	it	ne
   11682:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   11684:	f7ff ffc6 	bl	11614 <find_ccc_cfg>
	if (!cfg) {
   11688:	4604      	mov	r4, r0
   1168a:	b9f0      	cbnz	r0, 116ca <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1168c:	b91d      	cbnz	r5, 11696 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1168e:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   11690:	b007      	add	sp, #28
   11692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   11696:	4641      	mov	r1, r8
   11698:	f7ff ffbc 	bl	11614 <find_ccc_cfg>
		if (!cfg) {
   1169c:	4604      	mov	r4, r0
   1169e:	b960      	cbnz	r0, 116ba <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   116a0:	4b1d      	ldr	r3, [pc, #116]	; (11718 <bt_gatt_attr_write_ccc+0xbc>)
   116a2:	481e      	ldr	r0, [pc, #120]	; (1171c <bt_gatt_attr_write_ccc+0xc0>)
   116a4:	9305      	str	r3, [sp, #20]
   116a6:	2302      	movs	r3, #2
   116a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   116ac:	aa04      	add	r2, sp, #16
   116ae:	9304      	str	r3, [sp, #16]
   116b0:	f00a f90e 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   116b4:	f06f 0010 	mvn.w	r0, #16
   116b8:	e7ea      	b.n	11690 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   116ba:	f109 0188 	add.w	r1, r9, #136	; 0x88
   116be:	3001      	adds	r0, #1
   116c0:	f00a f903 	bl	1b8ca <bt_addr_le_copy>
		cfg->id = conn->id;
   116c4:	f899 3008 	ldrb.w	r3, [r9, #8]
   116c8:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   116ca:	f8d8 301c 	ldr.w	r3, [r8, #28]
   116ce:	b98b      	cbnz	r3, 116f4 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   116d0:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   116d2:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   116d6:	42ab      	cmp	r3, r5
   116d8:	d003      	beq.n	116e2 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   116da:	4641      	mov	r1, r8
   116dc:	4638      	mov	r0, r7
   116de:	f00a f869 	bl	1b7b4 <gatt_ccc_changed>
	if (!value) {
   116e2:	2d00      	cmp	r5, #0
   116e4:	d1d3      	bne.n	1168e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   116e6:	490e      	ldr	r1, [pc, #56]	; (11720 <bt_gatt_attr_write_ccc+0xc4>)
   116e8:	1c60      	adds	r0, r4, #1
   116ea:	f00a f8ee 	bl	1b8ca <bt_addr_le_copy>
	cfg->id = 0U;
   116ee:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   116f0:	8125      	strh	r5, [r4, #8]
}
   116f2:	e7cc      	b.n	1168e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   116f4:	462a      	mov	r2, r5
   116f6:	4639      	mov	r1, r7
   116f8:	4648      	mov	r0, r9
   116fa:	4798      	blx	r3
		if (write < 0) {
   116fc:	2800      	cmp	r0, #0
   116fe:	dbc7      	blt.n	11690 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   11700:	3801      	subs	r0, #1
   11702:	2801      	cmp	r0, #1
   11704:	d9e4      	bls.n	116d0 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   11706:	f06f 000d 	mvn.w	r0, #13
   1170a:	e7c1      	b.n	11690 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1170c:	f06f 0006 	mvn.w	r0, #6
   11710:	e7be      	b.n	11690 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11712:	f06f 000c 	mvn.w	r0, #12
   11716:	e7bb      	b.n	11690 <bt_gatt_attr_write_ccc+0x34>
   11718:	00020c56 	.word	0x00020c56
   1171c:	0001e554 	.word	0x0001e554
   11720:	0001f9e5 	.word	0x0001f9e5

00011724 <clear_cf_cfg>:
{
   11724:	b510      	push	{r4, lr}
   11726:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11728:	4909      	ldr	r1, [pc, #36]	; (11750 <clear_cf_cfg+0x2c>)
   1172a:	3001      	adds	r0, #1
   1172c:	f00a f8cd 	bl	1b8ca <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   11730:	f104 0008 	add.w	r0, r4, #8
   11734:	2201      	movs	r2, #1
   11736:	2100      	movs	r1, #0
   11738:	f008 fe24 	bl	1a384 <memset>
   1173c:	2300      	movs	r3, #0
   1173e:	340c      	adds	r4, #12
   11740:	e8d4 2fef 	ldaex	r2, [r4]
   11744:	e8c4 3fe1 	stlex	r1, r3, [r4]
   11748:	2900      	cmp	r1, #0
   1174a:	d1f9      	bne.n	11740 <clear_cf_cfg+0x1c>
}
   1174c:	bd10      	pop	{r4, pc}
   1174e:	bf00      	nop
   11750:	0001f9e5 	.word	0x0001f9e5

00011754 <sc_save>:
{
   11754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11758:	b086      	sub	sp, #24
   1175a:	4680      	mov	r8, r0
   1175c:	460f      	mov	r7, r1
   1175e:	4616      	mov	r6, r2
   11760:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   11762:	f7ff ff35 	bl	115d0 <find_sc_cfg>
	if (!cfg) {
   11766:	4604      	mov	r4, r0
   11768:	b9b0      	cbnz	r0, 11798 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1176a:	4912      	ldr	r1, [pc, #72]	; (117b4 <sc_save+0x60>)
   1176c:	f7ff ff30 	bl	115d0 <find_sc_cfg>
		if (!cfg) {
   11770:	4604      	mov	r4, r0
   11772:	b960      	cbnz	r0, 1178e <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   11774:	4b10      	ldr	r3, [pc, #64]	; (117b8 <sc_save+0x64>)
   11776:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1177a:	9305      	str	r3, [sp, #20]
   1177c:	2302      	movs	r3, #2
   1177e:	480f      	ldr	r0, [pc, #60]	; (117bc <sc_save+0x68>)
   11780:	aa04      	add	r2, sp, #16
   11782:	9304      	str	r3, [sp, #16]
   11784:	f00a f8a4 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
}
   11788:	b006      	add	sp, #24
   1178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1178e:	4639      	mov	r1, r7
		cfg->id = id;
   11790:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   11794:	f00a f899 	bl	1b8ca <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   11798:	8922      	ldrh	r2, [r4, #8]
   1179a:	8963      	ldrh	r3, [r4, #10]
   1179c:	b91a      	cbnz	r2, 117a6 <sc_save+0x52>
   1179e:	b92b      	cbnz	r3, 117ac <sc_save+0x58>
		cfg->data.start = start;
   117a0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   117a2:	8165      	strh	r5, [r4, #10]
   117a4:	e7f0      	b.n	11788 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   117a6:	4296      	cmp	r6, r2
		*start = new_start;
   117a8:	bf38      	it	cc
   117aa:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   117ac:	429d      	cmp	r5, r3
   117ae:	d9eb      	bls.n	11788 <sc_save+0x34>
   117b0:	e7f7      	b.n	117a2 <sc_save+0x4e>
   117b2:	bf00      	nop
   117b4:	0001f9e5 	.word	0x0001f9e5
   117b8:	00020c70 	.word	0x00020c70
   117bc:	0001e554 	.word	0x0001e554

000117c0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   117c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   117c4:	4b28      	ldr	r3, [pc, #160]	; (11868 <disconnected_cb+0xa8>)
{
   117c6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   117c8:	6882      	ldr	r2, [r0, #8]
{
   117ca:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   117cc:	429a      	cmp	r2, r3
   117ce:	d12b      	bne.n	11828 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   117d0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   117d2:	8aab      	ldrh	r3, [r5, #20]
   117d4:	b343      	cbz	r3, 11828 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   117d6:	f04f 0800 	mov.w	r8, #0
   117da:	1c6c      	adds	r4, r5, #1
   117dc:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   117e0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   117e4:	b19b      	cbz	r3, 1180e <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   117e6:	4622      	mov	r2, r4
   117e8:	4630      	mov	r0, r6
   117ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   117ee:	f009 fa70 	bl	1acd2 <bt_conn_is_peer_addr_le>
   117f2:	b9e0      	cbnz	r0, 1182e <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   117f4:	4621      	mov	r1, r4
   117f6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   117fa:	f7fe faf5 	bl	fde8 <bt_conn_lookup_addr_le>
			if (tmp) {
   117fe:	b130      	cbz	r0, 1180e <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   11800:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   11802:	2b07      	cmp	r3, #7
   11804:	bf08      	it	eq
   11806:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1180a:	f009 f9be 	bl	1ab8a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1180e:	340a      	adds	r4, #10
   11810:	454c      	cmp	r4, r9
   11812:	d1e5      	bne.n	117e0 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   11814:	f1b8 0f00 	cmp.w	r8, #0
   11818:	d106      	bne.n	11828 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1181a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1181c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   11820:	b113      	cbz	r3, 11828 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   11822:	4641      	mov	r1, r8
   11824:	4638      	mov	r0, r7
   11826:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   11828:	2001      	movs	r0, #1
   1182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1182e:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   11832:	4651      	mov	r1, sl
   11834:	7a30      	ldrb	r0, [r6, #8]
   11836:	f008 ff2f 	bl	1a698 <bt_addr_le_is_bonded>
   1183a:	b978      	cbnz	r0, 1185c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1183c:	4b0b      	ldr	r3, [pc, #44]	; (1186c <disconnected_cb+0xac>)
   1183e:	429d      	cmp	r5, r3
   11840:	d102      	bne.n	11848 <disconnected_cb+0x88>
					sc_clear(conn);
   11842:	4630      	mov	r0, r6
   11844:	f00a f847 	bl	1b8d6 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11848:	4620      	mov	r0, r4
   1184a:	4909      	ldr	r1, [pc, #36]	; (11870 <disconnected_cb+0xb0>)
   1184c:	f00a f83d 	bl	1b8ca <bt_addr_le_copy>
	cfg->id = 0U;
   11850:	2300      	movs	r3, #0
   11852:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   11856:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1185a:	e7d8      	b.n	1180e <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1185c:	4651      	mov	r1, sl
   1185e:	4620      	mov	r0, r4
   11860:	f00a f833 	bl	1b8ca <bt_addr_le_copy>
   11864:	e7d3      	b.n	1180e <disconnected_cb+0x4e>
   11866:	bf00      	nop
   11868:	0001165d 	.word	0x0001165d
   1186c:	200082b0 	.word	0x200082b0
   11870:	0001f9e5 	.word	0x0001f9e5

00011874 <read_ppcp>:
{
   11874:	b513      	push	{r0, r1, r4, lr}
   11876:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11878:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   1187c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11880:	4c09      	ldr	r4, [pc, #36]	; (118a8 <read_ppcp+0x34>)
	if (offset > value_len) {
   11882:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11884:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   11888:	d80b      	bhi.n	118a2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1188a:	f1c1 0408 	rsb	r4, r1, #8
   1188e:	429c      	cmp	r4, r3
   11890:	bfa8      	it	ge
   11892:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   11894:	4469      	add	r1, sp
   11896:	4622      	mov	r2, r4
   11898:	f008 fd69 	bl	1a36e <memcpy>
}
   1189c:	4620      	mov	r0, r4
   1189e:	b002      	add	sp, #8
   118a0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   118a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   118a6:	e7f9      	b.n	1189c <read_ppcp+0x28>
   118a8:	00280018 	.word	0x00280018

000118ac <cf_write>:
{
   118ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118b0:	b086      	sub	sp, #24
   118b2:	461f      	mov	r7, r3
   118b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   118b8:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   118ba:	2b01      	cmp	r3, #1
{
   118bc:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   118be:	d83a      	bhi.n	11936 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   118c0:	443b      	add	r3, r7
   118c2:	2b01      	cmp	r3, #1
   118c4:	463d      	mov	r5, r7
   118c6:	dc39      	bgt.n	1193c <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   118c8:	f7ff fe54 	bl	11574 <find_cf_cfg>
	if (!cfg) {
   118cc:	4604      	mov	r4, r0
   118ce:	b998      	cbnz	r0, 118f8 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   118d0:	f7ff fe50 	bl	11574 <find_cf_cfg>
	if (!cfg) {
   118d4:	4604      	mov	r4, r0
   118d6:	b978      	cbnz	r0, 118f8 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   118d8:	4b1b      	ldr	r3, [pc, #108]	; (11948 <cf_write+0x9c>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   118da:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   118de:	9305      	str	r3, [sp, #20]
   118e0:	2302      	movs	r3, #2
   118e2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   118e6:	4819      	ldr	r0, [pc, #100]	; (1194c <cf_write+0xa0>)
   118e8:	aa04      	add	r2, sp, #16
   118ea:	9304      	str	r3, [sp, #16]
   118ec:	f009 fff0 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
}
   118f0:	4628      	mov	r0, r5
   118f2:	b006      	add	sp, #24
   118f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   118f8:	b197      	cbz	r7, 11920 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   118fa:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   118fc:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   118fe:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11902:	fa21 f003 	lsr.w	r0, r1, r3
   11906:	07c7      	lsls	r7, r0, #31
   11908:	d503      	bpl.n	11912 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1190a:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1190e:	07c0      	lsls	r0, r0, #31
   11910:	d517      	bpl.n	11942 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   11912:	3301      	adds	r3, #1
   11914:	2b03      	cmp	r3, #3
   11916:	d1f4      	bne.n	11902 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   11918:	f002 0207 	and.w	r2, r2, #7
   1191c:	4311      	orrs	r1, r2
   1191e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11920:	1c60      	adds	r0, r4, #1
   11922:	f106 0188 	add.w	r1, r6, #136	; 0x88
   11926:	f009 ffd0 	bl	1b8ca <bt_addr_le_copy>
	cfg->id = conn->id;
   1192a:	7a33      	ldrb	r3, [r6, #8]
	bool changed = set_change_aware_no_store(cfg, aware);
   1192c:	4620      	mov	r0, r4
	cfg->id = conn->id;
   1192e:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   11930:	f00a f89c 	bl	1ba6c <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   11934:	e7dc      	b.n	118f0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11936:	f06f 0506 	mvn.w	r5, #6
   1193a:	e7d9      	b.n	118f0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1193c:	f06f 050c 	mvn.w	r5, #12
   11940:	e7d6      	b.n	118f0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   11942:	f06f 0512 	mvn.w	r5, #18
   11946:	e7d3      	b.n	118f0 <cf_write+0x44>
   11948:	00020c8f 	.word	0x00020c8f
   1194c:	0001e554 	.word	0x0001e554

00011950 <sc_indicate_rsp>:
{
   11950:	b510      	push	{r4, lr}
   11952:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11954:	4810      	ldr	r0, [pc, #64]	; (11998 <sc_indicate_rsp+0x48>)
   11956:	e8d0 3fef 	ldaex	r3, [r0]
   1195a:	f023 0302 	bic.w	r3, r3, #2
   1195e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   11962:	2a00      	cmp	r2, #0
   11964:	d1f7      	bne.n	11956 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11966:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1196a:	07da      	lsls	r2, r3, #31
   1196c:	d504      	bpl.n	11978 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1196e:	2200      	movs	r2, #0
   11970:	2300      	movs	r3, #0
   11972:	3830      	subs	r0, #48	; 0x30
   11974:	f006 f97a 	bl	17c6c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   11978:	4620      	mov	r0, r4
   1197a:	f009 fef3 	bl	1b764 <bt_att_fixed_chan_only>
   1197e:	b150      	cbz	r0, 11996 <sc_indicate_rsp+0x46>
		cfg = find_cf_cfg(conn);
   11980:	4620      	mov	r0, r4
   11982:	f7ff fdf7 	bl	11574 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   11986:	b130      	cbz	r0, 11996 <sc_indicate_rsp+0x46>
   11988:	7a03      	ldrb	r3, [r0, #8]
   1198a:	07db      	lsls	r3, r3, #31
   1198c:	d503      	bpl.n	11996 <sc_indicate_rsp+0x46>
}
   1198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   11992:	f00a b86b 	b.w	1ba6c <set_change_aware_no_store.constprop.0.isra.0>
}
   11996:	bd10      	pop	{r4, pc}
   11998:	20009408 	.word	0x20009408

0001199c <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1199c:	2101      	movs	r1, #1
{
   1199e:	b510      	push	{r4, lr}
   119a0:	4816      	ldr	r0, [pc, #88]	; (119fc <bt_gatt_init+0x60>)
   119a2:	f009 ff87 	bl	1b8b4 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   119a6:	07c3      	lsls	r3, r0, #31
   119a8:	d427      	bmi.n	119fa <bt_gatt_init+0x5e>
   119aa:	2102      	movs	r1, #2
   119ac:	4813      	ldr	r0, [pc, #76]	; (119fc <bt_gatt_init+0x60>)
   119ae:	f009 ff81 	bl	1b8b4 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   119b2:	4008      	ands	r0, r1
   119b4:	d107      	bne.n	119c6 <bt_gatt_init+0x2a>
   119b6:	4912      	ldr	r1, [pc, #72]	; (11a00 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   119b8:	4a12      	ldr	r2, [pc, #72]	; (11a04 <bt_gatt_init+0x68>)
   119ba:	880b      	ldrh	r3, [r1, #0]
   119bc:	4c12      	ldr	r4, [pc, #72]	; (11a08 <bt_gatt_init+0x6c>)
   119be:	42a2      	cmp	r2, r4
   119c0:	d315      	bcc.n	119ee <bt_gatt_init+0x52>
   119c2:	b100      	cbz	r0, 119c6 <bt_gatt_init+0x2a>
   119c4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   119c6:	2200      	movs	r2, #0
   119c8:	4b10      	ldr	r3, [pc, #64]	; (11a0c <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   119ca:	4911      	ldr	r1, [pc, #68]	; (11a10 <bt_gatt_init+0x74>)
   119cc:	4811      	ldr	r0, [pc, #68]	; (11a14 <bt_gatt_init+0x78>)
	list->tail = NULL;
   119ce:	e9c3 2200 	strd	r2, r2, [r3]
   119d2:	f00c f82f 	bl	1da34 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   119d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   119da:	2300      	movs	r3, #0
   119dc:	480d      	ldr	r0, [pc, #52]	; (11a14 <bt_gatt_init+0x78>)
   119de:	f7fa ffa7 	bl	c930 <bt_long_wq_schedule>
}
   119e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   119e6:	490c      	ldr	r1, [pc, #48]	; (11a18 <bt_gatt_init+0x7c>)
   119e8:	480c      	ldr	r0, [pc, #48]	; (11a1c <bt_gatt_init+0x80>)
   119ea:	f00c b823 	b.w	1da34 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   119ee:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   119f0:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   119f2:	4403      	add	r3, r0
   119f4:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   119f6:	2001      	movs	r0, #1
   119f8:	e7e1      	b.n	119be <bt_gatt_init+0x22>
}
   119fa:	bd10      	pop	{r4, pc}
   119fc:	200099b4 	.word	0x200099b4
   11a00:	20009c52 	.word	0x20009c52
   11a04:	0001e4ec 	.word	0x0001e4ec
   11a08:	0001e504 	.word	0x0001e504
   11a0c:	200099b8 	.word	0x200099b8
   11a10:	00011c31 	.word	0x00011c31
   11a14:	20009360 	.word	0x20009360
   11a18:	00011e61 	.word	0x00011e61
   11a1c:	200093d8 	.word	0x200093d8

00011a20 <bt_gatt_attr_get_handle>:
	if (!attr) {
   11a20:	4603      	mov	r3, r0
{
   11a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   11a26:	b148      	cbz	r0, 11a3c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   11a28:	8a00      	ldrh	r0, [r0, #16]
   11a2a:	b938      	cbnz	r0, 11a3c <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   11a2c:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11a2e:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11a32:	4911      	ldr	r1, [pc, #68]	; (11a78 <bt_gatt_attr_get_handle+0x58>)
   11a34:	f8df e044 	ldr.w	lr, [pc, #68]	; 11a7c <bt_gatt_attr_get_handle+0x5c>
   11a38:	4571      	cmp	r1, lr
   11a3a:	d301      	bcc.n	11a40 <bt_gatt_attr_get_handle+0x20>
}
   11a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11a40:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   11a44:	42bb      	cmp	r3, r7
   11a46:	d304      	bcc.n	11a52 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11a48:	fb0c 7206 	mla	r2, ip, r6, r7
   11a4c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   11a4e:	4293      	cmp	r3, r2
   11a50:	d90e      	bls.n	11a70 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   11a52:	4434      	add	r4, r6
   11a54:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11a56:	4614      	mov	r4, r2
   11a58:	3108      	adds	r1, #8
   11a5a:	e7ed      	b.n	11a38 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   11a5c:	fb0c 7805 	mla	r8, ip, r5, r7
   11a60:	4543      	cmp	r3, r8
   11a62:	d007      	beq.n	11a74 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   11a64:	3501      	adds	r5, #1
   11a66:	1962      	adds	r2, r4, r5
   11a68:	42b5      	cmp	r5, r6
   11a6a:	b292      	uxth	r2, r2
   11a6c:	d1f6      	bne.n	11a5c <bt_gatt_attr_get_handle+0x3c>
   11a6e:	e7f2      	b.n	11a56 <bt_gatt_attr_get_handle+0x36>
   11a70:	2500      	movs	r5, #0
   11a72:	e7f8      	b.n	11a66 <bt_gatt_attr_get_handle+0x46>
   11a74:	4610      	mov	r0, r2
   11a76:	e7e1      	b.n	11a3c <bt_gatt_attr_get_handle+0x1c>
   11a78:	0001e4ec 	.word	0x0001e4ec
   11a7c:	0001e504 	.word	0x0001e504

00011a80 <bt_gatt_foreach_attr_type>:
{
   11a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a84:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   11a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   11a8a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11a8e:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   11a90:	2d00      	cmp	r5, #0
   11a92:	bf08      	it	eq
   11a94:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   11a96:	4b24      	ldr	r3, [pc, #144]	; (11b28 <bt_gatt_foreach_attr_type+0xa8>)
{
   11a98:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   11a9a:	881b      	ldrh	r3, [r3, #0]
{
   11a9c:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   11a9e:	4283      	cmp	r3, r0
   11aa0:	d23c      	bcs.n	11b1c <bt_gatt_foreach_attr_type+0x9c>
}
   11aa2:	b003      	add	sp, #12
   11aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   11aa8:	6873      	ldr	r3, [r6, #4]
   11aaa:	4423      	add	r3, r4
   11aac:	42bb      	cmp	r3, r7
   11aae:	d232      	bcs.n	11b16 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   11ab0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11ab2:	3608      	adds	r6, #8
   11ab4:	4b1d      	ldr	r3, [pc, #116]	; (11b2c <bt_gatt_foreach_attr_type+0xac>)
   11ab6:	429e      	cmp	r6, r3
   11ab8:	d3f6      	bcc.n	11aa8 <bt_gatt_foreach_attr_type+0x28>
   11aba:	e7f2      	b.n	11aa2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11abc:	4640      	mov	r0, r8
   11abe:	5889      	ldr	r1, [r1, r2]
   11ac0:	9301      	str	r3, [sp, #4]
   11ac2:	f008 fc91 	bl	1a3e8 <bt_uuid_cmp>
   11ac6:	9b01      	ldr	r3, [sp, #4]
   11ac8:	b190      	cbz	r0, 11af0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11aca:	3401      	adds	r4, #1
   11acc:	f10a 0a01 	add.w	sl, sl, #1
   11ad0:	b2a4      	uxth	r4, r4
   11ad2:	6873      	ldr	r3, [r6, #4]
   11ad4:	4553      	cmp	r3, sl
   11ad6:	d9ec      	bls.n	11ab2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   11ad8:	9b00      	ldr	r3, [sp, #0]
   11ada:	429c      	cmp	r4, r3
   11adc:	d8e1      	bhi.n	11aa2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   11ade:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11ae0:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   11ae2:	d3f2      	bcc.n	11aca <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11ae4:	fb0b f20a 	mul.w	r2, fp, sl
   11ae8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11aea:	f1b8 0f00 	cmp.w	r8, #0
   11aee:	d1e5      	bne.n	11abc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   11af0:	f1b9 0f00 	cmp.w	r9, #0
   11af4:	d10b      	bne.n	11b0e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   11af6:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   11af8:	4618      	mov	r0, r3
	*num_matches -= 1;
   11afa:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   11afc:	4621      	mov	r1, r4
   11afe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b02:	4798      	blx	r3
	if (!*num_matches) {
   11b04:	2d00      	cmp	r5, #0
   11b06:	d0cc      	beq.n	11aa2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11b08:	2800      	cmp	r0, #0
   11b0a:	d1de      	bne.n	11aca <bt_gatt_foreach_attr_type+0x4a>
   11b0c:	e7c9      	b.n	11aa2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   11b0e:	68da      	ldr	r2, [r3, #12]
   11b10:	4591      	cmp	r9, r2
   11b12:	d1da      	bne.n	11aca <bt_gatt_foreach_attr_type+0x4a>
   11b14:	e7ef      	b.n	11af6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11b16:	f04f 0a00 	mov.w	sl, #0
   11b1a:	e7da      	b.n	11ad2 <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   11b1c:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11b1e:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11b22:	4e03      	ldr	r6, [pc, #12]	; (11b30 <bt_gatt_foreach_attr_type+0xb0>)
   11b24:	e7c6      	b.n	11ab4 <bt_gatt_foreach_attr_type+0x34>
   11b26:	bf00      	nop
   11b28:	20009c52 	.word	0x20009c52
   11b2c:	0001e504 	.word	0x0001e504
   11b30:	0001e4ec 	.word	0x0001e4ec

00011b34 <db_hash_gen>:
{
   11b34:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   11b36:	2400      	movs	r4, #0
{
   11b38:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11b3a:	4669      	mov	r1, sp
   11b3c:	aa22      	add	r2, sp, #136	; 0x88
   11b3e:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   11b40:	e9cd 4400 	strd	r4, r4, [sp]
   11b44:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11b48:	f008 f888 	bl	19c5c <tc_cmac_setup>
   11b4c:	b958      	cbnz	r0, 11b66 <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   11b4e:	4b15      	ldr	r3, [pc, #84]	; (11ba4 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   11b50:	9309      	str	r3, [sp, #36]	; 0x24
   11b52:	2302      	movs	r3, #2
   11b54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11b58:	4813      	ldr	r0, [pc, #76]	; (11ba8 <db_hash_gen+0x74>)
   11b5a:	aa08      	add	r2, sp, #32
   11b5c:	9308      	str	r3, [sp, #32]
   11b5e:	f009 feb7 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
}
   11b62:	b04e      	add	sp, #312	; 0x138
   11b64:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   11b66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11b6a:	2001      	movs	r0, #1
   11b6c:	4a0f      	ldr	r2, [pc, #60]	; (11bac <db_hash_gen+0x78>)
   11b6e:	ab0a      	add	r3, sp, #40	; 0x28
   11b70:	f00a f803 	bl	1bb7a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   11b74:	480e      	ldr	r0, [pc, #56]	; (11bb0 <db_hash_gen+0x7c>)
   11b76:	a90a      	add	r1, sp, #40	; 0x28
   11b78:	f008 f905 	bl	19d86 <tc_cmac_final>
   11b7c:	b908      	cbnz	r0, 11b82 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   11b7e:	4b0d      	ldr	r3, [pc, #52]	; (11bb4 <db_hash_gen+0x80>)
   11b80:	e7e6      	b.n	11b50 <db_hash_gen+0x1c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   11b82:	4621      	mov	r1, r4
   11b84:	4b0a      	ldr	r3, [pc, #40]	; (11bb0 <db_hash_gen+0x7c>)
   11b86:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   11b8a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11b8c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   11b90:	3101      	adds	r1, #1
   11b92:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11b94:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   11b98:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   11b9a:	d1f6      	bne.n	11b8a <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11b9c:	4806      	ldr	r0, [pc, #24]	; (11bb8 <db_hash_gen+0x84>)
   11b9e:	f009 fe89 	bl	1b8b4 <atomic_or>
   11ba2:	e7de      	b.n	11b62 <db_hash_gen+0x2e>
   11ba4:	00020cbb 	.word	0x00020cbb
   11ba8:	0001e554 	.word	0x0001e554
   11bac:	0001b7ff 	.word	0x0001b7ff
   11bb0:	20009350 	.word	0x20009350
   11bb4:	00020cd4 	.word	0x00020cd4
   11bb8:	20009408 	.word	0x20009408

00011bbc <db_hash_read>:
{
   11bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   11bbe:	4919      	ldr	r1, [pc, #100]	; (11c24 <db_hash_read+0x68>)
{
   11bc0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   11bc2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   11bc6:	4615      	mov	r5, r2
   11bc8:	461f      	mov	r7, r3
   11bca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   11bce:	f00b ff53 	bl	1da78 <k_work_cancel_delayable_sync>
   11bd2:	4b15      	ldr	r3, [pc, #84]	; (11c28 <db_hash_read+0x6c>)
   11bd4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   11bd8:	0719      	lsls	r1, r3, #28
   11bda:	d401      	bmi.n	11be0 <db_hash_read+0x24>
		db_hash_gen();
   11bdc:	f7ff ffaa 	bl	11b34 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   11be0:	4620      	mov	r0, r4
   11be2:	f7ff fcc7 	bl	11574 <find_cf_cfg>
	if (cfg &&
   11be6:	b150      	cbz	r0, 11bfe <db_hash_read+0x42>
   11be8:	7a03      	ldrb	r3, [r0, #8]
   11bea:	07da      	lsls	r2, r3, #31
   11bec:	d507      	bpl.n	11bfe <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   11bee:	300c      	adds	r0, #12
   11bf0:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   11bf4:	07db      	lsls	r3, r3, #31
   11bf6:	d402      	bmi.n	11bfe <db_hash_read+0x42>
   11bf8:	2102      	movs	r1, #2
   11bfa:	f009 fe5b 	bl	1b8b4 <atomic_or>
	if (offset > value_len) {
   11bfe:	2e10      	cmp	r6, #16
   11c00:	d80c      	bhi.n	11c1c <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   11c02:	f1c6 0410 	rsb	r4, r6, #16
   11c06:	42bc      	cmp	r4, r7
   11c08:	bfa8      	it	ge
   11c0a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   11c0c:	4907      	ldr	r1, [pc, #28]	; (11c2c <db_hash_read+0x70>)
   11c0e:	4622      	mov	r2, r4
   11c10:	4628      	mov	r0, r5
   11c12:	4431      	add	r1, r6
   11c14:	f008 fbab 	bl	1a36e <memcpy>
}
   11c18:	4620      	mov	r0, r4
   11c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11c1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   11c20:	e7fa      	b.n	11c18 <db_hash_read+0x5c>
   11c22:	bf00      	nop
   11c24:	20009390 	.word	0x20009390
   11c28:	20009408 	.word	0x20009408
   11c2c:	20009350 	.word	0x20009350

00011c30 <db_hash_process>:
   11c30:	4b03      	ldr	r3, [pc, #12]	; (11c40 <db_hash_process+0x10>)
   11c32:	e8d3 3faf 	lda	r3, [r3]
	if (new_hash) {
   11c36:	071b      	lsls	r3, r3, #28
   11c38:	d401      	bmi.n	11c3e <db_hash_process+0xe>
		db_hash_gen();
   11c3a:	f7ff bf7b 	b.w	11b34 <db_hash_gen>
}
   11c3e:	4770      	bx	lr
   11c40:	20009408 	.word	0x20009408

00011c44 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   11c44:	2300      	movs	r3, #0
{
   11c46:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   11c48:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   11c4a:	f7ff fee9 	bl	11a20 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   11c4e:	1c41      	adds	r1, r0, #1
   11c50:	b289      	uxth	r1, r1
   11c52:	4608      	mov	r0, r1
   11c54:	4a03      	ldr	r2, [pc, #12]	; (11c64 <bt_gatt_attr_next+0x20>)
   11c56:	ab01      	add	r3, sp, #4
   11c58:	f009 ff8f 	bl	1bb7a <bt_gatt_foreach_attr>
}
   11c5c:	9801      	ldr	r0, [sp, #4]
   11c5e:	b003      	add	sp, #12
   11c60:	f85d fb04 	ldr.w	pc, [sp], #4
   11c64:	0001b7af 	.word	0x0001b7af

00011c68 <gatt_indicate>:
{
   11c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c6c:	4615      	mov	r5, r2
   11c6e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11c70:	2294      	movs	r2, #148	; 0x94
   11c72:	6869      	ldr	r1, [r5, #4]
{
   11c74:	b086      	sub	sp, #24
   11c76:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11c78:	f009 ff8a 	bl	1bb90 <bt_gatt_check_perm>
   11c7c:	4680      	mov	r8, r0
   11c7e:	b178      	cbz	r0, 11ca0 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   11c80:	4b36      	ldr	r3, [pc, #216]	; (11d5c <gatt_indicate+0xf4>)
		return -EPERM;
   11c82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		LOG_WRN("Link is not encrypted");
   11c86:	9305      	str	r3, [sp, #20]
   11c88:	2302      	movs	r3, #2
   11c8a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c8e:	4834      	ldr	r0, [pc, #208]	; (11d60 <gatt_indicate+0xf8>)
   11c90:	aa04      	add	r2, sp, #16
   11c92:	9304      	str	r3, [sp, #16]
   11c94:	f009 fe1c 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
}
   11c98:	4628      	mov	r0, r5
   11c9a:	b006      	add	sp, #24
   11c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   11ca0:	2202      	movs	r2, #2
   11ca2:	4630      	mov	r0, r6
   11ca4:	6869      	ldr	r1, [r5, #4]
   11ca6:	f009 ffad 	bl	1bc04 <bt_gatt_is_subscribed>
   11caa:	b960      	cbnz	r0, 11cc6 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   11cac:	4b2d      	ldr	r3, [pc, #180]	; (11d64 <gatt_indicate+0xfc>)
   11cae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11cb2:	9305      	str	r3, [sp, #20]
   11cb4:	2302      	movs	r3, #2
   11cb6:	482a      	ldr	r0, [pc, #168]	; (11d60 <gatt_indicate+0xf8>)
   11cb8:	aa04      	add	r2, sp, #16
   11cba:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   11cbc:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   11cc0:	f009 fe06 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   11cc4:	e7e8      	b.n	11c98 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11cc6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   11cca:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   11ccc:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11cce:	f7ff fb51 	bl	11374 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   11cd2:	3702      	adds	r7, #2
	if (!req) {
   11cd4:	4604      	mov	r4, r0
   11cd6:	b1d0      	cbz	r0, 11d0e <gatt_indicate+0xa6>
	req->att_op = op;
   11cd8:	211d      	movs	r1, #29
	req->func = func;
   11cda:	4b23      	ldr	r3, [pc, #140]	; (11d68 <gatt_indicate+0x100>)
	req->len = len;
   11cdc:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   11cde:	463a      	mov	r2, r7
	req->att_op = op;
   11ce0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   11ce2:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   11ce6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   11ce8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   11cea:	4630      	mov	r0, r6
   11cec:	f7ff f870 	bl	10dd0 <bt_att_create_pdu>
	if (!buf) {
   11cf0:	4607      	mov	r7, r0
   11cf2:	b978      	cbnz	r0, 11d14 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   11cf4:	4b1d      	ldr	r3, [pc, #116]	; (11d6c <gatt_indicate+0x104>)
   11cf6:	481a      	ldr	r0, [pc, #104]	; (11d60 <gatt_indicate+0xf8>)
   11cf8:	9305      	str	r3, [sp, #20]
   11cfa:	2302      	movs	r3, #2
   11cfc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11d00:	aa04      	add	r2, sp, #16
   11d02:	9304      	str	r3, [sp, #16]
   11d04:	f009 fde4 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   11d08:	4620      	mov	r0, r4
   11d0a:	f7ff fb55 	bl	113b8 <bt_att_req_free>
		return -ENOMEM;
   11d0e:	f06f 050b 	mvn.w	r5, #11
   11d12:	e7c1      	b.n	11c98 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   11d14:	2301      	movs	r3, #1
   11d16:	4642      	mov	r2, r8
   11d18:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   11d1a:	f107 0a0c 	add.w	sl, r7, #12
   11d1e:	f009 fd3f 	bl	1b7a0 <bt_att_set_tx_meta_data>
   11d22:	2102      	movs	r1, #2
   11d24:	4650      	mov	r0, sl
   11d26:	f00a fc0e 	bl	1c546 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   11d2a:	4680      	mov	r8, r0
   11d2c:	f828 9b02 	strh.w	r9, [r8], #2
   11d30:	8aa9      	ldrh	r1, [r5, #20]
   11d32:	4650      	mov	r0, sl
   11d34:	f00a fc07 	bl	1c546 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   11d38:	8aaa      	ldrh	r2, [r5, #20]
   11d3a:	6929      	ldr	r1, [r5, #16]
   11d3c:	4640      	mov	r0, r8
   11d3e:	f008 fb16 	bl	1a36e <memcpy>
	err = bt_att_req_send(conn, req);
   11d42:	4621      	mov	r1, r4
   11d44:	4630      	mov	r0, r6
	req->buf = buf;
   11d46:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   11d48:	f009 fcf7 	bl	1b73a <bt_att_req_send>
	if (err) {
   11d4c:	4605      	mov	r5, r0
   11d4e:	2800      	cmp	r0, #0
   11d50:	d0a2      	beq.n	11c98 <gatt_indicate+0x30>
		bt_att_req_free(req);
   11d52:	4620      	mov	r0, r4
   11d54:	f7ff fb30 	bl	113b8 <bt_att_req_free>
   11d58:	e79e      	b.n	11c98 <gatt_indicate+0x30>
   11d5a:	bf00      	nop
   11d5c:	00020ced 	.word	0x00020ced
   11d60:	0001e554 	.word	0x0001e554
   11d64:	00020d03 	.word	0x00020d03
   11d68:	0001b7d1 	.word	0x0001b7d1
   11d6c:	00020d2e 	.word	0x00020d2e

00011d70 <bt_gatt_indicate>:
{
   11d70:	b530      	push	{r4, r5, lr}
   11d72:	4604      	mov	r4, r0
   11d74:	460d      	mov	r5, r1
   11d76:	b08b      	sub	sp, #44	; 0x2c
   11d78:	4b36      	ldr	r3, [pc, #216]	; (11e54 <bt_gatt_indicate+0xe4>)
   11d7a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11d7e:	075a      	lsls	r2, r3, #29
   11d80:	d561      	bpl.n	11e46 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   11d82:	b110      	cbz	r0, 11d8a <bt_gatt_indicate+0x1a>
   11d84:	7b43      	ldrb	r3, [r0, #13]
   11d86:	2b07      	cmp	r3, #7
   11d88:	d160      	bne.n	11e4c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   11d8a:	6868      	ldr	r0, [r5, #4]
   11d8c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11d8e:	f7ff fe47 	bl	11a20 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   11d92:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11d94:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11d98:	b33a      	cbz	r2, 11dea <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11d9a:	a905      	add	r1, sp, #20
   11d9c:	9102      	str	r1, [sp, #8]
   11d9e:	492e      	ldr	r1, [pc, #184]	; (11e58 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   11da0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11da2:	9101      	str	r1, [sp, #4]
   11da4:	2101      	movs	r1, #1
   11da6:	9100      	str	r1, [sp, #0]
   11da8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11dac:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11dae:	f7ff fe67 	bl	11a80 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   11db2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11db4:	b91b      	cbnz	r3, 11dbe <bt_gatt_indicate+0x4e>
			return -ENOENT;
   11db6:	f06f 0001 	mvn.w	r0, #1
}
   11dba:	b00b      	add	sp, #44	; 0x2c
   11dbc:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   11dbe:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11dc0:	9b05      	ldr	r3, [sp, #20]
   11dc2:	a904      	add	r1, sp, #16
   11dc4:	6818      	ldr	r0, [r3, #0]
   11dc6:	2300      	movs	r3, #0
   11dc8:	f88d 3010 	strb.w	r3, [sp, #16]
   11dcc:	f642 0303 	movw	r3, #10243	; 0x2803
   11dd0:	f8ad 3012 	strh.w	r3, [sp, #18]
   11dd4:	f008 fb08 	bl	1a3e8 <bt_uuid_cmp>
   11dd8:	b970      	cbnz	r0, 11df8 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   11dda:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   11ddc:	68c3      	ldr	r3, [r0, #12]
   11dde:	799b      	ldrb	r3, [r3, #6]
   11de0:	069b      	lsls	r3, r3, #26
   11de2:	d405      	bmi.n	11df0 <bt_gatt_indicate+0x80>
			return -EINVAL;
   11de4:	f06f 0015 	mvn.w	r0, #21
   11de8:	e7e7      	b.n	11dba <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   11dea:	2800      	cmp	r0, #0
   11dec:	d1e8      	bne.n	11dc0 <bt_gatt_indicate+0x50>
   11dee:	e7e2      	b.n	11db6 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   11df0:	f009 fe75 	bl	1bade <bt_gatt_attr_value_handle>
   11df4:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   11df8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   11dfc:	b13c      	cbz	r4, 11e0e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   11dfe:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   11e00:	4601      	mov	r1, r0
   11e02:	462a      	mov	r2, r5
   11e04:	4620      	mov	r0, r4
		params->_ref = 1;
   11e06:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   11e08:	f7ff ff2e 	bl	11c68 <gatt_indicate>
   11e0c:	e7d5      	b.n	11dba <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   11e0e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   11e12:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   11e14:	2302      	movs	r3, #2
   11e16:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11e1a:	f642 1302 	movw	r3, #10498	; 0x2902
   11e1e:	f8ad 3012 	strh.w	r3, [sp, #18]
   11e22:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   11e24:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11e26:	9302      	str	r3, [sp, #8]
   11e28:	4b0c      	ldr	r3, [pc, #48]	; (11e5c <bt_gatt_indicate+0xec>)
   11e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11e2e:	9301      	str	r3, [sp, #4]
   11e30:	2301      	movs	r3, #1
   11e32:	aa04      	add	r2, sp, #16
   11e34:	9300      	str	r3, [sp, #0]
   11e36:	4623      	mov	r3, r4
	data.ind_params = params;
   11e38:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11e3a:	f88d 4010 	strb.w	r4, [sp, #16]
   11e3e:	f7ff fe1f 	bl	11a80 <bt_gatt_foreach_attr_type>
	return data.err;
   11e42:	9807      	ldr	r0, [sp, #28]
   11e44:	e7b9      	b.n	11dba <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   11e46:	f06f 000a 	mvn.w	r0, #10
   11e4a:	e7b6      	b.n	11dba <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   11e4c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11e50:	e7b3      	b.n	11dba <bt_gatt_indicate+0x4a>
   11e52:	bf00      	nop
   11e54:	200080d4 	.word	0x200080d4
   11e58:	0001b7f7 	.word	0x0001b7f7
   11e5c:	000121a5 	.word	0x000121a5

00011e60 <sc_process>:
{
   11e60:	4603      	mov	r3, r0
   11e62:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11e64:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11e68:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11e6c:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11e6e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e72:	e8d4 2fef 	ldaex	r2, [r4]
   11e76:	f022 0201 	bic.w	r2, r2, #1
   11e7a:	e8c4 2fe0 	stlex	r0, r2, [r4]
   11e7e:	2800      	cmp	r0, #0
   11e80:	d1f7      	bne.n	11e72 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11e82:	4a0d      	ldr	r2, [pc, #52]	; (11eb8 <sc_process+0x58>)
	sc->start = 0U;
   11e84:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11e86:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   11e8a:	4a0c      	ldr	r2, [pc, #48]	; (11ebc <sc_process+0x5c>)
	sc->start = 0U;
   11e8c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   11e90:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   11e94:	aa01      	add	r2, sp, #4
   11e96:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   11e9a:	2204      	movs	r2, #4
	sc->end = 0U;
   11e9c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   11ea0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   11ea4:	f7ff ff64 	bl	11d70 <bt_gatt_indicate>
   11ea8:	b918      	cbnz	r0, 11eb2 <sc_process+0x52>
   11eaa:	2102      	movs	r1, #2
   11eac:	4620      	mov	r0, r4
   11eae:	f009 fd01 	bl	1b8b4 <atomic_or>
}
   11eb2:	b002      	add	sp, #8
   11eb4:	bd10      	pop	{r4, pc}
   11eb6:	bf00      	nop
   11eb8:	0001ebf8 	.word	0x0001ebf8
   11ebc:	00011951 	.word	0x00011951

00011ec0 <update_ccc>:
{
   11ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec4:	b089      	sub	sp, #36	; 0x24
   11ec6:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   11ec8:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   11eca:	4b3f      	ldr	r3, [pc, #252]	; (11fc8 <update_ccc+0x108>)
   11ecc:	6882      	ldr	r2, [r0, #8]
{
   11ece:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11ed0:	429a      	cmp	r2, r3
{
   11ed2:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11ed4:	d173      	bne.n	11fbe <update_ccc+0xfe>
	ccc = attr->user_data;
   11ed6:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   11eda:	f109 0601 	add.w	r6, r9, #1
   11ede:	f109 0a15 	add.w	sl, r9, #21
		if (!cfg->value ||
   11ee2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   11ee6:	b1eb      	cbz	r3, 11f24 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11ee8:	4632      	mov	r2, r6
   11eea:	4620      	mov	r0, r4
   11eec:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   11ef0:	f008 feef 	bl	1acd2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   11ef4:	b1b0      	cbz	r0, 11f24 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   11ef6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   11efa:	4629      	mov	r1, r5
   11efc:	4620      	mov	r0, r4
   11efe:	f009 fe47 	bl	1bb90 <bt_gatt_check_perm>
		if (err) {
   11f02:	b328      	cbz	r0, 11f50 <update_ccc+0x90>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   11f04:	2803      	cmp	r0, #3
   11f06:	d111      	bne.n	11f2c <update_ccc+0x6c>
				LOG_WRN("CCC %p not writable", attr);
   11f08:	46eb      	mov	fp, sp
   11f0a:	b088      	sub	sp, #32
   11f0c:	466a      	mov	r2, sp
   11f0e:	4b2f      	ldr	r3, [pc, #188]	; (11fcc <update_ccc+0x10c>)
   11f10:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11f14:	e9c2 3505 	strd	r3, r5, [r2, #20]
   11f18:	f842 0f10 	str.w	r0, [r2, #16]!
   11f1c:	482c      	ldr	r0, [pc, #176]	; (11fd0 <update_ccc+0x110>)
   11f1e:	f009 fcd7 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
   11f22:	46dd      	mov	sp, fp
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   11f24:	360a      	adds	r6, #10
   11f26:	4556      	cmp	r6, sl
   11f28:	d1db      	bne.n	11ee2 <update_ccc+0x22>
   11f2a:	e048      	b.n	11fbe <update_ccc+0xfe>
			sec = BT_SECURITY_L2;
   11f2c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   11f2e:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   11f30:	bf0c      	ite	eq
   11f32:	f04f 0b03 	moveq.w	fp, #3
   11f36:	f04f 0b02 	movne.w	fp, #2
			    bt_conn_get_security(conn) < sec) {
   11f3a:	f008 fec8 	bl	1acce <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   11f3e:	4583      	cmp	fp, r0
   11f40:	d906      	bls.n	11f50 <update_ccc+0x90>
				if (data->sec < sec) {
   11f42:	f898 3004 	ldrb.w	r3, [r8, #4]
   11f46:	455b      	cmp	r3, fp
   11f48:	d2ec      	bcs.n	11f24 <update_ccc+0x64>
					data->sec = sec;
   11f4a:	f888 b004 	strb.w	fp, [r8, #4]
   11f4e:	e7e9      	b.n	11f24 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
   11f50:	4649      	mov	r1, r9
   11f52:	4628      	mov	r0, r5
   11f54:	f009 fc2e 	bl	1b7b4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   11f58:	4b1e      	ldr	r3, [pc, #120]	; (11fd4 <update_ccc+0x114>)
   11f5a:	4599      	cmp	r9, r3
   11f5c:	d12f      	bne.n	11fbe <update_ccc+0xfe>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   11f5e:	7a20      	ldrb	r0, [r4, #8]
   11f60:	f104 0188 	add.w	r1, r4, #136	; 0x88
   11f64:	f7ff fb34 	bl	115d0 <find_sc_cfg>
	if (!cfg) {
   11f68:	b348      	cbz	r0, 11fbe <update_ccc+0xfe>
	if (!(cfg->data.start || cfg->data.end)) {
   11f6a:	8902      	ldrh	r2, [r0, #8]
   11f6c:	8943      	ldrh	r3, [r0, #10]
   11f6e:	ea53 0102 	orrs.w	r1, r3, r2
   11f72:	d024      	beq.n	11fbe <update_ccc+0xfe>
	index = bt_conn_index(conn);
   11f74:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   11f76:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   11f78:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   11f7a:	f7fd fe21 	bl	fbc0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   11f7e:	2318      	movs	r3, #24
   11f80:	4915      	ldr	r1, [pc, #84]	; (11fd8 <update_ccc+0x118>)
   11f82:	4a16      	ldr	r2, [pc, #88]	; (11fdc <update_ccc+0x11c>)
   11f84:	fb03 1300 	mla	r3, r3, r0, r1
   11f88:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   11f8a:	4a15      	ldr	r2, [pc, #84]	; (11fe0 <update_ccc+0x120>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11f8c:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   11f8e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   11f90:	1d3a      	adds	r2, r7, #4
   11f92:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   11f94:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11f96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11f9a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11f9e:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   11fa0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11fa2:	f7ff fee5 	bl	11d70 <bt_gatt_indicate>
   11fa6:	b150      	cbz	r0, 11fbe <update_ccc+0xfe>
		LOG_ERR("SC restore indication failed");
   11fa8:	4b0e      	ldr	r3, [pc, #56]	; (11fe4 <update_ccc+0x124>)
   11faa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11fae:	61fb      	str	r3, [r7, #28]
   11fb0:	2302      	movs	r3, #2
   11fb2:	4807      	ldr	r0, [pc, #28]	; (11fd0 <update_ccc+0x110>)
   11fb4:	f107 0218 	add.w	r2, r7, #24
   11fb8:	61bb      	str	r3, [r7, #24]
   11fba:	f009 fc89 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
}
   11fbe:	2001      	movs	r0, #1
   11fc0:	3724      	adds	r7, #36	; 0x24
   11fc2:	46bd      	mov	sp, r7
   11fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc8:	0001165d 	.word	0x0001165d
   11fcc:	00020d55 	.word	0x00020d55
   11fd0:	0001e554 	.word	0x0001e554
   11fd4:	200082b0 	.word	0x200082b0
   11fd8:	2000997c 	.word	0x2000997c
   11fdc:	0001ebf8 	.word	0x0001ebf8
   11fe0:	0001ba75 	.word	0x0001ba75
   11fe4:	00020d69 	.word	0x00020d69

00011fe8 <gatt_notify>:
{
   11fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11fec:	4614      	mov	r4, r2
   11fee:	4688      	mov	r8, r1
   11ff0:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11ff2:	2294      	movs	r2, #148	; 0x94
   11ff4:	6861      	ldr	r1, [r4, #4]
{
   11ff6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11ff8:	f009 fdca 	bl	1bb90 <bt_gatt_check_perm>
   11ffc:	b170      	cbz	r0, 1201c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   11ffe:	4b2b      	ldr	r3, [pc, #172]	; (120ac <gatt_notify+0xc4>)
   12000:	482b      	ldr	r0, [pc, #172]	; (120b0 <gatt_notify+0xc8>)
   12002:	9305      	str	r3, [sp, #20]
   12004:	2302      	movs	r3, #2
   12006:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1200a:	aa04      	add	r2, sp, #16
   1200c:	9304      	str	r3, [sp, #16]
   1200e:	f009 fc5f 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   12012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12016:	b007      	add	sp, #28
   12018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1201c:	2201      	movs	r2, #1
   1201e:	4630      	mov	r0, r6
   12020:	6861      	ldr	r1, [r4, #4]
   12022:	f009 fdef 	bl	1bc04 <bt_gatt_is_subscribed>
   12026:	b960      	cbnz	r0, 12042 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   12028:	4b22      	ldr	r3, [pc, #136]	; (120b4 <gatt_notify+0xcc>)
   1202a:	4821      	ldr	r0, [pc, #132]	; (120b0 <gatt_notify+0xc8>)
   1202c:	9305      	str	r3, [sp, #20]
   1202e:	2302      	movs	r3, #2
   12030:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12034:	aa04      	add	r2, sp, #16
   12036:	9304      	str	r3, [sp, #16]
   12038:	f009 fc4a 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1203c:	f06f 0015 	mvn.w	r0, #21
   12040:	e7e9      	b.n	12016 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   12042:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12044:	211b      	movs	r1, #27
   12046:	4630      	mov	r0, r6
   12048:	3202      	adds	r2, #2
   1204a:	f7fe fec1 	bl	10dd0 <bt_att_create_pdu>
	if (!buf) {
   1204e:	4605      	mov	r5, r0
   12050:	b960      	cbnz	r0, 1206c <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   12052:	4b19      	ldr	r3, [pc, #100]	; (120b8 <gatt_notify+0xd0>)
   12054:	4816      	ldr	r0, [pc, #88]	; (120b0 <gatt_notify+0xc8>)
   12056:	9305      	str	r3, [sp, #20]
   12058:	2302      	movs	r3, #2
   1205a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1205e:	aa04      	add	r2, sp, #16
   12060:	9304      	str	r3, [sp, #16]
   12062:	f009 fc35 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   12066:	f06f 000b 	mvn.w	r0, #11
   1206a:	e7d4      	b.n	12016 <gatt_notify+0x2e>
   1206c:	f100 090c 	add.w	r9, r0, #12
   12070:	2102      	movs	r1, #2
   12072:	4648      	mov	r0, r9
   12074:	f00a fa67 	bl	1c546 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   12078:	4607      	mov	r7, r0
   1207a:	f827 8b02 	strh.w	r8, [r7], #2
   1207e:	89a1      	ldrh	r1, [r4, #12]
   12080:	4648      	mov	r0, r9
   12082:	f00a fa60 	bl	1c546 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   12086:	89a2      	ldrh	r2, [r4, #12]
   12088:	68a1      	ldr	r1, [r4, #8]
   1208a:	4638      	mov	r0, r7
   1208c:	f008 f96f 	bl	1a36e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   12090:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   12094:	4628      	mov	r0, r5
   12096:	2301      	movs	r3, #1
   12098:	f009 fb82 	bl	1b7a0 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1209c:	4629      	mov	r1, r5
   1209e:	4630      	mov	r0, r6
}
   120a0:	b007      	add	sp, #28
   120a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   120a6:	f009 bb0a 	b.w	1b6be <bt_att_send>
   120aa:	bf00      	nop
   120ac:	00020ced 	.word	0x00020ced
   120b0:	0001e554 	.word	0x0001e554
   120b4:	00020d03 	.word	0x00020d03
   120b8:	00020d86 	.word	0x00020d86

000120bc <bt_gatt_notify_cb>:
{
   120bc:	b530      	push	{r4, r5, lr}
   120be:	4604      	mov	r4, r0
   120c0:	460d      	mov	r5, r1
   120c2:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   120c4:	4b34      	ldr	r3, [pc, #208]	; (12198 <bt_gatt_notify_cb+0xdc>)
   120c6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   120ca:	075a      	lsls	r2, r3, #29
   120cc:	d55d      	bpl.n	1218a <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   120ce:	b110      	cbz	r0, 120d6 <bt_gatt_notify_cb+0x1a>
   120d0:	7b43      	ldrb	r3, [r0, #13]
   120d2:	2b07      	cmp	r3, #7
   120d4:	d15c      	bne.n	12190 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   120d6:	6868      	ldr	r0, [r5, #4]
   120d8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   120da:	f7ff fca1 	bl	11a20 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   120de:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   120e0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   120e4:	b33a      	cbz	r2, 12136 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   120e6:	a905      	add	r1, sp, #20
   120e8:	9102      	str	r1, [sp, #8]
   120ea:	492c      	ldr	r1, [pc, #176]	; (1219c <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   120ec:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   120ee:	9101      	str	r1, [sp, #4]
   120f0:	2101      	movs	r1, #1
   120f2:	9100      	str	r1, [sp, #0]
   120f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   120f8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   120fa:	f7ff fcc1 	bl	11a80 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   120fe:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   12100:	b91b      	cbnz	r3, 1210a <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   12102:	f06f 0001 	mvn.w	r0, #1
}
   12106:	b00b      	add	sp, #44	; 0x2c
   12108:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1210a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1210c:	9b05      	ldr	r3, [sp, #20]
   1210e:	a904      	add	r1, sp, #16
   12110:	6818      	ldr	r0, [r3, #0]
   12112:	2300      	movs	r3, #0
   12114:	f88d 3010 	strb.w	r3, [sp, #16]
   12118:	f642 0303 	movw	r3, #10243	; 0x2803
   1211c:	f8ad 3012 	strh.w	r3, [sp, #18]
   12120:	f008 f962 	bl	1a3e8 <bt_uuid_cmp>
   12124:	b970      	cbnz	r0, 12144 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   12126:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   12128:	68c3      	ldr	r3, [r0, #12]
   1212a:	799b      	ldrb	r3, [r3, #6]
   1212c:	06db      	lsls	r3, r3, #27
   1212e:	d405      	bmi.n	1213c <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   12130:	f06f 0015 	mvn.w	r0, #21
   12134:	e7e7      	b.n	12106 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   12136:	2800      	cmp	r0, #0
   12138:	d1e8      	bne.n	1210c <bt_gatt_notify_cb+0x50>
   1213a:	e7e2      	b.n	12102 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1213c:	f009 fccf 	bl	1bade <bt_gatt_attr_value_handle>
   12140:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   12144:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   12148:	b12c      	cbz	r4, 12156 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1214a:	4601      	mov	r1, r0
   1214c:	462a      	mov	r2, r5
   1214e:	4620      	mov	r0, r4
   12150:	f7ff ff4a 	bl	11fe8 <gatt_notify>
   12154:	e7d7      	b.n	12106 <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   12156:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1215a:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1215e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   12160:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   12162:	f8ad 2012 	strh.w	r2, [sp, #18]
   12166:	aa05      	add	r2, sp, #20
   12168:	9202      	str	r2, [sp, #8]
   1216a:	4a0d      	ldr	r2, [pc, #52]	; (121a0 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   1216c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   12170:	e9cd 3200 	strd	r3, r2, [sp]
   12174:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12178:	4623      	mov	r3, r4
   1217a:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1217c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1217e:	f88d 4010 	strb.w	r4, [sp, #16]
   12182:	f7ff fc7d 	bl	11a80 <bt_gatt_foreach_attr_type>
	return data.err;
   12186:	9807      	ldr	r0, [sp, #28]
   12188:	e7bd      	b.n	12106 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1218a:	f06f 000a 	mvn.w	r0, #10
   1218e:	e7ba      	b.n	12106 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   12190:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   12194:	e7b7      	b.n	12106 <bt_gatt_notify_cb+0x4a>
   12196:	bf00      	nop
   12198:	200080d4 	.word	0x200080d4
   1219c:	0001b7f7 	.word	0x0001b7f7
   121a0:	000121a5 	.word	0x000121a5

000121a4 <notify_cb>:
{
   121a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   121a8:	4b46      	ldr	r3, [pc, #280]	; (122c4 <notify_cb+0x120>)
{
   121aa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   121ac:	6882      	ldr	r2, [r0, #8]
{
   121ae:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   121b0:	429a      	cmp	r2, r3
{
   121b2:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   121b4:	d136      	bne.n	12224 <notify_cb+0x80>
	ccc = attr->user_data;
   121b6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   121ba:	4b43      	ldr	r3, [pc, #268]	; (122c8 <notify_cb+0x124>)
   121bc:	459a      	cmp	sl, r3
   121be:	d119      	bne.n	121f4 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   121c0:	2600      	movs	r6, #0
   121c2:	4c42      	ldr	r4, [pc, #264]	; (122cc <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   121c4:	4f42      	ldr	r7, [pc, #264]	; (122d0 <notify_cb+0x12c>)
   121c6:	4639      	mov	r1, r7
   121c8:	4620      	mov	r0, r4
   121ca:	f009 fb6b 	bl	1b8a4 <bt_addr_le_eq>
   121ce:	b978      	cbnz	r0, 121f0 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   121d0:	2207      	movs	r2, #7
   121d2:	4621      	mov	r1, r4
   121d4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   121d8:	f7fd fe50 	bl	fe7c <bt_conn_lookup_state_le>
			if (!conn) {
   121dc:	bb38      	cbnz	r0, 1222e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   121de:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   121e0:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   121e2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   121e4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   121e8:	8853      	ldrh	r3, [r2, #2]
   121ea:	8812      	ldrh	r2, [r2, #0]
   121ec:	f7ff fab2 	bl	11754 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   121f0:	340c      	adds	r4, #12
   121f2:	b1d6      	cbz	r6, 1222a <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   121f4:	f10a 0601 	add.w	r6, sl, #1
   121f8:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   121fc:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   12200:	89ab      	ldrh	r3, [r5, #12]
   12202:	429a      	cmp	r2, r3
   12204:	d10b      	bne.n	1221e <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12206:	4631      	mov	r1, r6
   12208:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1220c:	f7fd fdec 	bl	fde8 <bt_conn_lookup_addr_le>
		if (!conn) {
   12210:	4604      	mov	r4, r0
   12212:	b120      	cbz	r0, 1221e <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   12214:	7b43      	ldrb	r3, [r0, #13]
   12216:	2b07      	cmp	r3, #7
   12218:	d00c      	beq.n	12234 <notify_cb+0x90>
			bt_conn_unref(conn);
   1221a:	f008 fcb6 	bl	1ab8a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1221e:	360a      	adds	r6, #10
   12220:	45b3      	cmp	fp, r6
   12222:	d1eb      	bne.n	121fc <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   12224:	f04f 0901 	mov.w	r9, #1
   12228:	e048      	b.n	122bc <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1222a:	2601      	movs	r6, #1
   1222c:	e7cb      	b.n	121c6 <notify_cb+0x22>
			bt_conn_unref(conn);
   1222e:	f008 fcac 	bl	1ab8a <bt_conn_unref>
   12232:	e7dd      	b.n	121f0 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   12234:	f8da 3020 	ldr.w	r3, [sl, #32]
   12238:	b123      	cbz	r3, 12244 <notify_cb+0xa0>
   1223a:	4641      	mov	r1, r8
   1223c:	4798      	blx	r3
   1223e:	b908      	cbnz	r0, 12244 <notify_cb+0xa0>
			bt_conn_unref(conn);
   12240:	4620      	mov	r0, r4
   12242:	e7ea      	b.n	1221a <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12244:	2294      	movs	r2, #148	; 0x94
   12246:	4641      	mov	r1, r8
   12248:	4620      	mov	r0, r4
   1224a:	f009 fca1 	bl	1bb90 <bt_gatt_check_perm>
   1224e:	4681      	mov	r9, r0
   12250:	b150      	cbz	r0, 12268 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   12252:	4b20      	ldr	r3, [pc, #128]	; (122d4 <notify_cb+0x130>)
   12254:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12258:	9305      	str	r3, [sp, #20]
   1225a:	2302      	movs	r3, #2
   1225c:	481e      	ldr	r0, [pc, #120]	; (122d8 <notify_cb+0x134>)
   1225e:	aa04      	add	r2, sp, #16
   12260:	9304      	str	r3, [sp, #16]
   12262:	f009 fb35 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   12266:	e7eb      	b.n	12240 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   12268:	89ab      	ldrh	r3, [r5, #12]
   1226a:	2b02      	cmp	r3, #2
   1226c:	d115      	bne.n	1229a <notify_cb+0xf6>
   1226e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   12272:	079a      	lsls	r2, r3, #30
   12274:	d405      	bmi.n	12282 <notify_cb+0xde>
		bt_conn_unref(conn);
   12276:	4620      	mov	r0, r4
   12278:	f008 fc87 	bl	1ab8a <bt_conn_unref>
		data->err = 0;
   1227c:	2300      	movs	r3, #0
   1227e:	60ab      	str	r3, [r5, #8]
   12280:	e7cd      	b.n	1221e <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   12282:	4620      	mov	r0, r4
   12284:	692a      	ldr	r2, [r5, #16]
   12286:	88a9      	ldrh	r1, [r5, #4]
   12288:	f7ff fcee 	bl	11c68 <gatt_indicate>
			if (err == 0) {
   1228c:	4607      	mov	r7, r0
   1228e:	b980      	cbnz	r0, 122b2 <notify_cb+0x10e>
				data->ind_params->_ref++;
   12290:	692a      	ldr	r2, [r5, #16]
   12292:	7d93      	ldrb	r3, [r2, #22]
   12294:	3301      	adds	r3, #1
   12296:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   12298:	e7ed      	b.n	12276 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1229a:	2b01      	cmp	r3, #1
   1229c:	d1eb      	bne.n	12276 <notify_cb+0xd2>
   1229e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   122a2:	07db      	lsls	r3, r3, #31
   122a4:	d5e7      	bpl.n	12276 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   122a6:	4620      	mov	r0, r4
   122a8:	692a      	ldr	r2, [r5, #16]
   122aa:	88a9      	ldrh	r1, [r5, #4]
   122ac:	f7ff fe9c 	bl	11fe8 <gatt_notify>
   122b0:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   122b2:	4620      	mov	r0, r4
   122b4:	f008 fc69 	bl	1ab8a <bt_conn_unref>
		if (err < 0) {
   122b8:	2f00      	cmp	r7, #0
   122ba:	dadf      	bge.n	1227c <notify_cb+0xd8>
}
   122bc:	4648      	mov	r0, r9
   122be:	b007      	add	sp, #28
   122c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c4:	0001165d 	.word	0x0001165d
   122c8:	200082b0 	.word	0x200082b0
   122cc:	20009c3b 	.word	0x20009c3b
   122d0:	0001f9e5 	.word	0x0001f9e5
   122d4:	00020ced 	.word	0x00020ced
   122d8:	0001e554 	.word	0x0001e554

000122dc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   122dc:	b590      	push	{r4, r7, lr}
   122de:	b083      	sub	sp, #12
   122e0:	af00      	add	r7, sp, #0
   122e2:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   122e4:	6038      	str	r0, [r7, #0]
	data.sec = BT_SECURITY_L1;
   122e6:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   122e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   122ec:	463b      	mov	r3, r7
   122ee:	4a10      	ldr	r2, [pc, #64]	; (12330 <bt_gatt_connected+0x54>)
	data.sec = BT_SECURITY_L1;
   122f0:	7138      	strb	r0, [r7, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   122f2:	f009 fc42 	bl	1bb7a <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   122f6:	4620      	mov	r0, r4
   122f8:	f008 fce9 	bl	1acce <bt_conn_get_security>
   122fc:	7939      	ldrb	r1, [r7, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   122fe:	4288      	cmp	r0, r1
   12300:	d212      	bcs.n	12328 <bt_gatt_connected+0x4c>
		int err = bt_conn_set_security(conn, data.sec);
   12302:	4620      	mov	r0, r4
   12304:	f008 fcb7 	bl	1ac76 <bt_conn_set_security>

		if (err) {
   12308:	b170      	cbz	r0, 12328 <bt_gatt_connected+0x4c>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1230a:	466c      	mov	r4, sp
   1230c:	b088      	sub	sp, #32
   1230e:	466a      	mov	r2, sp
   12310:	4b08      	ldr	r3, [pc, #32]	; (12334 <bt_gatt_connected+0x58>)
   12312:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12316:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1231a:	2303      	movs	r3, #3
   1231c:	4806      	ldr	r0, [pc, #24]	; (12338 <bt_gatt_connected+0x5c>)
   1231e:	f842 3f10 	str.w	r3, [r2, #16]!
   12322:	f009 fad5 	bl	1b8d0 <z_log_msg_static_create.constprop.0>
   12326:	46a5      	mov	sp, r4
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   12328:	370c      	adds	r7, #12
   1232a:	46bd      	mov	sp, r7
   1232c:	bd90      	pop	{r4, r7, pc}
   1232e:	bf00      	nop
   12330:	00011ec1 	.word	0x00011ec1
   12334:	00020daf 	.word	0x00020daf
   12338:	0001e554 	.word	0x0001e554

0001233c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1233e:	4605      	mov	r5, r0
   12340:	460e      	mov	r6, r1
   12342:	4617      	mov	r7, r2
	return list->head;
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <bt_gatt_att_max_mtu_changed+0x24>)
   12346:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12348:	b14c      	cbz	r4, 1235e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1234a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1234e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   12350:	b11b      	cbz	r3, 1235a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   12352:	463a      	mov	r2, r7
   12354:	4631      	mov	r1, r6
   12356:	4628      	mov	r0, r5
   12358:	4798      	blx	r3
	return node->next;
   1235a:	6864      	ldr	r4, [r4, #4]
   1235c:	e7f4      	b.n	12348 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1235e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12360:	200099b8 	.word	0x200099b8

00012364 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   12364:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   12366:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   12368:	2001      	movs	r0, #1

#if defined(CONFIG_BT_GATT_AUTO_RESUBSCRIBE)
	add_subscriptions(conn);
#endif	/* CONFIG_BT_GATT_AUTO_RESUBSCRIBE */

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1236a:	466b      	mov	r3, sp
   1236c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12370:	4a03      	ldr	r2, [pc, #12]	; (12380 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   12372:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12376:	f009 fc00 	bl	1bb7a <bt_gatt_foreach_attr>
		 * marked as change-unaware.
		 */
		sc_indicate(0x0001, 0xffff);
	}
#endif	/* CONFIG_BT_SETTINGS && CONFIG_BT_GATT_SERVICE_CHANGED */
}
   1237a:	b003      	add	sp, #12
   1237c:	f85d fb04 	ldr.w	pc, [sp], #4
   12380:	00011ec1 	.word	0x00011ec1

00012384 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   12384:	b570      	push	{r4, r5, r6, lr}
   12386:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   12388:	4603      	mov	r3, r0
   1238a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1238e:	2001      	movs	r0, #1
   12390:	4a0d      	ldr	r2, [pc, #52]	; (123c8 <bt_gatt_disconnected+0x44>)
   12392:	f009 fbf2 	bl	1bb7a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   12396:	4620      	mov	r0, r4
   12398:	f7ff f8ec 	bl	11574 <find_cf_cfg>
	if (!cfg) {
   1239c:	4605      	mov	r5, r0
   1239e:	b188      	cbz	r0, 123c4 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   123a0:	f104 0688 	add.w	r6, r4, #136	; 0x88
   123a4:	4631      	mov	r1, r6
   123a6:	7a20      	ldrb	r0, [r4, #8]
   123a8:	f008 f976 	bl	1a698 <bt_addr_le_is_bonded>
   123ac:	b920      	cbnz	r0, 123b8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   123ae:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   123b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   123b4:	f7ff b9b6 	b.w	11724 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   123b8:	4631      	mov	r1, r6
   123ba:	1c68      	adds	r0, r5, #1
}
   123bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   123c0:	f009 ba83 	b.w	1b8ca <bt_addr_le_copy>
}
   123c4:	bd70      	pop	{r4, r5, r6, pc}
   123c6:	bf00      	nop
   123c8:	000117c1 	.word	0x000117c1

000123cc <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   123cc:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   123ce:	4b05      	ldr	r3, [pc, #20]	; (123e4 <smp_find+0x18>)
{
   123d0:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   123d2:	4618      	mov	r0, r3
   123d4:	f009 fce1 	bl	1bd9a <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   123d8:	3b04      	subs	r3, #4
   123da:	2800      	cmp	r0, #0
}
   123dc:	bf14      	ite	ne
   123de:	4618      	movne	r0, r3
   123e0:	2000      	moveq	r0, #0
   123e2:	bd08      	pop	{r3, pc}
   123e4:	20009414 	.word	0x20009414

000123e8 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   123e8:	4b08      	ldr	r3, [pc, #32]	; (1240c <latch_auth_cb+0x24>)
   123ea:	f500 70a8 	add.w	r0, r0, #336	; 0x150
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   123ee:	681a      	ldr	r2, [r3, #0]
   123f0:	4b07      	ldr	r3, [pc, #28]	; (12410 <latch_auth_cb+0x28>)
   123f2:	e8d0 1fef 	ldaex	r1, [r0]
   123f6:	4299      	cmp	r1, r3
   123f8:	d104      	bne.n	12404 <latch_auth_cb+0x1c>
   123fa:	e8c0 2fec 	stlex	ip, r2, [r0]
   123fe:	f1bc 0f00 	cmp.w	ip, #0
   12402:	d1f6      	bne.n	123f2 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12404:	e8d0 0faf 	lda	r0, [r0]
}
   12408:	4770      	bx	lr
   1240a:	bf00      	nop
   1240c:	200098ec 	.word	0x200098ec
   12410:	20009410 	.word	0x20009410

00012414 <get_io_capa>:
{
   12414:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12416:	f7ff ffe7 	bl	123e8 <latch_auth_cb>
	if (!smp_auth_cb) {
   1241a:	4603      	mov	r3, r0
   1241c:	b1c8      	cbz	r0, 12452 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1241e:	e9d0 1200 	ldrd	r1, r2, [r0]
   12422:	b921      	cbnz	r1, 1242e <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   12424:	2a00      	cmp	r2, #0
   12426:	bf0c      	ite	eq
   12428:	2003      	moveq	r0, #3
   1242a:	2002      	movne	r0, #2
   1242c:	e010      	b.n	12450 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1242e:	b132      	cbz	r2, 1243e <get_io_capa+0x2a>
   12430:	6883      	ldr	r3, [r0, #8]
   12432:	b913      	cbnz	r3, 1243a <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   12434:	4b09      	ldr	r3, [pc, #36]	; (1245c <get_io_capa+0x48>)
   12436:	781b      	ldrb	r3, [r3, #0]
   12438:	b933      	cbnz	r3, 12448 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1243a:	2004      	movs	r0, #4
   1243c:	e008      	b.n	12450 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1243e:	4907      	ldr	r1, [pc, #28]	; (1245c <get_io_capa+0x48>)
   12440:	7808      	ldrb	r0, [r1, #0]
   12442:	b128      	cbz	r0, 12450 <get_io_capa+0x3c>
   12444:	689b      	ldr	r3, [r3, #8]
   12446:	b933      	cbnz	r3, 12456 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   12448:	3a00      	subs	r2, #0
   1244a:	bf18      	it	ne
   1244c:	2201      	movne	r2, #1
   1244e:	0050      	lsls	r0, r2, #1
}
   12450:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   12452:	2003      	movs	r0, #3
   12454:	e7fc      	b.n	12450 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   12456:	2001      	movs	r0, #1
   12458:	e7fa      	b.n	12450 <get_io_capa+0x3c>
   1245a:	bf00      	nop
   1245c:	20009d3e 	.word	0x20009d3e

00012460 <get_auth>:
{
   12460:	b510      	push	{r4, lr}
	if (sc_supported) {
   12462:	4b0c      	ldr	r3, [pc, #48]	; (12494 <get_auth+0x34>)
   12464:	781b      	ldrb	r3, [r3, #0]
   12466:	b17b      	cbz	r3, 12488 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   12468:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1246c:	f7ff ffd2 	bl	12414 <get_io_capa>
	if (bondable) {
   12470:	4b09      	ldr	r3, [pc, #36]	; (12498 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   12472:	2803      	cmp	r0, #3
	if (bondable) {
   12474:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   12476:	bf0c      	ite	eq
   12478:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1247c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   12480:	b12b      	cbz	r3, 1248e <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   12482:	f044 0001 	orr.w	r0, r4, #1
}
   12486:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   12488:	f001 0407 	and.w	r4, r1, #7
   1248c:	e7ee      	b.n	1246c <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1248e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   12492:	e7f8      	b.n	12486 <get_auth+0x26>
   12494:	20009d3e 	.word	0x20009d3e
   12498:	200084c2 	.word	0x200084c2

0001249c <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1249c:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1249e:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   124a0:	b530      	push	{r4, r5, lr}
   124a2:	b089      	sub	sp, #36	; 0x24
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   124a4:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   124a6:	4604      	mov	r4, r0
   124a8:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   124aa:	460a      	mov	r2, r1
   124ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   124b0:	2106      	movs	r1, #6
   124b2:	f008 fcc5 	bl	1ae40 <bt_l2cap_send_cb>
	if (err) {
   124b6:	b188      	cbz	r0, 124dc <smp_send.constprop.0+0x40>
		if (err == -ENOBUFS) {
   124b8:	3069      	adds	r0, #105	; 0x69
   124ba:	d109      	bne.n	124d0 <smp_send.constprop.0+0x34>
			LOG_ERR("Ran out of TX buffers or contexts.");
   124bc:	4b0c      	ldr	r3, [pc, #48]	; (124f0 <smp_send.constprop.0+0x54>)
   124be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   124c2:	9307      	str	r3, [sp, #28]
   124c4:	2302      	movs	r3, #2
   124c6:	480b      	ldr	r0, [pc, #44]	; (124f4 <smp_send.constprop.0+0x58>)
   124c8:	aa06      	add	r2, sp, #24
   124ca:	9306      	str	r3, [sp, #24]
   124cc:	f009 fc99 	bl	1be02 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   124d0:	4628      	mov	r0, r5
}
   124d2:	b009      	add	sp, #36	; 0x24
   124d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   124d8:	f001 be6c 	b.w	141b4 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   124dc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   124e0:	2300      	movs	r3, #0
   124e2:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   124e6:	b009      	add	sp, #36	; 0x24
   124e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   124ec:	f005 bbbe 	b.w	17c6c <k_work_reschedule>
   124f0:	00020aa8 	.word	0x00020aa8
   124f4:	0001e59c 	.word	0x0001e59c

000124f8 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   124f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   124fa:	4b06      	ldr	r3, [pc, #24]	; (12514 <bt_smp_pkey_ready.part.0+0x1c>)
   124fc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12500:	9305      	str	r3, [sp, #20]
   12502:	2302      	movs	r3, #2
   12504:	4804      	ldr	r0, [pc, #16]	; (12518 <bt_smp_pkey_ready.part.0+0x20>)
   12506:	aa04      	add	r2, sp, #16
   12508:	9304      	str	r3, [sp, #16]
   1250a:	f009 fc7a 	bl	1be02 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1250e:	b007      	add	sp, #28
   12510:	f85d fb04 	ldr.w	pc, [sp], #4
   12514:	00020dea 	.word	0x00020dea
   12518:	0001e59c 	.word	0x0001e59c

0001251c <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1251c:	b580      	push	{r7, lr}
   1251e:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   12520:	b088      	sub	sp, #32
   12522:	466a      	mov	r2, sp
   12524:	4b07      	ldr	r3, [pc, #28]	; (12544 <bt_smp_accept.part.0+0x28>)
   12526:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1252a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1252e:	2303      	movs	r3, #3
   12530:	4805      	ldr	r0, [pc, #20]	; (12548 <bt_smp_accept.part.0+0x2c>)
   12532:	f842 3f10 	str.w	r3, [r2, #16]!
   12536:	f009 fc64 	bl	1be02 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1253a:	f06f 000b 	mvn.w	r0, #11
   1253e:	46bd      	mov	sp, r7
   12540:	bd80      	pop	{r7, pc}
   12542:	bf00      	nop
   12544:	00020e03 	.word	0x00020e03
   12548:	0001e59c 	.word	0x0001e59c

0001254c <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1254c:	4b05      	ldr	r3, [pc, #20]	; (12564 <bt_smp_accept+0x18>)
   1254e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   12552:	b10a      	cbz	r2, 12558 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   12554:	f7ff bfe2 	b.w	1251c <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   12558:	4803      	ldr	r0, [pc, #12]	; (12568 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   1255a:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   1255c:	6058      	str	r0, [r3, #4]
}
   1255e:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   12560:	600b      	str	r3, [r1, #0]
}
   12562:	4770      	bx	lr
   12564:	20009410 	.word	0x20009410
   12568:	0001ecfc 	.word	0x0001ecfc

0001256c <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1256c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   1256e:	4b07      	ldr	r3, [pc, #28]	; (1258c <smp_chan_get.part.0+0x20>)
   12570:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12574:	9305      	str	r3, [sp, #20]
   12576:	2302      	movs	r3, #2
   12578:	4805      	ldr	r0, [pc, #20]	; (12590 <smp_chan_get.part.0+0x24>)
   1257a:	aa04      	add	r2, sp, #16
   1257c:	9304      	str	r3, [sp, #16]
   1257e:	f009 fc40 	bl	1be02 <z_log_msg_static_create.constprop.0>
}
   12582:	2000      	movs	r0, #0
   12584:	b007      	add	sp, #28
   12586:	f85d fb04 	ldr.w	pc, [sp], #4
   1258a:	bf00      	nop
   1258c:	00020e28 	.word	0x00020e28
   12590:	0001e59c 	.word	0x0001e59c

00012594 <smp_init>:
{
   12594:	b538      	push	{r3, r4, r5, lr}
   12596:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   12598:	22ec      	movs	r2, #236	; 0xec
   1259a:	2100      	movs	r1, #0
   1259c:	f007 fef2 	bl	1a384 <memset>
	if (bt_rand(smp->prnd, 16)) {
   125a0:	2110      	movs	r1, #16
   125a2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   125a6:	f7fc fdd7 	bl	f158 <bt_rand>
   125aa:	4604      	mov	r4, r0
   125ac:	b948      	cbnz	r0, 125c2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   125ae:	2105      	movs	r1, #5
   125b0:	4628      	mov	r0, r5
   125b2:	f009 fc34 	bl	1be1e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   125b6:	f7fc fe83 	bl	f2c0 <bt_pub_key_get>
   125ba:	4b03      	ldr	r3, [pc, #12]	; (125c8 <smp_init+0x34>)
   125bc:	6018      	str	r0, [r3, #0]
}
   125be:	4620      	mov	r0, r4
   125c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   125c2:	2408      	movs	r4, #8
   125c4:	e7fb      	b.n	125be <smp_init+0x2a>
   125c6:	bf00      	nop
   125c8:	200099c0 	.word	0x200099c0

000125cc <smp_dhkey_generate>:
{
   125cc:	b530      	push	{r4, r5, lr}
   125ce:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   125d0:	1d05      	adds	r5, r0, #4
   125d2:	2108      	movs	r1, #8
   125d4:	4628      	mov	r0, r5
{
   125d6:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   125d8:	f009 fc21 	bl	1be1e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   125dc:	490b      	ldr	r1, [pc, #44]	; (1260c <smp_dhkey_generate+0x40>)
   125de:	f104 0057 	add.w	r0, r4, #87	; 0x57
   125e2:	f7fc fe7b 	bl	f2dc <bt_dh_key_gen>
	if (err) {
   125e6:	b170      	cbz	r0, 12606 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   125e8:	2108      	movs	r1, #8
   125ea:	4628      	mov	r0, r5
   125ec:	f009 fbfc 	bl	1bde8 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   125f0:	4b07      	ldr	r3, [pc, #28]	; (12610 <smp_dhkey_generate+0x44>)
   125f2:	4808      	ldr	r0, [pc, #32]	; (12614 <smp_dhkey_generate+0x48>)
   125f4:	9305      	str	r3, [sp, #20]
   125f6:	2302      	movs	r3, #2
   125f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   125fc:	aa04      	add	r2, sp, #16
   125fe:	9304      	str	r3, [sp, #16]
   12600:	f009 fbff 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   12604:	2008      	movs	r0, #8
}
   12606:	b007      	add	sp, #28
   12608:	bd30      	pop	{r4, r5, pc}
   1260a:	bf00      	nop
   1260c:	0001c1df 	.word	0x0001c1df
   12610:	00020e43 	.word	0x00020e43
   12614:	0001e59c 	.word	0x0001e59c

00012618 <smp_ident_info>:
{
   12618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1261a:	4604      	mov	r4, r0
   1261c:	460b      	mov	r3, r1
   1261e:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   12620:	210d      	movs	r1, #13
   12622:	3004      	adds	r0, #4
   12624:	f009 fbb9 	bl	1bd9a <atomic_test_bit>
   12628:	b338      	cbz	r0, 1267a <smp_ident_info+0x62>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1262a:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1262c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   12630:	2002      	movs	r0, #2
   12632:	f103 0588 	add.w	r5, r3, #136	; 0x88
   12636:	462a      	mov	r2, r5
   12638:	7a19      	ldrb	r1, [r3, #8]
   1263a:	f009 fe5a 	bl	1c2f2 <bt_keys_get_type>
		if (!keys) {
   1263e:	b9b8      	cbnz	r0, 12670 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   12640:	4628      	mov	r0, r5
   12642:	f7fa f91b 	bl	c87c <bt_addr_le_str>
   12646:	466c      	mov	r4, sp
   12648:	b088      	sub	sp, #32
   1264a:	466a      	mov	r2, sp
   1264c:	4b0e      	ldr	r3, [pc, #56]	; (12688 <smp_ident_info+0x70>)
   1264e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12652:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12656:	f44f 7300 	mov.w	r3, #512	; 0x200
   1265a:	8393      	strh	r3, [r2, #28]
   1265c:	4b0b      	ldr	r3, [pc, #44]	; (1268c <smp_ident_info+0x74>)
   1265e:	480c      	ldr	r0, [pc, #48]	; (12690 <smp_ident_info+0x78>)
   12660:	f842 3f10 	str.w	r3, [r2, #16]!
   12664:	f009 fbcd 	bl	1be02 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   12668:	2008      	movs	r0, #8
   1266a:	46a5      	mov	sp, r4
}
   1266c:	46bd      	mov	sp, r7
   1266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   12670:	2210      	movs	r2, #16
   12672:	4631      	mov	r1, r6
   12674:	302a      	adds	r0, #42	; 0x2a
   12676:	f007 fe7a 	bl	1a36e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1267a:	4620      	mov	r0, r4
   1267c:	2109      	movs	r1, #9
   1267e:	f009 fbce 	bl	1be1e <atomic_set_bit>
	return 0;
   12682:	2000      	movs	r0, #0
   12684:	e7f2      	b.n	1266c <smp_ident_info+0x54>
   12686:	bf00      	nop
   12688:	00020e5c 	.word	0x00020e5c
   1268c:	01000003 	.word	0x01000003
   12690:	0001e59c 	.word	0x0001e59c

00012694 <smp_encrypt_info>:
{
   12694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12696:	4604      	mov	r4, r0
   12698:	460b      	mov	r3, r1
   1269a:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1269c:	210d      	movs	r1, #13
   1269e:	3004      	adds	r0, #4
   126a0:	f009 fb7b 	bl	1bd9a <atomic_test_bit>
   126a4:	b338      	cbz	r0, 126f6 <smp_encrypt_info+0x62>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   126a6:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   126a8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   126ac:	2004      	movs	r0, #4
   126ae:	f103 0588 	add.w	r5, r3, #136	; 0x88
   126b2:	462a      	mov	r2, r5
   126b4:	7a19      	ldrb	r1, [r3, #8]
   126b6:	f009 fe1c 	bl	1c2f2 <bt_keys_get_type>
		if (!keys) {
   126ba:	b9b8      	cbnz	r0, 126ec <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   126bc:	4628      	mov	r0, r5
   126be:	f7fa f8dd 	bl	c87c <bt_addr_le_str>
   126c2:	466c      	mov	r4, sp
   126c4:	b088      	sub	sp, #32
   126c6:	466a      	mov	r2, sp
   126c8:	4b0e      	ldr	r3, [pc, #56]	; (12704 <smp_encrypt_info+0x70>)
   126ca:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   126ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   126d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   126d6:	8393      	strh	r3, [r2, #28]
   126d8:	4b0b      	ldr	r3, [pc, #44]	; (12708 <smp_encrypt_info+0x74>)
   126da:	480c      	ldr	r0, [pc, #48]	; (1270c <smp_encrypt_info+0x78>)
   126dc:	f842 3f10 	str.w	r3, [r2, #16]!
   126e0:	f009 fb8f 	bl	1be02 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   126e4:	2008      	movs	r0, #8
   126e6:	46a5      	mov	sp, r4
}
   126e8:	46bd      	mov	sp, r7
   126ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   126ec:	2210      	movs	r2, #16
   126ee:	4631      	mov	r1, r6
   126f0:	301a      	adds	r0, #26
   126f2:	f007 fe3c 	bl	1a36e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   126f6:	4620      	mov	r0, r4
   126f8:	2107      	movs	r1, #7
   126fa:	f009 fb90 	bl	1be1e <atomic_set_bit>
	return 0;
   126fe:	2000      	movs	r0, #0
   12700:	e7f2      	b.n	126e8 <smp_encrypt_info+0x54>
   12702:	bf00      	nop
   12704:	00020e5c 	.word	0x00020e5c
   12708:	01000003 	.word	0x01000003
   1270c:	0001e59c 	.word	0x0001e59c

00012710 <smp_send_pairing_confirm>:
{
   12710:	b5f0      	push	{r4, r5, r6, r7, lr}
   12712:	b083      	sub	sp, #12
	switch (smp->method) {
   12714:	7a04      	ldrb	r4, [r0, #8]
{
   12716:	4605      	mov	r5, r0
	switch (smp->method) {
   12718:	2c02      	cmp	r4, #2
{
   1271a:	af02      	add	r7, sp, #8
	switch (smp->method) {
   1271c:	d823      	bhi.n	12766 <smp_send_pairing_confirm+0x56>
   1271e:	b144      	cbz	r4, 12732 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   12720:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   12724:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   12728:	40dc      	lsrs	r4, r3
   1272a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1272e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   12732:	2103      	movs	r1, #3
   12734:	4628      	mov	r0, r5
   12736:	f009 fb82 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!buf) {
   1273a:	4606      	mov	r6, r0
   1273c:	b320      	cbz	r0, 12788 <smp_send_pairing_confirm+0x78>
   1273e:	2110      	movs	r1, #16
   12740:	300c      	adds	r0, #12
   12742:	f009 ff00 	bl	1c546 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   12746:	9000      	str	r0, [sp, #0]
   12748:	4818      	ldr	r0, [pc, #96]	; (127ac <smp_send_pairing_confirm+0x9c>)
   1274a:	4623      	mov	r3, r4
   1274c:	6800      	ldr	r0, [r0, #0]
   1274e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   12752:	f105 0157 	add.w	r1, r5, #87	; 0x57
   12756:	f009 fe24 	bl	1c3a2 <bt_crypto_f4>
   1275a:	4604      	mov	r4, r0
   1275c:	b1d0      	cbz	r0, 12794 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1275e:	4630      	mov	r0, r6
   12760:	f001 fd28 	bl	141b4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   12764:	e010      	b.n	12788 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   12766:	2c03      	cmp	r4, #3
   12768:	d012      	beq.n	12790 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1276a:	466d      	mov	r5, sp
   1276c:	b088      	sub	sp, #32
   1276e:	aa02      	add	r2, sp, #8
   12770:	4b0f      	ldr	r3, [pc, #60]	; (127b0 <smp_send_pairing_confirm+0xa0>)
   12772:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   12776:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1277a:	2303      	movs	r3, #3
   1277c:	480d      	ldr	r0, [pc, #52]	; (127b4 <smp_send_pairing_confirm+0xa4>)
   1277e:	f842 3f10 	str.w	r3, [r2, #16]!
   12782:	f009 fb3e 	bl	1be02 <z_log_msg_static_create.constprop.0>
   12786:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   12788:	2008      	movs	r0, #8
}
   1278a:	3704      	adds	r7, #4
   1278c:	46bd      	mov	sp, r7
   1278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   12790:	2400      	movs	r4, #0
   12792:	e7ce      	b.n	12732 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   12794:	4602      	mov	r2, r0
   12796:	4631      	mov	r1, r6
   12798:	4628      	mov	r0, r5
   1279a:	f7ff fe7f 	bl	1249c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1279e:	1d28      	adds	r0, r5, #4
   127a0:	4621      	mov	r1, r4
   127a2:	f009 fb21 	bl	1bde8 <atomic_clear_bit>
	return 0;
   127a6:	4620      	mov	r0, r4
   127a8:	e7ef      	b.n	1278a <smp_send_pairing_confirm+0x7a>
   127aa:	bf00      	nop
   127ac:	200099c0 	.word	0x200099c0
   127b0:	00020e76 	.word	0x00020e76
   127b4:	0001e59c 	.word	0x0001e59c

000127b8 <smp_public_key_periph>:
{
   127b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127bc:	b086      	sub	sp, #24
   127be:	4604      	mov	r4, r0
   127c0:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   127c2:	f7ff fe11 	bl	123e8 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   127c6:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   127c8:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   127ca:	210e      	movs	r1, #14
   127cc:	4630      	mov	r0, r6
   127ce:	f009 fae4 	bl	1bd9a <atomic_test_bit>
   127d2:	b9a0      	cbnz	r0, 127fe <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   127d4:	4b52      	ldr	r3, [pc, #328]	; (12920 <smp_public_key_periph+0x168>)
   127d6:	2220      	movs	r2, #32
   127d8:	6819      	ldr	r1, [r3, #0]
   127da:	f104 0057 	add.w	r0, r4, #87	; 0x57
   127de:	f007 fdb6 	bl	1a34e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   127e2:	b960      	cbnz	r0, 127fe <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   127e4:	4b4f      	ldr	r3, [pc, #316]	; (12924 <smp_public_key_periph+0x16c>)
   127e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   127ea:	617b      	str	r3, [r7, #20]
   127ec:	2302      	movs	r3, #2
   127ee:	484e      	ldr	r0, [pc, #312]	; (12928 <smp_public_key_periph+0x170>)
   127f0:	f107 0210 	add.w	r2, r7, #16
   127f4:	613b      	str	r3, [r7, #16]
   127f6:	f009 fb04 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   127fa:	2008      	movs	r0, #8
   127fc:	e02f      	b.n	1285e <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   127fe:	210c      	movs	r1, #12
   12800:	4620      	mov	r0, r4
   12802:	f009 fb1c 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   12806:	4605      	mov	r5, r0
   12808:	2800      	cmp	r0, #0
   1280a:	d0f6      	beq.n	127fa <smp_public_key_periph+0x42>
   1280c:	2140      	movs	r1, #64	; 0x40
   1280e:	300c      	adds	r0, #12
   12810:	f009 fe99 	bl	1c546 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   12814:	f8df a108 	ldr.w	sl, [pc, #264]	; 12920 <smp_public_key_periph+0x168>
   12818:	2220      	movs	r2, #32
   1281a:	f8da 1000 	ldr.w	r1, [sl]
   1281e:	4681      	mov	r9, r0
   12820:	f007 fda5 	bl	1a36e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   12824:	2220      	movs	r2, #32
   12826:	f8da 1000 	ldr.w	r1, [sl]
   1282a:	eb09 0002 	add.w	r0, r9, r2
   1282e:	4411      	add	r1, r2
   12830:	f007 fd9d 	bl	1a36e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   12834:	2200      	movs	r2, #0
   12836:	4629      	mov	r1, r5
   12838:	4620      	mov	r0, r4
   1283a:	f7ff fe2f 	bl	1249c <smp_send.constprop.0>
	switch (smp->method) {
   1283e:	7a23      	ldrb	r3, [r4, #8]
   12840:	2b05      	cmp	r3, #5
   12842:	d85b      	bhi.n	128fc <smp_public_key_periph+0x144>
   12844:	e8df f003 	tbb	[pc, r3]
   12848:	030f3b03 	.word	0x030f3b03
   1284c:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1284e:	2104      	movs	r1, #4
   12850:	4620      	mov	r0, r4
   12852:	f009 fae4 	bl	1be1e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   12856:	f7ff ff5b 	bl	12710 <smp_send_pairing_confirm>
		if (err) {
   1285a:	2800      	cmp	r0, #0
   1285c:	d03f      	beq.n	128de <smp_public_key_periph+0x126>
}
   1285e:	3718      	adds	r7, #24
   12860:	46bd      	mov	sp, r7
   12862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12866:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   12868:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1286c:	f7ff fdbc 	bl	123e8 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   12870:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12872:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   12874:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   12878:	f7fc fc6e 	bl	f158 <bt_rand>
   1287c:	2800      	cmp	r0, #0
   1287e:	d1bc      	bne.n	127fa <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   12880:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   12884:	4a29      	ldr	r2, [pc, #164]	; (1292c <smp_public_key_periph+0x174>)
	smp->passkey_round = 0U;
   12886:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1288a:	fbb3 f1f2 	udiv	r1, r3, r2
   1288e:	fb02 3311 	mls	r3, r2, r1, r3
   12892:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   12896:	b155      	cbz	r5, 128ae <smp_public_key_periph+0xf6>
   12898:	682b      	ldr	r3, [r5, #0]
   1289a:	b143      	cbz	r3, 128ae <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1289c:	210b      	movs	r1, #11
   1289e:	4630      	mov	r0, r6
   128a0:	f009 fabd 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   128a4:	4640      	mov	r0, r8
   128a6:	682b      	ldr	r3, [r5, #0]
   128a8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   128ac:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   128ae:	2103      	movs	r1, #3
   128b0:	4620      	mov	r0, r4
   128b2:	f009 fab4 	bl	1be1e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   128b6:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   128b8:	f009 fab1 	bl	1be1e <atomic_set_bit>
		break;
   128bc:	e00f      	b.n	128de <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   128be:	4620      	mov	r0, r4
   128c0:	2103      	movs	r1, #3
   128c2:	f009 faac 	bl	1be1e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   128c6:	210e      	movs	r1, #14
   128c8:	f009 faa9 	bl	1be1e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   128cc:	4630      	mov	r0, r6
   128ce:	210a      	movs	r1, #10
   128d0:	f009 faa5 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   128d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   128d8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   128dc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   128de:	4630      	mov	r0, r6
   128e0:	2107      	movs	r1, #7
   128e2:	f009 fa9c 	bl	1be1e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   128e6:	2008      	movs	r0, #8
   128e8:	f7ff fd70 	bl	123cc <smp_find>
   128ec:	b9b0      	cbnz	r0, 1291c <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   128ee:	4620      	mov	r0, r4
   128f0:	f7ff fe6c 	bl	125cc <smp_dhkey_generate>
   128f4:	e7b3      	b.n	1285e <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   128f6:	2104      	movs	r1, #4
   128f8:	4620      	mov	r0, r4
   128fa:	e7dd      	b.n	128b8 <smp_public_key_periph+0x100>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   128fc:	466c      	mov	r4, sp
   128fe:	b088      	sub	sp, #32
   12900:	466a      	mov	r2, sp
   12902:	490b      	ldr	r1, [pc, #44]	; (12930 <smp_public_key_periph+0x178>)
   12904:	4808      	ldr	r0, [pc, #32]	; (12928 <smp_public_key_periph+0x170>)
	switch (smp->method) {
   12906:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1290a:	2303      	movs	r3, #3
   1290c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12910:	f842 3f10 	str.w	r3, [r2, #16]!
   12914:	f009 fa75 	bl	1be02 <z_log_msg_static_create.constprop.0>
   12918:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1291a:	e76e      	b.n	127fa <smp_public_key_periph+0x42>
	return 0;
   1291c:	2000      	movs	r0, #0
   1291e:	e79e      	b.n	1285e <smp_public_key_periph+0xa6>
   12920:	200099c0 	.word	0x200099c0
   12924:	00020e92 	.word	0x00020e92
   12928:	0001e59c 	.word	0x0001e59c
   1292c:	000f4240 	.word	0x000f4240
   12930:	00020e76 	.word	0x00020e76

00012934 <smp_public_key>:
{
   12934:	b570      	push	{r4, r5, r6, lr}
   12936:	460d      	mov	r5, r1
   12938:	4604      	mov	r4, r0
   1293a:	b086      	sub	sp, #24
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1293c:	f7ff fd54 	bl	123e8 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   12940:	68ee      	ldr	r6, [r5, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   12942:	f104 0557 	add.w	r5, r4, #87	; 0x57
   12946:	2220      	movs	r2, #32
   12948:	4631      	mov	r1, r6
   1294a:	4628      	mov	r0, r5
   1294c:	f007 fd0f 	bl	1a36e <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   12950:	2220      	movs	r2, #32
   12952:	f104 0077 	add.w	r0, r4, #119	; 0x77
   12956:	18b1      	adds	r1, r6, r2
   12958:	f007 fd09 	bl	1a36e <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1295c:	4628      	mov	r0, r5
   1295e:	f7fc fc19 	bl	f194 <bt_pub_key_is_debug>
   12962:	b940      	cbnz	r0, 12976 <smp_public_key+0x42>
	if (!sc_public_key) {
   12964:	4b1b      	ldr	r3, [pc, #108]	; (129d4 <smp_public_key+0xa0>)
   12966:	681d      	ldr	r5, [r3, #0]
   12968:	bb75      	cbnz	r5, 129c8 <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1296a:	1d20      	adds	r0, r4, #4
   1296c:	2106      	movs	r1, #6
   1296e:	f009 fa56 	bl	1be1e <atomic_set_bit>
	return 0;
   12972:	4628      	mov	r0, r5
		return 0;
   12974:	e026      	b.n	129c4 <smp_public_key+0x90>
		LOG_INF("Remote is using Debug Public key");
   12976:	4b18      	ldr	r3, [pc, #96]	; (129d8 <smp_public_key+0xa4>)
   12978:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1297c:	9305      	str	r3, [sp, #20]
   1297e:	2302      	movs	r3, #2
   12980:	4816      	ldr	r0, [pc, #88]	; (129dc <smp_public_key+0xa8>)
   12982:	aa04      	add	r2, sp, #16
   12984:	9304      	str	r3, [sp, #16]
   12986:	f009 fa3c 	bl	1be02 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1298a:	210e      	movs	r1, #14
   1298c:	1d20      	adds	r0, r4, #4
   1298e:	f009 fa46 	bl	1be1e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   12992:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   12996:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1299a:	b933      	cbnz	r3, 129aa <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1299c:	7a28      	ldrb	r0, [r5, #8]
   1299e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   129a2:	f001 f9fd 	bl	13da0 <bt_keys_get_addr>
   129a6:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   129aa:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   129ae:	2b00      	cmp	r3, #0
   129b0:	d0d8      	beq.n	12964 <smp_public_key+0x30>
   129b2:	89da      	ldrh	r2, [r3, #14]
   129b4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   129b8:	2a00      	cmp	r2, #0
   129ba:	d0d3      	beq.n	12964 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   129bc:	7b5b      	ldrb	r3, [r3, #13]
   129be:	079b      	lsls	r3, r3, #30
   129c0:	d4d0      	bmi.n	12964 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   129c2:	2003      	movs	r0, #3
}
   129c4:	b006      	add	sp, #24
   129c6:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   129c8:	4620      	mov	r0, r4
}
   129ca:	b006      	add	sp, #24
   129cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   129d0:	f7ff bef2 	b.w	127b8 <smp_public_key_periph>
   129d4:	200099c0 	.word	0x200099c0
   129d8:	00020ead 	.word	0x00020ead
   129dc:	0001e59c 	.word	0x0001e59c

000129e0 <smp_pairing_req>:
{
   129e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   129e4:	b087      	sub	sp, #28
   129e6:	460d      	mov	r5, r1
   129e8:	af00      	add	r7, sp, #0
   129ea:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   129ec:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   129f0:	f7ff fcfa 	bl	123e8 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   129f4:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   129f8:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   129fa:	f899 3003 	ldrb.w	r3, [r9, #3]
   129fe:	3b07      	subs	r3, #7
   12a00:	2b09      	cmp	r3, #9
   12a02:	d904      	bls.n	12a0e <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   12a04:	2006      	movs	r0, #6
}
   12a06:	371c      	adds	r7, #28
   12a08:	46bd      	mov	sp, r7
   12a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   12a0e:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   12a12:	b15b      	cbz	r3, 12a2c <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   12a14:	1d25      	adds	r5, r4, #4
   12a16:	210f      	movs	r1, #15
   12a18:	4628      	mov	r0, r5
   12a1a:	f009 f9be 	bl	1bd9a <atomic_test_bit>
   12a1e:	b980      	cbnz	r0, 12a42 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   12a20:	4620      	mov	r0, r4
   12a22:	f7ff fdb7 	bl	12594 <smp_init>
		if (ret) {
   12a26:	b160      	cbz	r0, 12a42 <smp_pairing_req+0x62>
			return ret;
   12a28:	b2c0      	uxtb	r0, r0
   12a2a:	e7ec      	b.n	12a06 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   12a2c:	7a30      	ldrb	r0, [r6, #8]
   12a2e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   12a32:	f001 f9b5 	bl	13da0 <bt_keys_get_addr>
   12a36:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   12a3a:	2800      	cmp	r0, #0
   12a3c:	d1ea      	bne.n	12a14 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   12a3e:	2008      	movs	r0, #8
   12a40:	e7e1      	b.n	12a06 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   12a42:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   12a44:	2206      	movs	r2, #6
   12a46:	4649      	mov	r1, r9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   12a48:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   12a4a:	f104 000a 	add.w	r0, r4, #10
   12a4e:	f007 fc8e 	bl	1a36e <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   12a52:	2302      	movs	r3, #2
   12a54:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   12a56:	f899 1002 	ldrb.w	r1, [r9, #2]
   12a5a:	4620      	mov	r0, r4
   12a5c:	f7ff fd00 	bl	12460 <get_auth>
   12a60:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   12a62:	4620      	mov	r0, r4
   12a64:	f7ff fcd6 	bl	12414 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   12a68:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa(smp);
   12a6a:	7460      	strb	r0, [r4, #17]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   12a6c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   12a6e:	f899 3004 	ldrb.w	r3, [r9, #4]
   12a72:	f003 0303 	and.w	r3, r3, #3
   12a76:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   12a78:	f899 3005 	ldrb.w	r3, [r9, #5]
   12a7c:	f003 0301 	and.w	r3, r3, #1
   12a80:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   12a82:	7ce3      	ldrb	r3, [r4, #19]
   12a84:	071b      	lsls	r3, r3, #28
   12a86:	d50d      	bpl.n	12aa4 <smp_pairing_req+0xc4>
   12a88:	f899 3002 	ldrb.w	r3, [r9, #2]
   12a8c:	0718      	lsls	r0, r3, #28
   12a8e:	d509      	bpl.n	12aa4 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   12a90:	2105      	movs	r1, #5
   12a92:	4628      	mov	r0, r5
   12a94:	f009 f9c3 	bl	1be1e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   12a98:	7d63      	ldrb	r3, [r4, #21]
   12a9a:	f003 0302 	and.w	r3, r3, #2
   12a9e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   12aa0:	2300      	movs	r3, #0
   12aa2:	75a3      	strb	r3, [r4, #22]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12aa4:	2105      	movs	r1, #5
   12aa6:	4628      	mov	r0, r5
   12aa8:	f009 f977 	bl	1bd9a <atomic_test_bit>
   12aac:	2800      	cmp	r0, #0
   12aae:	d051      	beq.n	12b54 <smp_pairing_req+0x174>
		rsp->oob_flag = sc_oobd_present ? BT_SMP_OOB_PRESENT :
   12ab0:	4baa      	ldr	r3, [pc, #680]	; (12d5c <smp_pairing_req+0x37c>)
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   12ab2:	781b      	ldrb	r3, [r3, #0]
   12ab4:	74a3      	strb	r3, [r4, #18]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   12ab6:	7ce3      	ldrb	r3, [r4, #19]
   12ab8:	0699      	lsls	r1, r3, #26
   12aba:	d507      	bpl.n	12acc <smp_pairing_req+0xec>
   12abc:	f899 3002 	ldrb.w	r3, [r9, #2]
   12ac0:	069a      	lsls	r2, r3, #26
   12ac2:	d503      	bpl.n	12acc <smp_pairing_req+0xec>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   12ac4:	2114      	movs	r1, #20
   12ac6:	4628      	mov	r0, r5
   12ac8:	f009 f9a9 	bl	1be1e <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   12acc:	7ce3      	ldrb	r3, [r4, #19]
   12ace:	07db      	lsls	r3, r3, #31
   12ad0:	d542      	bpl.n	12b58 <smp_pairing_req+0x178>
   12ad2:	f899 3002 	ldrb.w	r3, [r9, #2]
   12ad6:	07d8      	lsls	r0, r3, #31
   12ad8:	d53e      	bpl.n	12b58 <smp_pairing_req+0x178>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   12ada:	210d      	movs	r1, #13
   12adc:	4628      	mov	r0, r5
   12ade:	f009 f99e 	bl	1be1e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   12ae2:	7da3      	ldrb	r3, [r4, #22]
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   12ae4:	2103      	movs	r1, #3
	smp->local_dist = rsp->resp_key_dist;
   12ae6:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   12aea:	7d63      	ldrb	r3, [r4, #21]
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   12aec:	4628      	mov	r0, r5
	smp->remote_dist = rsp->init_key_dist;
   12aee:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   12af2:	f009 f994 	bl	1be1e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12af6:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   12af8:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12afc:	f009 f94d 	bl	1bd9a <atomic_test_bit>
   12b00:	bb70      	cbnz	r0, 12b60 <smp_pairing_req+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   12b02:	f1b9 0f04 	cmp.w	r9, #4
   12b06:	d84b      	bhi.n	12ba0 <smp_pairing_req+0x1c0>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   12b08:	7ae3      	ldrb	r3, [r4, #11]
   12b0a:	7ca2      	ldrb	r2, [r4, #18]
   12b0c:	4013      	ands	r3, r2
   12b0e:	07d9      	lsls	r1, r3, #31
   12b10:	d444      	bmi.n	12b9c <smp_pairing_req+0x1bc>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   12b12:	7b21      	ldrb	r1, [r4, #12]
   12b14:	7ce3      	ldrb	r3, [r4, #19]
   12b16:	4319      	orrs	r1, r3
   12b18:	f011 0104 	ands.w	r1, r1, #4
   12b1c:	d011      	beq.n	12b42 <smp_pairing_req+0x162>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   12b1e:	4620      	mov	r0, r4
   12b20:	f7ff fc78 	bl	12414 <get_io_capa>
   12b24:	4b8e      	ldr	r3, [pc, #568]	; (12d60 <smp_pairing_req+0x380>)
   12b26:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   12b2a:	4499      	add	r9, r3
   12b2c:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   12b30:	2904      	cmp	r1, #4
   12b32:	d106      	bne.n	12b42 <smp_pairing_req+0x162>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   12b34:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   12b38:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	bf14      	ite	ne
   12b3e:	2101      	movne	r1, #1
   12b40:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   12b42:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   12b44:	4620      	mov	r0, r4
   12b46:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   12b4a:	f009 f92c 	bl	1bda6 <update_keys_check>
   12b4e:	bb48      	cbnz	r0, 12ba4 <smp_pairing_req+0x1c4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   12b50:	2003      	movs	r0, #3
   12b52:	e758      	b.n	12a06 <smp_pairing_req+0x26>
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   12b54:	4b83      	ldr	r3, [pc, #524]	; (12d64 <smp_pairing_req+0x384>)
   12b56:	e7ac      	b.n	12ab2 <smp_pairing_req+0xd2>
		rsp->init_key_dist = 0;
   12b58:	2300      	movs	r3, #0
   12b5a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist = 0;
   12b5c:	75a3      	strb	r3, [r4, #22]
   12b5e:	e7c0      	b.n	12ae2 <smp_pairing_req+0x102>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   12b60:	7b23      	ldrb	r3, [r4, #12]
   12b62:	7ce0      	ldrb	r0, [r4, #19]
   12b64:	ea03 0200 	and.w	r2, r3, r0
   12b68:	0712      	lsls	r2, r2, #28
   12b6a:	d506      	bpl.n	12b7a <smp_pairing_req+0x19a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   12b6c:	7ae2      	ldrb	r2, [r4, #11]
   12b6e:	f894 c012 	ldrb.w	ip, [r4, #18]
   12b72:	ea42 020c 	orr.w	r2, r2, ip
   12b76:	07d2      	lsls	r2, r2, #31
   12b78:	d4e3      	bmi.n	12b42 <smp_pairing_req+0x162>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   12b7a:	f1b9 0f04 	cmp.w	r9, #4
   12b7e:	d80f      	bhi.n	12ba0 <smp_pairing_req+0x1c0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   12b80:	ea43 0100 	orr.w	r1, r3, r0
   12b84:	f011 0104 	ands.w	r1, r1, #4
   12b88:	d0db      	beq.n	12b42 <smp_pairing_req+0x162>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   12b8a:	4620      	mov	r0, r4
   12b8c:	f7ff fc42 	bl	12414 <get_io_capa>
   12b90:	4b75      	ldr	r3, [pc, #468]	; (12d68 <smp_pairing_req+0x388>)
   12b92:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   12b96:	444b      	add	r3, r9
   12b98:	5c19      	ldrb	r1, [r3, r0]
   12b9a:	e7d2      	b.n	12b42 <smp_pairing_req+0x162>
		return LEGACY_OOB;
   12b9c:	2106      	movs	r1, #6
   12b9e:	e7d0      	b.n	12b42 <smp_pairing_req+0x162>
		return JUST_WORKS;
   12ba0:	2100      	movs	r1, #0
   12ba2:	e7ce      	b.n	12b42 <smp_pairing_req+0x162>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   12ba4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   12ba8:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   12baa:	2b03      	cmp	r3, #3
   12bac:	d03e      	beq.n	12c2c <smp_pairing_req+0x24c>
   12bae:	d82c      	bhi.n	12c0a <smp_pairing_req+0x22a>
   12bb0:	3b01      	subs	r3, #1
   12bb2:	2b01      	cmp	r3, #1
   12bb4:	f63f af43 	bhi.w	12a3e <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12bb8:	2105      	movs	r1, #5
   12bba:	4628      	mov	r0, r5
   12bbc:	f009 f8ed 	bl	1bd9a <atomic_test_bit>
   12bc0:	2800      	cmp	r0, #0
   12bc2:	f040 80b5 	bne.w	12d30 <smp_pairing_req+0x350>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12bc6:	4620      	mov	r0, r4
   12bc8:	f7ff fc0e 	bl	123e8 <latch_auth_cb>
   12bcc:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12bce:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   12bd0:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12bd4:	f7ff fc08 	bl	123e8 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   12bd8:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12bdc:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   12bde:	f899 0008 	ldrb.w	r0, [r9, #8]
   12be2:	f001 f979 	bl	13ed8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   12be6:	7a23      	ldrb	r3, [r4, #8]
   12be8:	b320      	cbz	r0, 12c34 <smp_pairing_req+0x254>
   12bea:	7b42      	ldrb	r2, [r0, #13]
   12bec:	07d2      	lsls	r2, r2, #31
   12bee:	d521      	bpl.n	12c34 <smp_pairing_req+0x254>
   12bf0:	bb03      	cbnz	r3, 12c34 <smp_pairing_req+0x254>
		LOG_ERR("JustWorks failed, authenticated keys present");
   12bf2:	4b5e      	ldr	r3, [pc, #376]	; (12d6c <smp_pairing_req+0x38c>)
   12bf4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12bf8:	617b      	str	r3, [r7, #20]
   12bfa:	2302      	movs	r3, #2
   12bfc:	485c      	ldr	r0, [pc, #368]	; (12d70 <smp_pairing_req+0x390>)
   12bfe:	613b      	str	r3, [r7, #16]
   12c00:	f107 0210 	add.w	r2, r7, #16
   12c04:	f009 f8fd 	bl	1be02 <z_log_msg_static_create.constprop.0>
	if (ret) {
   12c08:	e719      	b.n	12a3e <smp_pairing_req+0x5e>
	switch (sec) {
   12c0a:	2b04      	cmp	r3, #4
   12c0c:	f47f af17 	bne.w	12a3e <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   12c10:	7d23      	ldrb	r3, [r4, #20]
   12c12:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   12c14:	4293      	cmp	r3, r2
   12c16:	bf28      	it	cs
   12c18:	4613      	movcs	r3, r2
   12c1a:	2b10      	cmp	r3, #16
   12c1c:	f47f aef2 	bne.w	12a04 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12c20:	2105      	movs	r1, #5
   12c22:	4628      	mov	r0, r5
   12c24:	f009 f8b9 	bl	1bd9a <atomic_test_bit>
   12c28:	2800      	cmp	r0, #0
   12c2a:	d091      	beq.n	12b50 <smp_pairing_req+0x170>
		if (smp->method == JUST_WORKS) {
   12c2c:	7a23      	ldrb	r3, [r4, #8]
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d1c2      	bne.n	12bb8 <smp_pairing_req+0x1d8>
   12c32:	e78d      	b.n	12b50 <smp_pairing_req+0x170>
	switch (smp->method) {
   12c34:	2b06      	cmp	r3, #6
   12c36:	d85f      	bhi.n	12cf8 <smp_pairing_req+0x318>
   12c38:	e8df f003 	tbb	[pc, r3]
   12c3c:	5e2f5617 	.word	0x5e2f5617
   12c40:	5e5e      	.short	0x5e5e
   12c42:	04          	.byte	0x04
   12c43:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   12c44:	2e00      	cmp	r6, #0
   12c46:	d067      	beq.n	12d18 <smp_pairing_req+0x338>
   12c48:	68f3      	ldr	r3, [r6, #12]
   12c4a:	2b00      	cmp	r3, #0
   12c4c:	d064      	beq.n	12d18 <smp_pairing_req+0x338>
			struct bt_conn_oob_info info = {
   12c4e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12c50:	210a      	movs	r1, #10
   12c52:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   12c54:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12c56:	f009 f8e2 	bl	1be1e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   12c5a:	4639      	mov	r1, r7
   12c5c:	68f3      	ldr	r3, [r6, #12]
   12c5e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   12c62:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12c64:	7a23      	ldrb	r3, [r4, #8]
   12c66:	2b00      	cmp	r3, #0
   12c68:	d158      	bne.n	12d1c <smp_pairing_req+0x33c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12c6a:	210f      	movs	r1, #15
   12c6c:	4628      	mov	r0, r5
   12c6e:	f009 f894 	bl	1bd9a <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12c72:	2800      	cmp	r0, #0
   12c74:	d152      	bne.n	12d1c <smp_pairing_req+0x33c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12c76:	f1b8 0f00 	cmp.w	r8, #0
   12c7a:	d04f      	beq.n	12d1c <smp_pairing_req+0x33c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   12c7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d04b      	beq.n	12d1c <smp_pairing_req+0x33c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12c84:	4628      	mov	r0, r5
   12c86:	210a      	movs	r1, #10
   12c88:	f009 f8c9 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   12c8c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   12c90:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   12c94:	4798      	blx	r3
		return 0;
   12c96:	2000      	movs	r0, #0
   12c98:	e6b5      	b.n	12a06 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   12c9a:	2104      	movs	r1, #4
   12c9c:	4638      	mov	r0, r7
   12c9e:	f7fc fa5b 	bl	f158 <bt_rand>
   12ca2:	2800      	cmp	r0, #0
   12ca4:	f47f aecb 	bne.w	12a3e <smp_pairing_req+0x5e>
			passkey %= 1000000;
   12ca8:	683b      	ldr	r3, [r7, #0]
   12caa:	4a32      	ldr	r2, [pc, #200]	; (12d74 <smp_pairing_req+0x394>)
   12cac:	fbb3 f1f2 	udiv	r1, r3, r2
   12cb0:	fb02 3311 	mls	r3, r2, r1, r3
   12cb4:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   12cb6:	b14e      	cbz	r6, 12ccc <smp_pairing_req+0x2ec>
   12cb8:	6833      	ldr	r3, [r6, #0]
   12cba:	b13b      	cbz	r3, 12ccc <smp_pairing_req+0x2ec>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   12cbc:	210b      	movs	r1, #11
   12cbe:	4628      	mov	r0, r5
   12cc0:	f009 f8ad 	bl	1be1e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   12cc4:	4648      	mov	r0, r9
   12cc6:	6833      	ldr	r3, [r6, #0]
   12cc8:	6839      	ldr	r1, [r7, #0]
   12cca:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   12ccc:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   12cce:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   12cd2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   12cd6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   12cd8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   12cdc:	0a1b      	lsrs	r3, r3, #8
   12cde:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   12ce2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   12ce6:	e7bd      	b.n	12c64 <smp_pairing_req+0x284>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12ce8:	4628      	mov	r0, r5
   12cea:	210a      	movs	r1, #10
   12cec:	f009 f897 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   12cf0:	4648      	mov	r0, r9
   12cf2:	6873      	ldr	r3, [r6, #4]
   12cf4:	4798      	blx	r3
	if (ret) {
   12cf6:	e7b5      	b.n	12c64 <smp_pairing_req+0x284>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12cf8:	466c      	mov	r4, sp
   12cfa:	b088      	sub	sp, #32
   12cfc:	466a      	mov	r2, sp
   12cfe:	491e      	ldr	r1, [pc, #120]	; (12d78 <smp_pairing_req+0x398>)
   12d00:	481b      	ldr	r0, [pc, #108]	; (12d70 <smp_pairing_req+0x390>)
	switch (smp->method) {
   12d02:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12d06:	2303      	movs	r3, #3
   12d08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d0c:	f842 3f10 	str.w	r3, [r2, #16]!
   12d10:	f009 f877 	bl	1be02 <z_log_msg_static_create.constprop.0>
   12d14:	46a5      	mov	sp, r4
	if (ret) {
   12d16:	e692      	b.n	12a3e <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   12d18:	2002      	movs	r0, #2
   12d1a:	e674      	b.n	12a06 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   12d1c:	2103      	movs	r1, #3
   12d1e:	4620      	mov	r0, r4
   12d20:	f009 f87d 	bl	1be1e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   12d24:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   12d26:	f009 f87a 	bl	1be1e <atomic_set_bit>
	return send_pairing_rsp(smp);
   12d2a:	f009 f8a7 	bl	1be7c <send_pairing_rsp>
   12d2e:	e66a      	b.n	12a06 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   12d30:	7a23      	ldrb	r3, [r4, #8]
   12d32:	bb1b      	cbnz	r3, 12d7c <smp_pairing_req+0x39c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12d34:	210f      	movs	r1, #15
   12d36:	4628      	mov	r0, r5
   12d38:	f009 f82f 	bl	1bd9a <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12d3c:	b9f0      	cbnz	r0, 12d7c <smp_pairing_req+0x39c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12d3e:	f1b8 0f00 	cmp.w	r8, #0
   12d42:	d01b      	beq.n	12d7c <smp_pairing_req+0x39c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   12d44:	f8d8 3014 	ldr.w	r3, [r8, #20]
   12d48:	b1c3      	cbz	r3, 12d7c <smp_pairing_req+0x39c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12d4a:	4628      	mov	r0, r5
   12d4c:	210a      	movs	r1, #10
   12d4e:	f009 f866 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   12d52:	4630      	mov	r0, r6
   12d54:	f8d8 3014 	ldr.w	r3, [r8, #20]
   12d58:	e79c      	b.n	12c94 <smp_pairing_req+0x2b4>
   12d5a:	bf00      	nop
   12d5c:	20009d40 	.word	0x20009d40
   12d60:	000211c4 	.word	0x000211c4
   12d64:	20009d3f 	.word	0x20009d3f
   12d68:	000211ab 	.word	0x000211ab
   12d6c:	00020ece 	.word	0x00020ece
   12d70:	0001e59c 	.word	0x0001e59c
   12d74:	000f4240 	.word	0x000f4240
   12d78:	00020e76 	.word	0x00020e76
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   12d7c:	210c      	movs	r1, #12
   12d7e:	4620      	mov	r0, r4
   12d80:	e7d1      	b.n	12d26 <smp_pairing_req+0x346>
   12d82:	bf00      	nop

00012d84 <compute_and_check_and_send_periph_dhcheck>:
{
   12d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d88:	4604      	mov	r4, r0
   12d8a:	b097      	sub	sp, #92	; 0x5c
   12d8c:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   12d8e:	2210      	movs	r2, #16
   12d90:	2100      	movs	r1, #0
   12d92:	f107 0020 	add.w	r0, r7, #32
   12d96:	f007 faf5 	bl	1a384 <memset>
	switch (smp->method) {
   12d9a:	7a23      	ldrb	r3, [r4, #8]
   12d9c:	2b05      	cmp	r3, #5
   12d9e:	d834      	bhi.n	12e0a <compute_and_check_and_send_periph_dhcheck+0x86>
   12da0:	e8df f003 	tbb	[pc, r3]
   12da4:	0a03030a 	.word	0x0a03030a
   12da8:	2d33      	.short	0x2d33
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   12daa:	2204      	movs	r2, #4
   12dac:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   12db0:	f107 0020 	add.w	r0, r7, #32
   12db4:	f007 fadb 	bl	1a36e <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   12db8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   12dbc:	f104 0247 	add.w	r2, r4, #71	; 0x47
   12dc0:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   12dc4:	e9cd 5201 	strd	r5, r2, [sp, #4]
   12dc8:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   12dcc:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   12dd0:	f104 0927 	add.w	r9, r4, #39	; 0x27
   12dd4:	9200      	str	r2, [sp, #0]
   12dd6:	4631      	mov	r1, r6
   12dd8:	464a      	mov	r2, r9
   12dda:	338f      	adds	r3, #143	; 0x8f
   12ddc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12de0:	f001 f88a 	bl	13ef8 <bt_crypto_f5>
   12de4:	b328      	cbz	r0, 12e32 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   12de6:	4b42      	ldr	r3, [pc, #264]	; (12ef0 <compute_and_check_and_send_periph_dhcheck+0x16c>)
   12de8:	647b      	str	r3, [r7, #68]	; 0x44
   12dea:	2302      	movs	r3, #2
   12dec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12df0:	4840      	ldr	r0, [pc, #256]	; (12ef4 <compute_and_check_and_send_periph_dhcheck+0x170>)
   12df2:	643b      	str	r3, [r7, #64]	; 0x40
   12df4:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12df8:	f009 f803 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   12dfc:	e014      	b.n	12e28 <compute_and_check_and_send_periph_dhcheck+0xa4>
		if (smp->oobd_remote) {
   12dfe:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   12e02:	2900      	cmp	r1, #0
   12e04:	d0d8      	beq.n	12db8 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   12e06:	2210      	movs	r2, #16
   12e08:	e7d2      	b.n	12db0 <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12e0a:	466c      	mov	r4, sp
   12e0c:	b088      	sub	sp, #32
   12e0e:	aa04      	add	r2, sp, #16
   12e10:	4939      	ldr	r1, [pc, #228]	; (12ef8 <compute_and_check_and_send_periph_dhcheck+0x174>)
   12e12:	4838      	ldr	r0, [pc, #224]	; (12ef4 <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
   12e14:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12e18:	2303      	movs	r3, #3
   12e1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e1e:	f842 3f10 	str.w	r3, [r2, #16]!
   12e22:	f008 ffee 	bl	1be02 <z_log_msg_static_create.constprop.0>
   12e26:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   12e28:	2008      	movs	r0, #8
}
   12e2a:	374c      	adds	r7, #76	; 0x4c
   12e2c:	46bd      	mov	sp, r7
   12e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   12e32:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   12e36:	f107 0810 	add.w	r8, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   12e3a:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   12e3e:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   12e40:	9301      	str	r3, [sp, #4]
   12e42:	f104 0311 	add.w	r3, r4, #17
   12e46:	9202      	str	r2, [sp, #8]
   12e48:	9300      	str	r3, [sp, #0]
   12e4a:	4632      	mov	r2, r6
   12e4c:	4649      	mov	r1, r9
   12e4e:	4628      	mov	r0, r5
   12e50:	f8cd 800c 	str.w	r8, [sp, #12]
   12e54:	f107 0320 	add.w	r3, r7, #32
   12e58:	f009 fac8 	bl	1c3ec <bt_crypto_f6>
   12e5c:	b108      	cbz	r0, 12e62 <compute_and_check_and_send_periph_dhcheck+0xde>
		LOG_ERR("Calculate local DHKey check failed");
   12e5e:	4b27      	ldr	r3, [pc, #156]	; (12efc <compute_and_check_and_send_periph_dhcheck+0x178>)
   12e60:	e7c2      	b.n	12de8 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   12e62:	7a23      	ldrb	r3, [r4, #8]
   12e64:	2b05      	cmp	r3, #5
   12e66:	d107      	bne.n	12e78 <compute_and_check_and_send_periph_dhcheck+0xf4>
		if (smp->oobd_local) {
   12e68:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   12e6c:	2210      	movs	r2, #16
   12e6e:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   12e72:	b1b1      	cbz	r1, 12ea2 <compute_and_check_and_send_periph_dhcheck+0x11e>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   12e74:	f007 fa7b 	bl	1a36e <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   12e78:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   12e7c:	4631      	mov	r1, r6
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   12e7e:	f103 0296 	add.w	r2, r3, #150	; 0x96
   12e82:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   12e84:	9301      	str	r3, [sp, #4]
   12e86:	f104 030a 	add.w	r3, r4, #10
   12e8a:	9202      	str	r2, [sp, #8]
   12e8c:	9300      	str	r3, [sp, #0]
   12e8e:	464a      	mov	r2, r9
   12e90:	4628      	mov	r0, r5
   12e92:	9703      	str	r7, [sp, #12]
   12e94:	f107 0320 	add.w	r3, r7, #32
   12e98:	f009 faa8 	bl	1c3ec <bt_crypto_f6>
   12e9c:	b120      	cbz	r0, 12ea8 <compute_and_check_and_send_periph_dhcheck+0x124>
		LOG_ERR("Calculate remote DHKey check failed");
   12e9e:	4b18      	ldr	r3, [pc, #96]	; (12f00 <compute_and_check_and_send_periph_dhcheck+0x17c>)
   12ea0:	e7a2      	b.n	12de8 <compute_and_check_and_send_periph_dhcheck+0x64>
			memset(r, 0, sizeof(r));
   12ea2:	f007 fa6f 	bl	1a384 <memset>
   12ea6:	e7e7      	b.n	12e78 <compute_and_check_and_send_periph_dhcheck+0xf4>
	if (memcmp(smp->e, re, 16)) {
   12ea8:	2210      	movs	r2, #16
   12eaa:	4639      	mov	r1, r7
   12eac:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   12eb0:	f007 fa4d 	bl	1a34e <memcmp>
   12eb4:	4605      	mov	r5, r0
   12eb6:	b9c8      	cbnz	r0, 12eec <compute_and_check_and_send_periph_dhcheck+0x168>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   12eb8:	210d      	movs	r1, #13
   12eba:	4620      	mov	r0, r4
   12ebc:	f008 ffbf 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!buf) {
   12ec0:	4606      	mov	r6, r0
   12ec2:	2800      	cmp	r0, #0
   12ec4:	d0b0      	beq.n	12e28 <compute_and_check_and_send_periph_dhcheck+0xa4>
   12ec6:	2110      	movs	r1, #16
   12ec8:	300c      	adds	r0, #12
   12eca:	f009 fb3c 	bl	1c546 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   12ece:	2210      	movs	r2, #16
   12ed0:	4641      	mov	r1, r8
   12ed2:	f007 fa4c 	bl	1a36e <memcpy>
	smp_send(smp, buf, NULL, NULL);
   12ed6:	462a      	mov	r2, r5
   12ed8:	4631      	mov	r1, r6
   12eda:	4620      	mov	r0, r4
   12edc:	f7ff fade 	bl	1249c <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   12ee0:	1d20      	adds	r0, r4, #4
   12ee2:	2101      	movs	r1, #1
   12ee4:	f008 ff9b 	bl	1be1e <atomic_set_bit>
	return 0;
   12ee8:	4628      	mov	r0, r5
   12eea:	e79e      	b.n	12e2a <compute_and_check_and_send_periph_dhcheck+0xa6>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   12eec:	200b      	movs	r0, #11
   12eee:	e79c      	b.n	12e2a <compute_and_check_and_send_periph_dhcheck+0xa6>
   12ef0:	00020efb 	.word	0x00020efb
   12ef4:	0001e59c 	.word	0x0001e59c
   12ef8:	00020e76 	.word	0x00020e76
   12efc:	00020f10 	.word	0x00020f10
   12f00:	00020f33 	.word	0x00020f33

00012f04 <bt_smp_connected>:
{
   12f04:	b538      	push	{r3, r4, r5, lr}
   12f06:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   12f08:	4908      	ldr	r1, [pc, #32]	; (12f2c <bt_smp_connected+0x28>)
   12f0a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   12f0e:	3034      	adds	r0, #52	; 0x34
   12f10:	f00a fd90 	bl	1da34 <k_work_init_delayable>
	smp_reset(smp);
   12f14:	4628      	mov	r0, r5
   12f16:	f009 f820 	bl	1bf5a <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12f1a:	4b05      	ldr	r3, [pc, #20]	; (12f30 <bt_smp_connected+0x2c>)
   12f1c:	3464      	adds	r4, #100	; 0x64
   12f1e:	e8d4 2fef 	ldaex	r2, [r4]
   12f22:	e8c4 3fe1 	stlex	r1, r3, [r4]
   12f26:	2900      	cmp	r1, #0
   12f28:	d1f9      	bne.n	12f1e <bt_smp_connected+0x1a>
}
   12f2a:	bd38      	pop	{r3, r4, r5, pc}
   12f2c:	00013bf9 	.word	0x00013bf9
   12f30:	20009410 	.word	0x20009410

00012f34 <smp_pairing_confirm>:
{
   12f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f36:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   12f38:	68ce      	ldr	r6, [r1, #12]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   12f3a:	1d05      	adds	r5, r0, #4
{
   12f3c:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   12f3e:	210b      	movs	r1, #11
   12f40:	4628      	mov	r0, r5
   12f42:	f008 ff51 	bl	1bde8 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   12f46:	4631      	mov	r1, r6
   12f48:	2210      	movs	r2, #16
   12f4a:	f104 0017 	add.w	r0, r4, #23
   12f4e:	f007 fa0e 	bl	1a36e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12f52:	2105      	movs	r1, #5
   12f54:	4628      	mov	r0, r5
   12f56:	f008 ff20 	bl	1bd9a <atomic_test_bit>
   12f5a:	b920      	cbnz	r0, 12f66 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   12f5c:	4620      	mov	r0, r4
   12f5e:	f009 f871 	bl	1c044 <legacy_pairing_confirm>
}
   12f62:	46bd      	mov	sp, r7
   12f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   12f66:	7a23      	ldrb	r3, [r4, #8]
   12f68:	2b01      	cmp	r3, #1
   12f6a:	d008      	beq.n	12f7e <smp_pairing_confirm+0x4a>
   12f6c:	2b02      	cmp	r3, #2
   12f6e:	d112      	bne.n	12f96 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   12f70:	2104      	movs	r1, #4
   12f72:	4620      	mov	r0, r4
   12f74:	f008 ff53 	bl	1be1e <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   12f78:	f7ff fbca 	bl	12710 <smp_send_pairing_confirm>
   12f7c:	e7f1      	b.n	12f62 <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   12f7e:	210a      	movs	r1, #10
   12f80:	4628      	mov	r0, r5
   12f82:	f008 ff0a 	bl	1bd9a <atomic_test_bit>
   12f86:	2800      	cmp	r0, #0
   12f88:	d0f2      	beq.n	12f70 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   12f8a:	4628      	mov	r0, r5
   12f8c:	2100      	movs	r1, #0
   12f8e:	f008 ff46 	bl	1be1e <atomic_set_bit>
			return 0;
   12f92:	2000      	movs	r0, #0
   12f94:	e7e5      	b.n	12f62 <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12f96:	466c      	mov	r4, sp
   12f98:	b088      	sub	sp, #32
   12f9a:	466a      	mov	r2, sp
   12f9c:	4906      	ldr	r1, [pc, #24]	; (12fb8 <smp_pairing_confirm+0x84>)
   12f9e:	4807      	ldr	r0, [pc, #28]	; (12fbc <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   12fa0:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   12fa4:	2303      	movs	r3, #3
   12fa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12faa:	f842 3f10 	str.w	r3, [r2, #16]!
   12fae:	f008 ff28 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   12fb2:	2008      	movs	r0, #8
   12fb4:	46a5      	mov	sp, r4
   12fb6:	e7d4      	b.n	12f62 <smp_pairing_confirm+0x2e>
   12fb8:	00020e76 	.word	0x00020e76
   12fbc:	0001e59c 	.word	0x0001e59c

00012fc0 <smp_pairing_random>:
{
   12fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fc4:	b08e      	sub	sp, #56	; 0x38
   12fc6:	4604      	mov	r4, r0
   12fc8:	af04      	add	r7, sp, #16
   12fca:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12fcc:	f7ff fa0c 	bl	123e8 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   12fd0:	f104 0837 	add.w	r8, r4, #55	; 0x37
   12fd4:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   12fd6:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   12fd8:	2210      	movs	r2, #16
   12fda:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12fdc:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   12fde:	f007 f9c6 	bl	1a36e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12fe2:	2105      	movs	r1, #5
   12fe4:	4628      	mov	r0, r5
   12fe6:	f008 fed8 	bl	1bd9a <atomic_test_bit>
   12fea:	2800      	cmp	r0, #0
   12fec:	d148      	bne.n	13080 <smp_pairing_random+0xc0>
	struct bt_conn *conn = smp->chan.chan.conn;
   12fee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   12ff2:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   12ff6:	f103 0296 	add.w	r2, r3, #150	; 0x96
   12ffa:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   12ffc:	9201      	str	r2, [sp, #4]
   12ffe:	9300      	str	r3, [sp, #0]
   13000:	4641      	mov	r1, r8
   13002:	4630      	mov	r0, r6
   13004:	9702      	str	r7, [sp, #8]
   13006:	f104 0310 	add.w	r3, r4, #16
   1300a:	f104 0209 	add.w	r2, r4, #9
   1300e:	f008 ffbf 	bl	1bf90 <smp_c1>
	if (err) {
   13012:	bb18      	cbnz	r0, 1305c <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   13014:	2210      	movs	r2, #16
   13016:	4639      	mov	r1, r7
   13018:	f104 0017 	add.w	r0, r4, #23
   1301c:	f007 f997 	bl	1a34e <memcmp>
   13020:	2800      	cmp	r0, #0
   13022:	d16e      	bne.n	13102 <smp_pairing_random+0x142>
	memcpy(out, r2, 8);
   13024:	2208      	movs	r2, #8
   13026:	4641      	mov	r1, r8
   13028:	4638      	mov	r0, r7
   1302a:	f007 f9a0 	bl	1a36e <memcpy>
	memcpy(out + 8, r1, 8);
   1302e:	2208      	movs	r2, #8
   13030:	f104 0127 	add.w	r1, r4, #39	; 0x27
   13034:	18b8      	adds	r0, r7, r2
   13036:	f007 f99a 	bl	1a36e <memcpy>
	return bt_encrypt_le(k, out, out);
   1303a:	463a      	mov	r2, r7
   1303c:	4639      	mov	r1, r7
   1303e:	4630      	mov	r0, r6
   13040:	f007 fd00 	bl	1aa44 <bt_encrypt_le>
		if (err) {
   13044:	b178      	cbz	r0, 13066 <smp_pairing_random+0xa6>
			LOG_ERR("Calculate STK failed");
   13046:	4b5f      	ldr	r3, [pc, #380]	; (131c4 <smp_pairing_random+0x204>)
		LOG_ERR("Calculate confirm failed");
   13048:	627b      	str	r3, [r7, #36]	; 0x24
   1304a:	2302      	movs	r3, #2
   1304c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13050:	485d      	ldr	r0, [pc, #372]	; (131c8 <smp_pairing_random+0x208>)
   13052:	623b      	str	r3, [r7, #32]
   13054:	f107 0220 	add.w	r2, r7, #32
   13058:	f008 fed3 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1305c:	2008      	movs	r0, #8
}
   1305e:	3728      	adds	r7, #40	; 0x28
   13060:	46bd      	mov	sp, r7
   13062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   13066:	4639      	mov	r1, r7
   13068:	2210      	movs	r2, #16
   1306a:	4630      	mov	r0, r6
   1306c:	f007 f97f 	bl	1a36e <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13070:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   13072:	4628      	mov	r0, r5
   13074:	f008 fed3 	bl	1be1e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   13078:	4620      	mov	r0, r4
   1307a:	f008 ff18 	bl	1beae <smp_send_pairing_random>
   1307e:	e7ee      	b.n	1305e <smp_pairing_random+0x9e>
	switch (smp->method) {
   13080:	7a23      	ldrb	r3, [r4, #8]
   13082:	2b05      	cmp	r3, #5
   13084:	f200 808c 	bhi.w	131a0 <smp_pairing_random+0x1e0>
   13088:	e8df f003 	tbb	[pc, r3]
   1308c:	0320201a 	.word	0x0320201a
   13090:	618a      	.short	0x618a
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   13092:	f107 0310 	add.w	r3, r7, #16
   13096:	494d      	ldr	r1, [pc, #308]	; (131cc <smp_pairing_random+0x20c>)
   13098:	9300      	str	r3, [sp, #0]
   1309a:	4642      	mov	r2, r8
   1309c:	6809      	ldr	r1, [r1, #0]
   1309e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   130a2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   130a6:	f000 ff8f 	bl	13fc8 <bt_crypto_g2>
   130aa:	2800      	cmp	r0, #0
   130ac:	d1d6      	bne.n	1305c <smp_pairing_random+0x9c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   130ae:	210a      	movs	r1, #10
   130b0:	4628      	mov	r0, r5
   130b2:	f008 feb4 	bl	1be1e <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   130b6:	68b3      	ldr	r3, [r6, #8]
   130b8:	6939      	ldr	r1, [r7, #16]
   130ba:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   130be:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   130c0:	210d      	movs	r1, #13
   130c2:	4620      	mov	r0, r4
   130c4:	f008 feab 	bl	1be1e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   130c8:	2110      	movs	r1, #16
   130ca:	e7d2      	b.n	13072 <smp_pairing_random+0xb2>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   130cc:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   130d0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   130d4:	493d      	ldr	r1, [pc, #244]	; (131cc <smp_pairing_random+0x20c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   130d6:	40d3      	lsrs	r3, r2
   130d8:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   130dc:	9700      	str	r7, [sp, #0]
   130de:	4642      	mov	r2, r8
   130e0:	6809      	ldr	r1, [r1, #0]
   130e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   130e6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   130ea:	f009 f95a 	bl	1c3a2 <bt_crypto_f4>
   130ee:	b108      	cbz	r0, 130f4 <smp_pairing_random+0x134>
		LOG_ERR("Calculate confirm failed");
   130f0:	4b37      	ldr	r3, [pc, #220]	; (131d0 <smp_pairing_random+0x210>)
   130f2:	e7a9      	b.n	13048 <smp_pairing_random+0x88>
	if (memcmp(smp->pcnf, cfm, 16)) {
   130f4:	2210      	movs	r2, #16
   130f6:	4639      	mov	r1, r7
   130f8:	f104 0017 	add.w	r0, r4, #23
   130fc:	f007 f927 	bl	1a34e <memcmp>
   13100:	b108      	cbz	r0, 13106 <smp_pairing_random+0x146>
		return BT_SMP_ERR_CONFIRM_FAILED;
   13102:	2004      	movs	r0, #4
   13104:	e7ab      	b.n	1305e <smp_pairing_random+0x9e>
		atomic_set_bit(smp->allowed_cmds,
   13106:	2103      	movs	r1, #3
   13108:	4620      	mov	r0, r4
   1310a:	f008 fe88 	bl	1be1e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1310e:	f008 fece 	bl	1beae <smp_send_pairing_random>
		if (err) {
   13112:	2800      	cmp	r0, #0
   13114:	d1a3      	bne.n	1305e <smp_pairing_random+0x9e>
		smp->passkey_round++;
   13116:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1311a:	3301      	adds	r3, #1
   1311c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1311e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   13120:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   13124:	d109      	bne.n	1313a <smp_pairing_random+0x17a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   13126:	210d      	movs	r1, #13
   13128:	4620      	mov	r0, r4
   1312a:	f008 fe78 	bl	1be1e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1312e:	2110      	movs	r1, #16
   13130:	4628      	mov	r0, r5
   13132:	f008 fe74 	bl	1be1e <atomic_set_bit>
			return 0;
   13136:	2000      	movs	r0, #0
   13138:	e791      	b.n	1305e <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1313a:	2110      	movs	r1, #16
   1313c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   13140:	f7fc f80a 	bl	f158 <bt_rand>
   13144:	3800      	subs	r0, #0
   13146:	bf18      	it	ne
   13148:	2001      	movne	r0, #1
   1314a:	00c0      	lsls	r0, r0, #3
   1314c:	e787      	b.n	1305e <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1314e:	2110      	movs	r1, #16
   13150:	f104 0027 	add.w	r0, r4, #39	; 0x27
   13154:	f7fc f800 	bl	f158 <bt_rand>
   13158:	2800      	cmp	r0, #0
   1315a:	f47f af7f 	bne.w	1305c <smp_pairing_random+0x9c>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1315e:	b37e      	cbz	r6, 131c0 <smp_pairing_random+0x200>
   13160:	68f3      	ldr	r3, [r6, #12]
   13162:	b36b      	cbz	r3, 131c0 <smp_pairing_random+0x200>
			struct bt_conn_oob_info info = {
   13164:	4b1b      	ldr	r3, [pc, #108]	; (131d4 <smp_pairing_random+0x214>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   13166:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   13168:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1316a:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   1316c:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1316e:	7ca3      	ldrb	r3, [r4, #18]
   13170:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   13174:	d412      	bmi.n	1319c <smp_pairing_random+0x1dc>
   13176:	2b00      	cmp	r3, #0
   13178:	bf14      	ite	ne
   1317a:	2301      	movne	r3, #1
   1317c:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1317e:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   13180:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   13182:	4628      	mov	r0, r5
			smp->oobd_remote = NULL;
   13184:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   13188:	210c      	movs	r1, #12
   1318a:	f008 fe48 	bl	1be1e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1318e:	68f3      	ldr	r3, [r6, #12]
   13190:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   13194:	f107 0110 	add.w	r1, r7, #16
   13198:	4798      	blx	r3
			return 0;
   1319a:	e7cc      	b.n	13136 <smp_pairing_random+0x176>
		if (rsp_oob_present) {
   1319c:	005b      	lsls	r3, r3, #1
   1319e:	e7ee      	b.n	1317e <smp_pairing_random+0x1be>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   131a0:	466c      	mov	r4, sp
   131a2:	b088      	sub	sp, #32
   131a4:	aa04      	add	r2, sp, #16
   131a6:	490c      	ldr	r1, [pc, #48]	; (131d8 <smp_pairing_random+0x218>)
   131a8:	4807      	ldr	r0, [pc, #28]	; (131c8 <smp_pairing_random+0x208>)
	switch (smp->method) {
   131aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   131ae:	2303      	movs	r3, #3
   131b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   131b4:	f842 3f10 	str.w	r3, [r2, #16]!
   131b8:	f008 fe23 	bl	1be02 <z_log_msg_static_create.constprop.0>
   131bc:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   131be:	e74d      	b.n	1305c <smp_pairing_random+0x9c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   131c0:	2002      	movs	r0, #2
   131c2:	e74c      	b.n	1305e <smp_pairing_random+0x9e>
   131c4:	00020f57 	.word	0x00020f57
   131c8:	0001e59c 	.word	0x0001e59c
   131cc:	200099c0 	.word	0x200099c0
   131d0:	00020f6c 	.word	0x00020f6c
   131d4:	0001e6dc 	.word	0x0001e6dc
   131d8:	00020e76 	.word	0x00020e76

000131dc <bt_smp_start_security>:
{
   131dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   131e0:	78c6      	ldrb	r6, [r0, #3]
{
   131e2:	4604      	mov	r4, r0
	switch (conn->role) {
   131e4:	2e01      	cmp	r6, #1
   131e6:	d005      	beq.n	131f4 <bt_smp_start_security+0x18>
		return -EINVAL;
   131e8:	f06f 0415 	mvn.w	r4, #21
}
   131ec:	4620      	mov	r0, r4
   131ee:	b003      	add	sp, #12
   131f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   131f4:	f008 fe08 	bl	1be08 <smp_chan_get>
	if (!smp) {
   131f8:	4605      	mov	r5, r0
   131fa:	2800      	cmp	r0, #0
   131fc:	f000 80ac 	beq.w	13358 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   13200:	1d07      	adds	r7, r0, #4
   13202:	2104      	movs	r1, #4
   13204:	4638      	mov	r0, r7
   13206:	f008 fdc8 	bl	1bd9a <atomic_test_bit>
   1320a:	2800      	cmp	r0, #0
   1320c:	f040 80a7 	bne.w	1335e <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   13210:	2103      	movs	r1, #3
   13212:	4638      	mov	r0, r7
   13214:	f008 fdc1 	bl	1bd9a <atomic_test_bit>
   13218:	b110      	cbz	r0, 13220 <bt_smp_start_security+0x44>
		return -EBUSY;
   1321a:	f06f 040f 	mvn.w	r4, #15
   1321e:	e7e5      	b.n	131ec <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   13220:	4631      	mov	r1, r6
   13222:	4638      	mov	r0, r7
   13224:	f008 fdb9 	bl	1bd9a <atomic_test_bit>
   13228:	2800      	cmp	r0, #0
   1322a:	d1f6      	bne.n	1321a <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1322c:	4628      	mov	r0, r5
   1322e:	f7ff f8db 	bl	123e8 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   13232:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13236:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   13238:	7a9b      	ldrb	r3, [r3, #10]
   1323a:	2b03      	cmp	r3, #3
   1323c:	d042      	beq.n	132c4 <bt_smp_start_security+0xe8>
   1323e:	d832      	bhi.n	132a6 <bt_smp_start_security+0xca>
   13240:	3b01      	subs	r3, #1
   13242:	2b01      	cmp	r3, #1
   13244:	d948      	bls.n	132d8 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   13246:	210b      	movs	r1, #11
   13248:	1d20      	adds	r0, r4, #4
   1324a:	f008 fda6 	bl	1bd9a <atomic_test_bit>
   1324e:	2800      	cmp	r0, #0
   13250:	d1ca      	bne.n	131e8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   13252:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   13256:	b983      	cbnz	r3, 1327a <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   13258:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1325c:	4632      	mov	r2, r6
   1325e:	2020      	movs	r0, #32
   13260:	7a21      	ldrb	r1, [r4, #8]
   13262:	f000 fdd1 	bl	13e08 <bt_keys_find>
   13266:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1326a:	b930      	cbnz	r0, 1327a <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1326c:	4632      	mov	r2, r6
   1326e:	2004      	movs	r0, #4
   13270:	7a21      	ldrb	r1, [r4, #8]
   13272:	f000 fdc9 	bl	13e08 <bt_keys_find>
   13276:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1327a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1327e:	2b00      	cmp	r3, #0
   13280:	d0b2      	beq.n	131e8 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   13282:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   13284:	f012 0f24 	tst.w	r2, #36	; 0x24
   13288:	d0ae      	beq.n	131e8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1328a:	7aa1      	ldrb	r1, [r4, #10]
   1328c:	2902      	cmp	r1, #2
   1328e:	d923      	bls.n	132d8 <bt_smp_start_security+0xfc>
   13290:	7b58      	ldrb	r0, [r3, #13]
   13292:	07c0      	lsls	r0, r0, #31
   13294:	d5a8      	bpl.n	131e8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   13296:	2903      	cmp	r1, #3
   13298:	d01e      	beq.n	132d8 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1329a:	0692      	lsls	r2, r2, #26
   1329c:	d5a4      	bpl.n	131e8 <bt_smp_start_security+0xc>
   1329e:	7b1b      	ldrb	r3, [r3, #12]
   132a0:	2b10      	cmp	r3, #16
   132a2:	d1a1      	bne.n	131e8 <bt_smp_start_security+0xc>
   132a4:	e018      	b.n	132d8 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   132a6:	2b04      	cmp	r3, #4
   132a8:	d1cd      	bne.n	13246 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   132aa:	4628      	mov	r0, r5
   132ac:	f7ff f8b2 	bl	12414 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   132b0:	2803      	cmp	r0, #3
   132b2:	d104      	bne.n	132be <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   132b4:	2e00      	cmp	r6, #0
   132b6:	d0c6      	beq.n	13246 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   132b8:	68f3      	ldr	r3, [r6, #12]
   132ba:	2b00      	cmp	r3, #0
   132bc:	d0c3      	beq.n	13246 <bt_smp_start_security+0x6a>
   132be:	4b29      	ldr	r3, [pc, #164]	; (13364 <bt_smp_start_security+0x188>)
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	e007      	b.n	132d4 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   132c4:	4628      	mov	r0, r5
   132c6:	f7ff f8a5 	bl	12414 <get_io_capa>
   132ca:	2803      	cmp	r0, #3
   132cc:	d104      	bne.n	132d8 <bt_smp_start_security+0xfc>
   132ce:	2e00      	cmp	r6, #0
   132d0:	d0b9      	beq.n	13246 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   132d2:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   132d4:	2b00      	cmp	r3, #0
   132d6:	d0b6      	beq.n	13246 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   132d8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   132dc:	b13b      	cbz	r3, 132ee <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   132de:	4628      	mov	r0, r5
   132e0:	f7ff f958 	bl	12594 <smp_init>
   132e4:	4680      	mov	r8, r0
   132e6:	b170      	cbz	r0, 13306 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   132e8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   132ec:	e77e      	b.n	131ec <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   132ee:	7a20      	ldrb	r0, [r4, #8]
   132f0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   132f4:	f000 fd54 	bl	13da0 <bt_keys_get_addr>
   132f8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   132fc:	2800      	cmp	r0, #0
   132fe:	d1ee      	bne.n	132de <bt_smp_start_security+0x102>
			return -ENOMEM;
   13300:	f06f 040b 	mvn.w	r4, #11
   13304:	e772      	b.n	131ec <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   13306:	210b      	movs	r1, #11
   13308:	4628      	mov	r0, r5
   1330a:	f008 fd98 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1330e:	4606      	mov	r6, r0
   13310:	2800      	cmp	r0, #0
   13312:	d0e9      	beq.n	132e8 <bt_smp_start_security+0x10c>
   13314:	2101      	movs	r1, #1
   13316:	300c      	adds	r0, #12
   13318:	f009 f915 	bl	1c546 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1331c:	2109      	movs	r1, #9
   1331e:	4681      	mov	r9, r0
   13320:	4628      	mov	r0, r5
   13322:	f7ff f89d 	bl	12460 <get_auth>
   13326:	4643      	mov	r3, r8
   13328:	f889 0000 	strb.w	r0, [r9]
   1332c:	4632      	mov	r2, r6
   1332e:	4620      	mov	r0, r4
   13330:	2106      	movs	r1, #6
   13332:	f8cd 8000 	str.w	r8, [sp]
   13336:	f007 fd83 	bl	1ae40 <bt_l2cap_send_cb>
	if (err) {
   1333a:	4604      	mov	r4, r0
   1333c:	b118      	cbz	r0, 13346 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1333e:	4630      	mov	r0, r6
   13340:	f000 ff38 	bl	141b4 <net_buf_unref>
		return err;
   13344:	e752      	b.n	131ec <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   13346:	4638      	mov	r0, r7
   13348:	210f      	movs	r1, #15
   1334a:	f008 fd68 	bl	1be1e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1334e:	2101      	movs	r1, #1
   13350:	4628      	mov	r0, r5
   13352:	f008 fd64 	bl	1be1e <atomic_set_bit>
	return 0;
   13356:	e749      	b.n	131ec <bt_smp_start_security+0x10>
		return -ENOTCONN;
   13358:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1335c:	e746      	b.n	131ec <bt_smp_start_security+0x10>
		return -EIO;
   1335e:	f06f 0404 	mvn.w	r4, #4
   13362:	e743      	b.n	131ec <bt_smp_start_security+0x10>
   13364:	20009d3e 	.word	0x20009d3e

00013368 <smp_pairing_complete>:
{
   13368:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1336a:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1336e:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13370:	7b63      	ldrb	r3, [r4, #13]
{
   13372:	b087      	sub	sp, #28
	if (conn->state != BT_CONN_CONNECTED) {
   13374:	2b07      	cmp	r3, #7
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   13376:	f100 0504 	add.w	r5, r0, #4
	if (conn->state != BT_CONN_CONNECTED) {
   1337a:	d038      	beq.n	133ee <smp_pairing_complete+0x86>
		LOG_WRN("Not connected!");
   1337c:	4b41      	ldr	r3, [pc, #260]	; (13484 <smp_pairing_complete+0x11c>)
   1337e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13382:	9305      	str	r3, [sp, #20]
   13384:	2302      	movs	r3, #2
   13386:	4840      	ldr	r0, [pc, #256]	; (13488 <smp_pairing_complete+0x120>)
   13388:	aa04      	add	r2, sp, #16
   1338a:	9304      	str	r3, [sp, #16]
   1338c:	f008 fd39 	bl	1be02 <z_log_msg_static_create.constprop.0>
	switch (smp_err) {
   13390:	2107      	movs	r1, #7
   13392:	4b3e      	ldr	r3, [pc, #248]	; (1348c <smp_pairing_complete+0x124>)
   13394:	5c5f      	ldrb	r7, [r3, r1]
		if (conn->le.keys &&
   13396:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1339a:	b14b      	cbz	r3, 133b0 <smp_pairing_complete+0x48>
   1339c:	7b1b      	ldrb	r3, [r3, #12]
   1339e:	2b00      	cmp	r3, #0
   133a0:	d158      	bne.n	13454 <smp_pairing_complete+0xec>
			bt_keys_clear(conn->le.keys);
   133a2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   133a6:	f008 ffb8 	bl	1c31a <bt_keys_clear>
			conn->le.keys = NULL;
   133aa:	2300      	movs	r3, #0
   133ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   133b0:	2102      	movs	r1, #2
   133b2:	4628      	mov	r0, r5
   133b4:	f008 fcf1 	bl	1bd9a <atomic_test_bit>
   133b8:	b948      	cbnz	r0, 133ce <smp_pairing_complete+0x66>
	switch (err) {
   133ba:	2f07      	cmp	r7, #7
   133bc:	bf94      	ite	ls
   133be:	4b34      	ldrls	r3, [pc, #208]	; (13490 <smp_pairing_complete+0x128>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   133c0:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   133c2:	463a      	mov	r2, r7
   133c4:	4620      	mov	r0, r4
   133c6:	bf98      	it	ls
   133c8:	5dd9      	ldrbls	r1, [r3, r7]
   133ca:	f7fc fcc3 	bl	fd54 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   133ce:	2103      	movs	r1, #3
   133d0:	4628      	mov	r0, r5
   133d2:	f008 fce2 	bl	1bd9a <atomic_test_bit>
   133d6:	b338      	cbz	r0, 13428 <smp_pairing_complete+0xc0>
	return list->head;
   133d8:	4b2e      	ldr	r3, [pc, #184]	; (13494 <smp_pairing_complete+0x12c>)
   133da:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   133dc:	b323      	cbz	r3, 13428 <smp_pairing_complete+0xc0>
	return node->next;
   133de:	681d      	ldr	r5, [r3, #0]
   133e0:	b105      	cbz	r5, 133e4 <smp_pairing_complete+0x7c>
   133e2:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   133e4:	f853 3c08 	ldr.w	r3, [r3, #-8]
   133e8:	2b00      	cmp	r3, #0
   133ea:	d13c      	bne.n	13466 <smp_pairing_complete+0xfe>
   133ec:	e03e      	b.n	1346c <smp_pairing_complete+0x104>
	if (!status) {
   133ee:	bb59      	cbnz	r1, 13448 <smp_pairing_complete+0xe0>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   133f0:	210d      	movs	r1, #13
   133f2:	4628      	mov	r0, r5
   133f4:	f008 fcd1 	bl	1bd9a <atomic_test_bit>
	return list->head;
   133f8:	4b26      	ldr	r3, [pc, #152]	; (13494 <smp_pairing_complete+0x12c>)
   133fa:	4607      	mov	r7, r0
   133fc:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   133fe:	b19b      	cbz	r3, 13428 <smp_pairing_complete+0xc0>
	return node->next;
   13400:	681d      	ldr	r5, [r3, #0]
   13402:	b105      	cbz	r5, 13406 <smp_pairing_complete+0x9e>
   13404:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   13406:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1340a:	b113      	cbz	r3, 13412 <smp_pairing_complete+0xaa>
				listener->pairing_complete(conn, bond_flag);
   1340c:	4639      	mov	r1, r7
   1340e:	4620      	mov	r0, r4
   13410:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   13412:	b14d      	cbz	r5, 13428 <smp_pairing_complete+0xc0>
   13414:	462b      	mov	r3, r5
   13416:	68ed      	ldr	r5, [r5, #12]
   13418:	681b      	ldr	r3, [r3, #0]
   1341a:	b11d      	cbz	r5, 13424 <smp_pairing_complete+0xbc>
   1341c:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1341e:	2b00      	cmp	r3, #0
   13420:	d1f4      	bne.n	1340c <smp_pairing_complete+0xa4>
   13422:	e7f7      	b.n	13414 <smp_pairing_complete+0xac>
   13424:	2b00      	cmp	r3, #0
   13426:	d1f1      	bne.n	1340c <smp_pairing_complete+0xa4>
	smp_reset(smp);
   13428:	4630      	mov	r0, r6
   1342a:	f008 fd96 	bl	1bf5a <smp_reset>
	if (conn->state == BT_CONN_CONNECTED && conn->sec_level != conn->required_sec_level) {
   1342e:	7b63      	ldrb	r3, [r4, #13]
   13430:	2b07      	cmp	r3, #7
   13432:	d125      	bne.n	13480 <smp_pairing_complete+0x118>
   13434:	7a62      	ldrb	r2, [r4, #9]
   13436:	7aa3      	ldrb	r3, [r4, #10]
   13438:	429a      	cmp	r2, r3
   1343a:	d021      	beq.n	13480 <smp_pairing_complete+0x118>
		bt_smp_start_security(conn);
   1343c:	4620      	mov	r0, r4
}
   1343e:	b007      	add	sp, #28
   13440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   13444:	f7ff beca 	b.w	131dc <bt_smp_start_security>
	switch (smp_err) {
   13448:	3901      	subs	r1, #1
   1344a:	b2c9      	uxtb	r1, r1
   1344c:	290e      	cmp	r1, #14
   1344e:	d9a0      	bls.n	13392 <smp_pairing_complete+0x2a>
	if (!status) {
   13450:	2709      	movs	r7, #9
   13452:	e7a0      	b.n	13396 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   13454:	2102      	movs	r1, #2
   13456:	4628      	mov	r0, r5
   13458:	f008 fc9f 	bl	1bd9a <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1345c:	2800      	cmp	r0, #0
   1345e:	d1a0      	bne.n	133a2 <smp_pairing_complete+0x3a>
   13460:	e7a6      	b.n	133b0 <smp_pairing_complete+0x48>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   13462:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   13464:	b123      	cbz	r3, 13470 <smp_pairing_complete+0x108>
					listener->pairing_failed(conn, security_err);
   13466:	4639      	mov	r1, r7
   13468:	4620      	mov	r0, r4
   1346a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1346c:	2d00      	cmp	r5, #0
   1346e:	d0db      	beq.n	13428 <smp_pairing_complete+0xc0>
   13470:	462b      	mov	r3, r5
   13472:	68ed      	ldr	r5, [r5, #12]
   13474:	685b      	ldr	r3, [r3, #4]
   13476:	2d00      	cmp	r5, #0
   13478:	d1f3      	bne.n	13462 <smp_pairing_complete+0xfa>
				if (listener->pairing_failed) {
   1347a:	2b00      	cmp	r3, #0
   1347c:	d1f3      	bne.n	13466 <smp_pairing_complete+0xfe>
   1347e:	e7d3      	b.n	13428 <smp_pairing_complete+0xc0>
}
   13480:	b007      	add	sp, #28
   13482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13484:	00020f85 	.word	0x00020f85
   13488:	0001e59c 	.word	0x0001e59c
   1348c:	0002119c 	.word	0x0002119c
   13490:	0002118b 	.word	0x0002118b
   13494:	200098e4 	.word	0x200098e4

00013498 <smp_error>:
{
   13498:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1349a:	1d03      	adds	r3, r0, #4
{
   1349c:	4606      	mov	r6, r0
   1349e:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   134a0:	4618      	mov	r0, r3
   134a2:	2102      	movs	r1, #2
{
   134a4:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   134a6:	f008 fc78 	bl	1bd9a <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   134aa:	4604      	mov	r4, r0
   134ac:	b120      	cbz	r0, 134b8 <smp_error+0x20>
   134ae:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   134b2:	fab4 f484 	clz	r4, r4
   134b6:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   134b8:	2103      	movs	r1, #3
   134ba:	4618      	mov	r0, r3
   134bc:	f008 fc6d 	bl	1bd9a <atomic_test_bit>
   134c0:	b1b0      	cbz	r0, 134f0 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   134c2:	4639      	mov	r1, r7
   134c4:	4630      	mov	r0, r6
   134c6:	f7ff ff4f 	bl	13368 <smp_pairing_complete>
	if (remote_already_completed) {
   134ca:	b1f4      	cbz	r4, 1350a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   134cc:	4b1d      	ldr	r3, [pc, #116]	; (13544 <smp_error+0xac>)
   134ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   134d2:	9307      	str	r3, [sp, #28]
   134d4:	2302      	movs	r3, #2
   134d6:	481c      	ldr	r0, [pc, #112]	; (13548 <smp_error+0xb0>)
   134d8:	aa06      	add	r2, sp, #24
   134da:	9306      	str	r3, [sp, #24]
   134dc:	f008 fc91 	bl	1be02 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   134e0:	2105      	movs	r1, #5
   134e2:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   134e6:	f007 fb8f 	bl	1ac08 <bt_conn_disconnect>
		return 0;
   134ea:	2000      	movs	r0, #0
}
   134ec:	b009      	add	sp, #36	; 0x24
   134ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   134f0:	2101      	movs	r1, #1
   134f2:	4618      	mov	r0, r3
   134f4:	f008 fc51 	bl	1bd9a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   134f8:	2800      	cmp	r0, #0
   134fa:	d1e2      	bne.n	134c2 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   134fc:	210f      	movs	r1, #15
   134fe:	4618      	mov	r0, r3
   13500:	f008 fc4b 	bl	1bd9a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   13504:	2800      	cmp	r0, #0
   13506:	d1dc      	bne.n	134c2 <smp_error+0x2a>
   13508:	e7df      	b.n	134ca <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1350a:	2105      	movs	r1, #5
   1350c:	4630      	mov	r0, r6
   1350e:	f008 fc96 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!buf) {
   13512:	4605      	mov	r5, r0
   13514:	b190      	cbz	r0, 1353c <smp_error+0xa4>
   13516:	2101      	movs	r1, #1
   13518:	300c      	adds	r0, #12
   1351a:	f009 f814 	bl	1c546 <net_buf_simple_add>
	rsp->reason = reason;
   1351e:	7007      	strb	r7, [r0, #0]
   13520:	9400      	str	r4, [sp, #0]
   13522:	4623      	mov	r3, r4
   13524:	462a      	mov	r2, r5
   13526:	2106      	movs	r1, #6
   13528:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1352c:	f007 fc88 	bl	1ae40 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   13530:	2800      	cmp	r0, #0
   13532:	d0da      	beq.n	134ea <smp_error+0x52>
		net_buf_unref(buf);
   13534:	4628      	mov	r0, r5
   13536:	f000 fe3d 	bl	141b4 <net_buf_unref>
   1353a:	e7d6      	b.n	134ea <smp_error+0x52>
		return -ENOBUFS;
   1353c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13540:	e7d4      	b.n	134ec <smp_error+0x54>
   13542:	bf00      	nop
   13544:	00020f94 	.word	0x00020f94
   13548:	0001e59c 	.word	0x0001e59c

0001354c <bt_smp_recv>:
{
   1354c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13550:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   13552:	8a0b      	ldrh	r3, [r1, #16]
{
   13554:	4604      	mov	r4, r0
   13556:	460e      	mov	r6, r1
   13558:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1355a:	b97b      	cbnz	r3, 1357c <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1355c:	4b47      	ldr	r3, [pc, #284]	; (1367c <bt_smp_recv+0x130>)
   1355e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13562:	617b      	str	r3, [r7, #20]
   13564:	2302      	movs	r3, #2
   13566:	4846      	ldr	r0, [pc, #280]	; (13680 <bt_smp_recv+0x134>)
   13568:	f107 0210 	add.w	r2, r7, #16
   1356c:	613b      	str	r3, [r7, #16]
   1356e:	f008 fc48 	bl	1be02 <z_log_msg_static_create.constprop.0>
}
   13572:	2000      	movs	r0, #0
   13574:	371c      	adds	r7, #28
   13576:	46bd      	mov	sp, r7
   13578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1357c:	2101      	movs	r1, #1
   1357e:	f106 000c 	add.w	r0, r6, #12
   13582:	f009 f810 	bl	1c5a6 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   13586:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1358a:	3ce8      	subs	r4, #232	; 0xe8
   1358c:	4680      	mov	r8, r0
   1358e:	2104      	movs	r1, #4
   13590:	4620      	mov	r0, r4
   13592:	f008 fc02 	bl	1bd9a <atomic_test_bit>
   13596:	f898 1000 	ldrb.w	r1, [r8]
   1359a:	b178      	cbz	r0, 135bc <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1359c:	466c      	mov	r4, sp
   1359e:	b088      	sub	sp, #32
   135a0:	466a      	mov	r2, sp
   135a2:	4b38      	ldr	r3, [pc, #224]	; (13684 <bt_smp_recv+0x138>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   135a4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   135a8:	2303      	movs	r3, #3
   135aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   135ae:	4834      	ldr	r0, [pc, #208]	; (13680 <bt_smp_recv+0x134>)
   135b0:	f842 3f10 	str.w	r3, [r2, #16]!
   135b4:	f008 fc25 	bl	1be02 <z_log_msg_static_create.constprop.0>
   135b8:	46a5      	mov	sp, r4
		return 0;
   135ba:	e7da      	b.n	13572 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   135bc:	290e      	cmp	r1, #14
   135be:	d904      	bls.n	135ca <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   135c0:	466c      	mov	r4, sp
   135c2:	b088      	sub	sp, #32
   135c4:	466a      	mov	r2, sp
   135c6:	4b30      	ldr	r3, [pc, #192]	; (13688 <bt_smp_recv+0x13c>)
   135c8:	e7ec      	b.n	135a4 <bt_smp_recv+0x58>
	if (!handlers[hdr->code].func) {
   135ca:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1368c <bt_smp_recv+0x140>
   135ce:	f859 3031 	ldr.w	r3, [r9, r1, lsl #3]
   135d2:	b99b      	cbnz	r3, 135fc <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   135d4:	466c      	mov	r4, sp
   135d6:	b088      	sub	sp, #32
   135d8:	466a      	mov	r2, sp
   135da:	4b2d      	ldr	r3, [pc, #180]	; (13690 <bt_smp_recv+0x144>)
   135dc:	4828      	ldr	r0, [pc, #160]	; (13680 <bt_smp_recv+0x134>)
   135de:	e9c2 3105 	strd	r3, r1, [r2, #20]
   135e2:	2303      	movs	r3, #3
   135e4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   135e8:	f842 3f10 	str.w	r3, [r2, #16]!
   135ec:	f008 fc09 	bl	1be02 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   135f0:	2107      	movs	r1, #7
   135f2:	46a5      	mov	sp, r4
		smp_error(smp, err);
   135f4:	4628      	mov	r0, r5
   135f6:	f7ff ff4f 	bl	13498 <smp_error>
   135fa:	e7ba      	b.n	13572 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   135fc:	4628      	mov	r0, r5
   135fe:	f008 fc9a 	bl	1bf36 <atomic_test_and_clear_bit>
   13602:	f898 3000 	ldrb.w	r3, [r8]
   13606:	b9b0      	cbnz	r0, 13636 <bt_smp_recv+0xea>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   13608:	46e8      	mov	r8, sp
   1360a:	b088      	sub	sp, #32
   1360c:	466a      	mov	r2, sp
   1360e:	2603      	movs	r6, #3
   13610:	4920      	ldr	r1, [pc, #128]	; (13694 <bt_smp_recv+0x148>)
   13612:	481b      	ldr	r0, [pc, #108]	; (13680 <bt_smp_recv+0x134>)
   13614:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13618:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1361c:	f842 6f10 	str.w	r6, [r2, #16]!
   13620:	f008 fbef 	bl	1be02 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   13624:	4631      	mov	r1, r6
   13626:	46c5      	mov	sp, r8
   13628:	4620      	mov	r0, r4
   1362a:	f008 fbb6 	bl	1bd9a <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1362e:	2800      	cmp	r0, #0
   13630:	d09f      	beq.n	13572 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13632:	2108      	movs	r1, #8
   13634:	e7de      	b.n	135f4 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   13636:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1363a:	8a31      	ldrh	r1, [r6, #16]
   1363c:	7912      	ldrb	r2, [r2, #4]
   1363e:	428a      	cmp	r2, r1
   13640:	d011      	beq.n	13666 <bt_smp_recv+0x11a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   13642:	466c      	mov	r4, sp
   13644:	b088      	sub	sp, #32
   13646:	466a      	mov	r2, sp
   13648:	61d3      	str	r3, [r2, #28]
   1364a:	2304      	movs	r3, #4
   1364c:	4812      	ldr	r0, [pc, #72]	; (13698 <bt_smp_recv+0x14c>)
   1364e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   13652:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13656:	480a      	ldr	r0, [pc, #40]	; (13680 <bt_smp_recv+0x134>)
   13658:	f842 3f10 	str.w	r3, [r2, #16]!
   1365c:	f008 fbd1 	bl	1be02 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   13660:	210a      	movs	r1, #10
   13662:	46a5      	mov	sp, r4
   13664:	e7c6      	b.n	135f4 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   13666:	4631      	mov	r1, r6
   13668:	4628      	mov	r0, r5
   1366a:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1366e:	4798      	blx	r3
	if (err) {
   13670:	4601      	mov	r1, r0
   13672:	2800      	cmp	r0, #0
   13674:	f43f af7d 	beq.w	13572 <bt_smp_recv+0x26>
   13678:	e7bc      	b.n	135f4 <bt_smp_recv+0xa8>
   1367a:	bf00      	nop
   1367c:	00020fec 	.word	0x00020fec
   13680:	0001e59c 	.word	0x0001e59c
   13684:	00021007 	.word	0x00021007
   13688:	00021038 	.word	0x00021038
   1368c:	0001ed24 	.word	0x0001ed24
   13690:	0002105a 	.word	0x0002105a
   13694:	00021074 	.word	0x00021074
   13698:	00020bf2 	.word	0x00020bf2

0001369c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1369c:	4b0c      	ldr	r3, [pc, #48]	; (136d0 <bt_smp_pkey_ready+0x34>)
{
   1369e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   136a0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   136a2:	b918      	cbnz	r0, 136ac <bt_smp_pkey_ready+0x10>
}
   136a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136a8:	f7fe bf26 	b.w	124f8 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   136ac:	4809      	ldr	r0, [pc, #36]	; (136d4 <bt_smp_pkey_ready+0x38>)
   136ae:	f004 f887 	bl	177c0 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   136b2:	4b09      	ldr	r3, [pc, #36]	; (136d8 <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   136b4:	1f1c      	subs	r4, r3, #4
   136b6:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   136ba:	065b      	lsls	r3, r3, #25
   136bc:	d507      	bpl.n	136ce <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   136be:	4620      	mov	r0, r4
   136c0:	f7ff f87a 	bl	127b8 <smp_public_key_periph>
		if (err) {
   136c4:	4601      	mov	r1, r0
   136c6:	b110      	cbz	r0, 136ce <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   136c8:	4620      	mov	r0, r4
   136ca:	f7ff fee5 	bl	13498 <smp_error>
}
   136ce:	bd10      	pop	{r4, pc}
   136d0:	200099c0 	.word	0x200099c0
   136d4:	200085c4 	.word	0x200085c4
   136d8:	20009414 	.word	0x20009414

000136dc <smp_ident_addr_info>:
{
   136dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136e0:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   136e2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   136e6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   136ea:	f023 0302 	bic.w	r3, r3, #2
   136ee:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   136f2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   136f6:	f898 3000 	ldrb.w	r3, [r8]
{
   136fa:	4604      	mov	r4, r0
   136fc:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   136fe:	f105 0988 	add.w	r9, r5, #136	; 0x88
   13702:	b3ab      	cbz	r3, 13770 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   13704:	f898 3006 	ldrb.w	r3, [r8, #6]
   13708:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1370c:	2bc0      	cmp	r3, #192	; 0xc0
   1370e:	d02f      	beq.n	13770 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   13710:	4640      	mov	r0, r8
   13712:	f7f9 f8b3 	bl	c87c <bt_addr_le_str>
   13716:	466e      	mov	r6, sp
   13718:	b088      	sub	sp, #32
   1371a:	466c      	mov	r4, sp
   1371c:	f44f 7a00 	mov.w	sl, #512	; 0x200
   13720:	4625      	mov	r5, r4
   13722:	4b57      	ldr	r3, [pc, #348]	; (13880 <smp_ident_addr_info+0x1a4>)
   13724:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13884 <smp_ident_addr_info+0x1a8>
   13728:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1372c:	f8a4 a01c 	strh.w	sl, [r4, #28]
   13730:	f845 8f10 	str.w	r8, [r5, #16]!
   13734:	462a      	mov	r2, r5
   13736:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1373a:	4853      	ldr	r0, [pc, #332]	; (13888 <smp_ident_addr_info+0x1ac>)
   1373c:	f008 fb61 	bl	1be02 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   13740:	4648      	mov	r0, r9
   13742:	46b5      	mov	sp, r6
   13744:	f7f9 f89a 	bl	c87c <bt_addr_le_str>
   13748:	46a5      	mov	sp, r4
   1374a:	4b50      	ldr	r3, [pc, #320]	; (1388c <smp_ident_addr_info+0x1b0>)
   1374c:	462a      	mov	r2, r5
   1374e:	e9c4 3005 	strd	r3, r0, [r4, #20]
   13752:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   13756:	484c      	ldr	r0, [pc, #304]	; (13888 <smp_ident_addr_info+0x1ac>)
   13758:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1375c:	f8c4 8010 	str.w	r8, [r4, #16]
   13760:	f008 fb4f 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   13764:	200a      	movs	r0, #10
   13766:	46b5      	mov	sp, r6
}
   13768:	3718      	adds	r7, #24
   1376a:	46bd      	mov	sp, r7
   1376c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   13770:	2207      	movs	r2, #7
   13772:	4641      	mov	r1, r8
   13774:	4648      	mov	r0, r9
   13776:	f006 fdea 	bl	1a34e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1377a:	b168      	cbz	r0, 13798 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1377c:	4641      	mov	r1, r8
   1377e:	7a28      	ldrb	r0, [r5, #8]
   13780:	f000 fbaa 	bl	13ed8 <bt_keys_find_addr>
		if (keys) {
   13784:	4606      	mov	r6, r0
   13786:	b138      	cbz	r0, 13798 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   13788:	4601      	mov	r1, r0
   1378a:	4620      	mov	r0, r4
   1378c:	f008 fb0b 	bl	1bda6 <update_keys_check>
   13790:	b320      	cbz	r0, 137dc <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   13792:	4630      	mov	r0, r6
   13794:	f008 fdc1 	bl	1c31a <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13798:	210d      	movs	r1, #13
   1379a:	1d20      	adds	r0, r4, #4
   1379c:	f008 fafd 	bl	1bd9a <atomic_test_bit>
   137a0:	2800      	cmp	r0, #0
   137a2:	d05c      	beq.n	1385e <smp_ident_addr_info+0x182>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   137a4:	464a      	mov	r2, r9
   137a6:	2002      	movs	r0, #2
   137a8:	7a29      	ldrb	r1, [r5, #8]
   137aa:	f008 fda2 	bl	1c2f2 <bt_keys_get_type>
		if (!keys) {
   137ae:	4606      	mov	r6, r0
   137b0:	b9b0      	cbnz	r0, 137e0 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   137b2:	4648      	mov	r0, r9
   137b4:	f7f9 f862 	bl	c87c <bt_addr_le_str>
   137b8:	466c      	mov	r4, sp
   137ba:	b088      	sub	sp, #32
   137bc:	466a      	mov	r2, sp
   137be:	4b34      	ldr	r3, [pc, #208]	; (13890 <smp_ident_addr_info+0x1b4>)
   137c0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   137c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   137c8:	f44f 7300 	mov.w	r3, #512	; 0x200
   137cc:	8393      	strh	r3, [r2, #28]
   137ce:	4b2d      	ldr	r3, [pc, #180]	; (13884 <smp_ident_addr_info+0x1a8>)
   137d0:	482d      	ldr	r0, [pc, #180]	; (13888 <smp_ident_addr_info+0x1ac>)
   137d2:	f842 3f10 	str.w	r3, [r2, #16]!
   137d6:	f008 fb14 	bl	1be02 <z_log_msg_static_create.constprop.0>
   137da:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   137dc:	2008      	movs	r0, #8
   137de:	e7c3      	b.n	13768 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   137e0:	78eb      	ldrb	r3, [r5, #3]
   137e2:	bbb3      	cbnz	r3, 13852 <smp_ident_addr_info+0x176>
			dst = &conn->le.resp_addr;
   137e4:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   137e8:	780b      	ldrb	r3, [r1, #0]
   137ea:	2b01      	cmp	r3, #1
   137ec:	d120      	bne.n	13830 <smp_ident_addr_info+0x154>
		if (bt_addr_le_is_rpa(dst)) {
   137ee:	798b      	ldrb	r3, [r1, #6]
   137f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   137f4:	2b40      	cmp	r3, #64	; 0x40
   137f6:	d11b      	bne.n	13830 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   137f8:	2206      	movs	r2, #6
   137fa:	3101      	adds	r1, #1
   137fc:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   13800:	f006 fdb5 	bl	1a36e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   13804:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   13808:	b193      	cbz	r3, 13830 <smp_ident_addr_info+0x154>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1380a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1380e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13812:	2bc0      	cmp	r3, #192	; 0xc0
   13814:	d00c      	beq.n	13830 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   13816:	2207      	movs	r2, #7
   13818:	4641      	mov	r1, r8
   1381a:	1c70      	adds	r0, r6, #1
   1381c:	f006 fda7 	bl	1a36e <memcpy>
   13820:	2207      	movs	r2, #7
   13822:	4641      	mov	r1, r8
   13824:	4648      	mov	r0, r9
   13826:	f006 fda2 	bl	1a36e <memcpy>
				bt_conn_identity_resolved(conn);
   1382a:	4628      	mov	r0, r5
   1382c:	f7fc fa64 	bl	fcf8 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   13830:	4630      	mov	r0, r6
   13832:	f7fa ff05 	bl	e640 <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   13836:	b178      	cbz	r0, 13858 <smp_ident_addr_info+0x17c>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   13838:	4b16      	ldr	r3, [pc, #88]	; (13894 <smp_ident_addr_info+0x1b8>)
   1383a:	4813      	ldr	r0, [pc, #76]	; (13888 <smp_ident_addr_info+0x1ac>)
   1383c:	617b      	str	r3, [r7, #20]
   1383e:	2302      	movs	r3, #2
   13840:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13844:	f107 0210 	add.w	r2, r7, #16
   13848:	613b      	str	r3, [r7, #16]
   1384a:	f008 fada 	bl	1be02 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1384e:	2003      	movs	r0, #3
   13850:	e78a      	b.n	13768 <smp_ident_addr_info+0x8c>
			dst = &conn->le.init_addr;
   13852:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   13856:	e7c7      	b.n	137e8 <smp_ident_addr_info+0x10c>
	bt_id_add(new_bond);
   13858:	4630      	mov	r0, r6
   1385a:	f7fa ff01 	bl	e660 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1385e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   13862:	075b      	lsls	r3, r3, #29
   13864:	d503      	bpl.n	1386e <smp_ident_addr_info+0x192>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   13866:	210a      	movs	r1, #10
   13868:	4620      	mov	r0, r4
   1386a:	f008 fad8 	bl	1be1e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1386e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   13872:	b109      	cbz	r1, 13878 <smp_ident_addr_info+0x19c>
	return 0;
   13874:	2000      	movs	r0, #0
   13876:	e777      	b.n	13768 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   13878:	4620      	mov	r0, r4
   1387a:	f7ff fd75 	bl	13368 <smp_pairing_complete>
   1387e:	e7f9      	b.n	13874 <smp_ident_addr_info+0x198>
   13880:	0002108f 	.word	0x0002108f
   13884:	01000003 	.word	0x01000003
   13888:	0001e59c 	.word	0x0001e59c
   1388c:	0002110d 	.word	0x0002110d
   13890:	00020e5c 	.word	0x00020e5c
   13894:	000210a3 	.word	0x000210a3

00013898 <smp_central_ident>:
{
   13898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1389c:	460b      	mov	r3, r1
   1389e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   138a0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   138a4:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   138a6:	210d      	movs	r1, #13
   138a8:	3004      	adds	r0, #4
   138aa:	f008 fa76 	bl	1bd9a <atomic_test_bit>
   138ae:	b368      	cbz	r0, 1390c <smp_central_ident+0x74>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   138b0:	f105 0888 	add.w	r8, r5, #136	; 0x88
   138b4:	7a29      	ldrb	r1, [r5, #8]
   138b6:	4642      	mov	r2, r8
   138b8:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   138ba:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   138bc:	f008 fd19 	bl	1c2f2 <bt_keys_get_type>
		if (!keys) {
   138c0:	4605      	mov	r5, r0
   138c2:	b9c0      	cbnz	r0, 138f6 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   138c4:	4640      	mov	r0, r8
   138c6:	f7f8 ffd9 	bl	c87c <bt_addr_le_str>
   138ca:	466c      	mov	r4, sp
   138cc:	b088      	sub	sp, #32
   138ce:	466a      	mov	r2, sp
   138d0:	4b1b      	ldr	r3, [pc, #108]	; (13940 <smp_central_ident+0xa8>)
   138d2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   138d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   138da:	f44f 7300 	mov.w	r3, #512	; 0x200
   138de:	8393      	strh	r3, [r2, #28]
   138e0:	4b18      	ldr	r3, [pc, #96]	; (13944 <smp_central_ident+0xac>)
   138e2:	4819      	ldr	r0, [pc, #100]	; (13948 <smp_central_ident+0xb0>)
   138e4:	f842 3f10 	str.w	r3, [r2, #16]!
   138e8:	f008 fa8b 	bl	1be02 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   138ec:	2008      	movs	r0, #8
   138ee:	46a5      	mov	sp, r4
}
   138f0:	46bd      	mov	sp, r7
   138f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   138f6:	2202      	movs	r2, #2
   138f8:	4631      	mov	r1, r6
   138fa:	3018      	adds	r0, #24
   138fc:	f006 fd37 	bl	1a36e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   13900:	2208      	movs	r2, #8
   13902:	1cb1      	adds	r1, r6, #2
   13904:	f105 0010 	add.w	r0, r5, #16
   13908:	f006 fd31 	bl	1a36e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1390c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   13910:	f023 0201 	bic.w	r2, r3, #1
   13914:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   13918:	079a      	lsls	r2, r3, #30
   1391a:	d508      	bpl.n	1392e <smp_central_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1391c:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1391e:	4620      	mov	r0, r4
   13920:	f008 fa7d 	bl	1be1e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   13924:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   13928:	b129      	cbz	r1, 13936 <smp_central_ident+0x9e>
	return 0;
   1392a:	2000      	movs	r0, #0
   1392c:	e7e0      	b.n	138f0 <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1392e:	075b      	lsls	r3, r3, #29
   13930:	d5f8      	bpl.n	13924 <smp_central_ident+0x8c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   13932:	210a      	movs	r1, #10
   13934:	e7f3      	b.n	1391e <smp_central_ident+0x86>
		smp_pairing_complete(smp, 0);
   13936:	4620      	mov	r0, r4
   13938:	f7ff fd16 	bl	13368 <smp_pairing_complete>
   1393c:	e7f5      	b.n	1392a <smp_central_ident+0x92>
   1393e:	bf00      	nop
   13940:	00020e5c 	.word	0x00020e5c
   13944:	01000003 	.word	0x01000003
   13948:	0001e59c 	.word	0x0001e59c

0001394c <smp_pairing_failed>:
{
   1394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13950:	460e      	mov	r6, r1
   13952:	af00      	add	r7, sp, #0
   13954:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   13956:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1395a:	f7fe fd45 	bl	123e8 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1395e:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   13960:	46e9      	mov	r9, sp
   13962:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   13964:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   13966:	466a      	mov	r2, sp
   13968:	7833      	ldrb	r3, [r6, #0]
   1396a:	4914      	ldr	r1, [pc, #80]	; (139bc <smp_pairing_failed+0x70>)
   1396c:	4814      	ldr	r0, [pc, #80]	; (139c0 <smp_pairing_failed+0x74>)
   1396e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13972:	2303      	movs	r3, #3
   13974:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13978:	f842 3f10 	str.w	r3, [r2, #16]!
   1397c:	f008 fa41 	bl	1be02 <z_log_msg_static_create.constprop.0>
   13980:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   13982:	f104 0904 	add.w	r9, r4, #4
   13986:	210a      	movs	r1, #10
   13988:	4648      	mov	r0, r9
   1398a:	f008 fad4 	bl	1bf36 <atomic_test_and_clear_bit>
   1398e:	b140      	cbz	r0, 139a2 <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   13990:	b975      	cbnz	r5, 139b0 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   13992:	4620      	mov	r0, r4
   13994:	7831      	ldrb	r1, [r6, #0]
   13996:	f7ff fce7 	bl	13368 <smp_pairing_complete>
}
   1399a:	2000      	movs	r0, #0
   1399c:	46bd      	mov	sp, r7
   1399e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   139a2:	210b      	movs	r1, #11
   139a4:	4648      	mov	r0, r9
   139a6:	f008 fac6 	bl	1bf36 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   139aa:	2800      	cmp	r0, #0
   139ac:	d1f0      	bne.n	13990 <smp_pairing_failed+0x44>
   139ae:	e7f0      	b.n	13992 <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   139b0:	692b      	ldr	r3, [r5, #16]
   139b2:	2b00      	cmp	r3, #0
   139b4:	d0ed      	beq.n	13992 <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   139b6:	4640      	mov	r0, r8
   139b8:	4798      	blx	r3
   139ba:	e7ea      	b.n	13992 <smp_pairing_failed+0x46>
   139bc:	000210de 	.word	0x000210de
   139c0:	0001e59c 	.word	0x0001e59c

000139c4 <bt_smp_encrypt_change>:
{
   139c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c8:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   139ca:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   139cc:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   139d0:	4604      	mov	r4, r0
   139d2:	4688      	mov	r8, r1
   139d4:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   139d6:	2101      	movs	r1, #1
   139d8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   139da:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   139de:	f008 faaa 	bl	1bf36 <atomic_test_and_clear_bit>
   139e2:	b338      	cbz	r0, 13a34 <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   139e4:	f1b8 0f00 	cmp.w	r8, #0
   139e8:	d019      	beq.n	13a1e <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   139ea:	2103      	movs	r1, #3
   139ec:	4630      	mov	r0, r6
   139ee:	f008 f9d4 	bl	1bd9a <atomic_test_bit>
   139f2:	b1f8      	cbz	r0, 13a34 <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   139f4:	4640      	mov	r0, r8
   139f6:	f7f9 ff5d 	bl	d8b4 <bt_security_err_get>
	switch (auth_err) {
   139fa:	3801      	subs	r0, #1
   139fc:	b2c0      	uxtb	r0, r0
   139fe:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   13a00:	bf8c      	ite	hi
   13a02:	2400      	movhi	r4, #0
   13a04:	4b74      	ldrls	r3, [pc, #464]	; (13bd8 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   13a06:	f04f 0102 	mov.w	r1, #2
   13a0a:	bf98      	it	ls
   13a0c:	5c1c      	ldrbls	r4, [r3, r0]
   13a0e:	4630      	mov	r0, r6
   13a10:	f008 fa05 	bl	1be1e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   13a14:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   13a16:	4628      	mov	r0, r5
   13a18:	f7ff fca6 	bl	13368 <smp_pairing_complete>
   13a1c:	e00a      	b.n	13a34 <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   13a1e:	f899 300b 	ldrb.w	r3, [r9, #11]
   13a22:	b13b      	cbz	r3, 13a34 <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   13a24:	2103      	movs	r1, #3
   13a26:	4630      	mov	r0, r6
   13a28:	f008 f9b7 	bl	1bd9a <atomic_test_bit>
   13a2c:	b930      	cbnz	r0, 13a3c <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   13a2e:	4628      	mov	r0, r5
   13a30:	f008 fa93 	bl	1bf5a <smp_reset>
}
   13a34:	373c      	adds	r7, #60	; 0x3c
   13a36:	46bd      	mov	sp, r7
   13a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13a3c:	2105      	movs	r1, #5
   13a3e:	4630      	mov	r0, r6
   13a40:	f008 f9ab 	bl	1bd9a <atomic_test_bit>
   13a44:	b1b8      	cbz	r0, 13a76 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   13a46:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   13a4a:	071a      	lsls	r2, r3, #28
   13a4c:	d507      	bpl.n	13a5e <bt_smp_encrypt_change+0x9a>
   13a4e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   13a52:	071b      	lsls	r3, r3, #28
   13a54:	d503      	bpl.n	13a5e <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   13a56:	2111      	movs	r1, #17
   13a58:	4630      	mov	r0, r6
   13a5a:	f008 f9e0 	bl	1be1e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   13a5e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   13a62:	f023 0308 	bic.w	r3, r3, #8
   13a66:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   13a6a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   13a6e:	f023 0308 	bic.w	r3, r3, #8
   13a72:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   13a76:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   13a7a:	07d8      	lsls	r0, r3, #31
   13a7c:	d522      	bpl.n	13ac4 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   13a7e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   13a80:	4628      	mov	r0, r5
   13a82:	f008 f9cc 	bl	1be1e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   13a86:	2102      	movs	r1, #2
   13a88:	4630      	mov	r0, r6
   13a8a:	f008 f9c8 	bl	1be1e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   13a8e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   13a90:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   13a94:	b9f2      	cbnz	r2, 13ad4 <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   13a96:	f103 0088 	add.w	r0, r3, #136	; 0x88
   13a9a:	f7f8 feef 	bl	c87c <bt_addr_le_str>
   13a9e:	466c      	mov	r4, sp
   13aa0:	b088      	sub	sp, #32
   13aa2:	466a      	mov	r2, sp
   13aa4:	4b4d      	ldr	r3, [pc, #308]	; (13bdc <bt_smp_encrypt_change+0x218>)
   13aa6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   13aaa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13aae:	f44f 7300 	mov.w	r3, #512	; 0x200
   13ab2:	8393      	strh	r3, [r2, #28]
   13ab4:	4b4a      	ldr	r3, [pc, #296]	; (13be0 <bt_smp_encrypt_change+0x21c>)
   13ab6:	484b      	ldr	r0, [pc, #300]	; (13be4 <bt_smp_encrypt_change+0x220>)
   13ab8:	f842 3f10 	str.w	r3, [r2, #16]!
   13abc:	f008 f9a1 	bl	1be02 <z_log_msg_static_create.constprop.0>
   13ac0:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   13ac2:	e7b7      	b.n	13a34 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   13ac4:	0799      	lsls	r1, r3, #30
   13ac6:	d501      	bpl.n	13acc <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   13ac8:	2108      	movs	r1, #8
   13aca:	e7d9      	b.n	13a80 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   13acc:	075a      	lsls	r2, r3, #29
   13ace:	d5da      	bpl.n	13a86 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   13ad0:	210a      	movs	r1, #10
   13ad2:	e7d5      	b.n	13a80 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13ad4:	2105      	movs	r1, #5
   13ad6:	f008 f960 	bl	1bd9a <atomic_test_bit>
   13ada:	b9c0      	cbnz	r0, 13b0e <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   13adc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   13ae0:	07db      	lsls	r3, r3, #31
   13ae2:	d514      	bpl.n	13b0e <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   13ae4:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   13ae6:	211a      	movs	r1, #26
   13ae8:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   13aec:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   13af0:	f7fb fb32 	bl	f158 <bt_rand>
   13af4:	4682      	mov	sl, r0
   13af6:	b178      	cbz	r0, 13b18 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   13af8:	4b3b      	ldr	r3, [pc, #236]	; (13be8 <bt_smp_encrypt_change+0x224>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   13afa:	617b      	str	r3, [r7, #20]
   13afc:	2302      	movs	r3, #2
   13afe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b02:	4838      	ldr	r0, [pc, #224]	; (13be4 <bt_smp_encrypt_change+0x220>)
   13b04:	613b      	str	r3, [r7, #16]
   13b06:	f107 0210 	add.w	r2, r7, #16
   13b0a:	f008 f97a 	bl	1be02 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   13b0e:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   13b12:	2900      	cmp	r1, #0
   13b14:	d18e      	bne.n	13a34 <bt_smp_encrypt_change+0x70>
   13b16:	e77e      	b.n	13a16 <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   13b18:	2106      	movs	r1, #6
   13b1a:	4628      	mov	r0, r5
   13b1c:	f008 f98f 	bl	1be3e <smp_create_pdu.constprop.0>
		if (!buf) {
   13b20:	4681      	mov	r9, r0
   13b22:	b908      	cbnz	r0, 13b28 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   13b24:	4b31      	ldr	r3, [pc, #196]	; (13bec <bt_smp_encrypt_change+0x228>)
   13b26:	e7e8      	b.n	13afa <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   13b28:	2110      	movs	r1, #16
   13b2a:	300c      	adds	r0, #12
   13b2c:	f008 fd0b 	bl	1c546 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   13b30:	f898 200c 	ldrb.w	r2, [r8, #12]
   13b34:	f107 011c 	add.w	r1, r7, #28
   13b38:	4683      	mov	fp, r0
   13b3a:	f006 fc18 	bl	1a36e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   13b3e:	f898 000c 	ldrb.w	r0, [r8, #12]
   13b42:	280f      	cmp	r0, #15
   13b44:	d805      	bhi.n	13b52 <bt_smp_encrypt_change+0x18e>
			(void)memset(info->ltk + keys->enc_size, 0,
   13b46:	f1c0 0210 	rsb	r2, r0, #16
   13b4a:	4651      	mov	r1, sl
   13b4c:	4458      	add	r0, fp
   13b4e:	f006 fc19 	bl	1a384 <memset>
		smp_send(smp, buf, NULL, NULL);
   13b52:	4649      	mov	r1, r9
   13b54:	2200      	movs	r2, #0
   13b56:	4628      	mov	r0, r5
   13b58:	f7fe fca0 	bl	1249c <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   13b5c:	2107      	movs	r1, #7
   13b5e:	4628      	mov	r0, r5
   13b60:	f008 f96d 	bl	1be3e <smp_create_pdu.constprop.0>
		if (!buf) {
   13b64:	4681      	mov	r9, r0
   13b66:	b908      	cbnz	r0, 13b6c <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   13b68:	4b21      	ldr	r3, [pc, #132]	; (13bf0 <bt_smp_encrypt_change+0x22c>)
   13b6a:	e7c6      	b.n	13afa <bt_smp_encrypt_change+0x136>
   13b6c:	210a      	movs	r1, #10
   13b6e:	300c      	adds	r0, #12
   13b70:	f008 fce9 	bl	1c546 <net_buf_simple_add>
   13b74:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   13b76:	2208      	movs	r2, #8
   13b78:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   13b7c:	3002      	adds	r0, #2
   13b7e:	f006 fbf6 	bl	1a36e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   13b82:	2202      	movs	r2, #2
   13b84:	f107 0134 	add.w	r1, r7, #52	; 0x34
   13b88:	4650      	mov	r0, sl
   13b8a:	f006 fbf0 	bl	1a36e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   13b8e:	4649      	mov	r1, r9
   13b90:	4628      	mov	r0, r5
   13b92:	4a18      	ldr	r2, [pc, #96]	; (13bf4 <bt_smp_encrypt_change+0x230>)
   13b94:	f7fe fc82 	bl	1249c <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13b98:	210d      	movs	r1, #13
   13b9a:	4630      	mov	r0, r6
   13b9c:	f008 f8fd 	bl	1bd9a <atomic_test_bit>
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d0b4      	beq.n	13b0e <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   13ba4:	4640      	mov	r0, r8
   13ba6:	2101      	movs	r1, #1
   13ba8:	f008 fbb3 	bl	1c312 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   13bac:	f107 011c 	add.w	r1, r7, #28
   13bb0:	2210      	movs	r2, #16
   13bb2:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   13bb6:	f006 fbda 	bl	1a36e <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   13bba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   13bbe:	2208      	movs	r2, #8
   13bc0:	f108 0040 	add.w	r0, r8, #64	; 0x40
   13bc4:	f006 fbd3 	bl	1a36e <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   13bc8:	2202      	movs	r2, #2
   13bca:	f107 0134 	add.w	r1, r7, #52	; 0x34
   13bce:	f108 0048 	add.w	r0, r8, #72	; 0x48
   13bd2:	f006 fbcc 	bl	1a36e <memcpy>
   13bd6:	e79a      	b.n	13b0e <bt_smp_encrypt_change+0x14a>
   13bd8:	00021193 	.word	0x00021193
   13bdc:	00021100 	.word	0x00021100
   13be0:	01000003 	.word	0x01000003
   13be4:	0001e59c 	.word	0x0001e59c
   13be8:	00021115 	.word	0x00021115
   13bec:	00021130 	.word	0x00021130
   13bf0:	00021157 	.word	0x00021157
   13bf4:	0001c2c5 	.word	0x0001c2c5

00013bf8 <smp_timeout>:
{
   13bf8:	b510      	push	{r4, lr}
   13bfa:	4604      	mov	r4, r0
   13bfc:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   13bfe:	4b0b      	ldr	r3, [pc, #44]	; (13c2c <smp_timeout+0x34>)
   13c00:	aa04      	add	r2, sp, #16
   13c02:	9305      	str	r3, [sp, #20]
   13c04:	2302      	movs	r3, #2
   13c06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13c0a:	4809      	ldr	r0, [pc, #36]	; (13c30 <smp_timeout+0x38>)
   13c0c:	9304      	str	r3, [sp, #16]
   13c0e:	f008 f8f8 	bl	1be02 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   13c12:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   13c16:	2108      	movs	r1, #8
   13c18:	f7ff fba6 	bl	13368 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   13c1c:	2104      	movs	r1, #4
   13c1e:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
}
   13c22:	b006      	add	sp, #24
   13c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   13c28:	f008 b8f9 	b.w	1be1e <atomic_set_bit>
   13c2c:	0002117f 	.word	0x0002117f
   13c30:	0001e59c 	.word	0x0001e59c

00013c34 <bt_smp_update_keys>:
{
   13c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c38:	af00      	add	r7, sp, #0
   13c3a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   13c3c:	f008 f8e4 	bl	1be08 <smp_chan_get>
	if (!smp) {
   13c40:	4605      	mov	r5, r0
   13c42:	b360      	cbz	r0, 13c9e <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   13c44:	1d06      	adds	r6, r0, #4
   13c46:	2103      	movs	r1, #3
   13c48:	4630      	mov	r0, r6
   13c4a:	f008 f8a6 	bl	1bd9a <atomic_test_bit>
   13c4e:	b330      	cbz	r0, 13c9e <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   13c50:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13c54:	b108      	cbz	r0, 13c5a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   13c56:	f008 fb60 	bl	1c31a <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   13c5a:	f104 0888 	add.w	r8, r4, #136	; 0x88
   13c5e:	4641      	mov	r1, r8
   13c60:	7a20      	ldrb	r0, [r4, #8]
   13c62:	f000 f89d 	bl	13da0 <bt_keys_get_addr>
   13c66:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   13c6a:	b9d8      	cbnz	r0, 13ca4 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   13c6c:	4640      	mov	r0, r8
   13c6e:	f7f8 fe05 	bl	c87c <bt_addr_le_str>
   13c72:	466c      	mov	r4, sp
   13c74:	b088      	sub	sp, #32
   13c76:	466a      	mov	r2, sp
   13c78:	4b3b      	ldr	r3, [pc, #236]	; (13d68 <bt_smp_update_keys+0x134>)
   13c7a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   13c7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13c82:	f44f 7300 	mov.w	r3, #512	; 0x200
   13c86:	8393      	strh	r3, [r2, #28]
   13c88:	4b38      	ldr	r3, [pc, #224]	; (13d6c <bt_smp_update_keys+0x138>)
   13c8a:	4839      	ldr	r0, [pc, #228]	; (13d70 <bt_smp_update_keys+0x13c>)
   13c8c:	f842 3f10 	str.w	r3, [r2, #16]!
   13c90:	f008 f8b7 	bl	1be02 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13c94:	2108      	movs	r1, #8
   13c96:	46a5      	mov	sp, r4
   13c98:	4628      	mov	r0, r5
   13c9a:	f7ff fbfd 	bl	13498 <smp_error>
}
   13c9e:	46bd      	mov	sp, r7
   13ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   13ca4:	210e      	movs	r1, #14
   13ca6:	4630      	mov	r0, r6
   13ca8:	f008 f877 	bl	1bd9a <atomic_test_bit>
   13cac:	b128      	cbz	r0, 13cba <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   13cae:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   13cb2:	7b53      	ldrb	r3, [r2, #13]
   13cb4:	f043 0302 	orr.w	r3, r3, #2
   13cb8:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   13cba:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   13cbc:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   13cc0:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   13cc2:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   13cc4:	d83c      	bhi.n	13d40 <bt_smp_update_keys+0x10c>
   13cc6:	2a00      	cmp	r2, #0
   13cc8:	d041      	beq.n	13d4e <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   13cca:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   13cce:	7b53      	ldrb	r3, [r2, #13]
   13cd0:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   13cd4:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   13cd6:	7d2b      	ldrb	r3, [r5, #20]
   13cd8:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   13cda:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   13cde:	428b      	cmp	r3, r1
   13ce0:	bf28      	it	cs
   13ce2:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13ce4:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   13ce6:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13ce8:	2105      	movs	r1, #5
   13cea:	f008 f856 	bl	1bd9a <atomic_test_bit>
   13cee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   13cf2:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13cf4:	b3a0      	cbz	r0, 13d60 <bt_smp_update_keys+0x12c>
		conn->le.keys->flags |= BT_KEYS_SC;
   13cf6:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13cfa:	210d      	movs	r1, #13
   13cfc:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   13cfe:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13d00:	f008 f84b 	bl	1bd9a <atomic_test_bit>
   13d04:	2800      	cmp	r0, #0
   13d06:	d0ca      	beq.n	13c9e <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   13d08:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13d0c:	2120      	movs	r1, #32
   13d0e:	f008 fb00 	bl	1c312 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   13d12:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13d16:	f105 0147 	add.w	r1, r5, #71	; 0x47
   13d1a:	2210      	movs	r2, #16
   13d1c:	301a      	adds	r0, #26
   13d1e:	f006 fb26 	bl	1a36e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   13d22:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13d26:	2208      	movs	r2, #8
   13d28:	2100      	movs	r1, #0
   13d2a:	3010      	adds	r0, #16
   13d2c:	f006 fb2a 	bl	1a384 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   13d30:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13d34:	2202      	movs	r2, #2
   13d36:	2100      	movs	r1, #0
   13d38:	3018      	adds	r0, #24
   13d3a:	f006 fb23 	bl	1a384 <memset>
   13d3e:	e7ae      	b.n	13c9e <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   13d40:	3a05      	subs	r2, #5
   13d42:	2a01      	cmp	r2, #1
   13d44:	d803      	bhi.n	13d4e <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_OOB;
   13d46:	f043 0320 	orr.w	r3, r3, #32
   13d4a:	734b      	strb	r3, [r1, #13]
   13d4c:	e7bd      	b.n	13cca <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   13d4e:	f023 0320 	bic.w	r3, r3, #32
   13d52:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   13d54:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   13d58:	7b53      	ldrb	r3, [r2, #13]
   13d5a:	f023 0301 	bic.w	r3, r3, #1
   13d5e:	e7b9      	b.n	13cd4 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   13d60:	f022 0210 	bic.w	r2, r2, #16
   13d64:	735a      	strb	r2, [r3, #13]
   13d66:	e79a      	b.n	13c9e <bt_smp_update_keys+0x6a>
   13d68:	00020e5c 	.word	0x00020e5c
   13d6c:	01000003 	.word	0x01000003
   13d70:	0001e59c 	.word	0x0001e59c

00013d74 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   13d74:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   13d76:	4b07      	ldr	r3, [pc, #28]	; (13d94 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   13d78:	4807      	ldr	r0, [pc, #28]	; (13d98 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   13d7a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   13d7e:	f003 0306 	and.w	r3, r3, #6
   13d82:	1f9a      	subs	r2, r3, #6
   13d84:	4253      	negs	r3, r2
   13d86:	4153      	adcs	r3, r2
   13d88:	4a04      	ldr	r2, [pc, #16]	; (13d9c <bt_smp_init+0x28>)
   13d8a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   13d8c:	f7fb fa0e 	bl	f1ac <bt_pub_key_gen>
	}

	return smp_self_test();
}
   13d90:	2000      	movs	r0, #0
   13d92:	bd08      	pop	{r3, pc}
   13d94:	20008000 	.word	0x20008000
   13d98:	200082ec 	.word	0x200082ec
   13d9c:	20009d3e 	.word	0x20009d3e

00013da0 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   13da0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   13da2:	4c0f      	ldr	r4, [pc, #60]	; (13de0 <bt_keys_get_addr+0x40>)
{
   13da4:	4605      	mov	r5, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   13da6:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   13daa:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   13dac:	4283      	cmp	r3, r0
   13dae:	d007      	beq.n	13dc0 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   13db0:	2207      	movs	r2, #7
   13db2:	490c      	ldr	r1, [pc, #48]	; (13de4 <bt_keys_get_addr+0x44>)
   13db4:	480c      	ldr	r0, [pc, #48]	; (13de8 <bt_keys_get_addr+0x48>)
   13db6:	f006 faca 	bl	1a34e <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   13dba:	b148      	cbz	r0, 13dd0 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   13dbc:	2000      	movs	r0, #0
}
   13dbe:	bd70      	pop	{r4, r5, r6, pc}
   13dc0:	2207      	movs	r2, #7
   13dc2:	4620      	mov	r0, r4
   13dc4:	f006 fac3 	bl	1a34e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   13dc8:	2800      	cmp	r0, #0
   13dca:	d1f1      	bne.n	13db0 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   13dcc:	4804      	ldr	r0, [pc, #16]	; (13de0 <bt_keys_get_addr+0x40>)
   13dce:	e7f6      	b.n	13dbe <bt_keys_get_addr+0x1e>
	memcpy(dst, src, sizeof(*dst));
   13dd0:	2207      	movs	r2, #7
   13dd2:	4631      	mov	r1, r6
   13dd4:	4804      	ldr	r0, [pc, #16]	; (13de8 <bt_keys_get_addr+0x48>)
		keys->id = id;
   13dd6:	f804 5c01 	strb.w	r5, [r4, #-1]
   13dda:	f006 fac8 	bl	1a36e <memcpy>
}
   13dde:	e7f5      	b.n	13dcc <bt_keys_get_addr+0x2c>
   13de0:	200099c4 	.word	0x200099c4
   13de4:	0001f9e5 	.word	0x0001f9e5
   13de8:	200099c5 	.word	0x200099c5

00013dec <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   13dec:	b410      	push	{r4}
   13dee:	460b      	mov	r3, r1
   13df0:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   13df2:	4a04      	ldr	r2, [pc, #16]	; (13e04 <bt_keys_foreach_type+0x18>)
   13df4:	89d4      	ldrh	r4, [r2, #14]
   13df6:	4204      	tst	r4, r0
   13df8:	d002      	beq.n	13e00 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   13dfa:	4610      	mov	r0, r2
		}
	}
}
   13dfc:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   13dfe:	4718      	bx	r3
}
   13e00:	bc10      	pop	{r4}
   13e02:	4770      	bx	lr
   13e04:	200099c4 	.word	0x200099c4

00013e08 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   13e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e0c:	2300      	movs	r3, #0
{
   13e0e:	4605      	mov	r5, r0
   13e10:	460e      	mov	r6, r1
   13e12:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   13e14:	f8df 8030 	ldr.w	r8, [pc, #48]	; 13e48 <bt_keys_find+0x40>
   13e18:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   13e1c:	f898 2000 	ldrb.w	r2, [r8]
   13e20:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e22:	b113      	cbz	r3, 13e2a <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   13e24:	2000      	movs	r0, #0
}
   13e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   13e2a:	2c00      	cmp	r4, #0
   13e2c:	d0fa      	beq.n	13e24 <bt_keys_find+0x1c>
   13e2e:	4296      	cmp	r6, r2
   13e30:	d1f8      	bne.n	13e24 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   13e32:	2207      	movs	r2, #7
   13e34:	4639      	mov	r1, r7
   13e36:	4805      	ldr	r0, [pc, #20]	; (13e4c <bt_keys_find+0x44>)
   13e38:	f006 fa89 	bl	1a34e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e3c:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   13e3e:	2800      	cmp	r0, #0
   13e40:	d1ea      	bne.n	13e18 <bt_keys_find+0x10>
			return &key_pool[i];
   13e42:	4801      	ldr	r0, [pc, #4]	; (13e48 <bt_keys_find+0x40>)
   13e44:	e7ef      	b.n	13e26 <bt_keys_find+0x1e>
   13e46:	bf00      	nop
   13e48:	200099c4 	.word	0x200099c4
   13e4c:	200099c5 	.word	0x200099c5

00013e50 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   13e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   13e52:	780b      	ldrb	r3, [r1, #0]
   13e54:	4606      	mov	r6, r0
   13e56:	2b01      	cmp	r3, #1
   13e58:	460c      	mov	r4, r1
   13e5a:	d001      	beq.n	13e60 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   13e5c:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   13e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   13e60:	798b      	ldrb	r3, [r1, #6]
   13e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13e66:	2b40      	cmp	r3, #64	; 0x40
   13e68:	d1f8      	bne.n	13e5c <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e6a:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   13e6c:	4d17      	ldr	r5, [pc, #92]	; (13ecc <bt_keys_find_irk+0x7c>)
	return memcmp(a, b, sizeof(*a));
   13e6e:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   13e72:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   13e74:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e76:	f002 0202 	and.w	r2, r2, #2
   13e7a:	b1c3      	cbz	r3, 13eae <bt_keys_find_irk+0x5e>
   13e7c:	2300      	movs	r3, #0
   13e7e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   13e80:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   13e82:	f002 0202 	and.w	r2, r2, #2
   13e86:	2b00      	cmp	r3, #0
   13e88:	d1e8      	bne.n	13e5c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   13e8a:	2a00      	cmp	r2, #0
   13e8c:	d0e6      	beq.n	13e5c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   13e8e:	42b1      	cmp	r1, r6
   13e90:	d1e4      	bne.n	13e5c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   13e92:	1c67      	adds	r7, r4, #1
   13e94:	4639      	mov	r1, r7
   13e96:	480e      	ldr	r0, [pc, #56]	; (13ed0 <bt_keys_find_irk+0x80>)
   13e98:	f006 fa80 	bl	1a39c <bt_rpa_irk_matches>
   13e9c:	2301      	movs	r3, #1
   13e9e:	2800      	cmp	r0, #0
   13ea0:	d0ed      	beq.n	13e7e <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   13ea2:	2206      	movs	r2, #6
   13ea4:	4639      	mov	r1, r7
   13ea6:	480b      	ldr	r0, [pc, #44]	; (13ed4 <bt_keys_find_irk+0x84>)
   13ea8:	f006 fa61 	bl	1a36e <memcpy>
}
   13eac:	e00b      	b.n	13ec6 <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   13eae:	2a00      	cmp	r2, #0
   13eb0:	d0e5      	beq.n	13e7e <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   13eb2:	42b0      	cmp	r0, r6
   13eb4:	d1e3      	bne.n	13e7e <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   13eb6:	2206      	movs	r2, #6
   13eb8:	4639      	mov	r1, r7
   13eba:	1c60      	adds	r0, r4, #1
   13ebc:	f006 fa47 	bl	1a34e <memcmp>
   13ec0:	2301      	movs	r3, #1
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d1d5      	bne.n	13e72 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   13ec6:	4801      	ldr	r0, [pc, #4]	; (13ecc <bt_keys_find_irk+0x7c>)
   13ec8:	e7c9      	b.n	13e5e <bt_keys_find_irk+0xe>
   13eca:	bf00      	nop
   13ecc:	200099c4 	.word	0x200099c4
   13ed0:	200099ee 	.word	0x200099ee
   13ed4:	200099fe 	.word	0x200099fe

00013ed8 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   13ed8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   13eda:	4c06      	ldr	r4, [pc, #24]	; (13ef4 <bt_keys_find_addr+0x1c>)
   13edc:	7823      	ldrb	r3, [r4, #0]
   13ede:	4283      	cmp	r3, r0
   13ee0:	d104      	bne.n	13eec <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   13ee2:	2207      	movs	r2, #7
   13ee4:	1c60      	adds	r0, r4, #1
   13ee6:	f006 fa32 	bl	1a34e <memcmp>
   13eea:	b108      	cbz	r0, 13ef0 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   13eec:	2000      	movs	r0, #0
}
   13eee:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   13ef0:	4620      	mov	r0, r4
   13ef2:	e7fc      	b.n	13eee <bt_keys_find_addr+0x16>
   13ef4:	200099c4 	.word	0x200099c4

00013ef8 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   13ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13efc:	b09a      	sub	sp, #104	; 0x68
   13efe:	4616      	mov	r6, r2
   13f00:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   13f04:	aa0c      	add	r2, sp, #48	; 0x30
{
   13f06:	4684      	mov	ip, r0
   13f08:	468a      	mov	sl, r1
   13f0a:	4690      	mov	r8, r2
   13f0c:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   13f0e:	4b2c      	ldr	r3, [pc, #176]	; (13fc0 <bt_crypto_f5+0xc8>)
   13f10:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   13f14:	4614      	mov	r4, r2
   13f16:	6818      	ldr	r0, [r3, #0]
   13f18:	6859      	ldr	r1, [r3, #4]
   13f1a:	3308      	adds	r3, #8
   13f1c:	c403      	stmia	r4!, {r0, r1}
   13f1e:	4573      	cmp	r3, lr
   13f20:	4622      	mov	r2, r4
   13f22:	d1f7      	bne.n	13f14 <bt_crypto_f5+0x1c>
   13f24:	6818      	ldr	r0, [r3, #0]
   13f26:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   13f28:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   13f2a:	6020      	str	r0, [r4, #0]
   13f2c:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   13f2e:	2220      	movs	r2, #32
   13f30:	a804      	add	r0, sp, #16
   13f32:	f008 fa00 	bl	1c336 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   13f36:	466b      	mov	r3, sp
   13f38:	2220      	movs	r2, #32
   13f3a:	4822      	ldr	r0, [pc, #136]	; (13fc4 <bt_crypto_f5+0xcc>)
   13f3c:	a904      	add	r1, sp, #16
   13f3e:	f008 fa12 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   13f42:	4604      	mov	r4, r0
   13f44:	bbc0      	cbnz	r0, 13fb8 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   13f46:	2210      	movs	r2, #16
   13f48:	4651      	mov	r1, sl
   13f4a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   13f4e:	f008 f9f2 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   13f52:	2210      	movs	r2, #16
   13f54:	4631      	mov	r1, r6
   13f56:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   13f5a:	f008 f9ec 	bl	1c336 <sys_memcpy_swap>
	m[37] = a1->type;
   13f5e:	4629      	mov	r1, r5
   13f60:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   13f64:	2206      	movs	r2, #6
   13f66:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   13f6a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   13f6e:	f008 f9e2 	bl	1c336 <sys_memcpy_swap>
	m[44] = a2->type;
   13f72:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   13f74:	2206      	movs	r2, #6
	m[44] = a2->type;
   13f76:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   13f7a:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   13f7e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   13f82:	f008 f9d8 	bl	1c336 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   13f86:	464b      	mov	r3, r9
   13f88:	2235      	movs	r2, #53	; 0x35
   13f8a:	4641      	mov	r1, r8
   13f8c:	4668      	mov	r0, sp
   13f8e:	f008 f9ea 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   13f92:	4604      	mov	r4, r0
   13f94:	b980      	cbnz	r0, 13fb8 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   13f96:	4648      	mov	r0, r9
   13f98:	f008 f9d7 	bl	1c34a <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   13f9c:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   13f9e:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   13fa0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   13fa4:	4641      	mov	r1, r8
   13fa6:	463b      	mov	r3, r7
   13fa8:	4668      	mov	r0, sp
   13faa:	f008 f9dc 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   13fae:	4604      	mov	r4, r0
   13fb0:	b910      	cbnz	r0, 13fb8 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   13fb2:	4638      	mov	r0, r7
   13fb4:	f008 f9c9 	bl	1c34a <sys_mem_swap.constprop.0>

	return 0;
}
   13fb8:	4620      	mov	r0, r4
   13fba:	b01a      	add	sp, #104	; 0x68
   13fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13fc0:	0001e6de 	.word	0x0001e6de
   13fc4:	000211ec 	.word	0x000211ec

00013fc8 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   13fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fca:	460f      	mov	r7, r1
   13fcc:	461e      	mov	r6, r3
   13fce:	4614      	mov	r4, r2
   13fd0:	b099      	sub	sp, #100	; 0x64
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   13fd2:	4601      	mov	r1, r0
   13fd4:	2220      	movs	r2, #32
   13fd6:	a804      	add	r0, sp, #16
{
   13fd8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   13fda:	f008 f9ac 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   13fde:	2220      	movs	r2, #32
   13fe0:	4639      	mov	r1, r7
   13fe2:	a80c      	add	r0, sp, #48	; 0x30
   13fe4:	f008 f9a7 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   13fe8:	2210      	movs	r2, #16
   13fea:	4631      	mov	r1, r6
   13fec:	a814      	add	r0, sp, #80	; 0x50
   13fee:	f008 f9a2 	bl	1c336 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   13ff2:	4621      	mov	r1, r4
   13ff4:	2210      	movs	r2, #16
   13ff6:	4668      	mov	r0, sp
   13ff8:	f008 f99d 	bl	1c336 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   13ffc:	466b      	mov	r3, sp
   13ffe:	2250      	movs	r2, #80	; 0x50
   14000:	4618      	mov	r0, r3
   14002:	a904      	add	r1, sp, #16
   14004:	f008 f9af 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   14008:	4604      	mov	r4, r0
   1400a:	b960      	cbnz	r0, 14026 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1400c:	2204      	movs	r2, #4
   1400e:	a903      	add	r1, sp, #12
   14010:	4628      	mov	r0, r5
   14012:	f006 f9ac 	bl	1a36e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   14016:	682b      	ldr	r3, [r5, #0]
   14018:	4a04      	ldr	r2, [pc, #16]	; (1402c <bt_crypto_g2+0x64>)
   1401a:	ba1b      	rev	r3, r3
   1401c:	fbb3 f1f2 	udiv	r1, r3, r2
   14020:	fb02 3311 	mls	r3, r2, r1, r3
   14024:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   14026:	4620      	mov	r0, r4
   14028:	b019      	add	sp, #100	; 0x64
   1402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1402c:	000f4240 	.word	0x000f4240

00014030 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   14030:	222c      	movs	r2, #44	; 0x2c
   14032:	4b02      	ldr	r3, [pc, #8]	; (1403c <net_buf_pool_get+0xc>)
   14034:	fb02 3000 	mla	r0, r2, r0, r3
   14038:	4770      	bx	lr
   1403a:	bf00      	nop
   1403c:	2000860c 	.word	0x2000860c

00014040 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   14040:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14042:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   14044:	4b05      	ldr	r3, [pc, #20]	; (1405c <net_buf_id+0x1c>)
   14046:	fb01 3302 	mla	r3, r1, r2, r3
   1404a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1404c:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1404e:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14050:	331b      	adds	r3, #27
   14052:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   14056:	fbb0 f0f3 	udiv	r0, r0, r3
   1405a:	4770      	bx	lr
   1405c:	2000860c 	.word	0x2000860c

00014060 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14060:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14062:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14064:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14066:	4b09      	ldr	r3, [pc, #36]	; (1408c <fixed_data_alloc+0x2c>)
   14068:	fb04 3302 	mla	r3, r4, r2, r3
   1406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1406e:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14070:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   14072:	681a      	ldr	r2, [r3, #0]
   14074:	4294      	cmp	r4, r2
   14076:	bf94      	ite	ls
   14078:	600c      	strls	r4, [r1, #0]
   1407a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1407c:	e9d3 5400 	ldrd	r5, r4, [r3]
   14080:	f7ff ffde 	bl	14040 <net_buf_id>
}
   14084:	fb05 4000 	mla	r0, r5, r0, r4
   14088:	bd38      	pop	{r3, r4, r5, pc}
   1408a:	bf00      	nop
   1408c:	2000860c 	.word	0x2000860c

00014090 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14094:	4605      	mov	r5, r0
   14096:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   14098:	4610      	mov	r0, r2
   1409a:	4619      	mov	r1, r3
{
   1409c:	4691      	mov	r9, r2
   1409e:	4698      	mov	r8, r3
   140a0:	4617      	mov	r7, r2
   140a2:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   140a4:	f009 fe68 	bl	1dd78 <sys_clock_timeout_end_calc>
   140a8:	4682      	mov	sl, r0
   140aa:	468b      	mov	fp, r1
	__asm__ volatile(
   140ac:	f04f 0320 	mov.w	r3, #32
   140b0:	f3ef 8111 	mrs	r1, BASEPRI
   140b4:	f383 8812 	msr	BASEPRI_MAX, r3
   140b8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   140bc:	8b6b      	ldrh	r3, [r5, #26]
   140be:	2b00      	cmp	r3, #0
   140c0:	d058      	beq.n	14174 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   140c2:	8b2a      	ldrh	r2, [r5, #24]
   140c4:	429a      	cmp	r2, r3
   140c6:	d93c      	bls.n	14142 <net_buf_alloc_len+0xb2>
   140c8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   140ca:	2200      	movs	r2, #0
   140cc:	2300      	movs	r3, #0
   140ce:	4628      	mov	r0, r5
   140d0:	f003 fb42 	bl	17758 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   140d4:	9900      	ldr	r1, [sp, #0]
   140d6:	4604      	mov	r4, r0
   140d8:	2800      	cmp	r0, #0
   140da:	d032      	beq.n	14142 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   140dc:	f381 8811 	msr	BASEPRI, r1
   140e0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   140e4:	9b01      	ldr	r3, [sp, #4]
   140e6:	2b00      	cmp	r3, #0
   140e8:	d055      	beq.n	14196 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   140ea:	ea58 0309 	orrs.w	r3, r8, r9
   140ee:	d00f      	beq.n	14110 <net_buf_alloc_len+0x80>
   140f0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   140f4:	bf08      	it	eq
   140f6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   140fa:	d009      	beq.n	14110 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   140fc:	f004 fa50 	bl	185a0 <sys_clock_tick_get>
   14100:	ebba 0700 	subs.w	r7, sl, r0
   14104:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   14108:	2e00      	cmp	r6, #0
   1410a:	bfbc      	itt	lt
   1410c:	2700      	movlt	r7, #0
   1410e:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   14110:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14114:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   14116:	4d25      	ldr	r5, [pc, #148]	; (141ac <net_buf_alloc_len+0x11c>)
   14118:	463a      	mov	r2, r7
   1411a:	fb08 5303 	mla	r3, r8, r3, r5
   1411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14120:	4620      	mov	r0, r4
   14122:	681b      	ldr	r3, [r3, #0]
   14124:	a901      	add	r1, sp, #4
   14126:	f8d3 9000 	ldr.w	r9, [r3]
   1412a:	4633      	mov	r3, r6
   1412c:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1412e:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   14130:	2800      	cmp	r0, #0
   14132:	d131      	bne.n	14198 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   14134:	7aa0      	ldrb	r0, [r4, #10]
   14136:	4621      	mov	r1, r4
   14138:	fb00 5008 	mla	r0, r0, r8, r5
   1413c:	f009 fba5 	bl	1d88a <k_queue_prepend>
}
   14140:	e024      	b.n	1418c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   14142:	8b68      	ldrh	r0, [r5, #26]
   14144:	1e43      	subs	r3, r0, #1
   14146:	836b      	strh	r3, [r5, #26]
   14148:	f381 8811 	msr	BASEPRI, r1
   1414c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14150:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   14152:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   14154:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14156:	331b      	adds	r3, #27
   14158:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1415c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1415e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   14162:	4b12      	ldr	r3, [pc, #72]	; (141ac <net_buf_alloc_len+0x11c>)
   14164:	4a12      	ldr	r2, [pc, #72]	; (141b0 <net_buf_alloc_len+0x120>)
   14166:	1aeb      	subs	r3, r5, r3
   14168:	109b      	asrs	r3, r3, #2
   1416a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1416c:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1416e:	7f2b      	ldrb	r3, [r5, #28]
   14170:	72e3      	strb	r3, [r4, #11]
		goto success;
   14172:	e7b7      	b.n	140e4 <net_buf_alloc_len+0x54>
   14174:	f381 8811 	msr	BASEPRI, r1
   14178:	f3bf 8f6f 	isb	sy
   1417c:	464a      	mov	r2, r9
   1417e:	4643      	mov	r3, r8
   14180:	4628      	mov	r0, r5
   14182:	f003 fae9 	bl	17758 <z_impl_k_queue_get>
	if (!buf) {
   14186:	4604      	mov	r4, r0
   14188:	2800      	cmp	r0, #0
   1418a:	d1ab      	bne.n	140e4 <net_buf_alloc_len+0x54>
		return NULL;
   1418c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1418e:	4620      	mov	r0, r4
   14190:	b003      	add	sp, #12
   14192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   14196:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   14198:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1419a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1419c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1419e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   141a0:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   141a2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   141a4:	6963      	ldr	r3, [r4, #20]
   141a6:	8262      	strh	r2, [r4, #18]
   141a8:	60e3      	str	r3, [r4, #12]
	return buf;
   141aa:	e7f0      	b.n	1418e <net_buf_alloc_len+0xfe>
   141ac:	2000860c 	.word	0x2000860c
   141b0:	ba2e8ba3 	.word	0xba2e8ba3

000141b4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   141b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141b8:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   141ba:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   141bc:	272c      	movs	r7, #44	; 0x2c
   141be:	4d15      	ldr	r5, [pc, #84]	; (14214 <net_buf_unref+0x60>)
	while (buf) {
   141c0:	b90c      	cbnz	r4, 141c6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   141c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   141c6:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   141c8:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   141cc:	3b01      	subs	r3, #1
   141ce:	b2db      	uxtb	r3, r3
   141d0:	7223      	strb	r3, [r4, #8]
   141d2:	2b00      	cmp	r3, #0
   141d4:	d1f5      	bne.n	141c2 <net_buf_unref+0xe>
		if (buf->__buf) {
   141d6:	6961      	ldr	r1, [r4, #20]
   141d8:	b159      	cbz	r1, 141f2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   141da:	7a63      	ldrb	r3, [r4, #9]
   141dc:	07db      	lsls	r3, r3, #31
   141de:	d407      	bmi.n	141f0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   141e0:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   141e2:	4620      	mov	r0, r4
   141e4:	fb07 5303 	mla	r3, r7, r3, r5
   141e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   141ea:	681b      	ldr	r3, [r3, #0]
   141ec:	689b      	ldr	r3, [r3, #8]
   141ee:	4798      	blx	r3
			buf->__buf = NULL;
   141f0:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   141f2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   141f4:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   141f6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   141fa:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   141fc:	6a1b      	ldr	r3, [r3, #32]
   141fe:	b11b      	cbz	r3, 14208 <net_buf_unref+0x54>
			pool->destroy(buf);
   14200:	4620      	mov	r0, r4
   14202:	4798      	blx	r3
{
   14204:	4644      	mov	r4, r8
   14206:	e7db      	b.n	141c0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   14208:	4621      	mov	r1, r4
   1420a:	fb00 5007 	mla	r0, r0, r7, r5
   1420e:	f009 fb3c 	bl	1d88a <k_queue_prepend>
}
   14212:	e7f7      	b.n	14204 <net_buf_unref+0x50>
   14214:	2000860c 	.word	0x2000860c

00014218 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   14218:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1421a:	7e01      	ldrb	r1, [r0, #24]
   1421c:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1421e:	2902      	cmp	r1, #2
{
   14220:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   14222:	d018      	beq.n	14256 <bt_rpmsg_send+0x3e>
   14224:	2904      	cmp	r1, #4
   14226:	d015      	beq.n	14254 <bt_rpmsg_send+0x3c>
   14228:	b339      	cbz	r1, 1427a <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1422a:	466d      	mov	r5, sp
   1422c:	b088      	sub	sp, #32
   1422e:	466a      	mov	r2, sp
   14230:	4b13      	ldr	r3, [pc, #76]	; (14280 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   14232:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   14236:	2303      	movs	r3, #3
   14238:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1423c:	4811      	ldr	r0, [pc, #68]	; (14284 <bt_rpmsg_send+0x6c>)
   1423e:	f842 3f10 	str.w	r3, [r2, #16]!
   14242:	f008 f9cc 	bl	1c5de <z_log_msg_static_create.constprop.0>
   14246:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   14248:	4620      	mov	r0, r4
   1424a:	f7ff ffb3 	bl	141b4 <net_buf_unref>
	return 0;
}
   1424e:	2000      	movs	r0, #0
   14250:	46bd      	mov	sp, r7
   14252:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   14254:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   14256:	f104 000c 	add.w	r0, r4, #12
   1425a:	f008 f993 	bl	1c584 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1425e:	8a22      	ldrh	r2, [r4, #16]
   14260:	68e1      	ldr	r1, [r4, #12]
   14262:	4809      	ldr	r0, [pc, #36]	; (14288 <bt_rpmsg_send+0x70>)
   14264:	f7f6 f820 	bl	a2a8 <ipc_service_send>
	if (err < 0) {
   14268:	2800      	cmp	r0, #0
   1426a:	daed      	bge.n	14248 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1426c:	466d      	mov	r5, sp
   1426e:	b088      	sub	sp, #32
   14270:	466a      	mov	r2, sp
   14272:	4b06      	ldr	r3, [pc, #24]	; (1428c <bt_rpmsg_send+0x74>)
   14274:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14278:	e7dd      	b.n	14236 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1427a:	2101      	movs	r1, #1
   1427c:	e7eb      	b.n	14256 <bt_rpmsg_send+0x3e>
   1427e:	bf00      	nop
   14280:	0002121d 	.word	0x0002121d
   14284:	0001e564 	.word	0x0001e564
   14288:	20009a20 	.word	0x20009a20
   1428c:	0002122d 	.word	0x0002122d

00014290 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(void)
{
   14290:	b5b0      	push	{r4, r5, r7, lr}

	int err;

	err = bt_hci_driver_register(&drv);
   14292:	480c      	ldr	r0, [pc, #48]	; (142c4 <bt_rpmsg_init+0x34>)
{
   14294:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   14296:	f7f9 fe99 	bl	dfcc <bt_hci_driver_register>
	if (err < 0) {
   1429a:	1e04      	subs	r4, r0, #0
   1429c:	da0e      	bge.n	142bc <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1429e:	466d      	mov	r5, sp
   142a0:	b088      	sub	sp, #32
   142a2:	466a      	mov	r2, sp
   142a4:	4b08      	ldr	r3, [pc, #32]	; (142c8 <bt_rpmsg_init+0x38>)
   142a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   142aa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   142ae:	2303      	movs	r3, #3
   142b0:	4806      	ldr	r0, [pc, #24]	; (142cc <bt_rpmsg_init+0x3c>)
   142b2:	f842 3f10 	str.w	r3, [r2, #16]!
   142b6:	f008 f992 	bl	1c5de <z_log_msg_static_create.constprop.0>
   142ba:	46ad      	mov	sp, r5
	}

	return err;
}
   142bc:	4620      	mov	r0, r4
   142be:	46bd      	mov	sp, r7
   142c0:	bdb0      	pop	{r4, r5, r7, pc}
   142c2:	bf00      	nop
   142c4:	0001eda8 	.word	0x0001eda8
   142c8:	00021245 	.word	0x00021245
   142cc:	0001e564 	.word	0x0001e564

000142d0 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   142d0:	4801      	ldr	r0, [pc, #4]	; (142d8 <hci_ept_bound+0x8>)
   142d2:	f003 ba75 	b.w	177c0 <z_impl_k_sem_give>
   142d6:	bf00      	nop
   142d8:	20008594 	.word	0x20008594

000142dc <bt_rpmsg_open>:
{
   142dc:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   142de:	481a      	ldr	r0, [pc, #104]	; (14348 <bt_rpmsg_open+0x6c>)
{
   142e0:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   142e2:	f7f5 ff81 	bl	a1e8 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   142e6:	4604      	mov	r4, r0
   142e8:	b1a0      	cbz	r0, 14314 <bt_rpmsg_open+0x38>
   142ea:	f110 0f78 	cmn.w	r0, #120	; 0x78
   142ee:	d011      	beq.n	14314 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   142f0:	466d      	mov	r5, sp
   142f2:	b088      	sub	sp, #32
   142f4:	466a      	mov	r2, sp
   142f6:	4b15      	ldr	r3, [pc, #84]	; (1434c <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   142f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   142fc:	2303      	movs	r3, #3
   142fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14302:	4813      	ldr	r0, [pc, #76]	; (14350 <bt_rpmsg_open+0x74>)
   14304:	f842 3f10 	str.w	r3, [r2, #16]!
   14308:	f008 f969 	bl	1c5de <z_log_msg_static_create.constprop.0>
   1430c:	46ad      	mov	sp, r5
}
   1430e:	4620      	mov	r0, r4
   14310:	46bd      	mov	sp, r7
   14312:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   14314:	4a0f      	ldr	r2, [pc, #60]	; (14354 <bt_rpmsg_open+0x78>)
   14316:	4910      	ldr	r1, [pc, #64]	; (14358 <bt_rpmsg_open+0x7c>)
   14318:	480b      	ldr	r0, [pc, #44]	; (14348 <bt_rpmsg_open+0x6c>)
   1431a:	f7f5 ff93 	bl	a244 <ipc_service_register_endpoint>
	if (err) {
   1431e:	4604      	mov	r4, r0
   14320:	b120      	cbz	r0, 1432c <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   14322:	466d      	mov	r5, sp
   14324:	b088      	sub	sp, #32
   14326:	466a      	mov	r2, sp
   14328:	4b0c      	ldr	r3, [pc, #48]	; (1435c <bt_rpmsg_open+0x80>)
   1432a:	e7e5      	b.n	142f8 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1432c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14330:	2300      	movs	r3, #0
   14332:	480b      	ldr	r0, [pc, #44]	; (14360 <bt_rpmsg_open+0x84>)
   14334:	f003 fa6a 	bl	1780c <z_impl_k_sem_take>
	if (err) {
   14338:	4604      	mov	r4, r0
   1433a:	2800      	cmp	r0, #0
   1433c:	d0e7      	beq.n	1430e <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1433e:	466d      	mov	r5, sp
   14340:	b088      	sub	sp, #32
   14342:	466a      	mov	r2, sp
   14344:	4b07      	ldr	r3, [pc, #28]	; (14364 <bt_rpmsg_open+0x88>)
   14346:	e7d7      	b.n	142f8 <bt_rpmsg_open+0x1c>
   14348:	0001e23c 	.word	0x0001e23c
   1434c:	0002126f 	.word	0x0002126f
   14350:	0001e564 	.word	0x0001e564
   14354:	200082f4 	.word	0x200082f4
   14358:	20009a20 	.word	0x20009a20
   1435c:	0002129f 	.word	0x0002129f
   14360:	20008594 	.word	0x20008594
   14364:	000212c3 	.word	0x000212c3

00014368 <hci_ept_recv>:
{
   14368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1436c:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1436e:	4680      	mov	r8, r0
   14370:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   14374:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   14376:	f1b9 0f04 	cmp.w	r9, #4
{
   1437a:	460c      	mov	r4, r1
   1437c:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1437e:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
	switch (pkt_indicator) {
   14382:	d00d      	beq.n	143a0 <hci_ept_recv+0x38>
   14384:	f1b9 0f05 	cmp.w	r9, #5
   14388:	f000 80a3 	beq.w	144d2 <hci_ept_recv+0x16a>
   1438c:	f1b9 0f02 	cmp.w	r9, #2
   14390:	f040 80cc 	bne.w	1452c <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   14394:	2b03      	cmp	r3, #3
   14396:	d875      	bhi.n	14484 <hci_ept_recv+0x11c>
		LOG_ERR("Not enough data for ACL header");
   14398:	4b6c      	ldr	r3, [pc, #432]	; (1454c <hci_ept_recv+0x1e4>)
		LOG_ERR("No available ACL buffers!");
   1439a:	e9c7 9306 	strd	r9, r3, [r7, #24]
   1439e:	e005      	b.n	143ac <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   143a0:	2b01      	cmp	r3, #1
   143a2:	d80e      	bhi.n	143c2 <hci_ept_recv+0x5a>
		LOG_ERR("Not enough data for event header");
   143a4:	4b6a      	ldr	r3, [pc, #424]	; (14550 <hci_ept_recv+0x1e8>)
		LOG_ERR("Event payload length is not correct");
   143a6:	61fb      	str	r3, [r7, #28]
   143a8:	2302      	movs	r3, #2
   143aa:	61bb      	str	r3, [r7, #24]
   143ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   143b0:	4868      	ldr	r0, [pc, #416]	; (14554 <hci_ept_recv+0x1ec>)
   143b2:	f107 0218 	add.w	r2, r7, #24
   143b6:	f008 f912 	bl	1c5de <z_log_msg_static_create.constprop.0>
}
   143ba:	3724      	adds	r7, #36	; 0x24
   143bc:	46bd      	mov	sp, r7
   143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   143c2:	7843      	ldrb	r3, [r0, #1]
   143c4:	2b3e      	cmp	r3, #62	; 0x3e
   143c6:	d13e      	bne.n	14446 <hci_ept_recv+0xde>
		switch (subevt_type) {
   143c8:	f890 a003 	ldrb.w	sl, [r0, #3]
   143cc:	f1aa 0302 	sub.w	r3, sl, #2
   143d0:	f1d3 0a00 	rsbs	sl, r3, #0
   143d4:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   143d8:	2202      	movs	r2, #2
   143da:	4641      	mov	r1, r8
   143dc:	1d38      	adds	r0, r7, #4
   143de:	f005 ffc6 	bl	1a36e <memcpy>
	if (remaining != hdr.len) {
   143e2:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   143e4:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   143e6:	429c      	cmp	r4, r3
   143e8:	d133      	bne.n	14452 <hci_ept_recv+0xea>
   143ea:	f1ba 0f00 	cmp.w	sl, #0
   143ee:	d02d      	beq.n	1444c <hci_ept_recv+0xe4>
   143f0:	f04f 0800 	mov.w	r8, #0
   143f4:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   143f8:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   143fc:	4642      	mov	r2, r8
   143fe:	464b      	mov	r3, r9
   14400:	4651      	mov	r1, sl
   14402:	7938      	ldrb	r0, [r7, #4]
   14404:	f7f8 fb02 	bl	ca0c <bt_buf_get_evt>
		if (!buf) {
   14408:	4605      	mov	r5, r0
   1440a:	b320      	cbz	r0, 14456 <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1440c:	f100 080c 	add.w	r8, r0, #12
   14410:	2202      	movs	r2, #2
   14412:	1d39      	adds	r1, r7, #4
   14414:	4640      	mov	r0, r8
   14416:	f008 f89c 	bl	1c552 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1441a:	4640      	mov	r0, r8
   1441c:	f008 f8d7 	bl	1c5ce <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   14420:	4284      	cmp	r4, r0
   14422:	d926      	bls.n	14472 <hci_ept_recv+0x10a>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   14424:	466e      	mov	r6, sp
   14426:	b088      	sub	sp, #32
   14428:	466a      	mov	r2, sp
   1442a:	4b4b      	ldr	r3, [pc, #300]	; (14558 <hci_ept_recv+0x1f0>)
   1442c:	61d0      	str	r0, [r2, #28]
   1442e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14432:	2304      	movs	r3, #4
   14434:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14438:	4846      	ldr	r0, [pc, #280]	; (14554 <hci_ept_recv+0x1ec>)
   1443a:	f842 3f10 	str.w	r3, [r2, #16]!
   1443e:	f008 f8ce 	bl	1c5de <z_log_msg_static_create.constprop.0>
   14442:	46b5      	mov	sp, r6
   14444:	e03f      	b.n	144c6 <hci_ept_recv+0x15e>
			return false;
   14446:	f04f 0a00 	mov.w	sl, #0
   1444a:	e7c5      	b.n	143d8 <hci_ept_recv+0x70>
   1444c:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   14450:	e7d0      	b.n	143f4 <hci_ept_recv+0x8c>
		LOG_ERR("Event payload length is not correct");
   14452:	4b42      	ldr	r3, [pc, #264]	; (1455c <hci_ept_recv+0x1f4>)
   14454:	e7a7      	b.n	143a6 <hci_ept_recv+0x3e>
			if (discardable) {
   14456:	f1ba 0f00 	cmp.w	sl, #0
   1445a:	d1ae      	bne.n	143ba <hci_ept_recv+0x52>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1445c:	4b40      	ldr	r3, [pc, #256]	; (14560 <hci_ept_recv+0x1f8>)
   1445e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14462:	e9c7 b306 	strd	fp, r3, [r7, #24]
   14466:	483b      	ldr	r0, [pc, #236]	; (14554 <hci_ept_recv+0x1ec>)
   14468:	f107 0218 	add.w	r2, r7, #24
   1446c:	f008 f8b7 	bl	1c5de <z_log_msg_static_create.constprop.0>
	} while (!buf);
   14470:	e7c4      	b.n	143fc <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14472:	4622      	mov	r2, r4
   14474:	1cf1      	adds	r1, r6, #3
   14476:	4640      	mov	r0, r8
   14478:	f008 f86b 	bl	1c552 <net_buf_simple_add_mem>
		bt_recv(buf);
   1447c:	4628      	mov	r0, r5
   1447e:	f7f9 fd71 	bl	df64 <bt_recv>
}
   14482:	e79a      	b.n	143ba <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   14484:	2200      	movs	r2, #0
   14486:	2300      	movs	r3, #0
   14488:	2003      	movs	r0, #3
   1448a:	f7f8 fa8d 	bl	c9a8 <bt_buf_get_rx>
	if (buf) {
   1448e:	4605      	mov	r5, r0
   14490:	b1e8      	cbz	r0, 144ce <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14492:	2204      	movs	r2, #4
   14494:	4641      	mov	r1, r8
   14496:	18b8      	adds	r0, r7, r2
   14498:	f005 ff69 	bl	1a36e <memcpy>
   1449c:	2204      	movs	r2, #4
   1449e:	f105 080c 	add.w	r8, r5, #12
   144a2:	4640      	mov	r0, r8
   144a4:	18b9      	adds	r1, r7, r2
   144a6:	f008 f854 	bl	1c552 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   144aa:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   144ac:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   144ae:	429c      	cmp	r4, r3
   144b0:	d033      	beq.n	1451a <hci_ept_recv+0x1b2>
		LOG_ERR("ACL payload length is not correct");
   144b2:	4b2c      	ldr	r3, [pc, #176]	; (14564 <hci_ept_recv+0x1fc>)
   144b4:	e9c7 9306 	strd	r9, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   144b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144bc:	4825      	ldr	r0, [pc, #148]	; (14554 <hci_ept_recv+0x1ec>)
   144be:	f107 0218 	add.w	r2, r7, #24
   144c2:	f008 f88c 	bl	1c5de <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   144c6:	4628      	mov	r0, r5
   144c8:	f7ff fe74 	bl	141b4 <net_buf_unref>
	if (buf) {
   144cc:	e775      	b.n	143ba <hci_ept_recv+0x52>
		LOG_ERR("No available ACL buffers!");
   144ce:	4b26      	ldr	r3, [pc, #152]	; (14568 <hci_ept_recv+0x200>)
   144d0:	e763      	b.n	1439a <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   144d2:	2b03      	cmp	r3, #3
   144d4:	d801      	bhi.n	144da <hci_ept_recv+0x172>
		LOG_ERR("Not enough data for ISO header");
   144d6:	4b25      	ldr	r3, [pc, #148]	; (1456c <hci_ept_recv+0x204>)
   144d8:	e765      	b.n	143a6 <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   144da:	2200      	movs	r2, #0
   144dc:	2300      	movs	r3, #0
   144de:	4648      	mov	r0, r9
   144e0:	f7f8 fa62 	bl	c9a8 <bt_buf_get_rx>
	if (buf) {
   144e4:	4605      	mov	r5, r0
   144e6:	b1b0      	cbz	r0, 14516 <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   144e8:	2204      	movs	r2, #4
   144ea:	4641      	mov	r1, r8
   144ec:	18b8      	adds	r0, r7, r2
   144ee:	f005 ff3e 	bl	1a36e <memcpy>
   144f2:	2204      	movs	r2, #4
   144f4:	f105 080c 	add.w	r8, r5, #12
   144f8:	4640      	mov	r0, r8
   144fa:	18b9      	adds	r1, r7, r2
   144fc:	f008 f829 	bl	1c552 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   14500:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   14502:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   14504:	f3c3 030d 	ubfx	r3, r3, #0, #14
   14508:	429c      	cmp	r4, r3
   1450a:	d006      	beq.n	1451a <hci_ept_recv+0x1b2>
		LOG_ERR("ISO payload length is not correct");
   1450c:	4b18      	ldr	r3, [pc, #96]	; (14570 <hci_ept_recv+0x208>)
   1450e:	61fb      	str	r3, [r7, #28]
   14510:	2302      	movs	r3, #2
   14512:	61bb      	str	r3, [r7, #24]
   14514:	e7d0      	b.n	144b8 <hci_ept_recv+0x150>
		LOG_ERR("No available ISO buffers!");
   14516:	4b17      	ldr	r3, [pc, #92]	; (14574 <hci_ept_recv+0x20c>)
   14518:	e745      	b.n	143a6 <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   1451a:	4640      	mov	r0, r8
   1451c:	f008 f857 	bl	1c5ce <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   14520:	4284      	cmp	r4, r0
   14522:	f63f af7f 	bhi.w	14424 <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14526:	4622      	mov	r2, r4
   14528:	1d71      	adds	r1, r6, #5
   1452a:	e7a4      	b.n	14476 <hci_ept_recv+0x10e>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1452c:	466c      	mov	r4, sp
   1452e:	b088      	sub	sp, #32
   14530:	466a      	mov	r2, sp
   14532:	4b11      	ldr	r3, [pc, #68]	; (14578 <hci_ept_recv+0x210>)
   14534:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   14538:	e9c2 3905 	strd	r3, r9, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1453c:	2303      	movs	r3, #3
   1453e:	4805      	ldr	r0, [pc, #20]	; (14554 <hci_ept_recv+0x1ec>)
   14540:	f842 3f10 	str.w	r3, [r2, #16]!
   14544:	f008 f84b 	bl	1c5de <z_log_msg_static_create.constprop.0>
   14548:	46a5      	mov	sp, r4
   1454a:	e736      	b.n	143ba <hci_ept_recv+0x52>
   1454c:	00021380 	.word	0x00021380
   14550:	000212e3 	.word	0x000212e3
   14554:	0001e564 	.word	0x0001e564
   14558:	0002135d 	.word	0x0002135d
   1455c:	00021304 	.word	0x00021304
   14560:	00021328 	.word	0x00021328
   14564:	000213b9 	.word	0x000213b9
   14568:	0002139f 	.word	0x0002139f
   1456c:	000213db 	.word	0x000213db
   14570:	00021414 	.word	0x00021414
   14574:	000213fa 	.word	0x000213fa
   14578:	00021436 	.word	0x00021436

0001457c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1457c:	4b08      	ldr	r3, [pc, #32]	; (145a0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1457e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14580:	1ac3      	subs	r3, r0, r3
{
   14582:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14584:	4907      	ldr	r1, [pc, #28]	; (145a4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   14586:	109b      	asrs	r3, r3, #2
{
   14588:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1458a:	4359      	muls	r1, r3
   1458c:	2240      	movs	r2, #64	; 0x40
   1458e:	4806      	ldr	r0, [pc, #24]	; (145a8 <onoff_stop+0x2c>)
   14590:	f008 f844 	bl	1c61c <stop>
	notify(mgr, res);
   14594:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14596:	4601      	mov	r1, r0
	notify(mgr, res);
   14598:	4620      	mov	r0, r4
}
   1459a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1459e:	4718      	bx	r3
   145a0:	20009a3c 	.word	0x20009a3c
   145a4:	b6db6db7 	.word	0xb6db6db7
   145a8:	0001e1ac 	.word	0x0001e1ac

000145ac <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145ac:	2340      	movs	r3, #64	; 0x40
{
   145ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   145b0:	4c0b      	ldr	r4, [pc, #44]	; (145e0 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145b2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   145b4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145b6:	460b      	mov	r3, r1
{
   145b8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145ba:	490a      	ldr	r1, [pc, #40]	; (145e4 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   145bc:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145be:	4361      	muls	r1, r4
{
   145c0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   145c2:	4a09      	ldr	r2, [pc, #36]	; (145e8 <onoff_start+0x3c>)
   145c4:	4809      	ldr	r0, [pc, #36]	; (145ec <onoff_start+0x40>)
   145c6:	f008 f855 	bl	1c674 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   145ca:	1e01      	subs	r1, r0, #0
   145cc:	da05      	bge.n	145da <onoff_start+0x2e>
		notify(mgr, err);
   145ce:	4630      	mov	r0, r6
   145d0:	462b      	mov	r3, r5
	}
}
   145d2:	b002      	add	sp, #8
   145d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   145d8:	4718      	bx	r3
}
   145da:	b002      	add	sp, #8
   145dc:	bd70      	pop	{r4, r5, r6, pc}
   145de:	bf00      	nop
   145e0:	20009a3c 	.word	0x20009a3c
   145e4:	b6db6db7 	.word	0xb6db6db7
   145e8:	0001c6df 	.word	0x0001c6df
   145ec:	0001e1ac 	.word	0x0001e1ac

000145f0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   145f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   145f4:	2200      	movs	r2, #0
   145f6:	2101      	movs	r1, #1
{
   145f8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   145fa:	2005      	movs	r0, #5
   145fc:	f7f7 faae 	bl	bb5c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14600:	4811      	ldr	r0, [pc, #68]	; (14648 <clk_init+0x58>)
   14602:	f001 fcb3 	bl	15f6c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14606:	4b11      	ldr	r3, [pc, #68]	; (1464c <clk_init+0x5c>)
   14608:	4298      	cmp	r0, r3
   1460a:	d119      	bne.n	14640 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1460c:	f001 fcbe 	bl	15f8c <nrfx_clock_enable>
   14610:	2400      	movs	r4, #0
	return &data->mgr[type];
   14612:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14616:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14618:	f8df 8034 	ldr.w	r8, [pc, #52]	; 14650 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1461c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1461e:	4641      	mov	r1, r8
   14620:	fb09 5004 	mla	r0, r9, r4, r5
   14624:	f004 fbd5 	bl	18dd2 <onoff_manager_init>
		if (err < 0) {
   14628:	2800      	cmp	r0, #0
   1462a:	db07      	blt.n	1463c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1462c:	2301      	movs	r3, #1
   1462e:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   14632:	441c      	add	r4, r3
   14634:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14636:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   14638:	d1f0      	bne.n	1461c <clk_init+0x2c>
	}

	return 0;
   1463a:	2000      	movs	r0, #0
}
   1463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   14640:	f06f 0004 	mvn.w	r0, #4
   14644:	e7fa      	b.n	1463c <clk_init+0x4c>
   14646:	bf00      	nop
   14648:	00014689 	.word	0x00014689
   1464c:	0bad0000 	.word	0x0bad0000
   14650:	0001edc0 	.word	0x0001edc0

00014654 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14654:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14656:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   14658:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1465a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1465c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1465e:	4808      	ldr	r0, [pc, #32]	; (14680 <clkstarted_handle.constprop.0+0x2c>)
   14660:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   14662:	3378      	adds	r3, #120	; 0x78
   14664:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   14666:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
   1466a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   1466c:	f007 ffc3 	bl	1c5f6 <set_on_state>
	if (callback) {
   14670:	b12d      	cbz	r5, 1467e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14672:	4632      	mov	r2, r6
   14674:	462b      	mov	r3, r5
}
   14676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1467a:	4802      	ldr	r0, [pc, #8]	; (14684 <clkstarted_handle.constprop.0+0x30>)
   1467c:	4718      	bx	r3
}
   1467e:	bd70      	pop	{r4, r5, r6, pc}
   14680:	20009a3c 	.word	0x20009a3c
   14684:	0001e1ac 	.word	0x0001e1ac

00014688 <clock_event_handler>:
	switch (event) {
   14688:	2805      	cmp	r0, #5
   1468a:	d811      	bhi.n	146b0 <clock_event_handler+0x28>
   1468c:	e8df f000 	tbb	[pc, r0]
   14690:	10100e03 	.word	0x10100e03
   14694:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14696:	4b07      	ldr	r3, [pc, #28]	; (146b4 <clock_event_handler+0x2c>)
   14698:	6f98      	ldr	r0, [r3, #120]	; 0x78
   1469a:	f010 0007 	ands.w	r0, r0, #7
   1469e:	d107      	bne.n	146b0 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   146a0:	f7ff bfd8 	b.w	14654 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   146a4:	2002      	movs	r0, #2
   146a6:	e7fb      	b.n	146a0 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   146a8:	2003      	movs	r0, #3
   146aa:	e7f9      	b.n	146a0 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   146ac:	2001      	movs	r0, #1
   146ae:	e7f7      	b.n	146a0 <clock_event_handler+0x18>
}
   146b0:	4770      	bx	lr
   146b2:	bf00      	nop
   146b4:	20009a3c 	.word	0x20009a3c

000146b8 <generic_hfclk_start>:
{
   146b8:	b508      	push	{r3, lr}
	__asm__ volatile(
   146ba:	f04f 0320 	mov.w	r3, #32
   146be:	f3ef 8111 	mrs	r1, BASEPRI
   146c2:	f383 8812 	msr	BASEPRI_MAX, r3
   146c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   146ca:	4a11      	ldr	r2, [pc, #68]	; (14710 <generic_hfclk_start+0x58>)
   146cc:	6813      	ldr	r3, [r2, #0]
   146ce:	f043 0002 	orr.w	r0, r3, #2
   146d2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   146d4:	07da      	lsls	r2, r3, #31
   146d6:	d408      	bmi.n	146ea <generic_hfclk_start+0x32>
	__asm__ volatile(
   146d8:	f381 8811 	msr	BASEPRI, r1
   146dc:	f3bf 8f6f 	isb	sy
}
   146e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   146e4:	2001      	movs	r0, #1
   146e6:	f001 bc65 	b.w	15fb4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   146ea:	4b0a      	ldr	r3, [pc, #40]	; (14714 <generic_hfclk_start+0x5c>)
   146ec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   146f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   146f4:	07d3      	lsls	r3, r2, #31
   146f6:	d5ef      	bpl.n	146d8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   146f8:	4807      	ldr	r0, [pc, #28]	; (14718 <generic_hfclk_start+0x60>)
   146fa:	f007 ff7c 	bl	1c5f6 <set_on_state>
   146fe:	f381 8811 	msr	BASEPRI, r1
   14702:	f3bf 8f6f 	isb	sy
}
   14706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1470a:	2000      	movs	r0, #0
   1470c:	f7ff bfa2 	b.w	14654 <clkstarted_handle.constprop.0>
   14710:	20009adc 	.word	0x20009adc
   14714:	40005000 	.word	0x40005000
   14718:	20009ab4 	.word	0x20009ab4

0001471c <api_blocking_start>:
{
   1471c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1471e:	2200      	movs	r2, #0
   14720:	2301      	movs	r3, #1
   14722:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14726:	ab04      	add	r3, sp, #16
   14728:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1472c:	4a09      	ldr	r2, [pc, #36]	; (14754 <api_blocking_start+0x38>)
   1472e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14730:	f8cd d000 	str.w	sp, [sp]
   14734:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14738:	f007 ffca 	bl	1c6d0 <api_start>
	if (err < 0) {
   1473c:	2800      	cmp	r0, #0
   1473e:	db05      	blt.n	1474c <api_blocking_start+0x30>
   14740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14744:	2300      	movs	r3, #0
   14746:	4668      	mov	r0, sp
   14748:	f003 f860 	bl	1780c <z_impl_k_sem_take>
}
   1474c:	b007      	add	sp, #28
   1474e:	f85d fb04 	ldr.w	pc, [sp], #4
   14752:	bf00      	nop
   14754:	0001c715 	.word	0x0001c715

00014758 <generic_hfclk_stop>:
{
   14758:	b510      	push	{r4, lr}
	__asm__ volatile(
   1475a:	f04f 0320 	mov.w	r3, #32
   1475e:	f3ef 8411 	mrs	r4, BASEPRI
   14762:	f383 8812 	msr	BASEPRI_MAX, r3
   14766:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1476a:	4a07      	ldr	r2, [pc, #28]	; (14788 <generic_hfclk_stop+0x30>)
   1476c:	6813      	ldr	r3, [r2, #0]
   1476e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   14772:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   14774:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   14776:	d402      	bmi.n	1477e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14778:	2001      	movs	r0, #1
   1477a:	f008 f93a 	bl	1c9f2 <nrfx_clock_stop>
	__asm__ volatile(
   1477e:	f384 8811 	msr	BASEPRI, r4
   14782:	f3bf 8f6f 	isb	sy
}
   14786:	bd10      	pop	{r4, pc}
   14788:	20009adc 	.word	0x20009adc

0001478c <z_nrf_clock_control_lf_on>:
{
   1478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14790:	2201      	movs	r2, #1
   14792:	4607      	mov	r7, r0
   14794:	4935      	ldr	r1, [pc, #212]	; (1486c <z_nrf_clock_control_lf_on+0xe0>)
   14796:	e8d1 3fef 	ldaex	r3, [r1]
   1479a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1479e:	2800      	cmp	r0, #0
   147a0:	d1f9      	bne.n	14796 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   147a2:	b933      	cbnz	r3, 147b2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   147a4:	4932      	ldr	r1, [pc, #200]	; (14870 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   147a6:	4833      	ldr	r0, [pc, #204]	; (14874 <z_nrf_clock_control_lf_on+0xe8>)
   147a8:	604b      	str	r3, [r1, #4]
   147aa:	60cb      	str	r3, [r1, #12]
   147ac:	608a      	str	r2, [r1, #8]
   147ae:	f004 fb23 	bl	18df8 <onoff_request>
	switch (start_mode) {
   147b2:	1e7b      	subs	r3, r7, #1
   147b4:	2b01      	cmp	r3, #1
   147b6:	d828      	bhi.n	1480a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   147b8:	2f01      	cmp	r7, #1
   147ba:	d106      	bne.n	147ca <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   147bc:	4b2e      	ldr	r3, [pc, #184]	; (14878 <z_nrf_clock_control_lf_on+0xec>)
   147be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   147c2:	f003 0303 	and.w	r3, r3, #3
   147c6:	2b02      	cmp	r3, #2
   147c8:	d01f      	beq.n	1480a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   147ca:	f008 ffb2 	bl	1d732 <k_is_in_isr>
   147ce:	4605      	mov	r5, r0
   147d0:	b9e8      	cbnz	r0, 1480e <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   147d2:	4b2a      	ldr	r3, [pc, #168]	; (1487c <z_nrf_clock_control_lf_on+0xf0>)
   147d4:	781b      	ldrb	r3, [r3, #0]
   147d6:	b1d3      	cbz	r3, 1480e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   147d8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   147da:	4606      	mov	r6, r0
   147dc:	4b26      	ldr	r3, [pc, #152]	; (14878 <z_nrf_clock_control_lf_on+0xec>)
   147de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   147e2:	4c25      	ldr	r4, [pc, #148]	; (14878 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   147e4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 14880 <z_nrf_clock_control_lf_on+0xf4>
   147e8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   147ec:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   147f0:	03d2      	lsls	r2, r2, #15
   147f2:	d516      	bpl.n	14822 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   147f4:	f003 0303 	and.w	r3, r3, #3
   147f8:	2b02      	cmp	r3, #2
   147fa:	d001      	beq.n	14800 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   147fc:	2f01      	cmp	r7, #1
   147fe:	d110      	bne.n	14822 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   14800:	b375      	cbz	r5, 14860 <z_nrf_clock_control_lf_on+0xd4>
   14802:	f386 8811 	msr	BASEPRI, r6
   14806:	f3bf 8f6f 	isb	sy
}
   1480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1480e:	f04f 0320 	mov.w	r3, #32
   14812:	f3ef 8611 	mrs	r6, BASEPRI
   14816:	f383 8812 	msr	BASEPRI_MAX, r3
   1481a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1481e:	2501      	movs	r5, #1
   14820:	e7df      	b.n	147e2 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14822:	b1c5      	cbz	r5, 14856 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14824:	4630      	mov	r0, r6
   14826:	f7f7 f8f1 	bl	ba0c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1482a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1482e:	b2db      	uxtb	r3, r3
   14830:	2b01      	cmp	r3, #1
   14832:	d1d9      	bne.n	147e8 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14834:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   14838:	2a00      	cmp	r2, #0
   1483a:	d0d5      	beq.n	147e8 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1483c:	2200      	movs	r2, #0
   1483e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   14842:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   14846:	2202      	movs	r2, #2
   14848:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1484c:	2220      	movs	r2, #32
   1484e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14852:	60a3      	str	r3, [r4, #8]
}
   14854:	e7c8      	b.n	147e8 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   14856:	2100      	movs	r1, #0
   14858:	2021      	movs	r0, #33	; 0x21
   1485a:	f003 fccf 	bl	181fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1485e:	e7e4      	b.n	1482a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   14860:	2202      	movs	r2, #2
   14862:	4b05      	ldr	r3, [pc, #20]	; (14878 <z_nrf_clock_control_lf_on+0xec>)
   14864:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14868:	e7cf      	b.n	1480a <z_nrf_clock_control_lf_on+0x7e>
   1486a:	bf00      	nop
   1486c:	20009a38 	.word	0x20009a38
   14870:	20009a28 	.word	0x20009a28
   14874:	20009a58 	.word	0x20009a58
   14878:	40005000 	.word	0x40005000
   1487c:	20009d45 	.word	0x20009d45
   14880:	e000e100 	.word	0xe000e100

00014884 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   14884:	b508      	push	{r3, lr}
   14886:	4807      	ldr	r0, [pc, #28]	; (148a4 <uart_console_init+0x20>)
   14888:	f008 fe93 	bl	1d5b2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1488c:	b138      	cbz	r0, 1489e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1488e:	4806      	ldr	r0, [pc, #24]	; (148a8 <uart_console_init+0x24>)
   14890:	f7f7 ffb8 	bl	c804 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14894:	4804      	ldr	r0, [pc, #16]	; (148a8 <uart_console_init+0x24>)
   14896:	f7f4 fec5 	bl	9624 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1489a:	2000      	movs	r0, #0
}
   1489c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1489e:	f06f 0012 	mvn.w	r0, #18
   148a2:	e7fb      	b.n	1489c <uart_console_init+0x18>
   148a4:	0001e224 	.word	0x0001e224
   148a8:	000148ad 	.word	0x000148ad

000148ac <console_out>:
	if ('\n' == c) {
   148ac:	280a      	cmp	r0, #10
{
   148ae:	b538      	push	{r3, r4, r5, lr}
   148b0:	4604      	mov	r4, r0
   148b2:	4d07      	ldr	r5, [pc, #28]	; (148d0 <console_out+0x24>)
	if ('\n' == c) {
   148b4:	d104      	bne.n	148c0 <console_out+0x14>
   148b6:	68ab      	ldr	r3, [r5, #8]
   148b8:	210d      	movs	r1, #13
   148ba:	4628      	mov	r0, r5
   148bc:	685b      	ldr	r3, [r3, #4]
   148be:	4798      	blx	r3
   148c0:	68ab      	ldr	r3, [r5, #8]
   148c2:	4803      	ldr	r0, [pc, #12]	; (148d0 <console_out+0x24>)
   148c4:	685b      	ldr	r3, [r3, #4]
   148c6:	b2e1      	uxtb	r1, r4
   148c8:	4798      	blx	r3
}
   148ca:	4620      	mov	r0, r4
   148cc:	bd38      	pop	{r3, r4, r5, pc}
   148ce:	bf00      	nop
   148d0:	0001e224 	.word	0x0001e224

000148d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   148d4:	b530      	push	{r4, r5, lr}
	return port->config;
   148d6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   148d8:	f001 041f 	and.w	r4, r1, #31
   148dc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   148de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   148e2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   148e4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   148e8:	d105      	bne.n	148f6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   148ea:	4620      	mov	r0, r4
   148ec:	f001 fe6a 	bl	165c4 <nrfx_gpiote_trigger_disable>

		return 0;
   148f0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   148f2:	b005      	add	sp, #20
   148f4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   148f6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   148f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   148fc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   14900:	d114      	bne.n	1492c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   14902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   14906:	bf0c      	ite	eq
   14908:	2304      	moveq	r3, #4
   1490a:	2305      	movne	r3, #5
   1490c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14910:	2300      	movs	r3, #0
   14912:	4620      	mov	r0, r4
   14914:	4619      	mov	r1, r3
   14916:	aa02      	add	r2, sp, #8
   14918:	f001 fc92 	bl	16240 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1491c:	4b1f      	ldr	r3, [pc, #124]	; (1499c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1491e:	4298      	cmp	r0, r3
   14920:	d138      	bne.n	14994 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   14922:	2101      	movs	r1, #1
   14924:	4620      	mov	r0, r4
   14926:	f001 fe07 	bl	16538 <nrfx_gpiote_trigger_enable>
	return 0;
   1492a:	e7e1      	b.n	148f0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1492c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   14930:	d025      	beq.n	1497e <gpio_nrfx_pin_interrupt_configure+0xaa>
   14932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   14936:	bf14      	ite	ne
   14938:	2301      	movne	r3, #1
   1493a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1493c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14940:	6883      	ldr	r3, [r0, #8]
   14942:	40cb      	lsrs	r3, r1
   14944:	07d9      	lsls	r1, r3, #31
   14946:	d4e3      	bmi.n	14910 <gpio_nrfx_pin_interrupt_configure+0x3c>
   14948:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1494c:	d1e0      	bne.n	14910 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   1494e:	4a14      	ldr	r2, [pc, #80]	; (149a0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   14950:	4814      	ldr	r0, [pc, #80]	; (149a4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   14952:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   14954:	2901      	cmp	r1, #1
   14956:	bf08      	it	eq
   14958:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   1495a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1495e:	3380      	adds	r3, #128	; 0x80
   14960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   14964:	07db      	lsls	r3, r3, #31
   14966:	d4d3      	bmi.n	14910 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14968:	f10d 0507 	add.w	r5, sp, #7
   1496c:	4629      	mov	r1, r5
   1496e:	4620      	mov	r0, r4
   14970:	f001 fd8e 	bl	16490 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   14974:	4b0c      	ldr	r3, [pc, #48]	; (149a8 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   14976:	4298      	cmp	r0, r3
   14978:	d003      	beq.n	14982 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   1497a:	9503      	str	r5, [sp, #12]
   1497c:	e7c8      	b.n	14910 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1497e:	2303      	movs	r3, #3
   14980:	e7dc      	b.n	1493c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   14982:	4628      	mov	r0, r5
   14984:	f001 fdd2 	bl	1652c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   14988:	4b04      	ldr	r3, [pc, #16]	; (1499c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1498a:	4298      	cmp	r0, r3
   1498c:	d0f5      	beq.n	1497a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   1498e:	f06f 000b 	mvn.w	r0, #11
   14992:	e7ae      	b.n	148f2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   14994:	f06f 0015 	mvn.w	r0, #21
   14998:	e7ab      	b.n	148f2 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1499a:	bf00      	nop
   1499c:	0bad0000 	.word	0x0bad0000
   149a0:	40842500 	.word	0x40842500
   149a4:	40842800 	.word	0x40842800
   149a8:	0bad0004 	.word	0x0bad0004

000149ac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   149ac:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   149ae:	f001 fdad 	bl	1650c <nrfx_gpiote_is_init>
   149b2:	4604      	mov	r4, r0
   149b4:	b968      	cbnz	r0, 149d2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   149b6:	f001 fd81 	bl	164bc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   149ba:	4b08      	ldr	r3, [pc, #32]	; (149dc <gpio_nrfx_init+0x30>)
   149bc:	4298      	cmp	r0, r3
   149be:	d10a      	bne.n	149d6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   149c0:	4621      	mov	r1, r4
   149c2:	4807      	ldr	r0, [pc, #28]	; (149e0 <gpio_nrfx_init+0x34>)
   149c4:	f001 fd5e 	bl	16484 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   149c8:	4622      	mov	r2, r4
   149ca:	2105      	movs	r1, #5
   149cc:	202f      	movs	r0, #47	; 0x2f
   149ce:	f7f7 f8c5 	bl	bb5c <z_arm_irq_priority_set>
		return 0;
   149d2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   149d4:	bd10      	pop	{r4, pc}
		return -EIO;
   149d6:	f06f 0004 	mvn.w	r0, #4
   149da:	e7fb      	b.n	149d4 <gpio_nrfx_init+0x28>
   149dc:	0bad0000 	.word	0x0bad0000
   149e0:	000149e5 	.word	0x000149e5

000149e4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   149e4:	0942      	lsrs	r2, r0, #5
{
   149e6:	4603      	mov	r3, r0
   149e8:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   149ea:	d002      	beq.n	149f2 <nrfx_gpio_handler+0xe>
   149ec:	2a01      	cmp	r2, #1
   149ee:	d017      	beq.n	14a20 <nrfx_gpio_handler+0x3c>
}
   149f0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   149f2:	4e0d      	ldr	r6, [pc, #52]	; (14a28 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   149f4:	6932      	ldr	r2, [r6, #16]
   149f6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   149f8:	2900      	cmp	r1, #0
   149fa:	d0f9      	beq.n	149f0 <nrfx_gpio_handler+0xc>
   149fc:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   149fe:	f003 031f 	and.w	r3, r3, #31
   14a02:	680c      	ldr	r4, [r1, #0]
   14a04:	409d      	lsls	r5, r3
   14a06:	2900      	cmp	r1, #0
   14a08:	d0f2      	beq.n	149f0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   14a0a:	688a      	ldr	r2, [r1, #8]
   14a0c:	402a      	ands	r2, r5
   14a0e:	d002      	beq.n	14a16 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14a10:	4630      	mov	r0, r6
   14a12:	684b      	ldr	r3, [r1, #4]
   14a14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14a16:	b12c      	cbz	r4, 14a24 <nrfx_gpio_handler+0x40>
   14a18:	6823      	ldr	r3, [r4, #0]
   14a1a:	4621      	mov	r1, r4
   14a1c:	461c      	mov	r4, r3
   14a1e:	e7f2      	b.n	14a06 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14a20:	4e02      	ldr	r6, [pc, #8]	; (14a2c <nrfx_gpio_handler+0x48>)
   14a22:	e7e7      	b.n	149f4 <nrfx_gpio_handler+0x10>
   14a24:	4623      	mov	r3, r4
   14a26:	e7f8      	b.n	14a1a <nrfx_gpio_handler+0x36>
   14a28:	0001e1dc 	.word	0x0001e1dc
   14a2c:	0001e1c4 	.word	0x0001e1c4

00014a30 <gpio_nrfx_pin_configure>:
{
   14a30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   14a34:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14a36:	f001 051f 	and.w	r5, r1, #31
   14a3a:	7b3b      	ldrb	r3, [r7, #12]
{
   14a3c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14a3e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   14a42:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14a44:	4628      	mov	r0, r5
   14a46:	f10d 0103 	add.w	r1, sp, #3
   14a4a:	f001 fd21 	bl	16490 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   14a4e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14a52:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   14a54:	d10b      	bne.n	14a6e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   14a56:	4628      	mov	r0, r5
   14a58:	f001 fddc 	bl	16614 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   14a5c:	4b3c      	ldr	r3, [pc, #240]	; (14b50 <gpio_nrfx_pin_configure+0x120>)
   14a5e:	4598      	cmp	r8, r3
   14a60:	d103      	bne.n	14a6a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   14a62:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14a66:	f001 fd5b 	bl	16520 <nrfx_gpiote_channel_free>
		return 0;
   14a6a:	2000      	movs	r0, #0
   14a6c:	e00c      	b.n	14a88 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14a6e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14a70:	4628      	mov	r0, r5
   14a72:	4619      	mov	r1, r3
   14a74:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   14a76:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14a7a:	f001 fbe1 	bl	16240 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14a7e:	4b34      	ldr	r3, [pc, #208]	; (14b50 <gpio_nrfx_pin_configure+0x120>)
   14a80:	4298      	cmp	r0, r3
   14a82:	d004      	beq.n	14a8e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   14a84:	f06f 0015 	mvn.w	r0, #21
}
   14a88:	b004      	add	sp, #16
   14a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   14a8e:	4580      	cmp	r8, r0
   14a90:	d103      	bne.n	14a9a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   14a92:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14a96:	f001 fd43 	bl	16520 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   14a9a:	03a3      	lsls	r3, r4, #14
   14a9c:	d549      	bpl.n	14b32 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14a9e:	f240 3306 	movw	r3, #774	; 0x306
   14aa2:	4023      	ands	r3, r4
   14aa4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   14aa8:	d019      	beq.n	14ade <gpio_nrfx_pin_configure+0xae>
   14aaa:	d80c      	bhi.n	14ac6 <gpio_nrfx_pin_configure+0x96>
   14aac:	2b06      	cmp	r3, #6
   14aae:	d017      	beq.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
   14ab0:	d804      	bhi.n	14abc <gpio_nrfx_pin_configure+0x8c>
   14ab2:	b1ab      	cbz	r3, 14ae0 <gpio_nrfx_pin_configure+0xb0>
   14ab4:	2b02      	cmp	r3, #2
   14ab6:	d1e5      	bne.n	14a84 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   14ab8:	2304      	movs	r3, #4
   14aba:	e011      	b.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14ac0:	d1e0      	bne.n	14a84 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   14ac2:	2301      	movs	r3, #1
   14ac4:	e00c      	b.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14ac6:	f240 2202 	movw	r2, #514	; 0x202
   14aca:	4293      	cmp	r3, r2
   14acc:	d026      	beq.n	14b1c <gpio_nrfx_pin_configure+0xec>
   14ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   14ad2:	d025      	beq.n	14b20 <gpio_nrfx_pin_configure+0xf0>
   14ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14ad8:	d1d4      	bne.n	14a84 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   14ada:	2302      	movs	r3, #2
   14adc:	e000      	b.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   14ade:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   14ae0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   14ae4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   14ae8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   14aec:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   14aee:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   14af2:	bf4c      	ite	mi
   14af4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   14af6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   14afa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   14afc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   14b00:	d510      	bpl.n	14b24 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   14b02:	2301      	movs	r3, #1
   14b04:	687a      	ldr	r2, [r7, #4]
   14b06:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   14b08:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   14b0a:	2200      	movs	r2, #0
   14b0c:	4628      	mov	r0, r5
   14b0e:	a901      	add	r1, sp, #4
   14b10:	f001 fc44 	bl	1639c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   14b14:	4b0e      	ldr	r3, [pc, #56]	; (14b50 <gpio_nrfx_pin_configure+0x120>)
   14b16:	4298      	cmp	r0, r3
   14b18:	d0a7      	beq.n	14a6a <gpio_nrfx_pin_configure+0x3a>
   14b1a:	e7b3      	b.n	14a84 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   14b1c:	2305      	movs	r3, #5
   14b1e:	e7df      	b.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14b20:	2303      	movs	r3, #3
   14b22:	e7dd      	b.n	14ae0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   14b24:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   14b26:	bf41      	itttt	mi
   14b28:	2301      	movmi	r3, #1
   14b2a:	687a      	ldrmi	r2, [r7, #4]
   14b2c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   14b2e:	60d3      	strmi	r3, [r2, #12]
}
   14b30:	e7eb      	b.n	14b0a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   14b32:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14b34:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   14b38:	bf4c      	ite	mi
   14b3a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   14b3c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14b40:	461a      	mov	r2, r3
   14b42:	4628      	mov	r0, r5
   14b44:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   14b46:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14b4a:	f001 fb79 	bl	16240 <nrfx_gpiote_input_configure>
   14b4e:	e7e1      	b.n	14b14 <gpio_nrfx_pin_configure+0xe4>
   14b50:	0bad0000 	.word	0x0bad0000

00014b54 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   14b54:	b510      	push	{r4, lr}
   14b56:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   14b58:	6902      	ldr	r2, [r0, #16]
{
   14b5a:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   14b5c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   14b60:	4925      	ldr	r1, [pc, #148]	; (14bf8 <mbox_nrf_init+0xa4>)
   14b62:	2000      	movs	r0, #0
   14b64:	f001 fe56 	bl	16814 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b68:	2200      	movs	r2, #0
   14b6a:	2101      	movs	r1, #1
   14b6c:	202a      	movs	r0, #42	; 0x2a
   14b6e:	f7f6 fff5 	bl	bb5c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   14b72:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   14b74:	2284      	movs	r2, #132	; 0x84
   14b76:	2100      	movs	r1, #0
   14b78:	a807      	add	r0, sp, #28
   14b7a:	f005 fc03 	bl	1a384 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   14b7e:	6863      	ldr	r3, [r4, #4]
   14b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   14b84:	d30a      	bcc.n	14b9c <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   14b86:	4b1d      	ldr	r3, [pc, #116]	; (14bfc <mbox_nrf_init+0xa8>)
   14b88:	9305      	str	r3, [sp, #20]
   14b8a:	2302      	movs	r3, #2
   14b8c:	9304      	str	r3, [sp, #16]
   14b8e:	2300      	movs	r3, #0
   14b90:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14b94:	481a      	ldr	r0, [pc, #104]	; (14c00 <mbox_nrf_init+0xac>)
   14b96:	aa04      	add	r2, sp, #16
   14b98:	f7f6 f98c 	bl	aeb4 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   14b9c:	6823      	ldr	r3, [r4, #0]
   14b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   14ba2:	d30a      	bcc.n	14bba <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   14ba4:	4b17      	ldr	r3, [pc, #92]	; (14c04 <mbox_nrf_init+0xb0>)
   14ba6:	9305      	str	r3, [sp, #20]
   14ba8:	2302      	movs	r3, #2
   14baa:	9304      	str	r3, [sp, #16]
   14bac:	2300      	movs	r3, #0
   14bae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14bb2:	4813      	ldr	r0, [pc, #76]	; (14c00 <mbox_nrf_init+0xac>)
   14bb4:	aa04      	add	r2, sp, #16
   14bb6:	f7f6 f97d 	bl	aeb4 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   14bba:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   14bbc:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   14bbe:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14bc0:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   14bc2:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14bc4:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   14bc6:	40d9      	lsrs	r1, r3
   14bc8:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   14bca:	bf44      	itt	mi
   14bcc:	fa00 f103 	lslmi.w	r1, r0, r3
   14bd0:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   14bd4:	6821      	ldr	r1, [r4, #0]
   14bd6:	40d9      	lsrs	r1, r3
   14bd8:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   14bda:	bf48      	it	mi
   14bdc:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14be0:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   14be4:	bf48      	it	mi
   14be6:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14be8:	2b10      	cmp	r3, #16
   14bea:	d1ea      	bne.n	14bc2 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   14bec:	a807      	add	r0, sp, #28
   14bee:	f001 fe29 	bl	16844 <nrfx_ipc_config_load>

	return 0;
}
   14bf2:	2000      	movs	r0, #0
   14bf4:	b028      	add	sp, #160	; 0xa0
   14bf6:	bd10      	pop	{r4, pc}
   14bf8:	00014cfd 	.word	0x00014cfd
   14bfc:	000214d2 	.word	0x000214d2
   14c00:	0001e5e4 	.word	0x0001e5e4
   14c04:	000214fe 	.word	0x000214fe

00014c08 <mbox_nrf_set_enabled>:
{
   14c08:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14c0a:	290f      	cmp	r1, #15
{
   14c0c:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   14c0e:	6905      	ldr	r5, [r0, #16]
{
   14c10:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14c12:	d842      	bhi.n	14c9a <mbox_nrf_set_enabled+0x92>
   14c14:	6843      	ldr	r3, [r0, #4]
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	40cb      	lsrs	r3, r1
   14c1a:	07db      	lsls	r3, r3, #31
   14c1c:	d53d      	bpl.n	14c9a <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   14c1e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c22:	40cb      	lsrs	r3, r1
   14c24:	f003 0301 	and.w	r3, r3, #1
   14c28:	b91a      	cbnz	r2, 14c32 <mbox_nrf_set_enabled+0x2a>
   14c2a:	bb13      	cbnz	r3, 14c72 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   14c2c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14c30:	e031      	b.n	14c96 <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   14c32:	2b00      	cmp	r3, #0
   14c34:	d1fa      	bne.n	14c2c <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   14c36:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   14c3a:	b94b      	cbnz	r3, 14c50 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   14c3c:	4a18      	ldr	r2, [pc, #96]	; (14ca0 <mbox_nrf_set_enabled+0x98>)
   14c3e:	9205      	str	r2, [sp, #20]
   14c40:	2202      	movs	r2, #2
   14c42:	9204      	str	r2, [sp, #16]
   14c44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14c48:	4816      	ldr	r0, [pc, #88]	; (14ca4 <mbox_nrf_set_enabled+0x9c>)
   14c4a:	aa04      	add	r2, sp, #16
   14c4c:	f7f6 f932 	bl	aeb4 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   14c50:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c54:	b913      	cbnz	r3, 14c5c <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   14c56:	202a      	movs	r0, #42	; 0x2a
   14c58:	f7f6 ff50 	bl	bafc <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   14c5c:	2201      	movs	r2, #1
   14c5e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c62:	40a2      	lsls	r2, r4
   14c64:	4313      	orrs	r3, r2
   14c66:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   14c6a:	b2e0      	uxtb	r0, r4
   14c6c:	f001 fe0a 	bl	16884 <nrfx_ipc_receive_event_enable>
   14c70:	e00a      	b.n	14c88 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   14c72:	b2c8      	uxtb	r0, r1
   14c74:	f001 fe0e 	bl	16894 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   14c78:	2201      	movs	r2, #1
   14c7a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c7e:	40a2      	lsls	r2, r4
   14c80:	ea23 0302 	bic.w	r3, r3, r2
   14c84:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   14c88:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c8c:	b913      	cbnz	r3, 14c94 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   14c8e:	202a      	movs	r0, #42	; 0x2a
   14c90:	f7f6 ff42 	bl	bb18 <arch_irq_disable>
	return 0;
   14c94:	2000      	movs	r0, #0
}
   14c96:	b007      	add	sp, #28
   14c98:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14c9a:	f06f 0015 	mvn.w	r0, #21
   14c9e:	e7fa      	b.n	14c96 <mbox_nrf_set_enabled+0x8e>
   14ca0:	0002152a 	.word	0x0002152a
   14ca4:	0001e5e4 	.word	0x0001e5e4

00014ca8 <mbox_nrf_send>:
{
   14ca8:	b530      	push	{r4, r5, lr}
   14caa:	4605      	mov	r5, r0
   14cac:	460c      	mov	r4, r1
   14cae:	b087      	sub	sp, #28
	if (msg) {
   14cb0:	b152      	cbz	r2, 14cc8 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   14cb2:	4b10      	ldr	r3, [pc, #64]	; (14cf4 <mbox_nrf_send+0x4c>)
   14cb4:	9305      	str	r3, [sp, #20]
   14cb6:	2302      	movs	r3, #2
   14cb8:	9304      	str	r3, [sp, #16]
   14cba:	2300      	movs	r3, #0
   14cbc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14cc0:	480d      	ldr	r0, [pc, #52]	; (14cf8 <mbox_nrf_send+0x50>)
   14cc2:	aa04      	add	r2, sp, #16
   14cc4:	f7f6 f8f6 	bl	aeb4 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   14cc8:	2c0f      	cmp	r4, #15
   14cca:	d80f      	bhi.n	14cec <mbox_nrf_send+0x44>
   14ccc:	686b      	ldr	r3, [r5, #4]
   14cce:	685b      	ldr	r3, [r3, #4]
   14cd0:	40e3      	lsrs	r3, r4
   14cd2:	07db      	lsls	r3, r3, #31
   14cd4:	d50a      	bpl.n	14cec <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cd6:	2301      	movs	r3, #1
	return 0;
   14cd8:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   14cda:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cdc:	b2e4      	uxtb	r4, r4
   14cde:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   14ce2:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   14ce6:	6023      	str	r3, [r4, #0]
}
   14ce8:	b007      	add	sp, #28
   14cea:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14cec:	f06f 0015 	mvn.w	r0, #21
   14cf0:	e7fa      	b.n	14ce8 <mbox_nrf_send+0x40>
   14cf2:	bf00      	nop
   14cf4:	0002155a 	.word	0x0002155a
   14cf8:	0001e5e4 	.word	0x0001e5e4

00014cfc <mbox_dispatcher>:
{
   14cfc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   14cfe:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14d02:	280f      	cmp	r0, #15
{
   14d04:	4604      	mov	r4, r0
   14d06:	460d      	mov	r5, r1
   14d08:	6873      	ldr	r3, [r6, #4]
   14d0a:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14d0c:	d803      	bhi.n	14d16 <mbox_dispatcher+0x1a>
   14d0e:	681b      	ldr	r3, [r3, #0]
   14d10:	40c3      	lsrs	r3, r0
   14d12:	07db      	lsls	r3, r3, #31
   14d14:	d40a      	bmi.n	14d2c <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   14d16:	4b15      	ldr	r3, [pc, #84]	; (14d6c <mbox_dispatcher+0x70>)
   14d18:	9305      	str	r3, [sp, #20]
   14d1a:	2302      	movs	r3, #2
   14d1c:	9304      	str	r3, [sp, #16]
   14d1e:	2300      	movs	r3, #0
   14d20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14d24:	4812      	ldr	r0, [pc, #72]	; (14d70 <mbox_dispatcher+0x74>)
   14d26:	aa04      	add	r2, sp, #16
   14d28:	f7f6 f8c4 	bl	aeb4 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   14d2c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14d30:	40e3      	lsrs	r3, r4
   14d32:	f013 0301 	ands.w	r3, r3, #1
   14d36:	d109      	bne.n	14d4c <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   14d38:	4a0e      	ldr	r2, [pc, #56]	; (14d74 <mbox_dispatcher+0x78>)
   14d3a:	9205      	str	r2, [sp, #20]
   14d3c:	2202      	movs	r2, #2
   14d3e:	9204      	str	r2, [sp, #16]
   14d40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14d44:	480a      	ldr	r0, [pc, #40]	; (14d70 <mbox_dispatcher+0x74>)
   14d46:	aa04      	add	r2, sp, #16
   14d48:	f7f6 f8b4 	bl	aeb4 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   14d4c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   14d50:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   14d54:	b145      	cbz	r5, 14d68 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   14d56:	2300      	movs	r3, #0
   14d58:	4621      	mov	r1, r4
   14d5a:	4630      	mov	r0, r6
   14d5c:	46ac      	mov	ip, r5
   14d5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   14d60:	b006      	add	sp, #24
   14d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   14d66:	4760      	bx	ip
}
   14d68:	b006      	add	sp, #24
   14d6a:	bd70      	pop	{r4, r5, r6, pc}
   14d6c:	00021575 	.word	0x00021575
   14d70:	0001e5e4 	.word	0x0001e5e4
   14d74:	00021591 	.word	0x00021591

00014d78 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14d78:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   14d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   14d80:	4e5b      	ldr	r6, [pc, #364]	; (14ef0 <pinctrl_configure_pins+0x178>)
   14d82:	4f5c      	ldr	r7, [pc, #368]	; (14ef4 <pinctrl_configure_pins+0x17c>)
   14d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   14d88:	4281      	cmp	r1, r0
   14d8a:	d102      	bne.n	14d92 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   14d8c:	2000      	movs	r0, #0
}
   14d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   14d92:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   14d94:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   14d98:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   14d9c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   14d9e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   14da2:	bf08      	it	eq
   14da4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   14da8:	2c22      	cmp	r4, #34	; 0x22
   14daa:	f200 809d 	bhi.w	14ee8 <pinctrl_configure_pins+0x170>
   14dae:	e8df f004 	tbb	[pc, r4]
   14db2:	2312      	.short	0x2312
   14db4:	3e2b4228 	.word	0x3e2b4228
   14db8:	9b9b9b42 	.word	0x9b9b9b42
   14dbc:	9b72459b 	.word	0x9b72459b
   14dc0:	9b9b9b9b 	.word	0x9b9b9b9b
   14dc4:	9b9b9b9b 	.word	0x9b9b9b9b
   14dc8:	83807d75 	.word	0x83807d75
   14dcc:	869b9b9b 	.word	0x869b9b9b
   14dd0:	95928f8c 	.word	0x95928f8c
   14dd4:	98          	.byte	0x98
   14dd5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   14dd6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   14dda:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   14dde:	f1b8 0f01 	cmp.w	r8, #1
   14de2:	bf14      	ite	ne
   14de4:	46b6      	movne	lr, r6
   14de6:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   14de8:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14dec:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   14df0:	f8ce 4008 	str.w	r4, [lr, #8]
   14df4:	2401      	movs	r4, #1
   14df6:	e002      	b.n	14dfe <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   14df8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   14dfc:	2400      	movs	r4, #0
   14dfe:	46a6      	mov	lr, r4
   14e00:	e023      	b.n	14e4a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   14e02:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   14e06:	e7e8      	b.n	14dda <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   14e08:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   14e0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   14e0e:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   14e12:	f1b9 0f01 	cmp.w	r9, #1
   14e16:	bf14      	ite	ne
   14e18:	46b0      	movne	r8, r6
   14e1a:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   14e1c:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14e20:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   14e24:	f8c8 e00c 	str.w	lr, [r8, #12]
   14e28:	f04f 0e01 	mov.w	lr, #1
   14e2c:	e00d      	b.n	14e4a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   14e2e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   14e32:	2401      	movs	r4, #1
   14e34:	e7eb      	b.n	14e0e <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   14e36:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   14e3a:	e7df      	b.n	14dfc <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   14e3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   14e40:	2d00      	cmp	r5, #0
   14e42:	d1db      	bne.n	14dfc <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   14e44:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   14e46:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   14e48:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   14e4a:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   14e4e:	f003 091f 	and.w	r9, r3, #31
   14e52:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   14e56:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   14e5a:	ea4f 1353 	mov.w	r3, r3, lsr #5
   14e5e:	bf1c      	itt	ne
   14e60:	2401      	movne	r4, #1
   14e62:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   14e66:	2b01      	cmp	r3, #1
   14e68:	bf0c      	ite	eq
   14e6a:	46b8      	moveq	r8, r7
   14e6c:	46b0      	movne	r8, r6
   14e6e:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   14e72:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   14e76:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   14e7a:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   14e7e:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   14e80:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   14e84:	ea43 030e 	orr.w	r3, r3, lr
   14e88:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   14e8c:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   14e90:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   14e94:	e778      	b.n	14d88 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   14e96:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   14e9a:	e7d1      	b.n	14e40 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   14e9c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   14ea0:	6804      	ldr	r4, [r0, #0]
   14ea2:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   14ea6:	2c00      	cmp	r4, #0
   14ea8:	d0c3      	beq.n	14e32 <pinctrl_configure_pins+0xba>
   14eaa:	e796      	b.n	14dda <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   14eac:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   14eb0:	e7f6      	b.n	14ea0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   14eb2:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   14eb6:	e7f3      	b.n	14ea0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   14eb8:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   14ebc:	e7f0      	b.n	14ea0 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   14ebe:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   14ec2:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   14ec4:	f04f 0e00 	mov.w	lr, #0
   14ec8:	e7bf      	b.n	14e4a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   14eca:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   14ece:	e784      	b.n	14dda <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   14ed0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   14ed4:	e7f5      	b.n	14ec2 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   14ed6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   14eda:	e7f2      	b.n	14ec2 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   14edc:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   14ee0:	e7ef      	b.n	14ec2 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   14ee2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   14ee6:	e7ec      	b.n	14ec2 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
   14ee8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14eec:	e74f      	b.n	14d8e <pinctrl_configure_pins+0x16>
   14eee:	bf00      	nop
   14ef0:	40842500 	.word	0x40842500
   14ef4:	40842800 	.word	0x40842800

00014ef8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14efa:	794b      	ldrb	r3, [r1, #5]
   14efc:	2b01      	cmp	r3, #1
   14efe:	d029      	beq.n	14f54 <uarte_nrfx_configure+0x5c>
   14f00:	2b03      	cmp	r3, #3
   14f02:	d124      	bne.n	14f4e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14f04:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14f06:	798b      	ldrb	r3, [r1, #6]
   14f08:	2b03      	cmp	r3, #3
   14f0a:	d120      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14f0c:	79ce      	ldrb	r6, [r1, #7]
   14f0e:	b10e      	cbz	r6, 14f14 <uarte_nrfx_configure+0x1c>
   14f10:	2e01      	cmp	r6, #1
   14f12:	d11c      	bne.n	14f4e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14f14:	790a      	ldrb	r2, [r1, #4]
   14f16:	2a01      	cmp	r2, #1
   14f18:	d01e      	beq.n	14f58 <uarte_nrfx_configure+0x60>
   14f1a:	2a02      	cmp	r2, #2
   14f1c:	d020      	beq.n	14f60 <uarte_nrfx_configure+0x68>
   14f1e:	b9b2      	cbnz	r2, 14f4e <uarte_nrfx_configure+0x56>
   14f20:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14f22:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14f24:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14f26:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14f2a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   14f2e:	d06e      	beq.n	1500e <uarte_nrfx_configure+0x116>
   14f30:	d833      	bhi.n	14f9a <uarte_nrfx_configure+0xa2>
   14f32:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f36:	d06d      	beq.n	15014 <uarte_nrfx_configure+0x11c>
   14f38:	d81c      	bhi.n	14f74 <uarte_nrfx_configure+0x7c>
   14f3a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14f3e:	d06b      	beq.n	15018 <uarte_nrfx_configure+0x120>
   14f40:	d810      	bhi.n	14f64 <uarte_nrfx_configure+0x6c>
   14f42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14f46:	d06a      	beq.n	1501e <uarte_nrfx_configure+0x126>
   14f48:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14f4c:	d06a      	beq.n	15024 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   14f4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14f52:	e05b      	b.n	1500c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   14f54:	2700      	movs	r7, #0
   14f56:	e7d6      	b.n	14f06 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   14f58:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14f5c:	220e      	movs	r2, #14
   14f5e:	e7e0      	b.n	14f22 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   14f60:	2400      	movs	r4, #0
   14f62:	e7fb      	b.n	14f5c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   14f64:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14f68:	d05f      	beq.n	1502a <uarte_nrfx_configure+0x132>
   14f6a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14f6e:	d1ee      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14f70:	4b38      	ldr	r3, [pc, #224]	; (15054 <uarte_nrfx_configure+0x15c>)
   14f72:	e03c      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14f74:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14f78:	d05a      	beq.n	15030 <uarte_nrfx_configure+0x138>
   14f7a:	d807      	bhi.n	14f8c <uarte_nrfx_configure+0x94>
   14f7c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14f80:	d058      	beq.n	15034 <uarte_nrfx_configure+0x13c>
   14f82:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14f86:	d1e2      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14f88:	4b33      	ldr	r3, [pc, #204]	; (15058 <uarte_nrfx_configure+0x160>)
   14f8a:	e030      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14f8c:	f647 2512 	movw	r5, #31250	; 0x7a12
   14f90:	42ab      	cmp	r3, r5
   14f92:	d1dc      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14f94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14f98:	e029      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14f9a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14f9e:	d04b      	beq.n	15038 <uarte_nrfx_configure+0x140>
   14fa0:	d813      	bhi.n	14fca <uarte_nrfx_configure+0xd2>
   14fa2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14fa6:	d04a      	beq.n	1503e <uarte_nrfx_configure+0x146>
   14fa8:	d809      	bhi.n	14fbe <uarte_nrfx_configure+0xc6>
   14faa:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   14fae:	42ab      	cmp	r3, r5
   14fb0:	d047      	beq.n	15042 <uarte_nrfx_configure+0x14a>
   14fb2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   14fb6:	d1ca      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14fb8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14fbc:	e017      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14fbe:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14fc2:	d1c4      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14fc4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14fc8:	e011      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14fca:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14fce:	d03b      	beq.n	15048 <uarte_nrfx_configure+0x150>
   14fd0:	d808      	bhi.n	14fe4 <uarte_nrfx_configure+0xec>
   14fd2:	4d22      	ldr	r5, [pc, #136]	; (1505c <uarte_nrfx_configure+0x164>)
   14fd4:	42ab      	cmp	r3, r5
   14fd6:	d03a      	beq.n	1504e <uarte_nrfx_configure+0x156>
   14fd8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14fdc:	d1b7      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14fde:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14fe2:	e004      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14fe4:	4d1e      	ldr	r5, [pc, #120]	; (15060 <uarte_nrfx_configure+0x168>)
   14fe6:	42ab      	cmp	r3, r5
   14fe8:	d1b1      	bne.n	14f4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14fea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   14fee:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14ff0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   14ff4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   14ff6:	433a      	orrs	r2, r7
   14ff8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   14ffa:	4334      	orrs	r4, r6
   14ffc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14ffe:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   15002:	1d2b      	adds	r3, r5, #4
   15004:	c903      	ldmia	r1, {r0, r1}
   15006:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1500a:	2000      	movs	r0, #0
}
   1500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1500e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15012:	e7ec      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15014:	4b13      	ldr	r3, [pc, #76]	; (15064 <uarte_nrfx_configure+0x16c>)
   15016:	e7ea      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15018:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1501c:	e7e7      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1501e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15022:	e7e4      	b.n	14fee <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   15024:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15028:	e7e1      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1502a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1502e:	e7de      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15030:	4b0d      	ldr	r3, [pc, #52]	; (15068 <uarte_nrfx_configure+0x170>)
   15032:	e7dc      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15034:	4b0d      	ldr	r3, [pc, #52]	; (1506c <uarte_nrfx_configure+0x174>)
   15036:	e7da      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15038:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1503c:	e7d7      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1503e:	4b0c      	ldr	r3, [pc, #48]	; (15070 <uarte_nrfx_configure+0x178>)
   15040:	e7d5      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15042:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15046:	e7d2      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15048:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1504c:	e7cf      	b.n	14fee <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1504e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15052:	e7cc      	b.n	14fee <uarte_nrfx_configure+0xf6>
   15054:	0013b000 	.word	0x0013b000
   15058:	004ea000 	.word	0x004ea000
   1505c:	0003d090 	.word	0x0003d090
   15060:	000f4240 	.word	0x000f4240
   15064:	00275000 	.word	0x00275000
   15068:	0075c000 	.word	0x0075c000
   1506c:	003af000 	.word	0x003af000
   15070:	013a9000 	.word	0x013a9000

00015074 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15078:	4680      	mov	r8, r0
   1507a:	b087      	sub	sp, #28
   1507c:	2200      	movs	r2, #0
   1507e:	2101      	movs	r1, #1
   15080:	2008      	movs	r0, #8
   15082:	f7f6 fd6b 	bl	bb5c <z_arm_irq_priority_set>
   15086:	2008      	movs	r0, #8
   15088:	f7f6 fd38 	bl	bafc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1508c:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1508e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   15092:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   15096:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   15098:	466a      	mov	r2, sp
   1509a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1509e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   150a2:	f8d7 900c 	ldr.w	r9, [r7, #12]
   150a6:	4648      	mov	r0, r9
   150a8:	f007 fbb9 	bl	1c81e <pinctrl_lookup_state>
	if (ret < 0) {
   150ac:	1e05      	subs	r5, r0, #0
   150ae:	db25      	blt.n	150fc <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   150b0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   150b2:	f8d9 2000 	ldr.w	r2, [r9]
   150b6:	7919      	ldrb	r1, [r3, #4]
   150b8:	6818      	ldr	r0, [r3, #0]
   150ba:	f7ff fe5d 	bl	14d78 <pinctrl_configure_pins>
	if (err < 0) {
   150be:	1e05      	subs	r5, r0, #0
   150c0:	db1c      	blt.n	150fc <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   150c2:	4640      	mov	r0, r8
   150c4:	1d31      	adds	r1, r6, #4
   150c6:	f7ff ff17 	bl	14ef8 <uarte_nrfx_configure>
	if (err) {
   150ca:	4605      	mov	r5, r0
   150cc:	b9b0      	cbnz	r0, 150fc <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   150ce:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   150d0:	0799      	lsls	r1, r3, #30
   150d2:	d524      	bpl.n	1511e <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   150d4:	f106 0018 	add.w	r0, r6, #24
   150d8:	f001 f81e 	bl	16118 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   150dc:	4b24      	ldr	r3, [pc, #144]	; (15170 <uarte_0_init+0xfc>)
   150de:	4298      	cmp	r0, r3
   150e0:	d010      	beq.n	15104 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   150e2:	4b24      	ldr	r3, [pc, #144]	; (15174 <uarte_0_init+0x100>)
   150e4:	9305      	str	r3, [sp, #20]
   150e6:	2302      	movs	r3, #2
   150e8:	9304      	str	r3, [sp, #16]
   150ea:	462b      	mov	r3, r5
		return -EIO;
   150ec:	f06f 0504 	mvn.w	r5, #4
   150f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150f4:	4820      	ldr	r0, [pc, #128]	; (15178 <uarte_0_init+0x104>)
   150f6:	aa04      	add	r2, sp, #16
   150f8:	f7f5 fedc 	bl	aeb4 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   150fc:	4628      	mov	r0, r5
   150fe:	b007      	add	sp, #28
   15100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15104:	7e33      	ldrb	r3, [r6, #24]
   15106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1510a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1510e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15112:	2301      	movs	r3, #1
   15114:	7e32      	ldrb	r2, [r6, #24]
   15116:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   15118:	4a18      	ldr	r2, [pc, #96]	; (1517c <uarte_0_init+0x108>)
   1511a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1511e:	2308      	movs	r3, #8
   15120:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   15124:	7a3b      	ldrb	r3, [r7, #8]
   15126:	b953      	cbnz	r3, 1513e <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15128:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1512c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15130:	6973      	ldr	r3, [r6, #20]
   15132:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15136:	2301      	movs	r3, #1
   15138:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1513c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1513e:	687b      	ldr	r3, [r7, #4]
   15140:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   15142:	bf5c      	itt	pl
   15144:	f44f 7380 	movpl.w	r3, #256	; 0x100
   15148:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1514c:	687b      	ldr	r3, [r7, #4]
   1514e:	06db      	lsls	r3, r3, #27
   15150:	bf44      	itt	mi
   15152:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   15156:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1515a:	6933      	ldr	r3, [r6, #16]
   1515c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15160:	2300      	movs	r3, #0
   15162:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15166:	2301      	movs	r3, #1
   15168:	60a3      	str	r3, [r4, #8]
   1516a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1516c:	e7c6      	b.n	150fc <uarte_0_init+0x88>
   1516e:	bf00      	nop
   15170:	0bad0000 	.word	0x0bad0000
   15174:	000215c7 	.word	0x000215c7
   15178:	0001e62c 	.word	0x0001e62c
   1517c:	40017000 	.word	0x40017000

00015180 <uarte_nrfx_poll_out>:
{
   15180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15182:	4604      	mov	r4, r0
   15184:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   15186:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15188:	f008 fad3 	bl	1d732 <k_is_in_isr>
   1518c:	b9b0      	cbnz	r0, 151bc <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1518e:	4b2e      	ldr	r3, [pc, #184]	; (15248 <uarte_nrfx_poll_out+0xc8>)
   15190:	781b      	ldrb	r3, [r3, #0]
   15192:	b19b      	cbz	r3, 151bc <uarte_nrfx_poll_out+0x3c>
{
   15194:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15196:	6860      	ldr	r0, [r4, #4]
   15198:	f007 fb77 	bl	1c88a <is_tx_ready.isra.0>
   1519c:	bb00      	cbnz	r0, 151e0 <uarte_nrfx_poll_out+0x60>
   1519e:	2001      	movs	r0, #1
   151a0:	f007 fc25 	bl	1c9ee <nrfx_busy_wait>
   151a4:	3e01      	subs	r6, #1
   151a6:	d1f6      	bne.n	15196 <uarte_nrfx_poll_out+0x16>
   151a8:	2100      	movs	r1, #0
   151aa:	2021      	movs	r0, #33	; 0x21
   151ac:	f003 f826 	bl	181fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   151b0:	e7f0      	b.n	15194 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   151b2:	f386 8811 	msr	BASEPRI, r6
   151b6:	f3bf 8f6f 	isb	sy
}
   151ba:	e7f5      	b.n	151a8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   151bc:	f04f 0320 	mov.w	r3, #32
   151c0:	f3ef 8611 	mrs	r6, BASEPRI
   151c4:	f383 8812 	msr	BASEPRI_MAX, r3
   151c8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   151cc:	6860      	ldr	r0, [r4, #4]
   151ce:	4631      	mov	r1, r6
   151d0:	f007 fb5b 	bl	1c88a <is_tx_ready.isra.0>
   151d4:	b990      	cbnz	r0, 151fc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   151d6:	f386 8811 	msr	BASEPRI, r6
   151da:	f3bf 8f6f 	isb	sy
}
   151de:	e7ed      	b.n	151bc <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   151e0:	f04f 0320 	mov.w	r3, #32
   151e4:	f3ef 8611 	mrs	r6, BASEPRI
   151e8:	f383 8812 	msr	BASEPRI_MAX, r3
   151ec:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   151f0:	6860      	ldr	r0, [r4, #4]
   151f2:	4631      	mov	r1, r6
   151f4:	f007 fb49 	bl	1c88a <is_tx_ready.isra.0>
   151f8:	2800      	cmp	r0, #0
   151fa:	d0da      	beq.n	151b2 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   151fc:	693b      	ldr	r3, [r7, #16]
   151fe:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   15200:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15202:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   15204:	6813      	ldr	r3, [r2, #0]
   15206:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1520a:	2001      	movs	r0, #1
   1520c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15210:	2000      	movs	r0, #0
   15212:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   15216:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1521a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1521e:	6852      	ldr	r2, [r2, #4]
   15220:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   15224:	06d2      	lsls	r2, r2, #27
   15226:	d508      	bpl.n	1523a <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15228:	2008      	movs	r0, #8
	return config->uarte_regs;
   1522a:	6862      	ldr	r2, [r4, #4]
   1522c:	6812      	ldr	r2, [r2, #0]
   1522e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   15232:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   15236:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1523a:	2201      	movs	r2, #1
   1523c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1523e:	f381 8811 	msr	BASEPRI, r1
   15242:	f3bf 8f6f 	isb	sy
}
   15246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15248:	20009d45 	.word	0x20009d45

0001524c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1524c:	2301      	movs	r3, #1
   1524e:	4083      	lsls	r3, r0
{
   15250:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   15252:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15254:	4a0b      	ldr	r2, [pc, #44]	; (15284 <compare_int_lock+0x38>)
   15256:	e8d2 1fef 	ldaex	r1, [r2]
   1525a:	ea01 0504 	and.w	r5, r1, r4
   1525e:	e8c2 5fe6 	stlex	r6, r5, [r2]
   15262:	2e00      	cmp	r6, #0
   15264:	d1f7      	bne.n	15256 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1526a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1526c:	4806      	ldr	r0, [pc, #24]	; (15288 <compare_int_lock+0x3c>)
   1526e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   15272:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15276:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1527a:	420b      	tst	r3, r1
}
   1527c:	bf14      	ite	ne
   1527e:	2001      	movne	r0, #1
   15280:	2000      	moveq	r0, #0
   15282:	bd70      	pop	{r4, r5, r6, pc}
   15284:	20009b88 	.word	0x20009b88
   15288:	40015000 	.word	0x40015000

0001528c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1528c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1528e:	490e      	ldr	r1, [pc, #56]	; (152c8 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   15290:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   15294:	e9d1 3400 	ldrd	r3, r4, [r1]
   15298:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1529a:	18c3      	adds	r3, r0, r3
   1529c:	f144 0400 	adc.w	r4, r4, #0
   152a0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   152a4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   152a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   152ac:	d209      	bcs.n	152c2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   152ae:	4b07      	ldr	r3, [pc, #28]	; (152cc <sys_clock_timeout_handler+0x40>)
   152b0:	681b      	ldr	r3, [r3, #0]
   152b2:	0a1a      	lsrs	r2, r3, #8
   152b4:	061b      	lsls	r3, r3, #24
   152b6:	199c      	adds	r4, r3, r6
   152b8:	4b05      	ldr	r3, [pc, #20]	; (152d0 <sys_clock_timeout_handler+0x44>)
   152ba:	f142 0500 	adc.w	r5, r2, #0
   152be:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   152c2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   152c4:	f003 b902 	b.w	184cc <sys_clock_announce>
   152c8:	20009588 	.word	0x20009588
   152cc:	20009b8c 	.word	0x20009b8c
   152d0:	20009590 	.word	0x20009590

000152d4 <compare_int_unlock>:
	if (key) {
   152d4:	b1d9      	cbz	r1, 1530e <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   152d6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152d8:	4a0d      	ldr	r2, [pc, #52]	; (15310 <compare_int_unlock+0x3c>)
   152da:	4083      	lsls	r3, r0
   152dc:	e8d2 cfef 	ldaex	ip, [r2]
   152e0:	ea4c 0c03 	orr.w	ip, ip, r3
   152e4:	e8c2 cfe1 	stlex	r1, ip, [r2]
   152e8:	2900      	cmp	r1, #0
   152ea:	d1f7      	bne.n	152dc <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   152ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   152f0:	4a08      	ldr	r2, [pc, #32]	; (15314 <compare_int_unlock+0x40>)
   152f2:	4083      	lsls	r3, r0
   152f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   152f8:	4b07      	ldr	r3, [pc, #28]	; (15318 <compare_int_unlock+0x44>)
   152fa:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   152fe:	40c3      	lsrs	r3, r0
   15300:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15302:	bf42      	ittt	mi
   15304:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   15308:	4b04      	ldrmi	r3, [pc, #16]	; (1531c <compare_int_unlock+0x48>)
   1530a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1530e:	4770      	bx	lr
   15310:	20009b88 	.word	0x20009b88
   15314:	40015000 	.word	0x40015000
   15318:	20009b80 	.word	0x20009b80
   1531c:	e000e100 	.word	0xe000e100

00015320 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   15320:	b2c3      	uxtb	r3, r0
}
   15322:	4802      	ldr	r0, [pc, #8]	; (1532c <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   15324:	009b      	lsls	r3, r3, #2
   15326:	4418      	add	r0, r3
   15328:	4770      	bx	lr
   1532a:	bf00      	nop
   1532c:	40015140 	.word	0x40015140

00015330 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   15330:	4b02      	ldr	r3, [pc, #8]	; (1533c <z_nrf_rtc_timer_compare_read+0xc>)
   15332:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15336:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1533a:	4770      	bx	lr
   1533c:	40015000 	.word	0x40015000

00015340 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   15340:	4b0d      	ldr	r3, [pc, #52]	; (15378 <z_nrf_rtc_timer_read+0x38>)
   15342:	6818      	ldr	r0, [r3, #0]
   15344:	0a01      	lsrs	r1, r0, #8
   15346:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   15348:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1534c:	4b0b      	ldr	r3, [pc, #44]	; (1537c <z_nrf_rtc_timer_read+0x3c>)
   1534e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   15352:	1818      	adds	r0, r3, r0
   15354:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1535c:	d20a      	bcs.n	15374 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1535e:	4b08      	ldr	r3, [pc, #32]	; (15380 <z_nrf_rtc_timer_read+0x40>)
   15360:	e9d3 2300 	ldrd	r2, r3, [r3]
   15364:	4290      	cmp	r0, r2
   15366:	eb71 0303 	sbcs.w	r3, r1, r3
   1536a:	d203      	bcs.n	15374 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1536c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   15370:	f141 0100 	adc.w	r1, r1, #0
}
   15374:	4770      	bx	lr
   15376:	bf00      	nop
   15378:	20009b8c 	.word	0x20009b8c
   1537c:	40015000 	.word	0x40015000
   15380:	20009590 	.word	0x20009590

00015384 <compare_set>:
{
   15384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15388:	4616      	mov	r6, r2
   1538a:	461f      	mov	r7, r3
   1538c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1538e:	f7ff ff5d 	bl	1524c <compare_int_lock>
   15392:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   15394:	f7ff ffd4 	bl	15340 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15398:	42b0      	cmp	r0, r6
   1539a:	eb71 0307 	sbcs.w	r3, r1, r7
   1539e:	d250      	bcs.n	15442 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   153a0:	4b38      	ldr	r3, [pc, #224]	; (15484 <compare_set+0x100>)
   153a2:	1a30      	subs	r0, r6, r0
   153a4:	eb67 0101 	sbc.w	r1, r7, r1
   153a8:	4298      	cmp	r0, r3
   153aa:	f171 0100 	sbcs.w	r1, r1, #0
   153ae:	d265      	bcs.n	1547c <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   153b0:	4b35      	ldr	r3, [pc, #212]	; (15488 <compare_set+0x104>)
   153b2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   153b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   153ba:	429f      	cmp	r7, r3
   153bc:	bf08      	it	eq
   153be:	4296      	cmpeq	r6, r2
   153c0:	d049      	beq.n	15456 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   153c2:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
   153c6:	4931      	ldr	r1, [pc, #196]	; (1548c <compare_set+0x108>)
   153c8:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   153cc:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   153ce:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   153d2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   153d6:	f007 faa2 	bl	1c91e <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   153da:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   153de:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   153e0:	f104 0550 	add.w	r5, r4, #80	; 0x50
   153e4:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   153e6:	b2ad      	uxth	r5, r5
   153e8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   153ec:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   153f0:	4a27      	ldr	r2, [pc, #156]	; (15490 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   153f2:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   153f6:	9301      	str	r3, [sp, #4]
   153f8:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   153fc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   15400:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   15404:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   15408:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1540c:	eba0 0008 	sub.w	r0, r0, r8
   15410:	3803      	subs	r0, #3
   15412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   15416:	4290      	cmp	r0, r2
   15418:	d91d      	bls.n	15456 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1541a:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1541c:	b160      	cbz	r0, 15438 <compare_set+0xb4>
     return p_reg->COUNTER;
   1541e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   15422:	eba8 000b 	sub.w	r0, r8, fp
   15426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1542a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1542e:	d912      	bls.n	15456 <compare_set+0xd2>
					event_clear(chan);
   15430:	4620      	mov	r0, r4
   15432:	f007 fa74 	bl	1c91e <event_clear>
   15436:	4a16      	ldr	r2, [pc, #88]	; (15490 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   15438:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1543c:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   15440:	e7da      	b.n	153f8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   15442:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15444:	4a13      	ldr	r2, [pc, #76]	; (15494 <compare_set+0x110>)
   15446:	40a3      	lsls	r3, r4
   15448:	e8d2 0fef 	ldaex	r0, [r2]
   1544c:	4318      	orrs	r0, r3
   1544e:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15452:	2900      	cmp	r1, #0
   15454:	d1f8      	bne.n	15448 <compare_set+0xc4>
	return ret;
   15456:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   15458:	490b      	ldr	r1, [pc, #44]	; (15488 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1545a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1545c:	0123      	lsls	r3, r4, #4
   1545e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   15462:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   15464:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   15468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1546a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1546c:	4620      	mov	r0, r4
   1546e:	9900      	ldr	r1, [sp, #0]
   15470:	f7ff ff30 	bl	152d4 <compare_int_unlock>
}
   15474:	4628      	mov	r0, r5
   15476:	b003      	add	sp, #12
   15478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1547c:	f06f 0515 	mvn.w	r5, #21
   15480:	e7f4      	b.n	1546c <compare_set+0xe8>
   15482:	bf00      	nop
   15484:	00800001 	.word	0x00800001
   15488:	20009568 	.word	0x20009568
   1548c:	40015000 	.word	0x40015000
   15490:	007ffffd 	.word	0x007ffffd
   15494:	20009b80 	.word	0x20009b80

00015498 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   15498:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1549a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1549e:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   154a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   154a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
   154a8:	4c1c      	ldr	r4, [pc, #112]	; (1551c <sys_clock_driver_init+0x84>)
   154aa:	4b1d      	ldr	r3, [pc, #116]	; (15520 <sys_clock_driver_init+0x88>)
    p_reg->INTENSET = mask;
   154ac:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   154ae:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   154b2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   154b6:	4b1b      	ldr	r3, [pc, #108]	; (15524 <sys_clock_driver_init+0x8c>)
    p_reg->PRESCALER = val;
   154b8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   154bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   154c0:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   154c4:	e9c3 0106 	strd	r0, r1, [r3, #24]
   154c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   154cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   154d0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   154d4:	4b14      	ldr	r3, [pc, #80]	; (15528 <sys_clock_driver_init+0x90>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   154d6:	2101      	movs	r1, #1
   154d8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   154dc:	2015      	movs	r0, #21
   154de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   154e2:	462a      	mov	r2, r5
   154e4:	f7f6 fb3a 	bl	bb5c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   154e8:	2015      	movs	r0, #21
   154ea:	f7f6 fb07 	bl	bafc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   154ee:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   154f0:	2203      	movs	r2, #3
   154f2:	60a3      	str	r3, [r4, #8]
   154f4:	6023      	str	r3, [r4, #0]
   154f6:	4b0d      	ldr	r3, [pc, #52]	; (1552c <sys_clock_driver_init+0x94>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   154f8:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   154fa:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   154fc:	4b0c      	ldr	r3, [pc, #48]	; (15530 <sys_clock_driver_init+0x98>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   154fe:	4a0d      	ldr	r2, [pc, #52]	; (15534 <sys_clock_driver_init+0x9c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   15500:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15502:	4b0d      	ldr	r3, [pc, #52]	; (15538 <sys_clock_driver_init+0xa0>)
   15504:	9501      	str	r5, [sp, #4]
   15506:	9300      	str	r3, [sp, #0]
   15508:	2300      	movs	r3, #0
   1550a:	f7ff ff3b 	bl	15384 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1550e:	4630      	mov	r0, r6
   15510:	f7ff f93c 	bl	1478c <z_nrf_clock_control_lf_on>

	return 0;
}
   15514:	4628      	mov	r0, r5
   15516:	b002      	add	sp, #8
   15518:	bd70      	pop	{r4, r5, r6, pc}
   1551a:	bf00      	nop
   1551c:	40015000 	.word	0x40015000
   15520:	000f0003 	.word	0x000f0003
   15524:	20009568 	.word	0x20009568
   15528:	e000e100 	.word	0xe000e100
   1552c:	20009b88 	.word	0x20009b88
   15530:	20009b84 	.word	0x20009b84
   15534:	007fffff 	.word	0x007fffff
   15538:	0001528d 	.word	0x0001528d

0001553c <rtc_nrf_isr>:
{
   1553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   15540:	4b39      	ldr	r3, [pc, #228]	; (15628 <rtc_nrf_isr+0xec>)
   15542:	b085      	sub	sp, #20
   15544:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15548:	0792      	lsls	r2, r2, #30
   1554a:	d50b      	bpl.n	15564 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1554c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15550:	b142      	cbz	r2, 15564 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15552:	2200      	movs	r2, #0
   15554:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   15558:	4a34      	ldr	r2, [pc, #208]	; (1562c <rtc_nrf_isr+0xf0>)
   1555a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1555e:	6813      	ldr	r3, [r2, #0]
   15560:	3301      	adds	r3, #1
   15562:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15564:	4d32      	ldr	r5, [pc, #200]	; (15630 <rtc_nrf_isr+0xf4>)
   15566:	2400      	movs	r4, #0
   15568:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1556a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1556e:	4f2e      	ldr	r7, [pc, #184]	; (15628 <rtc_nrf_isr+0xec>)
   15570:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
   15574:	fa06 f904 	lsl.w	r9, r6, r4
   15578:	ea19 0f03 	tst.w	r9, r3
   1557c:	d02e      	beq.n	155dc <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1557e:	2301      	movs	r3, #1
   15580:	40a3      	lsls	r3, r4
   15582:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15584:	492b      	ldr	r1, [pc, #172]	; (15634 <rtc_nrf_isr+0xf8>)
   15586:	e8d1 2fef 	ldaex	r2, [r1]
   1558a:	ea02 0003 	and.w	r0, r2, r3
   1558e:	e8c1 0fec 	stlex	ip, r0, [r1]
   15592:	f1bc 0f00 	cmp.w	ip, #0
   15596:	d1f6      	bne.n	15586 <rtc_nrf_isr+0x4a>
   15598:	fa22 f304 	lsr.w	r3, r2, r4
   1559c:	07db      	lsls	r3, r3, #31
   1559e:	d403      	bmi.n	155a8 <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   155a0:	4b25      	ldr	r3, [pc, #148]	; (15638 <rtc_nrf_isr+0xfc>)
   155a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   155a6:	b1cb      	cbz	r3, 155dc <rtc_nrf_isr+0xa0>
			event_clear(chan);
   155a8:	4620      	mov	r0, r4
   155aa:	f007 f9b8 	bl	1c91e <event_clear>
		curr_time = z_nrf_rtc_timer_read();
   155ae:	f7ff fec7 	bl	15340 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   155b2:	f04f 0220 	mov.w	r2, #32
   155b6:	f3ef 8311 	mrs	r3, BASEPRI
   155ba:	f382 8812 	msr	BASEPRI_MAX, r2
   155be:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   155c2:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
   155c6:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
   155ca:	4550      	cmp	r0, sl
   155cc:	eb71 010b 	sbcs.w	r1, r1, fp
   155d0:	9302      	str	r3, [sp, #8]
   155d2:	d20a      	bcs.n	155ea <rtc_nrf_isr+0xae>
	__asm__ volatile(
   155d4:	f383 8811 	msr	BASEPRI, r3
   155d8:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   155dc:	3510      	adds	r5, #16
   155de:	b114      	cbz	r4, 155e6 <rtc_nrf_isr+0xaa>
}
   155e0:	b005      	add	sp, #20
   155e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   155e6:	2401      	movs	r4, #1
   155e8:	e7c2      	b.n	15570 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
   155ea:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
   155ec:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   155f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   155f4:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   155f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
   155fa:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
   155fc:	480a      	ldr	r0, [pc, #40]	; (15628 <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   155fe:	e9cc 2302 	strd	r2, r3, [ip, #8]
   15602:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
   15606:	4620      	mov	r0, r4
   15608:	f007 f989 	bl	1c91e <event_clear>
   1560c:	9b02      	ldr	r3, [sp, #8]
   1560e:	f383 8811 	msr	BASEPRI, r3
   15612:	f3bf 8f6f 	isb	sy
		if (handler) {
   15616:	2900      	cmp	r1, #0
   15618:	d0e0      	beq.n	155dc <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
   1561a:	9b03      	ldr	r3, [sp, #12]
   1561c:	4652      	mov	r2, sl
   1561e:	9300      	str	r3, [sp, #0]
   15620:	465b      	mov	r3, fp
   15622:	4788      	blx	r1
   15624:	e7da      	b.n	155dc <rtc_nrf_isr+0xa0>
   15626:	bf00      	nop
   15628:	40015000 	.word	0x40015000
   1562c:	20009b8c 	.word	0x20009b8c
   15630:	20009568 	.word	0x20009568
   15634:	20009b80 	.word	0x20009b80
   15638:	40015140 	.word	0x40015140

0001563c <z_nrf_rtc_timer_chan_alloc>:
{
   1563c:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1563e:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   15640:	4b0c      	ldr	r3, [pc, #48]	; (15674 <z_nrf_rtc_timer_chan_alloc+0x38>)
   15642:	6818      	ldr	r0, [r3, #0]
   15644:	b190      	cbz	r0, 1566c <z_nrf_rtc_timer_chan_alloc+0x30>
   15646:	fab0 f080 	clz	r0, r0
   1564a:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1564e:	fa04 f100 	lsl.w	r1, r4, r0
   15652:	43c9      	mvns	r1, r1
   15654:	e8d3 2fef 	ldaex	r2, [r3]
   15658:	ea02 0501 	and.w	r5, r2, r1
   1565c:	e8c3 5fe6 	stlex	r6, r5, [r3]
   15660:	2e00      	cmp	r6, #0
   15662:	d1f7      	bne.n	15654 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   15664:	40c2      	lsrs	r2, r0
   15666:	07d2      	lsls	r2, r2, #31
   15668:	d5eb      	bpl.n	15642 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1566a:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1566c:	f06f 000b 	mvn.w	r0, #11
   15670:	e7fb      	b.n	1566a <z_nrf_rtc_timer_chan_alloc+0x2e>
   15672:	bf00      	nop
   15674:	20009b84 	.word	0x20009b84

00015678 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   15678:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1567a:	4a05      	ldr	r2, [pc, #20]	; (15690 <z_nrf_rtc_timer_chan_free+0x18>)
   1567c:	4083      	lsls	r3, r0
   1567e:	e8d2 0fef 	ldaex	r0, [r2]
   15682:	4318      	orrs	r0, r3
   15684:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15688:	2900      	cmp	r1, #0
   1568a:	d1f8      	bne.n	1567e <z_nrf_rtc_timer_chan_free+0x6>
}
   1568c:	4770      	bx	lr
   1568e:	bf00      	nop
   15690:	20009b84 	.word	0x20009b84

00015694 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   15694:	1c43      	adds	r3, r0, #1
{
   15696:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   15698:	d021      	beq.n	156de <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1569a:	2801      	cmp	r0, #1
   1569c:	dd21      	ble.n	156e2 <sys_clock_set_timeout+0x4e>
   1569e:	4a12      	ldr	r2, [pc, #72]	; (156e8 <sys_clock_set_timeout+0x54>)
   156a0:	4b12      	ldr	r3, [pc, #72]	; (156ec <sys_clock_set_timeout+0x58>)
   156a2:	4290      	cmp	r0, r2
   156a4:	bfd4      	ite	le
   156a6:	4604      	movle	r4, r0
   156a8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   156aa:	f7ff fe49 	bl	15340 <z_nrf_rtc_timer_read>
   156ae:	4b10      	ldr	r3, [pc, #64]	; (156f0 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   156b0:	490e      	ldr	r1, [pc, #56]	; (156ec <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   156b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   156b6:	1a80      	subs	r0, r0, r2
		cyc = 0;
   156b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   156bc:	bf28      	it	cs
   156be:	2400      	movcs	r4, #0
	cyc += unannounced;
   156c0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   156c2:	428c      	cmp	r4, r1
   156c4:	bf28      	it	cs
   156c6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   156c8:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   156ca:	490a      	ldr	r1, [pc, #40]	; (156f4 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   156cc:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   156ce:	9001      	str	r0, [sp, #4]
   156d0:	9100      	str	r1, [sp, #0]
   156d2:	f143 0300 	adc.w	r3, r3, #0
   156d6:	f7ff fe55 	bl	15384 <compare_set>
}
   156da:	b002      	add	sp, #8
   156dc:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   156de:	4c03      	ldr	r4, [pc, #12]	; (156ec <sys_clock_set_timeout+0x58>)
   156e0:	e7e3      	b.n	156aa <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   156e2:	2401      	movs	r4, #1
   156e4:	e7e1      	b.n	156aa <sys_clock_set_timeout+0x16>
   156e6:	bf00      	nop
   156e8:	007ffffe 	.word	0x007ffffe
   156ec:	007fffff 	.word	0x007fffff
   156f0:	20009588 	.word	0x20009588
   156f4:	0001528d 	.word	0x0001528d

000156f8 <sys_clock_elapsed>:
{
   156f8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   156fa:	f7ff fe21 	bl	15340 <z_nrf_rtc_timer_read>
   156fe:	4b02      	ldr	r3, [pc, #8]	; (15708 <sys_clock_elapsed+0x10>)
   15700:	681b      	ldr	r3, [r3, #0]
}
   15702:	1ac0      	subs	r0, r0, r3
   15704:	bd08      	pop	{r3, pc}
   15706:	bf00      	nop
   15708:	20009588 	.word	0x20009588

0001570c <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1570c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1570e:	4b07      	ldr	r3, [pc, #28]	; (1572c <get_buttons.part.0+0x20>)
   15710:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15714:	9305      	str	r3, [sp, #20]
   15716:	2302      	movs	r3, #2
   15718:	4805      	ldr	r0, [pc, #20]	; (15730 <get_buttons.part.0+0x24>)
   1571a:	aa04      	add	r2, sp, #16
   1571c:	9304      	str	r3, [sp, #16]
   1571e:	f007 f93e 	bl	1c99e <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   15722:	2000      	movs	r0, #0
   15724:	b007      	add	sp, #28
   15726:	f85d fb04 	ldr.w	pc, [sp], #4
   1572a:	bf00      	nop
   1572c:	00021600 	.word	0x00021600
   15730:	0001e5b4 	.word	0x0001e5b4

00015734 <get_buttons>:
{
   15734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   15738:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1573a:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1573e:	4625      	mov	r5, r4
   15740:	4e12      	ldr	r6, [pc, #72]	; (1578c <get_buttons+0x58>)
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   15742:	6830      	ldr	r0, [r6, #0]
   15744:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   15746:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1574a:	6883      	ldr	r3, [r0, #8]
   1574c:	a901      	add	r1, sp, #4
   1574e:	685b      	ldr	r3, [r3, #4]
   15750:	4798      	blx	r3
	if (ret == 0) {
   15752:	2800      	cmp	r0, #0
   15754:	d00c      	beq.n	15770 <get_buttons+0x3c>
		if (val < 0) {
   15756:	db14      	blt.n	15782 <get_buttons+0x4e>
			ret |= 1U << i;
   15758:	fa08 f305 	lsl.w	r3, r8, r5
   1575c:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1575e:	3501      	adds	r5, #1
   15760:	2d04      	cmp	r5, #4
   15762:	f106 0608 	add.w	r6, r6, #8
   15766:	d1ec      	bne.n	15742 <get_buttons+0xe>
}
   15768:	4620      	mov	r0, r4
   1576a:	b003      	add	sp, #12
   1576c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   15770:	f8d9 2000 	ldr.w	r2, [r9]
   15774:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   15776:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   1577a:	4053      	eors	r3, r2
		if (val) {
   1577c:	423b      	tst	r3, r7
   1577e:	d0ee      	beq.n	1575e <get_buttons+0x2a>
   15780:	e7ea      	b.n	15758 <get_buttons+0x24>
}
   15782:	b003      	add	sp, #12
   15784:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15788:	f7ff bfc0 	b.w	1570c <get_buttons.part.0>
   1578c:	0001eee8 	.word	0x0001eee8

00015790 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   15790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15794:	4607      	mov	r7, r0
   15796:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   15798:	2500      	movs	r5, #0
   1579a:	4e14      	ldr	r6, [pc, #80]	; (157ec <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1579c:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1579e:	fa27 f205 	lsr.w	r2, r7, r5
   157a2:	f012 0201 	ands.w	r2, r2, #1
   157a6:	d117      	bne.n	157d8 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   157a8:	fa28 f305 	lsr.w	r3, r8, r5
   157ac:	07db      	lsls	r3, r3, #31
   157ae:	d515      	bpl.n	157dc <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   157b0:	7931      	ldrb	r1, [r6, #4]
   157b2:	6830      	ldr	r0, [r6, #0]
   157b4:	f007 f8e3 	bl	1c97e <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   157b8:	4604      	mov	r4, r0
   157ba:	b178      	cbz	r0, 157dc <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   157bc:	4b0c      	ldr	r3, [pc, #48]	; (157f0 <dk_set_leds_state.part.0+0x60>)
   157be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   157c2:	9305      	str	r3, [sp, #20]
   157c4:	2302      	movs	r3, #2
   157c6:	480b      	ldr	r0, [pc, #44]	; (157f4 <dk_set_leds_state.part.0+0x64>)
   157c8:	aa04      	add	r2, sp, #16
   157ca:	9304      	str	r3, [sp, #16]
   157cc:	f007 f8e7 	bl	1c99e <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   157d0:	4620      	mov	r0, r4
   157d2:	b006      	add	sp, #24
   157d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   157d8:	2201      	movs	r2, #1
   157da:	e7e9      	b.n	157b0 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   157dc:	3501      	adds	r5, #1
   157de:	2d04      	cmp	r5, #4
   157e0:	f106 0608 	add.w	r6, r6, #8
   157e4:	d1db      	bne.n	1579e <dk_set_leds_state.part.0+0xe>
	return 0;
   157e6:	2400      	movs	r4, #0
   157e8:	e7f2      	b.n	157d0 <dk_set_leds_state.part.0+0x40>
   157ea:	bf00      	nop
   157ec:	0001eec8 	.word	0x0001eec8
   157f0:	00021615 	.word	0x00021615
   157f4:	0001e5b4 	.word	0x0001e5b4

000157f8 <callback_ctrl>:
{
   157f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157fc:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   157fe:	2600      	movs	r6, #0
   15800:	4d21      	ldr	r5, [pc, #132]	; (15888 <callback_ctrl+0x90>)
					 FLAGS_GPIO_0_1_ACTIVE :
   15802:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1588c <callback_ctrl+0x94>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   15806:	f8df a088 	ldr.w	sl, [pc, #136]	; 15890 <callback_ctrl+0x98>
{
   1580a:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1580c:	6828      	ldr	r0, [r5, #0]
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1580e:	7929      	ldrb	r1, [r5, #4]
		if (enable) {
   15810:	f1b8 0f00 	cmp.w	r8, #0
   15814:	d02d      	beq.n	15872 <callback_ctrl+0x7a>
					 FLAGS_GPIO_0_1_ACTIVE :
   15816:	4548      	cmp	r0, r9
   15818:	d01f      	beq.n	1585a <callback_ctrl+0x62>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1581a:	4550      	cmp	r0, sl
   1581c:	d01d      	beq.n	1585a <callback_ctrl+0x62>
					 FLAGS_GPIO_0_1_ACTIVE :
   1581e:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
	const struct gpio_driver_api *api =
   15822:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   15824:	699c      	ldr	r4, [r3, #24]
   15826:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1582a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1582e:	47a0      	blx	r4
		if (err) {
   15830:	4604      	mov	r4, r0
   15832:	b310      	cbz	r0, 1587a <callback_ctrl+0x82>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   15834:	466d      	mov	r5, sp
   15836:	b088      	sub	sp, #32
   15838:	466a      	mov	r2, sp
   1583a:	4b16      	ldr	r3, [pc, #88]	; (15894 <callback_ctrl+0x9c>)
   1583c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15840:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15844:	2303      	movs	r3, #3
   15846:	4814      	ldr	r0, [pc, #80]	; (15898 <callback_ctrl+0xa0>)
   15848:	f842 3f10 	str.w	r3, [r2, #16]!
   1584c:	f007 f8a7 	bl	1c99e <z_log_msg_static_create.constprop.0>
   15850:	46ad      	mov	sp, r5
}
   15852:	4620      	mov	r0, r4
   15854:	46bd      	mov	sp, r7
   15856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1585a:	2401      	movs	r4, #1
   1585c:	6902      	ldr	r2, [r0, #16]
   1585e:	408c      	lsls	r4, r1
   15860:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_api *api =
   15862:	6883      	ldr	r3, [r0, #8]
					 FLAGS_GPIO_0_1_ACTIVE :
   15864:	4214      	tst	r4, r2
   15866:	bf14      	ite	ne
   15868:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
   1586c:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   15870:	e7d8      	b.n	15824 <callback_ctrl+0x2c>
			flags = GPIO_INT_DISABLE;
   15872:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15876:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   15878:	e7d4      	b.n	15824 <callback_ctrl+0x2c>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1587a:	3601      	adds	r6, #1
   1587c:	2e04      	cmp	r6, #4
   1587e:	f105 0508 	add.w	r5, r5, #8
   15882:	d1c3      	bne.n	1580c <callback_ctrl+0x14>
   15884:	e7e5      	b.n	15852 <callback_ctrl+0x5a>
   15886:	bf00      	nop
   15888:	0001eee8 	.word	0x0001eee8
   1588c:	0001e1dc 	.word	0x0001e1dc
   15890:	0001e1c4 	.word	0x0001e1c4
   15894:	0002162b 	.word	0x0002162b
   15898:	0001e5b4 	.word	0x0001e5b4

0001589c <button_pressed>:
{
   1589c:	b530      	push	{r4, r5, lr}
   1589e:	b087      	sub	sp, #28
	__asm__ volatile(
   158a0:	f04f 0320 	mov.w	r3, #32
   158a4:	f3ef 8511 	mrs	r5, BASEPRI
   158a8:	f383 8812 	msr	BASEPRI_MAX, r3
   158ac:	f3bf 8f6f 	isb	sy
	switch (state) {
   158b0:	4c13      	ldr	r4, [pc, #76]	; (15900 <button_pressed+0x64>)
   158b2:	7823      	ldrb	r3, [r4, #0]
   158b4:	b9eb      	cbnz	r3, 158f2 <button_pressed+0x56>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   158b6:	4b13      	ldr	r3, [pc, #76]	; (15904 <button_pressed+0x68>)
   158b8:	4298      	cmp	r0, r3
   158ba:	d002      	beq.n	158c2 <button_pressed+0x26>
   158bc:	4b12      	ldr	r3, [pc, #72]	; (15908 <button_pressed+0x6c>)
   158be:	4298      	cmp	r0, r3
   158c0:	d110      	bne.n	158e4 <button_pressed+0x48>
			err = callback_ctrl(false);
   158c2:	2000      	movs	r0, #0
   158c4:	f7ff ff98 	bl	157f8 <callback_ctrl>
			if (err) {
   158c8:	b148      	cbz	r0, 158de <button_pressed+0x42>
				LOG_ERR("Failed disabling interrupts");
   158ca:	4b10      	ldr	r3, [pc, #64]	; (1590c <button_pressed+0x70>)
   158cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158d0:	9305      	str	r3, [sp, #20]
   158d2:	2302      	movs	r3, #2
   158d4:	480e      	ldr	r0, [pc, #56]	; (15910 <button_pressed+0x74>)
   158d6:	aa04      	add	r2, sp, #16
   158d8:	9304      	str	r3, [sp, #16]
   158da:	f007 f860 	bl	1c99e <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   158de:	2200      	movs	r2, #0
   158e0:	4b0c      	ldr	r3, [pc, #48]	; (15914 <button_pressed+0x78>)
   158e2:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   158e4:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   158e6:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   158e8:	7023      	strb	r3, [r4, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   158ea:	480b      	ldr	r0, [pc, #44]	; (15918 <button_pressed+0x7c>)
   158ec:	2300      	movs	r3, #0
   158ee:	f002 f9bd 	bl	17c6c <k_work_reschedule>
	__asm__ volatile(
   158f2:	f385 8811 	msr	BASEPRI, r5
   158f6:	f3bf 8f6f 	isb	sy
}
   158fa:	b007      	add	sp, #28
   158fc:	bd30      	pop	{r4, r5, pc}
   158fe:	bf00      	nop
   15900:	20009d44 	.word	0x20009d44
   15904:	0001e1dc 	.word	0x0001e1dc
   15908:	0001e1c4 	.word	0x0001e1c4
   1590c:	0002164b 	.word	0x0002164b
   15910:	0001e5b4 	.word	0x0001e5b4
   15914:	20009d43 	.word	0x20009d43
   15918:	20009598 	.word	0x20009598

0001591c <buttons_scan_fn>:
{
   1591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   15920:	4f37      	ldr	r7, [pc, #220]	; (15a00 <buttons_scan_fn+0xe4>)
{
   15922:	b086      	sub	sp, #24
	if (irq_enabled) {
   15924:	783b      	ldrb	r3, [r7, #0]
   15926:	b17b      	cbz	r3, 15948 <buttons_scan_fn+0x2c>
		err = callback_ctrl(false);
   15928:	2000      	movs	r0, #0
   1592a:	f7ff ff65 	bl	157f8 <callback_ctrl>
		if (err) {
   1592e:	b150      	cbz	r0, 15946 <buttons_scan_fn+0x2a>
			LOG_ERR("Cannot disable callbacks");
   15930:	4b34      	ldr	r3, [pc, #208]	; (15a04 <buttons_scan_fn+0xe8>)
			LOG_ERR("Cannot enable callbacks");
   15932:	9305      	str	r3, [sp, #20]
   15934:	2302      	movs	r3, #2
   15936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1593a:	4833      	ldr	r0, [pc, #204]	; (15a08 <buttons_scan_fn+0xec>)
   1593c:	aa04      	add	r2, sp, #16
   1593e:	9304      	str	r3, [sp, #16]
   15940:	f007 f82d 	bl	1c99e <z_log_msg_static_create.constprop.0>
   15944:	e04c      	b.n	159e0 <buttons_scan_fn+0xc4>
		irq_enabled = false;
   15946:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   15948:	f7ff fef4 	bl	15734 <get_buttons>
   1594c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1594e:	4b2f      	ldr	r3, [pc, #188]	; (15a0c <buttons_scan_fn+0xf0>)
   15950:	e8d3 2fef 	ldaex	r2, [r3]
   15954:	e8c3 4fe1 	stlex	r1, r4, [r3]
   15958:	2900      	cmp	r1, #0
   1595a:	d1f9      	bne.n	15950 <buttons_scan_fn+0x34>
	if (!initial_run) {
   1595c:	4b2c      	ldr	r3, [pc, #176]	; (15a10 <buttons_scan_fn+0xf4>)
   1595e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15a14 <buttons_scan_fn+0xf8>
   15962:	781a      	ldrb	r2, [r3, #0]
   15964:	bb4a      	cbnz	r2, 159ba <buttons_scan_fn+0x9e>
		if (button_scan != last_button_scan) {
   15966:	f8d8 6000 	ldr.w	r6, [r8]
   1596a:	42a6      	cmp	r6, r4
   1596c:	d019      	beq.n	159a2 <buttons_scan_fn+0x86>
	if (button_handler_cb != NULL) {
   1596e:	4b2a      	ldr	r3, [pc, #168]	; (15a18 <buttons_scan_fn+0xfc>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   15970:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   15972:	681b      	ldr	r3, [r3, #0]
   15974:	b10b      	cbz	r3, 1597a <buttons_scan_fn+0x5e>
		button_handler_cb(button_state, has_changed);
   15976:	4631      	mov	r1, r6
   15978:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1597a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1597e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15982:	4826      	ldr	r0, [pc, #152]	; (15a1c <buttons_scan_fn+0x100>)
   15984:	f001 fe32 	bl	175ec <z_impl_k_mutex_lock>
	return list->head;
   15988:	4b25      	ldr	r3, [pc, #148]	; (15a20 <buttons_scan_fn+0x104>)
   1598a:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1598c:	b135      	cbz	r5, 1599c <buttons_scan_fn+0x80>
   1598e:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   15990:	682b      	ldr	r3, [r5, #0]
   15992:	4631      	mov	r1, r6
   15994:	4620      	mov	r0, r4
   15996:	4798      	blx	r3
	return node->next;
   15998:	686d      	ldr	r5, [r5, #4]
   1599a:	e7f7      	b.n	1598c <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
   1599c:	481f      	ldr	r0, [pc, #124]	; (15a1c <buttons_scan_fn+0x100>)
   1599e:	f001 fe9f 	bl	176e0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   159a2:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   159a6:	b15c      	cbz	r4, 159c0 <buttons_scan_fn+0xa4>
		k_work_reschedule(&buttons_scan,
   159a8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   159ac:	2300      	movs	r3, #0
   159ae:	481d      	ldr	r0, [pc, #116]	; (15a24 <buttons_scan_fn+0x108>)
}
   159b0:	b006      	add	sp, #24
   159b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   159b6:	f002 b959 	b.w	17c6c <k_work_reschedule>
		initial_run = false;
   159ba:	2200      	movs	r2, #0
   159bc:	701a      	strb	r2, [r3, #0]
   159be:	e7f0      	b.n	159a2 <buttons_scan_fn+0x86>
	__asm__ volatile(
   159c0:	f04f 0320 	mov.w	r3, #32
   159c4:	f3ef 8611 	mrs	r6, BASEPRI
   159c8:	f383 8812 	msr	BASEPRI_MAX, r3
   159cc:	f3bf 8f6f 	isb	sy
		switch (state) {
   159d0:	4b15      	ldr	r3, [pc, #84]	; (15a28 <buttons_scan_fn+0x10c>)
   159d2:	781d      	ldrb	r5, [r3, #0]
   159d4:	2d01      	cmp	r5, #1
   159d6:	d006      	beq.n	159e6 <buttons_scan_fn+0xca>
	__asm__ volatile(
   159d8:	f386 8811 	msr	BASEPRI, r6
   159dc:	f3bf 8f6f 	isb	sy
}
   159e0:	b006      	add	sp, #24
   159e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = callback_ctrl(true);
   159e6:	4628      	mov	r0, r5
			state = STATE_WAITING;
   159e8:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   159ea:	f7ff ff05 	bl	157f8 <callback_ctrl>
			irq_enabled = true;
   159ee:	703d      	strb	r5, [r7, #0]
   159f0:	f386 8811 	msr	BASEPRI, r6
   159f4:	f3bf 8f6f 	isb	sy
		if (err) {
   159f8:	2800      	cmp	r0, #0
   159fa:	d0f1      	beq.n	159e0 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot enable callbacks");
   159fc:	4b0b      	ldr	r3, [pc, #44]	; (15a2c <buttons_scan_fn+0x110>)
   159fe:	e798      	b.n	15932 <buttons_scan_fn+0x16>
   15a00:	20009d43 	.word	0x20009d43
   15a04:	00021667 	.word	0x00021667
   15a08:	0001e5b4 	.word	0x0001e5b4
   15a0c:	20009bc0 	.word	0x20009bc0
   15a10:	200084c3 	.word	0x200084c3
   15a14:	20009b94 	.word	0x20009b94
   15a18:	20009bc4 	.word	0x20009bc4
   15a1c:	20009b98 	.word	0x20009b98
   15a20:	20009bac 	.word	0x20009bac
   15a24:	20009598 	.word	0x20009598
   15a28:	20009d44 	.word	0x20009d44
   15a2c:	00021680 	.word	0x00021680

00015a30 <dk_leds_init>:
{
   15a30:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   15a32:	2500      	movs	r5, #0
   15a34:	4e10      	ldr	r6, [pc, #64]	; (15a78 <dk_leds_init+0x48>)
{
   15a36:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   15a38:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   15a3c:	4630      	mov	r0, r6
   15a3e:	f006 ff89 	bl	1c954 <gpio_pin_configure_dt>
		if (err) {
   15a42:	4604      	mov	r4, r0
   15a44:	b950      	cbnz	r0, 15a5c <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   15a46:	3501      	adds	r5, #1
   15a48:	2d04      	cmp	r5, #4
   15a4a:	f106 0608 	add.w	r6, r6, #8
   15a4e:	d1f3      	bne.n	15a38 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   15a50:	210f      	movs	r1, #15
}
   15a52:	b006      	add	sp, #24
   15a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15a58:	f7ff be9a 	b.w	15790 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   15a5c:	4b07      	ldr	r3, [pc, #28]	; (15a7c <dk_leds_init+0x4c>)
   15a5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a62:	9305      	str	r3, [sp, #20]
   15a64:	2302      	movs	r3, #2
   15a66:	4806      	ldr	r0, [pc, #24]	; (15a80 <dk_leds_init+0x50>)
   15a68:	aa04      	add	r2, sp, #16
   15a6a:	9304      	str	r3, [sp, #16]
   15a6c:	f006 ff97 	bl	1c99e <z_log_msg_static_create.constprop.0>
}
   15a70:	4620      	mov	r0, r4
   15a72:	b006      	add	sp, #24
   15a74:	bd70      	pop	{r4, r5, r6, pc}
   15a76:	bf00      	nop
   15a78:	0001eec8 	.word	0x0001eec8
   15a7c:	00021698 	.word	0x00021698
   15a80:	0001e5b4 	.word	0x0001e5b4

00015a84 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a84:	4b05      	ldr	r3, [pc, #20]	; (15a9c <dk_read_buttons+0x18>)
   15a86:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   15a8a:	b100      	cbz	r0, 15a8e <dk_read_buttons+0xa>
		*button_state = current_state;
   15a8c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   15a8e:	4804      	ldr	r0, [pc, #16]	; (15aa0 <dk_read_buttons+0x1c>)
   15a90:	b111      	cbz	r1, 15a98 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15a92:	6802      	ldr	r2, [r0, #0]
   15a94:	405a      	eors	r2, r3
   15a96:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   15a98:	6003      	str	r3, [r0, #0]
}
   15a9a:	4770      	bx	lr
   15a9c:	20009bc0 	.word	0x20009bc0
   15aa0:	20009b90 	.word	0x20009b90

00015aa4 <dk_buttons_init>:
{
   15aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   15aa8:	4b3a      	ldr	r3, [pc, #232]	; (15b94 <dk_buttons_init+0xf0>)
{
   15aaa:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   15aac:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15aae:	4d3a      	ldr	r5, [pc, #232]	; (15b98 <dk_buttons_init+0xf4>)
   15ab0:	483a      	ldr	r0, [pc, #232]	; (15b9c <dk_buttons_init+0xf8>)
   15ab2:	f007 fe5a 	bl	1d76a <z_impl_k_mutex_init>
   15ab6:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15ab8:	2700      	movs	r7, #0
   15aba:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   15abc:	88f3      	ldrh	r3, [r6, #6]
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   15abe:	4630      	mov	r0, r6
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   15ac0:	f013 0f01 	tst.w	r3, #1
   15ac4:	bf0c      	ite	eq
   15ac6:	2120      	moveq	r1, #32
   15ac8:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   15aca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   15ace:	f006 ff41 	bl	1c954 <gpio_pin_configure_dt>
		if (err) {
   15ad2:	4604      	mov	r4, r0
   15ad4:	b168      	cbz	r0, 15af2 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   15ad6:	4b32      	ldr	r3, [pc, #200]	; (15ba0 <dk_buttons_init+0xfc>)
			LOG_ERR("Cannot disable callbacks()");
   15ad8:	9305      	str	r3, [sp, #20]
   15ada:	2302      	movs	r3, #2
   15adc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ae0:	4830      	ldr	r0, [pc, #192]	; (15ba4 <dk_buttons_init+0x100>)
   15ae2:	aa04      	add	r2, sp, #16
   15ae4:	9304      	str	r3, [sp, #16]
   15ae6:	f006 ff5a 	bl	1c99e <z_log_msg_static_create.constprop.0>
}
   15aea:	4620      	mov	r0, r4
   15aec:	b007      	add	sp, #28
   15aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15af2:	3701      	adds	r7, #1
   15af4:	2f04      	cmp	r7, #4
   15af6:	f106 0608 	add.w	r6, r6, #8
   15afa:	d1df      	bne.n	15abc <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15afc:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   15afe:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   15b00:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   15b04:	6828      	ldr	r0, [r5, #0]
   15b06:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   15b08:	6883      	ldr	r3, [r0, #8]
   15b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15b0e:	699c      	ldr	r4, [r3, #24]
   15b10:	2300      	movs	r3, #0
   15b12:	47a0      	blx	r4
		if (err) {
   15b14:	4604      	mov	r4, r0
   15b16:	b108      	cbz	r0, 15b1c <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   15b18:	4b23      	ldr	r3, [pc, #140]	; (15ba8 <dk_buttons_init+0x104>)
   15b1a:	e7dd      	b.n	15ad8 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   15b1c:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15b1e:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   15b20:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15b24:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   15b26:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15b2a:	f105 0508 	add.w	r5, r5, #8
   15b2e:	d1e9      	bne.n	15b04 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15b30:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15b32:	4e1e      	ldr	r6, [pc, #120]	; (15bac <dk_buttons_init+0x108>)
   15b34:	4b1e      	ldr	r3, [pc, #120]	; (15bb0 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   15b36:	e9c6 3701 	strd	r3, r7, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   15b3a:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   15b3e:	6883      	ldr	r3, [r0, #8]
   15b40:	69db      	ldr	r3, [r3, #28]
   15b42:	b133      	cbz	r3, 15b52 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15b44:	2201      	movs	r2, #1
   15b46:	4631      	mov	r1, r6
   15b48:	4798      	blx	r3
		if (err) {
   15b4a:	4604      	mov	r4, r0
   15b4c:	b120      	cbz	r0, 15b58 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   15b4e:	4b19      	ldr	r3, [pc, #100]	; (15bb4 <dk_buttons_init+0x110>)
   15b50:	e7c2      	b.n	15ad8 <dk_buttons_init+0x34>
		return -ENOTSUP;
   15b52:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15b56:	e7fa      	b.n	15b4e <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   15b58:	3501      	adds	r5, #1
   15b5a:	2d04      	cmp	r5, #4
   15b5c:	d1ed      	bne.n	15b3a <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   15b5e:	4916      	ldr	r1, [pc, #88]	; (15bb8 <dk_buttons_init+0x114>)
   15b60:	4816      	ldr	r0, [pc, #88]	; (15bbc <dk_buttons_init+0x118>)
   15b62:	f007 ff67 	bl	1da34 <k_work_init_delayable>
	state = STATE_SCANNING;
   15b66:	2201      	movs	r2, #1
   15b68:	4b15      	ldr	r3, [pc, #84]	; (15bc0 <dk_buttons_init+0x11c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   15b6a:	4814      	ldr	r0, [pc, #80]	; (15bbc <dk_buttons_init+0x118>)
	state = STATE_SCANNING;
   15b6c:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   15b6e:	2300      	movs	r3, #0
   15b70:	2200      	movs	r2, #0
   15b72:	f002 f847 	bl	17c04 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   15b76:	4621      	mov	r1, r4
   15b78:	4620      	mov	r0, r4
   15b7a:	f7ff ff83 	bl	15a84 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   15b7e:	f7ff fdd9 	bl	15734 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15b82:	4b10      	ldr	r3, [pc, #64]	; (15bc4 <dk_buttons_init+0x120>)
   15b84:	e8d3 2fef 	ldaex	r2, [r3]
   15b88:	e8c3 0fe1 	stlex	r1, r0, [r3]
   15b8c:	2900      	cmp	r1, #0
   15b8e:	d0ac      	beq.n	15aea <dk_buttons_init+0x46>
   15b90:	e7f8      	b.n	15b84 <dk_buttons_init+0xe0>
   15b92:	bf00      	nop
   15b94:	20009bc4 	.word	0x20009bc4
   15b98:	0001eee8 	.word	0x0001eee8
   15b9c:	20009b98 	.word	0x20009b98
   15ba0:	000216b2 	.word	0x000216b2
   15ba4:	0001e5b4 	.word	0x0001e5b4
   15ba8:	000216cf 	.word	0x000216cf
   15bac:	20009bb4 	.word	0x20009bb4
   15bb0:	0001589d 	.word	0x0001589d
   15bb4:	000216ea 	.word	0x000216ea
   15bb8:	0001591d 	.word	0x0001591d
   15bbc:	20009598 	.word	0x20009598
   15bc0:	20009d44 	.word	0x20009d44
   15bc4:	20009bc0 	.word	0x20009bc0

00015bc8 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   15bc8:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   15bca:	2803      	cmp	r0, #3
{
   15bcc:	460a      	mov	r2, r1
   15bce:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   15bd0:	d90e      	bls.n	15bf0 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   15bd2:	4b12      	ldr	r3, [pc, #72]	; (15c1c <dk_set_led+0x54>)
		return -EINVAL;
   15bd4:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   15bd8:	9305      	str	r3, [sp, #20]
   15bda:	2302      	movs	r3, #2
   15bdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15be0:	480f      	ldr	r0, [pc, #60]	; (15c20 <dk_set_led+0x58>)
   15be2:	aa04      	add	r2, sp, #16
   15be4:	9304      	str	r3, [sp, #16]
   15be6:	f006 feda 	bl	1c99e <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   15bea:	4620      	mov	r0, r4
   15bec:	b006      	add	sp, #24
   15bee:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   15bf0:	4b0c      	ldr	r3, [pc, #48]	; (15c24 <dk_set_led+0x5c>)
   15bf2:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   15bf6:	7909      	ldrb	r1, [r1, #4]
   15bf8:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   15bfc:	f006 febf 	bl	1c97e <gpio_pin_set>
	if (err) {
   15c00:	4604      	mov	r4, r0
   15c02:	2800      	cmp	r0, #0
   15c04:	d0f1      	beq.n	15bea <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   15c06:	4b08      	ldr	r3, [pc, #32]	; (15c28 <dk_set_led+0x60>)
   15c08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c0c:	9305      	str	r3, [sp, #20]
   15c0e:	2302      	movs	r3, #2
   15c10:	4803      	ldr	r0, [pc, #12]	; (15c20 <dk_set_led+0x58>)
   15c12:	aa04      	add	r2, sp, #16
   15c14:	9304      	str	r3, [sp, #16]
   15c16:	f006 fec2 	bl	1c99e <z_log_msg_static_create.constprop.0>
   15c1a:	e7e6      	b.n	15bea <dk_set_led+0x22>
   15c1c:	000216fe 	.word	0x000216fe
   15c20:	0001e5b4 	.word	0x0001e5b4
   15c24:	0001eec8 	.word	0x0001eec8
   15c28:	00021615 	.word	0x00021615

00015c2c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   15c2e:	f7f5 f861 	bl	acf4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   15c32:	4b07      	ldr	r3, [pc, #28]	; (15c50 <k_sys_fatal_error_handler+0x24>)
   15c34:	9305      	str	r3, [sp, #20]
   15c36:	2302      	movs	r3, #2
   15c38:	9304      	str	r3, [sp, #16]
   15c3a:	4806      	ldr	r0, [pc, #24]	; (15c54 <k_sys_fatal_error_handler+0x28>)
   15c3c:	2300      	movs	r3, #0
   15c3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c42:	aa04      	add	r2, sp, #16
   15c44:	f7f5 f936 	bl	aeb4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   15c48:	2000      	movs	r0, #0
   15c4a:	f7f6 fbbd 	bl	c3c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   15c4e:	bf00      	nop
   15c50:	0002172d 	.word	0x0002172d
   15c54:	0001e5bc 	.word	0x0001e5bc

00015c58 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   15c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c5c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   15c5e:	4b15      	ldr	r3, [pc, #84]	; (15cb4 <tfm_ns_interface_dispatch+0x5c>)
   15c60:	4604      	mov	r4, r0
   15c62:	f893 8000 	ldrb.w	r8, [r3]
   15c66:	460d      	mov	r5, r1
   15c68:	4616      	mov	r6, r2
   15c6a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   15c6c:	f1b8 0f00 	cmp.w	r8, #0
   15c70:	d115      	bne.n	15c9e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   15c72:	4668      	mov	r0, sp
   15c74:	f004 faf3 	bl	1a25e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   15c78:	463a      	mov	r2, r7
   15c7a:	4631      	mov	r1, r6
   15c7c:	4628      	mov	r0, r5
   15c7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15c80:	47a0      	blx	r4
   15c82:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   15c84:	4668      	mov	r0, sp
   15c86:	f004 faeb 	bl	1a260 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   15c8a:	f1b8 0f00 	cmp.w	r8, #0
   15c8e:	d002      	beq.n	15c96 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   15c90:	4809      	ldr	r0, [pc, #36]	; (15cb8 <tfm_ns_interface_dispatch+0x60>)
   15c92:	f001 fd25 	bl	176e0 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   15c96:	4620      	mov	r0, r4
   15c98:	b022      	add	sp, #136	; 0x88
   15c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   15c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ca6:	4804      	ldr	r0, [pc, #16]	; (15cb8 <tfm_ns_interface_dispatch+0x60>)
   15ca8:	f001 fca0 	bl	175ec <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   15cac:	2800      	cmp	r0, #0
   15cae:	d0e0      	beq.n	15c72 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   15cb0:	241f      	movs	r4, #31
   15cb2:	e7f0      	b.n	15c96 <tfm_ns_interface_dispatch+0x3e>
   15cb4:	20009d45 	.word	0x20009d45
   15cb8:	20008580 	.word	0x20008580

00015cbc <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   15cbc:	2300      	movs	r3, #0
{
   15cbe:	b500      	push	{lr}
   15cc0:	b089      	sub	sp, #36	; 0x24
    struct psa_invec in_vec[2] = { {0} };
   15cc2:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;

    in_vec[0].base = &req;
   15cc6:	ab03      	add	r3, sp, #12
   15cc8:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   15cca:	2304      	movs	r3, #4
    tfm_platform_ioctl_req_t req = request;
   15ccc:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   15cce:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   15cd0:	b1a9      	cbz	r1, 15cfe <tfm_platform_ioctl+0x42>
        in_vec[1].base = input->base;
   15cd2:	680b      	ldr	r3, [r1, #0]
   15cd4:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   15cd6:	684b      	ldr	r3, [r1, #4]
   15cd8:	9307      	str	r3, [sp, #28]
        inlen = 2;
   15cda:	2302      	movs	r3, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   15cdc:	1e11      	subs	r1, r2, #0
   15cde:	bf18      	it	ne
   15ce0:	2101      	movne	r1, #1
        outlen = 1;
    } else {
        outlen = 0;
    }

    status = psa_call(TFM_PLATFORM_SERVICE_HANDLE,
   15ce2:	4808      	ldr	r0, [pc, #32]	; (15d04 <tfm_platform_ioctl+0x48>)
   15ce4:	e9cd 2100 	strd	r2, r1, [sp]
   15ce8:	f240 31f5 	movw	r1, #1013	; 0x3f5
   15cec:	aa04      	add	r2, sp, #16
   15cee:	f000 f82b 	bl	15d48 <psa_call>
                      TFM_PLATFORM_API_ID_IOCTL,
                      in_vec, inlen,
                      output, outlen);

    if (status < PSA_SUCCESS) {
   15cf2:	2800      	cmp	r0, #0
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t)status;
    }
}
   15cf4:	bfb8      	it	lt
   15cf6:	2001      	movlt	r0, #1
   15cf8:	b009      	add	sp, #36	; 0x24
   15cfa:	f85d fb04 	ldr.w	pc, [sp], #4
        inlen = 1;
   15cfe:	2301      	movs	r3, #1
   15d00:	e7ec      	b.n	15cdc <tfm_platform_ioctl+0x20>
   15d02:	bf00      	nop
   15d04:	40000105 	.word	0x40000105

00015d08 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   15d08:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   15d0a:	2630      	movs	r6, #48	; 0x30
{
   15d0c:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   15d0e:	ab06      	add	r3, sp, #24
{
   15d10:	4605      	mov	r5, r0
   15d12:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   15d14:	4632      	mov	r2, r6
   15d16:	2100      	movs	r1, #0
   15d18:	4618      	mov	r0, r3
   15d1a:	f004 fb33 	bl	1a384 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   15d1e:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   15d22:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   15d26:	b154      	cbz	r4, 15d3e <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   15d28:	2301      	movs	r3, #1
   15d2a:	aa04      	add	r2, sp, #16
   15d2c:	9200      	str	r2, [sp, #0]
   15d2e:	2100      	movs	r1, #0
   15d30:	4804      	ldr	r0, [pc, #16]	; (15d44 <psa_generate_random+0x3c>)
   15d32:	9301      	str	r3, [sp, #4]
   15d34:	aa02      	add	r2, sp, #8
   15d36:	f000 f807 	bl	15d48 <psa_call>
}
   15d3a:	b012      	add	sp, #72	; 0x48
   15d3c:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   15d3e:	4620      	mov	r0, r4
   15d40:	e7fb      	b.n	15d3a <psa_generate_random+0x32>
   15d42:	bf00      	nop
   15d44:	40000100 	.word	0x40000100

00015d48 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   15d48:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   15d4a:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   15d4e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   15d52:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   15d54:	d20d      	bcs.n	15d72 <psa_call+0x2a>
        (type < INT16_MIN) ||
   15d56:	ea43 0504 	orr.w	r5, r3, r4
   15d5a:	2dff      	cmp	r5, #255	; 0xff
   15d5c:	d809      	bhi.n	15d72 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   15d5e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   15d62:	4613      	mov	r3, r2
   15d64:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   15d68:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   15d6a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   15d6c:	4803      	ldr	r0, [pc, #12]	; (15d7c <psa_call+0x34>)
   15d6e:	f7ff bf73 	b.w	15c58 <tfm_ns_interface_dispatch>
}
   15d72:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15d76:	bc30      	pop	{r4, r5}
   15d78:	4770      	bx	lr
   15d7a:	bf00      	nop
   15d7c:	00007c11 	.word	0x00007c11

00015d80 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15d80:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15d82:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   15d84:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15d86:	fab2 f382 	clz	r3, r2
   15d8a:	f1c3 031f 	rsb	r3, r3, #31
   15d8e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   15d90:	fa05 f403 	lsl.w	r4, r5, r3
   15d94:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15d98:	e8d0 6fef 	ldaex	r6, [r0]
   15d9c:	4296      	cmp	r6, r2
   15d9e:	d104      	bne.n	15daa <nrfx_flag32_alloc+0x2a>
   15da0:	e8c0 4fec 	stlex	ip, r4, [r0]
   15da4:	f1bc 0f00 	cmp.w	ip, #0
   15da8:	d1f6      	bne.n	15d98 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15daa:	d1eb      	bne.n	15d84 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   15dac:	4801      	ldr	r0, [pc, #4]	; (15db4 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   15dae:	700b      	strb	r3, [r1, #0]
}
   15db0:	bd70      	pop	{r4, r5, r6, pc}
   15db2:	bf00      	nop
   15db4:	0bad0000 	.word	0x0bad0000

00015db8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   15db8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15dba:	6803      	ldr	r3, [r0, #0]
   15dbc:	40cb      	lsrs	r3, r1
   15dbe:	07db      	lsls	r3, r3, #31
   15dc0:	d410      	bmi.n	15de4 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   15dc2:	2301      	movs	r3, #1
   15dc4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   15dc6:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15dc8:	ea43 0102 	orr.w	r1, r3, r2
   15dcc:	e8d0 4fef 	ldaex	r4, [r0]
   15dd0:	4294      	cmp	r4, r2
   15dd2:	d104      	bne.n	15dde <nrfx_flag32_free+0x26>
   15dd4:	e8c0 1fec 	stlex	ip, r1, [r0]
   15dd8:	f1bc 0f00 	cmp.w	ip, #0
   15ddc:	d1f6      	bne.n	15dcc <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15dde:	d1f2      	bne.n	15dc6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   15de0:	4801      	ldr	r0, [pc, #4]	; (15de8 <nrfx_flag32_free+0x30>)
}
   15de2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15de4:	4801      	ldr	r0, [pc, #4]	; (15dec <nrfx_flag32_free+0x34>)
   15de6:	e7fc      	b.n	15de2 <nrfx_flag32_free+0x2a>
   15de8:	0bad0000 	.word	0x0bad0000
   15dec:	0bad0004 	.word	0x0bad0004

00015df0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   15df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   15df2:	2803      	cmp	r0, #3
   15df4:	f200 80a0 	bhi.w	15f38 <clock_stop+0x148>
   15df8:	e8df f000 	tbb	[pc, r0]
   15dfc:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   15e00:	2202      	movs	r2, #2
   15e02:	4b59      	ldr	r3, [pc, #356]	; (15f68 <clock_stop+0x178>)
   15e04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e08:	2200      	movs	r2, #0
   15e0a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15e0e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e12:	2201      	movs	r2, #1
   15e14:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15e16:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   15e18:	2301      	movs	r3, #1
   15e1a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   15e1e:	2803      	cmp	r0, #3
   15e20:	f200 808a 	bhi.w	15f38 <clock_stop+0x148>
   15e24:	e8df f000 	tbb	[pc, r0]
   15e28:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   15e2c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e2e:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   15e30:	4b4d      	ldr	r3, [pc, #308]	; (15f68 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15e32:	f10d 0407 	add.w	r4, sp, #7
   15e36:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e3a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   15e3e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e42:	605a      	str	r2, [r3, #4]
   15e44:	e7e8      	b.n	15e18 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   15e46:	f44f 7200 	mov.w	r2, #512	; 0x200
   15e4a:	4b47      	ldr	r3, [pc, #284]	; (15f68 <clock_stop+0x178>)
   15e4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e50:	2200      	movs	r2, #0
   15e52:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15e56:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e5a:	2201      	movs	r2, #1
   15e5c:	625a      	str	r2, [r3, #36]	; 0x24
   15e5e:	e7da      	b.n	15e16 <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   15e60:	f44f 7280 	mov.w	r2, #256	; 0x100
   15e64:	4b40      	ldr	r3, [pc, #256]	; (15f68 <clock_stop+0x178>)
   15e66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e6a:	2200      	movs	r2, #0
   15e6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15e70:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e74:	2201      	movs	r2, #1
   15e76:	61da      	str	r2, [r3, #28]
   15e78:	e7cd      	b.n	15e16 <clock_stop+0x26>
    switch (domain)
   15e7a:	f242 7510 	movw	r5, #10000	; 0x2710
   15e7e:	4e3a      	ldr	r6, [pc, #232]	; (15f68 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   15e80:	b36c      	cbz	r4, 15ede <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15e82:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15e86:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   15e8a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15e8c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15e90:	03d9      	lsls	r1, r3, #15
   15e92:	d551      	bpl.n	15f38 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15e94:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15e98:	2801      	cmp	r0, #1
   15e9a:	d14d      	bne.n	15f38 <clock_stop+0x148>
   15e9c:	f006 fda7 	bl	1c9ee <nrfx_busy_wait>
   15ea0:	3d01      	subs	r5, #1
   15ea2:	d1ed      	bne.n	15e80 <clock_stop+0x90>
   15ea4:	e048      	b.n	15f38 <clock_stop+0x148>
   15ea6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15eaa:	2801      	cmp	r0, #1
   15eac:	d144      	bne.n	15f38 <clock_stop+0x148>
   15eae:	f006 fd9e 	bl	1c9ee <nrfx_busy_wait>
   15eb2:	3d01      	subs	r5, #1
   15eb4:	d14f      	bne.n	15f56 <clock_stop+0x166>
   15eb6:	e03f      	b.n	15f38 <clock_stop+0x148>
   15eb8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15ebc:	2801      	cmp	r0, #1
   15ebe:	d13b      	bne.n	15f38 <clock_stop+0x148>
   15ec0:	f006 fd95 	bl	1c9ee <nrfx_busy_wait>
   15ec4:	3d01      	subs	r5, #1
   15ec6:	d037      	beq.n	15f38 <clock_stop+0x148>
            if (p_clk_src != NULL)
   15ec8:	b1bc      	cbz	r4, 15efa <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15eca:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15ece:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15ed2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15ed4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15ed8:	03db      	lsls	r3, r3, #15
   15eda:	d52d      	bpl.n	15f38 <clock_stop+0x148>
   15edc:	e7ec      	b.n	15eb8 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15ede:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15ee2:	03da      	lsls	r2, r3, #15
   15ee4:	d528      	bpl.n	15f38 <clock_stop+0x148>
   15ee6:	2001      	movs	r0, #1
   15ee8:	f006 fd81 	bl	1c9ee <nrfx_busy_wait>
   15eec:	3d01      	subs	r5, #1
   15eee:	d1f6      	bne.n	15ede <clock_stop+0xee>
   15ef0:	e022      	b.n	15f38 <clock_stop+0x148>
    switch (domain)
   15ef2:	f242 7510 	movw	r5, #10000	; 0x2710
   15ef6:	4e1c      	ldr	r6, [pc, #112]	; (15f68 <clock_stop+0x178>)
   15ef8:	e7e6      	b.n	15ec8 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15efa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15efe:	03d8      	lsls	r0, r3, #15
   15f00:	d51a      	bpl.n	15f38 <clock_stop+0x148>
   15f02:	2001      	movs	r0, #1
   15f04:	f006 fd73 	bl	1c9ee <nrfx_busy_wait>
   15f08:	3d01      	subs	r5, #1
   15f0a:	d1f6      	bne.n	15efa <clock_stop+0x10a>
   15f0c:	e014      	b.n	15f38 <clock_stop+0x148>
    switch (domain)
   15f0e:	f242 7510 	movw	r5, #10000	; 0x2710
   15f12:	4e15      	ldr	r6, [pc, #84]	; (15f68 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   15f14:	b194      	cbz	r4, 15f3c <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   15f16:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15f1a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15f1e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15f20:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15f24:	03d9      	lsls	r1, r3, #15
   15f26:	d507      	bpl.n	15f38 <clock_stop+0x148>
   15f28:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15f2c:	2801      	cmp	r0, #1
   15f2e:	d103      	bne.n	15f38 <clock_stop+0x148>
   15f30:	f006 fd5d 	bl	1c9ee <nrfx_busy_wait>
   15f34:	3d01      	subs	r5, #1
   15f36:	d1ed      	bne.n	15f14 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15f38:	b002      	add	sp, #8
   15f3a:	bd70      	pop	{r4, r5, r6, pc}
   15f3c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15f40:	03da      	lsls	r2, r3, #15
   15f42:	d5f9      	bpl.n	15f38 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15f44:	2001      	movs	r0, #1
   15f46:	f006 fd52 	bl	1c9ee <nrfx_busy_wait>
   15f4a:	3d01      	subs	r5, #1
   15f4c:	d1f6      	bne.n	15f3c <clock_stop+0x14c>
   15f4e:	e7f3      	b.n	15f38 <clock_stop+0x148>
    switch (domain)
   15f50:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15f54:	4e04      	ldr	r6, [pc, #16]	; (15f68 <clock_stop+0x178>)
   15f56:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   15f5a:	03db      	lsls	r3, r3, #15
   15f5c:	d5ec      	bpl.n	15f38 <clock_stop+0x148>
   15f5e:	2c00      	cmp	r4, #0
   15f60:	d1a1      	bne.n	15ea6 <clock_stop+0xb6>
   15f62:	2001      	movs	r0, #1
   15f64:	e7a3      	b.n	15eae <clock_stop+0xbe>
   15f66:	bf00      	nop
   15f68:	40005000 	.word	0x40005000

00015f6c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15f6c:	4b04      	ldr	r3, [pc, #16]	; (15f80 <nrfx_clock_init+0x14>)
   15f6e:	791a      	ldrb	r2, [r3, #4]
   15f70:	b922      	cbnz	r2, 15f7c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15f72:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   15f74:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   15f76:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15f78:	4802      	ldr	r0, [pc, #8]	; (15f84 <nrfx_clock_init+0x18>)
   15f7a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15f7c:	4802      	ldr	r0, [pc, #8]	; (15f88 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15f7e:	4770      	bx	lr
   15f80:	20009bc8 	.word	0x20009bc8
   15f84:	0bad0000 	.word	0x0bad0000
   15f88:	0bad000c 	.word	0x0bad000c

00015f8c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15f8c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15f8e:	2005      	movs	r0, #5
   15f90:	f7f5 fdd6 	bl	bb40 <arch_irq_is_enabled>
   15f94:	b910      	cbnz	r0, 15f9c <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15f96:	2005      	movs	r0, #5
   15f98:	f7f5 fdb0 	bl	bafc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f9c:	2201      	movs	r2, #1
   15f9e:	4b04      	ldr	r3, [pc, #16]	; (15fb0 <nrfx_clock_enable+0x24>)
   15fa0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15fa4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15fa8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15fac:	bd08      	pop	{r3, pc}
   15fae:	bf00      	nop
   15fb0:	40005000 	.word	0x40005000

00015fb4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   15fb4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15fb6:	2803      	cmp	r0, #3
   15fb8:	d818      	bhi.n	15fec <nrfx_clock_start+0x38>
   15fba:	e8df f000 	tbb	[pc, r0]
   15fbe:	3002      	.short	0x3002
   15fc0:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15fc2:	4a29      	ldr	r2, [pc, #164]	; (16068 <nrfx_clock_start+0xb4>)
   15fc4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15fc8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   15fcc:	03c9      	lsls	r1, r1, #15
   15fce:	d40e      	bmi.n	15fee <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   15fd0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   15fd4:	07db      	lsls	r3, r3, #31
   15fd6:	d513      	bpl.n	16000 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15fd8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   15fdc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15fe0:	3b01      	subs	r3, #1
   15fe2:	2b01      	cmp	r3, #1
   15fe4:	d809      	bhi.n	15ffa <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   15fe6:	2302      	movs	r3, #2
   15fe8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15fec:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15fee:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15ff2:	2b02      	cmp	r3, #2
   15ff4:	d005      	beq.n	16002 <nrfx_clock_start+0x4e>
   15ff6:	2b01      	cmp	r3, #1
   15ff8:	d002      	beq.n	16000 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   15ffa:	2000      	movs	r0, #0
   15ffc:	f7ff fef8 	bl	15df0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   16000:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   16002:	4a19      	ldr	r2, [pc, #100]	; (16068 <nrfx_clock_start+0xb4>)
   16004:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16008:	2300      	movs	r3, #0
   1600a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1600e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   16012:	2302      	movs	r3, #2
   16014:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16018:	2301      	movs	r3, #1
   1601a:	6093      	str	r3, [r2, #8]
}
   1601c:	e7e6      	b.n	15fec <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1601e:	2200      	movs	r2, #0
   16020:	4b11      	ldr	r3, [pc, #68]	; (16068 <nrfx_clock_start+0xb4>)
   16022:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16026:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1602a:	2201      	movs	r2, #1
   1602c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16030:	601a      	str	r2, [r3, #0]
}
   16032:	e7db      	b.n	15fec <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16034:	2200      	movs	r2, #0
   16036:	4b0c      	ldr	r3, [pc, #48]	; (16068 <nrfx_clock_start+0xb4>)
   16038:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1603c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16040:	f44f 7200 	mov.w	r2, #512	; 0x200
   16044:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16048:	2201      	movs	r2, #1
   1604a:	621a      	str	r2, [r3, #32]
}
   1604c:	e7ce      	b.n	15fec <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1604e:	2200      	movs	r2, #0
   16050:	4b05      	ldr	r3, [pc, #20]	; (16068 <nrfx_clock_start+0xb4>)
   16052:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16056:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1605a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1605e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16062:	2201      	movs	r2, #1
   16064:	619a      	str	r2, [r3, #24]
}
   16066:	e7c1      	b.n	15fec <nrfx_clock_start+0x38>
   16068:	40005000 	.word	0x40005000

0001606c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1606c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1606e:	4b28      	ldr	r3, [pc, #160]	; (16110 <nrfx_power_clock_irq_handler+0xa4>)
   16070:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16074:	b152      	cbz	r2, 1608c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16076:	2000      	movs	r0, #0
   16078:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1607c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16080:	2201      	movs	r2, #1
   16082:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16086:	4b23      	ldr	r3, [pc, #140]	; (16114 <nrfx_power_clock_irq_handler+0xa8>)
   16088:	681b      	ldr	r3, [r3, #0]
   1608a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1608c:	4b20      	ldr	r3, [pc, #128]	; (16110 <nrfx_power_clock_irq_handler+0xa4>)
   1608e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16092:	b18a      	cbz	r2, 160b8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16094:	2200      	movs	r2, #0
   16096:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1609a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1609e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   160a2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   160a6:	f002 0203 	and.w	r2, r2, #3
   160aa:	2a01      	cmp	r2, #1
   160ac:	f04f 0102 	mov.w	r1, #2
   160b0:	d126      	bne.n	16100 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   160b2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   160b6:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   160b8:	4b15      	ldr	r3, [pc, #84]	; (16110 <nrfx_power_clock_irq_handler+0xa4>)
   160ba:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   160be:	b162      	cbz	r2, 160da <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160c0:	2200      	movs	r2, #0
   160c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   160c6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   160ca:	f44f 7280 	mov.w	r2, #256	; 0x100
   160ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   160d2:	4b10      	ldr	r3, [pc, #64]	; (16114 <nrfx_power_clock_irq_handler+0xa8>)
   160d4:	2004      	movs	r0, #4
   160d6:	681b      	ldr	r3, [r3, #0]
   160d8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   160da:	4b0d      	ldr	r3, [pc, #52]	; (16110 <nrfx_power_clock_irq_handler+0xa4>)
   160dc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   160e0:	b1aa      	cbz	r2, 1610e <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160e2:	2200      	movs	r2, #0
   160e4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   160e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   160ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   160f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   160f4:	4b07      	ldr	r3, [pc, #28]	; (16114 <nrfx_power_clock_irq_handler+0xa8>)
   160f6:	2005      	movs	r0, #5
    }
#endif
}
   160f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   160fc:	681b      	ldr	r3, [r3, #0]
   160fe:	4718      	bx	r3
   16100:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16104:	4b03      	ldr	r3, [pc, #12]	; (16114 <nrfx_power_clock_irq_handler+0xa8>)
   16106:	2001      	movs	r0, #1
   16108:	681b      	ldr	r3, [r3, #0]
   1610a:	4798      	blx	r3
   1610c:	e7d4      	b.n	160b8 <nrfx_power_clock_irq_handler+0x4c>
}
   1610e:	bd10      	pop	{r4, pc}
   16110:	40005000 	.word	0x40005000
   16114:	20009bc8 	.word	0x20009bc8

00016118 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16118:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1611a:	4801      	ldr	r0, [pc, #4]	; (16120 <nrfx_dppi_channel_alloc+0x8>)
   1611c:	f7ff be30 	b.w	15d80 <nrfx_flag32_alloc>
   16120:	20008334 	.word	0x20008334

00016124 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   16124:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   16126:	4a04      	ldr	r2, [pc, #16]	; (16138 <nrfx_dppi_channel_free+0x14>)
   16128:	4083      	lsls	r3, r0
{
   1612a:	4601      	mov	r1, r0
   1612c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   16130:	4802      	ldr	r0, [pc, #8]	; (1613c <nrfx_dppi_channel_free+0x18>)
   16132:	f7ff be41 	b.w	15db8 <nrfx_flag32_free>
   16136:	bf00      	nop
   16138:	40017000 	.word	0x40017000
   1613c:	20008334 	.word	0x20008334

00016140 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   16140:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   16142:	f003 021f 	and.w	r2, r3, #31
   16146:	6002      	str	r2, [r0, #0]
}
   16148:	4a03      	ldr	r2, [pc, #12]	; (16158 <nrf_gpio_pin_port_decode+0x18>)
   1614a:	4804      	ldr	r0, [pc, #16]	; (1615c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   1614c:	095b      	lsrs	r3, r3, #5
}
   1614e:	2b01      	cmp	r3, #1
   16150:	bf18      	it	ne
   16152:	4610      	movne	r0, r2
   16154:	4770      	bx	lr
   16156:	bf00      	nop
   16158:	40842500 	.word	0x40842500
   1615c:	40842800 	.word	0x40842800

00016160 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   16160:	4b03      	ldr	r3, [pc, #12]	; (16170 <pin_in_use_by_te+0x10>)
   16162:	3008      	adds	r0, #8
   16164:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   16168:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1616c:	4770      	bx	lr
   1616e:	bf00      	nop
   16170:	20008338 	.word	0x20008338

00016174 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   16174:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16176:	4c0d      	ldr	r4, [pc, #52]	; (161ac <call_handler+0x38>)
   16178:	f100 0308 	add.w	r3, r0, #8
   1617c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   16180:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16182:	05da      	lsls	r2, r3, #23
{
   16184:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16186:	d507      	bpl.n	16198 <call_handler+0x24>
   16188:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1618c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   16190:	6852      	ldr	r2, [r2, #4]
   16192:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   16196:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   16198:	68a3      	ldr	r3, [r4, #8]
   1619a:	b12b      	cbz	r3, 161a8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1619c:	4631      	mov	r1, r6
   1619e:	4628      	mov	r0, r5
   161a0:	68e2      	ldr	r2, [r4, #12]
    }
}
   161a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   161a6:	4718      	bx	r3
}
   161a8:	bd70      	pop	{r4, r5, r6, pc}
   161aa:	bf00      	nop
   161ac:	20008338 	.word	0x20008338

000161b0 <release_handler>:
{
   161b0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   161b2:	4a12      	ldr	r2, [pc, #72]	; (161fc <release_handler+0x4c>)
   161b4:	3008      	adds	r0, #8
   161b6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   161ba:	05d9      	lsls	r1, r3, #23
   161bc:	d51b      	bpl.n	161f6 <release_handler+0x46>
   161be:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   161c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   161c6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   161ca:	2000      	movs	r0, #0
   161cc:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   161d0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   161d4:	f413 7f80 	tst.w	r3, #256	; 0x100
   161d8:	d003      	beq.n	161e2 <release_handler+0x32>
   161da:	f3c3 2343 	ubfx	r3, r3, #9, #4
   161de:	4299      	cmp	r1, r3
   161e0:	d009      	beq.n	161f6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   161e2:	3001      	adds	r0, #1
   161e4:	2830      	cmp	r0, #48	; 0x30
   161e6:	d1f3      	bne.n	161d0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   161e8:	2300      	movs	r3, #0
   161ea:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   161ee:	4804      	ldr	r0, [pc, #16]	; (16200 <release_handler+0x50>)
}
   161f0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   161f2:	f7ff bde1 	b.w	15db8 <nrfx_flag32_free>
}
   161f6:	bc10      	pop	{r4}
   161f8:	4770      	bx	lr
   161fa:	bf00      	nop
   161fc:	20008338 	.word	0x20008338
   16200:	200083ac 	.word	0x200083ac

00016204 <pin_handler_trigger_uninit>:
{
   16204:	b538      	push	{r3, r4, r5, lr}
   16206:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   16208:	f7ff ffaa 	bl	16160 <pin_in_use_by_te>
   1620c:	4c0b      	ldr	r4, [pc, #44]	; (1623c <pin_handler_trigger_uninit+0x38>)
   1620e:	f102 0508 	add.w	r5, r2, #8
   16212:	b160      	cbz	r0, 1622e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   16214:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16216:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1621a:	0b5b      	lsrs	r3, r3, #13
   1621c:	009b      	lsls	r3, r3, #2
   1621e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16222:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   16226:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   1622a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1622e:	4610      	mov	r0, r2
   16230:	f7ff ffbe 	bl	161b0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   16234:	2300      	movs	r3, #0
   16236:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1623a:	bd38      	pop	{r3, r4, r5, pc}
   1623c:	20008338 	.word	0x20008338

00016240 <nrfx_gpiote_input_configure>:
{
   16240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16244:	4604      	mov	r4, r0
   16246:	4690      	mov	r8, r2
   16248:	461d      	mov	r5, r3
    if (p_input_config)
   1624a:	b301      	cbz	r1, 1628e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1624c:	4e4f      	ldr	r6, [pc, #316]	; (1638c <nrfx_gpiote_input_configure+0x14c>)
   1624e:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   16252:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   16256:	079b      	lsls	r3, r3, #30
   16258:	d502      	bpl.n	16260 <nrfx_gpiote_input_configure+0x20>
   1625a:	f7ff ff81 	bl	16160 <pin_in_use_by_te>
   1625e:	bb28      	cbnz	r0, 162ac <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16260:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   16262:	4620      	mov	r0, r4
   16264:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16268:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1626c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   16270:	f10d 020f 	add.w	r2, sp, #15
   16274:	460b      	mov	r3, r1
   16276:	f10d 010e 	add.w	r1, sp, #14
   1627a:	f006 fbbc 	bl	1c9f6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1627e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   16282:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16286:	f043 0301 	orr.w	r3, r3, #1
   1628a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   1628e:	f1b8 0f00 	cmp.w	r8, #0
   16292:	d02d      	beq.n	162f0 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16294:	4e3d      	ldr	r6, [pc, #244]	; (1638c <nrfx_gpiote_input_configure+0x14c>)
   16296:	f104 0708 	add.w	r7, r4, #8
   1629a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1629e:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   162a2:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   162a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   162a8:	d502      	bpl.n	162b0 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   162aa:	b1cb      	cbz	r3, 162e0 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   162ac:	4838      	ldr	r0, [pc, #224]	; (16390 <nrfx_gpiote_input_configure+0x150>)
   162ae:	e021      	b.n	162f4 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   162b0:	f021 0120 	bic.w	r1, r1, #32
   162b4:	04c9      	lsls	r1, r1, #19
   162b6:	0cc9      	lsrs	r1, r1, #19
   162b8:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   162bc:	b183      	cbz	r3, 162e0 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   162be:	2803      	cmp	r0, #3
   162c0:	d8f4      	bhi.n	162ac <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   162c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   162c6:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   162ca:	4662      	mov	r2, ip
   162cc:	0092      	lsls	r2, r2, #2
   162ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   162d2:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   162d6:	b980      	cbnz	r0, 162fa <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   162d8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   162dc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   162e0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   162e4:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   162e8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   162ec:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   162f0:	bb1d      	cbnz	r5, 1633a <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   162f2:	4828      	ldr	r0, [pc, #160]	; (16394 <nrfx_gpiote_input_configure+0x154>)
}
   162f4:	b004      	add	sp, #16
   162f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   162fa:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   162fe:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   16302:	f023 0303 	bic.w	r3, r3, #3
   16306:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1630a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1630e:	f041 0120 	orr.w	r1, r1, #32
   16312:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   16316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1631a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1631e:	0223      	lsls	r3, r4, #8
   16320:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   16324:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   16328:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1632c:	ea43 030e 	orr.w	r3, r3, lr
   16330:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   16334:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   16338:	e7d2      	b.n	162e0 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   1633a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1633c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   16340:	f7ff ff36 	bl	161b0 <release_handler>
    if (!handler)
   16344:	2e00      	cmp	r6, #0
   16346:	d0d4      	beq.n	162f2 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16348:	4d10      	ldr	r5, [pc, #64]	; (1638c <nrfx_gpiote_input_configure+0x14c>)
   1634a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1634e:	4296      	cmp	r6, r2
   16350:	d101      	bne.n	16356 <nrfx_gpiote_input_configure+0x116>
   16352:	429f      	cmp	r7, r3
   16354:	d018      	beq.n	16388 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   16356:	4810      	ldr	r0, [pc, #64]	; (16398 <nrfx_gpiote_input_configure+0x158>)
   16358:	f10d 010f 	add.w	r1, sp, #15
   1635c:	f7ff fd10 	bl	15d80 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16360:	4b0c      	ldr	r3, [pc, #48]	; (16394 <nrfx_gpiote_input_configure+0x154>)
   16362:	4298      	cmp	r0, r3
   16364:	d1c6      	bne.n	162f4 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   16366:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1636a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1636e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   16370:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16372:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   16376:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1637a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1637e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16382:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   16386:	e7b4      	b.n	162f2 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16388:	2200      	movs	r2, #0
   1638a:	e7ee      	b.n	1636a <nrfx_gpiote_input_configure+0x12a>
   1638c:	20008338 	.word	0x20008338
   16390:	0bad0004 	.word	0x0bad0004
   16394:	0bad0000 	.word	0x0bad0000
   16398:	200083ac 	.word	0x200083ac

0001639c <nrfx_gpiote_output_configure>:
{
   1639c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1639e:	4604      	mov	r4, r0
   163a0:	4615      	mov	r5, r2
   163a2:	b085      	sub	sp, #20
    if (p_config)
   163a4:	b319      	cbz	r1, 163ee <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   163a6:	4e34      	ldr	r6, [pc, #208]	; (16478 <nrfx_gpiote_output_configure+0xdc>)
   163a8:	f100 0708 	add.w	r7, r0, #8
   163ac:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   163b0:	0793      	lsls	r3, r2, #30
   163b2:	d403      	bmi.n	163bc <nrfx_gpiote_output_configure+0x20>
   163b4:	f7ff fed4 	bl	16160 <pin_in_use_by_te>
   163b8:	2800      	cmp	r0, #0
   163ba:	d15a      	bne.n	16472 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   163bc:	f012 0f1c 	tst.w	r2, #28
   163c0:	d002      	beq.n	163c8 <nrfx_gpiote_output_configure+0x2c>
   163c2:	784b      	ldrb	r3, [r1, #1]
   163c4:	2b01      	cmp	r3, #1
   163c6:	d054      	beq.n	16472 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   163c8:	2301      	movs	r3, #1
   163ca:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   163ce:	2300      	movs	r3, #0
   163d0:	1c4a      	adds	r2, r1, #1
   163d2:	e9cd 1300 	strd	r1, r3, [sp]
   163d6:	4620      	mov	r0, r4
   163d8:	1c8b      	adds	r3, r1, #2
   163da:	f10d 010f 	add.w	r1, sp, #15
   163de:	f006 fb0a 	bl	1c9f6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   163e2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   163e6:	f043 0303 	orr.w	r3, r3, #3
   163ea:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   163ee:	b915      	cbnz	r5, 163f6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   163f0:	4822      	ldr	r0, [pc, #136]	; (1647c <nrfx_gpiote_output_configure+0xe0>)
}
   163f2:	b005      	add	sp, #20
   163f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   163f6:	4e20      	ldr	r6, [pc, #128]	; (16478 <nrfx_gpiote_output_configure+0xdc>)
   163f8:	f104 0708 	add.w	r7, r4, #8
   163fc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   16400:	0783      	lsls	r3, r0, #30
   16402:	d536      	bpl.n	16472 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   16404:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   16408:	2300      	movs	r3, #0
   1640a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1640c:	f020 0020 	bic.w	r0, r0, #32
   16410:	0089      	lsls	r1, r1, #2
   16412:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16416:	04c0      	lsls	r0, r0, #19
   16418:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1641c:	0cc0      	lsrs	r0, r0, #19
   1641e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16422:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   16426:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1642a:	786a      	ldrb	r2, [r5, #1]
   1642c:	2a00      	cmp	r2, #0
   1642e:	d0df      	beq.n	163f0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   16430:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   16434:	78ad      	ldrb	r5, [r5, #2]
   16436:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1643a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1643e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16442:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   16446:	0223      	lsls	r3, r4, #8
   16448:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1644c:	0412      	lsls	r2, r2, #16
   1644e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16452:	ea43 030e 	orr.w	r3, r3, lr
   16456:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   16458:	052a      	lsls	r2, r5, #20
   1645a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1645e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16462:	4313      	orrs	r3, r2
   16464:	f040 0020 	orr.w	r0, r0, #32
   16468:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1646c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16470:	e7be      	b.n	163f0 <nrfx_gpiote_output_configure+0x54>
{
   16472:	4803      	ldr	r0, [pc, #12]	; (16480 <nrfx_gpiote_output_configure+0xe4>)
   16474:	e7bd      	b.n	163f2 <nrfx_gpiote_output_configure+0x56>
   16476:	bf00      	nop
   16478:	20008338 	.word	0x20008338
   1647c:	0bad0000 	.word	0x0bad0000
   16480:	0bad0004 	.word	0x0bad0004

00016484 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16484:	4b01      	ldr	r3, [pc, #4]	; (1648c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   16486:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1648a:	4770      	bx	lr
   1648c:	20008338 	.word	0x20008338

00016490 <nrfx_gpiote_channel_get>:
{
   16490:	b508      	push	{r3, lr}
   16492:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   16494:	f7ff fe64 	bl	16160 <pin_in_use_by_te>
   16498:	b138      	cbz	r0, 164aa <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1649a:	4b05      	ldr	r3, [pc, #20]	; (164b0 <nrfx_gpiote_channel_get+0x20>)
   1649c:	3208      	adds	r2, #8
   1649e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   164a2:	4804      	ldr	r0, [pc, #16]	; (164b4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   164a4:	0b5b      	lsrs	r3, r3, #13
   164a6:	700b      	strb	r3, [r1, #0]
}
   164a8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   164aa:	4803      	ldr	r0, [pc, #12]	; (164b8 <nrfx_gpiote_channel_get+0x28>)
   164ac:	e7fc      	b.n	164a8 <nrfx_gpiote_channel_get+0x18>
   164ae:	bf00      	nop
   164b0:	20008338 	.word	0x20008338
   164b4:	0bad0000 	.word	0x0bad0000
   164b8:	0bad0004 	.word	0x0bad0004

000164bc <nrfx_gpiote_init>:
{
   164bc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   164be:	4c0f      	ldr	r4, [pc, #60]	; (164fc <nrfx_gpiote_init+0x40>)
   164c0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   164c4:	b9bd      	cbnz	r5, 164f6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   164c6:	2260      	movs	r2, #96	; 0x60
   164c8:	4629      	mov	r1, r5
   164ca:	f104 0010 	add.w	r0, r4, #16
   164ce:	f003 ff59 	bl	1a384 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   164d2:	202f      	movs	r0, #47	; 0x2f
   164d4:	f7f5 fb12 	bl	bafc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   164d8:	4b09      	ldr	r3, [pc, #36]	; (16500 <nrfx_gpiote_init+0x44>)
    return err_code;
   164da:	480a      	ldr	r0, [pc, #40]	; (16504 <nrfx_gpiote_init+0x48>)
   164dc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   164e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   164e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   164e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   164ec:	2301      	movs	r3, #1
   164ee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   164f2:	6763      	str	r3, [r4, #116]	; 0x74
}
   164f4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   164f6:	4804      	ldr	r0, [pc, #16]	; (16508 <nrfx_gpiote_init+0x4c>)
   164f8:	e7fc      	b.n	164f4 <nrfx_gpiote_init+0x38>
   164fa:	bf00      	nop
   164fc:	20008338 	.word	0x20008338
   16500:	4002f000 	.word	0x4002f000
   16504:	0bad0000 	.word	0x0bad0000
   16508:	0bad0005 	.word	0x0bad0005

0001650c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1650c:	4b03      	ldr	r3, [pc, #12]	; (1651c <nrfx_gpiote_is_init+0x10>)
   1650e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   16512:	3800      	subs	r0, #0
   16514:	bf18      	it	ne
   16516:	2001      	movne	r0, #1
   16518:	4770      	bx	lr
   1651a:	bf00      	nop
   1651c:	20008338 	.word	0x20008338

00016520 <nrfx_gpiote_channel_free>:
{
   16520:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   16522:	4801      	ldr	r0, [pc, #4]	; (16528 <nrfx_gpiote_channel_free+0x8>)
   16524:	f7ff bc48 	b.w	15db8 <nrfx_flag32_free>
   16528:	200083a8 	.word	0x200083a8

0001652c <nrfx_gpiote_channel_alloc>:
{
   1652c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1652e:	4801      	ldr	r0, [pc, #4]	; (16534 <nrfx_gpiote_channel_alloc+0x8>)
   16530:	f7ff bc26 	b.w	15d80 <nrfx_flag32_alloc>
   16534:	200083a8 	.word	0x200083a8

00016538 <nrfx_gpiote_trigger_enable>:
{
   16538:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1653a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1653c:	f7ff fe10 	bl	16160 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16540:	4b1d      	ldr	r3, [pc, #116]	; (165b8 <nrfx_gpiote_trigger_enable+0x80>)
   16542:	f104 0208 	add.w	r2, r4, #8
   16546:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1654a:	b1d0      	cbz	r0, 16582 <nrfx_gpiote_trigger_enable+0x4a>
   1654c:	f013 0502 	ands.w	r5, r3, #2
   16550:	d117      	bne.n	16582 <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   16552:	481a      	ldr	r0, [pc, #104]	; (165bc <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16554:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   16556:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16558:	5085      	str	r5, [r0, r2]
   1655a:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1655c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16560:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   16564:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   16568:	f040 0001 	orr.w	r0, r0, #1
   1656c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   16570:	b129      	cbz	r1, 1657e <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   16572:	2201      	movs	r2, #1
   16574:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   16578:	4a11      	ldr	r2, [pc, #68]	; (165c0 <nrfx_gpiote_trigger_enable+0x88>)
   1657a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1657e:	b003      	add	sp, #12
   16580:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16582:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   16586:	2b04      	cmp	r3, #4
   16588:	d011      	beq.n	165ae <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1658a:	2b05      	cmp	r3, #5
   1658c:	d011      	beq.n	165b2 <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1658e:	a801      	add	r0, sp, #4
   16590:	9401      	str	r4, [sp, #4]
   16592:	f7ff fdd5 	bl	16140 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16596:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   16598:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1659a:	40d9      	lsrs	r1, r3
   1659c:	f001 0101 	and.w	r1, r1, #1
   165a0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   165a2:	4620      	mov	r0, r4
}
   165a4:	b003      	add	sp, #12
   165a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   165aa:	f006 ba6d 	b.w	1ca88 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   165ae:	2103      	movs	r1, #3
   165b0:	e7f7      	b.n	165a2 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   165b2:	2102      	movs	r1, #2
   165b4:	e7f5      	b.n	165a2 <nrfx_gpiote_trigger_enable+0x6a>
   165b6:	bf00      	nop
   165b8:	20008338 	.word	0x20008338
   165bc:	4002f100 	.word	0x4002f100
   165c0:	4002f000 	.word	0x4002f000

000165c4 <nrfx_gpiote_trigger_disable>:
{
   165c4:	b508      	push	{r3, lr}
   165c6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   165c8:	f7ff fdca 	bl	16160 <pin_in_use_by_te>
   165cc:	b1c0      	cbz	r0, 16600 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   165ce:	4b0f      	ldr	r3, [pc, #60]	; (1660c <nrfx_gpiote_trigger_disable+0x48>)
   165d0:	f102 0108 	add.w	r1, r2, #8
   165d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   165d8:	0799      	lsls	r1, r3, #30
   165da:	d411      	bmi.n	16600 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   165dc:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   165de:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   165e0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   165e2:	490b      	ldr	r1, [pc, #44]	; (16610 <nrfx_gpiote_trigger_disable+0x4c>)
   165e4:	009b      	lsls	r3, r3, #2
   165e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   165ea:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   165ee:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   165f2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   165f6:	f022 0203 	bic.w	r2, r2, #3
   165fa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   165fe:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16600:	2100      	movs	r1, #0
}
   16602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16606:	4610      	mov	r0, r2
   16608:	f006 ba3e 	b.w	1ca88 <nrf_gpio_cfg_sense_set>
   1660c:	20008338 	.word	0x20008338
   16610:	4002f000 	.word	0x4002f000

00016614 <nrfx_gpiote_pin_uninit>:
{
   16614:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   16616:	4b10      	ldr	r3, [pc, #64]	; (16658 <nrfx_gpiote_pin_uninit+0x44>)
   16618:	f100 0208 	add.w	r2, r0, #8
   1661c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   16620:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   16622:	07db      	lsls	r3, r3, #31
   16624:	d516      	bpl.n	16654 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   16626:	f7ff ffcd 	bl	165c4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1662a:	4620      	mov	r0, r4
   1662c:	f7ff fdea 	bl	16204 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16630:	a801      	add	r0, sp, #4
   16632:	9401      	str	r4, [sp, #4]
   16634:	f7ff fd84 	bl	16140 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16638:	9b01      	ldr	r3, [sp, #4]
   1663a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1663e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   16642:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16646:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1664a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1664e:	4803      	ldr	r0, [pc, #12]	; (1665c <nrfx_gpiote_pin_uninit+0x48>)
}
   16650:	b002      	add	sp, #8
   16652:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16654:	4802      	ldr	r0, [pc, #8]	; (16660 <nrfx_gpiote_pin_uninit+0x4c>)
   16656:	e7fb      	b.n	16650 <nrfx_gpiote_pin_uninit+0x3c>
   16658:	20008338 	.word	0x20008338
   1665c:	0bad0000 	.word	0x0bad0000
   16660:	0bad0004 	.word	0x0bad0004

00016664 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   16664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   16668:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1666a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1666c:	4634      	mov	r4, r6
{
   1666e:	4b63      	ldr	r3, [pc, #396]	; (167fc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   16670:	4863      	ldr	r0, [pc, #396]	; (16800 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16672:	4964      	ldr	r1, [pc, #400]	; (16804 <nrfx_gpiote_irq_handler+0x1a0>)
{
   16674:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16676:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16678:	b135      	cbz	r5, 16688 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1667a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1667e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16680:	bf1e      	ittt	ne
   16682:	601c      	strne	r4, [r3, #0]
   16684:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   16686:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16688:	3304      	adds	r3, #4
   1668a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1668c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16690:	d1f1      	bne.n	16676 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16692:	f8df a16c 	ldr.w	sl, [pc, #364]	; 16800 <nrfx_gpiote_irq_handler+0x19c>
   16696:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1669a:	2b00      	cmp	r3, #0
   1669c:	f000 8091 	beq.w	167c2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   166a0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 16808 <nrfx_gpiote_irq_handler+0x1a4>
   166a4:	f8d8 3020 	ldr.w	r3, [r8, #32]
   166a8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   166aa:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   166ae:	4b57      	ldr	r3, [pc, #348]	; (1680c <nrfx_gpiote_irq_handler+0x1a8>)
   166b0:	6a1a      	ldr	r2, [r3, #32]
   166b2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   166b4:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   166b6:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   166ba:	f10d 0b10 	add.w	fp, sp, #16
   166be:	ea4f 1349 	mov.w	r3, r9, lsl #5
   166c2:	9300      	str	r3, [sp, #0]
   166c4:	e048      	b.n	16758 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   166c6:	fa94 f4a4 	rbit	r4, r4
   166ca:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   166ce:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   166d0:	4a4f      	ldr	r2, [pc, #316]	; (16810 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   166d2:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   166d4:	f104 0308 	add.w	r3, r4, #8
   166d8:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   166dc:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   166de:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   166e0:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   166e4:	fa03 f202 	lsl.w	r2, r3, r2
   166e8:	f81b 3000 	ldrb.w	r3, [fp, r0]
   166ec:	9403      	str	r4, [sp, #12]
   166ee:	ea23 0302 	bic.w	r3, r3, r2
   166f2:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   166f6:	a803      	add	r0, sp, #12
   166f8:	f7ff fd22 	bl	16140 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   166fc:	9b03      	ldr	r3, [sp, #12]
   166fe:	08b9      	lsrs	r1, r7, #2
   16700:	3380      	adds	r3, #128	; 0x80
   16702:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   16706:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1670a:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1670c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1670e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   16712:	d52b      	bpl.n	1676c <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   16714:	4620      	mov	r0, r4
   16716:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16718:	b2dd      	uxtb	r5, r3
   1671a:	f7ff fd2b 	bl	16174 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1671e:	a803      	add	r0, sp, #12
   16720:	9403      	str	r4, [sp, #12]
   16722:	f7ff fd0d 	bl	16140 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16726:	9b03      	ldr	r3, [sp, #12]
   16728:	3380      	adds	r3, #128	; 0x80
   1672a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1672e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   16732:	429d      	cmp	r5, r3
   16734:	d107      	bne.n	16746 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16736:	2100      	movs	r1, #0
   16738:	4620      	mov	r0, r4
   1673a:	f006 f9a5 	bl	1ca88 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1673e:	4629      	mov	r1, r5
   16740:	4620      	mov	r0, r4
   16742:	f006 f9a1 	bl	1ca88 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16746:	a803      	add	r0, sp, #12
   16748:	9403      	str	r4, [sp, #12]
   1674a:	f7ff fcf9 	bl	16140 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1674e:	2201      	movs	r2, #1
   16750:	9b03      	ldr	r3, [sp, #12]
   16752:	fa02 f303 	lsl.w	r3, r2, r3
   16756:	6203      	str	r3, [r0, #32]
            while (latch[i])
   16758:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1675c:	2c00      	cmp	r4, #0
   1675e:	d1b2      	bne.n	166c6 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   16760:	f1b9 0f00 	cmp.w	r9, #0
   16764:	d11d      	bne.n	167a2 <nrfx_gpiote_irq_handler+0x13e>
   16766:	f04f 0901 	mov.w	r9, #1
   1676a:	e7a8      	b.n	166be <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1676c:	2b02      	cmp	r3, #2
   1676e:	d10c      	bne.n	1678a <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   16770:	2103      	movs	r1, #3
   16772:	4620      	mov	r0, r4
   16774:	f006 f988 	bl	1ca88 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16778:	f005 0305 	and.w	r3, r5, #5
   1677c:	2b01      	cmp	r3, #1
   1677e:	d1e2      	bne.n	16746 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   16780:	4639      	mov	r1, r7
   16782:	4620      	mov	r0, r4
   16784:	f7ff fcf6 	bl	16174 <call_handler>
   16788:	e7dd      	b.n	16746 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1678a:	2102      	movs	r1, #2
   1678c:	4620      	mov	r0, r4
   1678e:	9301      	str	r3, [sp, #4]
   16790:	f006 f97a 	bl	1ca88 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16794:	2d03      	cmp	r5, #3
   16796:	d0f3      	beq.n	16780 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16798:	9b01      	ldr	r3, [sp, #4]
   1679a:	2b03      	cmp	r3, #3
   1679c:	d1d3      	bne.n	16746 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1679e:	2d02      	cmp	r5, #2
   167a0:	e7ed      	b.n	1677e <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   167a2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   167a6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   167aa:	f8d8 3020 	ldr.w	r3, [r8, #32]
   167ae:	4917      	ldr	r1, [pc, #92]	; (1680c <nrfx_gpiote_irq_handler+0x1a8>)
   167b0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   167b2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   167b6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   167b8:	4313      	orrs	r3, r2
   167ba:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   167bc:	620a      	str	r2, [r1, #32]
   167be:	f47f af7a 	bne.w	166b6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   167c2:	2401      	movs	r4, #1
    while (mask)
   167c4:	b916      	cbnz	r6, 167cc <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   167c6:	b007      	add	sp, #28
   167c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   167cc:	fa96 f3a6 	rbit	r3, r6
   167d0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   167d4:	fa04 f203 	lsl.w	r2, r4, r3
   167d8:	009b      	lsls	r3, r3, #2
   167da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   167de:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   167e2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   167e6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   167ea:	f3c0 2005 	ubfx	r0, r0, #8, #6
   167ee:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   167f2:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   167f6:	f7ff fcbd 	bl	16174 <call_handler>
   167fa:	e7e3      	b.n	167c4 <nrfx_gpiote_irq_handler+0x160>
   167fc:	4002f100 	.word	0x4002f100
   16800:	4002f000 	.word	0x4002f000
   16804:	4002f120 	.word	0x4002f120
   16808:	40842500 	.word	0x40842500
   1680c:	40842800 	.word	0x40842800
   16810:	20008338 	.word	0x20008338

00016814 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16814:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16816:	4c08      	ldr	r4, [pc, #32]	; (16838 <nrfx_ipc_init+0x24>)
{
   16818:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1681a:	7923      	ldrb	r3, [r4, #4]
{
   1681c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1681e:	b943      	cbnz	r3, 16832 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   16820:	202a      	movs	r0, #42	; 0x2a
   16822:	f7f5 f96b 	bl	bafc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16826:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   16828:	4804      	ldr	r0, [pc, #16]	; (1683c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1682a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1682c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1682e:	60a5      	str	r5, [r4, #8]
}
   16830:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   16832:	4803      	ldr	r0, [pc, #12]	; (16840 <nrfx_ipc_init+0x2c>)
   16834:	e7fc      	b.n	16830 <nrfx_ipc_init+0x1c>
   16836:	bf00      	nop
   16838:	20009bd0 	.word	0x20009bd0
   1683c:	0bad0000 	.word	0x0bad0000
   16840:	0bad000c 	.word	0x0bad000c

00016844 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16844:	2300      	movs	r3, #0
{
   16846:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   16848:	4a0d      	ldr	r2, [pc, #52]	; (16880 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1684a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1684e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16852:	3301      	adds	r3, #1
   16854:	2b10      	cmp	r3, #16
   16856:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1685a:	d1f6      	bne.n	1684a <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1685c:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1685e:	4a08      	ldr	r2, [pc, #32]	; (16880 <nrfx_ipc_config_load+0x3c>)
   16860:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   16864:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16868:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1686c:	3301      	adds	r3, #1
   1686e:	2b10      	cmp	r3, #16
   16870:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   16874:	d1f6      	bne.n	16864 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16876:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1687a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1687e:	bd30      	pop	{r4, r5, pc}
   16880:	4002a000 	.word	0x4002a000

00016884 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16884:	2301      	movs	r3, #1
   16886:	4a02      	ldr	r2, [pc, #8]	; (16890 <nrfx_ipc_receive_event_enable+0xc>)
   16888:	4083      	lsls	r3, r0
   1688a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1688e:	4770      	bx	lr
   16890:	4002a000 	.word	0x4002a000

00016894 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16894:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   16896:	4a02      	ldr	r2, [pc, #8]	; (168a0 <nrfx_ipc_receive_event_disable+0xc>)
   16898:	4083      	lsls	r3, r0
   1689a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1689e:	4770      	bx	lr
   168a0:	4002a000 	.word	0x4002a000

000168a4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   168a6:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168a8:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   168aa:	4b0b      	ldr	r3, [pc, #44]	; (168d8 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   168ac:	4d0b      	ldr	r5, [pc, #44]	; (168dc <nrfx_ipc_irq_handler+0x38>)
   168ae:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   168b2:	b904      	cbnz	r4, 168b6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   168b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   168b6:	fa94 f0a4 	rbit	r0, r4
   168ba:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   168be:	fa06 f300 	lsl.w	r3, r6, r0
   168c2:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168c6:	4b06      	ldr	r3, [pc, #24]	; (168e0 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   168c8:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168ca:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   168cc:	682b      	ldr	r3, [r5, #0]
   168ce:	2b00      	cmp	r3, #0
   168d0:	d0ef      	beq.n	168b2 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   168d2:	68a9      	ldr	r1, [r5, #8]
   168d4:	4798      	blx	r3
   168d6:	e7ec      	b.n	168b2 <nrfx_ipc_irq_handler+0xe>
   168d8:	4002a000 	.word	0x4002a000
   168dc:	20009bd0 	.word	0x20009bd0
   168e0:	4002a100 	.word	0x4002a100

000168e4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168e8:	460e      	mov	r6, r1
   168ea:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   168ec:	4d0c      	ldr	r5, [pc, #48]	; (16920 <metal_generic_dev_open+0x3c>)
   168ee:	f855 4f18 	ldr.w	r4, [r5, #24]!
   168f2:	42ac      	cmp	r4, r5
   168f4:	d103      	bne.n	168fe <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   168f6:	f06f 0012 	mvn.w	r0, #18
   168fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   168fe:	4631      	mov	r1, r6
   16900:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16904:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16908:	f003 fd02 	bl	1a310 <strcmp>
   1690c:	b930      	cbnz	r0, 1691c <metal_generic_dev_open+0x38>
			*device = dev;
   1690e:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   16912:	4640      	mov	r0, r8
}
   16914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16918:	f006 b9c4 	b.w	1cca4 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1691c:	6824      	ldr	r4, [r4, #0]
   1691e:	e7e8      	b.n	168f2 <metal_generic_dev_open+0xe>
   16920:	20009bdc 	.word	0x20009bdc

00016924 <metal_bus_unregister>:
{
   16924:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   16926:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1692a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1692c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1692e:	f100 0324 	add.w	r3, r0, #36	; 0x24
   16932:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   16934:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   16938:	6843      	ldr	r3, [r0, #4]
{
   1693a:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1693c:	b103      	cbz	r3, 16940 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1693e:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   16940:	4b05      	ldr	r3, [pc, #20]	; (16958 <metal_bus_unregister+0x34>)
   16942:	781a      	ldrb	r2, [r3, #0]
   16944:	2a06      	cmp	r2, #6
   16946:	d905      	bls.n	16954 <metal_bus_unregister+0x30>
   16948:	685b      	ldr	r3, [r3, #4]
   1694a:	b11b      	cbz	r3, 16954 <metal_bus_unregister+0x30>
   1694c:	2007      	movs	r0, #7
   1694e:	6822      	ldr	r2, [r4, #0]
   16950:	4902      	ldr	r1, [pc, #8]	; (1695c <metal_bus_unregister+0x38>)
   16952:	4798      	blx	r3
}
   16954:	2000      	movs	r0, #0
   16956:	bd10      	pop	{r4, pc}
   16958:	20009bdc 	.word	0x20009bdc
   1695c:	0002176b 	.word	0x0002176b

00016960 <metal_bus_find>:
{
   16960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16964:	4607      	mov	r7, r0
   16966:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   16968:	4e0b      	ldr	r6, [pc, #44]	; (16998 <metal_bus_find+0x38>)
   1696a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1696e:	42b4      	cmp	r4, r6
   16970:	d102      	bne.n	16978 <metal_bus_find+0x18>
	return -ENOENT;
   16972:	f06f 0001 	mvn.w	r0, #1
   16976:	e00a      	b.n	1698e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   16978:	4639      	mov	r1, r7
   1697a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1697e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   16982:	f003 fcc5 	bl	1a310 <strcmp>
   16986:	b920      	cbnz	r0, 16992 <metal_bus_find+0x32>
   16988:	b11d      	cbz	r5, 16992 <metal_bus_find+0x32>
			*result = bus;
   1698a:	f8c5 8000 	str.w	r8, [r5]
}
   1698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   16992:	6824      	ldr	r4, [r4, #0]
   16994:	e7eb      	b.n	1696e <metal_bus_find+0xe>
   16996:	bf00      	nop
   16998:	20009bdc 	.word	0x20009bdc

0001699c <metal_bus_register>:
{
   1699c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1699e:	4604      	mov	r4, r0
   169a0:	b910      	cbnz	r0, 169a8 <metal_bus_register+0xc>
		return -EINVAL;
   169a2:	f06f 0015 	mvn.w	r0, #21
}
   169a6:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   169a8:	6800      	ldr	r0, [r0, #0]
   169aa:	2800      	cmp	r0, #0
   169ac:	d0f9      	beq.n	169a2 <metal_bus_register+0x6>
   169ae:	f003 fc9f 	bl	1a2f0 <strlen>
   169b2:	2800      	cmp	r0, #0
   169b4:	d0f5      	beq.n	169a2 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   169b6:	2100      	movs	r1, #0
   169b8:	6820      	ldr	r0, [r4, #0]
   169ba:	f7ff ffd1 	bl	16960 <metal_bus_find>
   169be:	b1c8      	cbz	r0, 169f4 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   169c0:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   169c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   169c8:	4b0c      	ldr	r3, [pc, #48]	; (169fc <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   169ca:	f104 0224 	add.w	r2, r4, #36	; 0x24
   169ce:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   169d0:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   169d4:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   169d6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   169d8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   169da:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   169dc:	781a      	ldrb	r2, [r3, #0]
   169de:	2a06      	cmp	r2, #6
   169e0:	d901      	bls.n	169e6 <metal_bus_register+0x4a>
   169e2:	685b      	ldr	r3, [r3, #4]
   169e4:	b90b      	cbnz	r3, 169ea <metal_bus_register+0x4e>
	return 0;
   169e6:	2000      	movs	r0, #0
   169e8:	e7dd      	b.n	169a6 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   169ea:	2007      	movs	r0, #7
   169ec:	6822      	ldr	r2, [r4, #0]
   169ee:	4904      	ldr	r1, [pc, #16]	; (16a00 <metal_bus_register+0x64>)
   169f0:	4798      	blx	r3
   169f2:	e7f8      	b.n	169e6 <metal_bus_register+0x4a>
		return -EEXIST;
   169f4:	f06f 0010 	mvn.w	r0, #16
   169f8:	e7d5      	b.n	169a6 <metal_bus_register+0xa>
   169fa:	bf00      	nop
   169fc:	20009bdc 	.word	0x20009bdc
   16a00:	0002176d 	.word	0x0002176d

00016a04 <metal_register_generic_device>:
{
   16a04:	b510      	push	{r4, lr}
   16a06:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   16a08:	6800      	ldr	r0, [r0, #0]
   16a0a:	b910      	cbnz	r0, 16a12 <metal_register_generic_device+0xe>
		return -EINVAL;
   16a0c:	f06f 0015 	mvn.w	r0, #21
}
   16a10:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   16a12:	f003 fc6d 	bl	1a2f0 <strlen>
   16a16:	2800      	cmp	r0, #0
   16a18:	d0f8      	beq.n	16a0c <metal_register_generic_device+0x8>
   16a1a:	68a3      	ldr	r3, [r4, #8]
   16a1c:	2b01      	cmp	r3, #1
   16a1e:	d8f5      	bhi.n	16a0c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16a20:	4b06      	ldr	r3, [pc, #24]	; (16a3c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   16a22:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   16a26:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   16a28:	4b05      	ldr	r3, [pc, #20]	; (16a40 <metal_register_generic_device+0x3c>)
   16a2a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   16a2c:	f103 0018 	add.w	r0, r3, #24
   16a30:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   16a32:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   16a34:	61d9      	str	r1, [r3, #28]
	return 0;
   16a36:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   16a38:	6011      	str	r1, [r2, #0]
}
   16a3a:	e7e9      	b.n	16a10 <metal_register_generic_device+0xc>
   16a3c:	200083b4 	.word	0x200083b4
   16a40:	20009bdc 	.word	0x20009bdc

00016a44 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   16a44:	b538      	push	{r3, r4, r5, lr}
   16a46:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   16a48:	4c0d      	ldr	r4, [pc, #52]	; (16a80 <metal_init+0x3c>)
   16a4a:	2220      	movs	r2, #32
   16a4c:	4620      	mov	r0, r4
   16a4e:	2100      	movs	r1, #0
   16a50:	f003 fc98 	bl	1a384 <memset>

	_metal.common.log_handler   = params->log_handler;
   16a54:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   16a56:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   16a58:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   16a5a:	4623      	mov	r3, r4
   16a5c:	792a      	ldrb	r2, [r5, #4]
   16a5e:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   16a62:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   16a66:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   16a6a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   16a6e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   16a72:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   16a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   16a7a:	f000 b80f 	b.w	16a9c <metal_sys_init>
   16a7e:	bf00      	nop
   16a80:	20009bdc 	.word	0x20009bdc

00016a84 <metal_finish>:

void metal_finish(void)
{
   16a84:	b508      	push	{r3, lr}
	metal_sys_finish();
   16a86:	f000 f811 	bl	16aac <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   16a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   16a8e:	2220      	movs	r2, #32
   16a90:	2100      	movs	r1, #0
   16a92:	4801      	ldr	r0, [pc, #4]	; (16a98 <metal_finish+0x14>)
   16a94:	f003 bc76 	b.w	1a384 <memset>
   16a98:	20009bdc 	.word	0x20009bdc

00016a9c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   16a9c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   16a9e:	4802      	ldr	r0, [pc, #8]	; (16aa8 <metal_sys_init+0xc>)
   16aa0:	f7ff ff7c 	bl	1699c <metal_bus_register>
	return 0;
}
   16aa4:	2000      	movs	r0, #0
   16aa6:	bd08      	pop	{r3, pc}
   16aa8:	200083b4 	.word	0x200083b4

00016aac <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   16aac:	4801      	ldr	r0, [pc, #4]	; (16ab4 <metal_sys_finish+0x8>)
   16aae:	f7ff bf39 	b.w	16924 <metal_bus_unregister>
   16ab2:	bf00      	nop
   16ab4:	200083b4 	.word	0x200083b4

00016ab8 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   16ab8:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   16aba:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   16abc:	2b06      	cmp	r3, #6
{
   16abe:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   16ac0:	bf88      	it	hi
   16ac2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   16ac4:	4b09      	ldr	r3, [pc, #36]	; (16aec <metal_zephyr_log_handler+0x34>)
{
   16ac6:	ac05      	add	r4, sp, #20
   16ac8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   16acc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   16ad0:	4807      	ldr	r0, [pc, #28]	; (16af0 <metal_zephyr_log_handler+0x38>)
   16ad2:	f001 ff45 	bl	18960 <printk>

	va_start(args, format);
	vprintk(format, args);
   16ad6:	4621      	mov	r1, r4
   16ad8:	4628      	mov	r0, r5
	va_start(args, format);
   16ada:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   16adc:	f001 ff3e 	bl	1895c <vprintk>
	va_end(args);
}
   16ae0:	b002      	add	sp, #8
   16ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16ae6:	b003      	add	sp, #12
   16ae8:	4770      	bx	lr
   16aea:	bf00      	nop
   16aec:	0001ef08 	.word	0x0001ef08
   16af0:	0001ff7c 	.word	0x0001ff7c

00016af4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   16af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af8:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   16afa:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   16afc:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   16afe:	4293      	cmp	r3, r2
{
   16b00:	4617      	mov	r7, r2
   16b02:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   16b04:	d341      	bcc.n	16b8a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   16b06:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   16b08:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   16b0c:	42bd      	cmp	r5, r7
   16b0e:	d103      	bne.n	16b18 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   16b10:	2000      	movs	r0, #0
}
   16b12:	b007      	add	sp, #28
   16b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16b18:	fb0b f805 	mul.w	r8, fp, r5
   16b1c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   16b20:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   16b22:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   16b26:	1d23      	adds	r3, r4, #4
   16b28:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   16b2a:	b9ca      	cbnz	r2, 16b60 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   16b2c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   16b2e:	6861      	ldr	r1, [r4, #4]
   16b30:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   16b32:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   16b36:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   16b38:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   16b3a:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   16b3e:	1e5c      	subs	r4, r3, #1
   16b40:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   16b44:	425b      	negs	r3, r3
   16b46:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   16b4a:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   16b4c:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   16b50:	6884      	ldr	r4, [r0, #8]
   16b52:	3306      	adds	r3, #6
   16b54:	42a1      	cmp	r1, r4
   16b56:	bf28      	it	cs
   16b58:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   16b5c:	f006 f86e 	bl	1cc3c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   16b60:	f859 3008 	ldr.w	r3, [r9, r8]
   16b64:	4630      	mov	r0, r6
   16b66:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   16b68:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   16b6a:	b2a9      	uxth	r1, r5
   16b6c:	6a1b      	ldr	r3, [r3, #32]
   16b6e:	9301      	str	r3, [sp, #4]
   16b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16b72:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   16b76:	9300      	str	r3, [sp, #0]
   16b78:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   16b7c:	9b05      	ldr	r3, [sp, #20]
   16b7e:	f006 f8d6 	bl	1cd2e <virtqueue_create>
		if (ret)
   16b82:	2800      	cmp	r0, #0
   16b84:	d1c5      	bne.n	16b12 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   16b86:	3501      	adds	r5, #1
   16b88:	e7c0      	b.n	16b0c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   16b8a:	4801      	ldr	r0, [pc, #4]	; (16b90 <virtio_create_virtqueues+0x9c>)
   16b8c:	e7c1      	b.n	16b12 <virtio_create_virtqueues+0x1e>
   16b8e:	bf00      	nop
   16b90:	fffff440 	.word	0xfffff440

00016b94 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   16b94:	b510      	push	{r4, lr}
	if (vq) {
   16b96:	4604      	mov	r4, r0
   16b98:	b190      	cbz	r0, 16bc0 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   16b9a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   16b9c:	8943      	ldrh	r3, [r0, #10]
   16b9e:	429a      	cmp	r2, r3
   16ba0:	d009      	beq.n	16bb6 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   16ba2:	4b08      	ldr	r3, [pc, #32]	; (16bc4 <virtqueue_free+0x30>)
   16ba4:	781a      	ldrb	r2, [r3, #0]
   16ba6:	2a03      	cmp	r2, #3
   16ba8:	d905      	bls.n	16bb6 <virtqueue_free+0x22>
   16baa:	685b      	ldr	r3, [r3, #4]
   16bac:	b11b      	cbz	r3, 16bb6 <virtqueue_free+0x22>
   16bae:	6842      	ldr	r2, [r0, #4]
   16bb0:	4905      	ldr	r1, [pc, #20]	; (16bc8 <virtqueue_free+0x34>)
   16bb2:	2004      	movs	r0, #4
   16bb4:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   16bb6:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   16bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16bbc:	f007 ba8d 	b.w	1e0da <k_free>
   16bc0:	bd10      	pop	{r4, pc}
   16bc2:	bf00      	nop
   16bc4:	20009bdc 	.word	0x20009bdc
   16bc8:	00021818 	.word	0x00021818

00016bcc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   16bcc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   16bce:	8944      	ldrh	r4, [r0, #10]
   16bd0:	428c      	cmp	r4, r1
   16bd2:	d912      	bls.n	16bfa <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   16bd4:	6a03      	ldr	r3, [r0, #32]
   16bd6:	3c01      	subs	r4, #1
   16bd8:	885d      	ldrh	r5, [r3, #2]
   16bda:	402c      	ands	r4, r5
   16bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   16be0:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   16be2:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   16be4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   16be8:	6a02      	ldr	r2, [r0, #32]
   16bea:	8853      	ldrh	r3, [r2, #2]
   16bec:	3301      	adds	r3, #1
   16bee:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   16bf0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   16bf2:	3301      	adds	r3, #1
   16bf4:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   16bf6:	2000      	movs	r0, #0
}
   16bf8:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   16bfa:	4801      	ldr	r0, [pc, #4]	; (16c00 <virtqueue_add_consumed_buffer+0x34>)
   16bfc:	e7fc      	b.n	16bf8 <virtqueue_add_consumed_buffer+0x2c>
   16bfe:	bf00      	nop
   16c00:	fffff441 	.word	0xfffff441

00016c04 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   16c04:	b470      	push	{r4, r5, r6}
   16c06:	9e03      	ldr	r6, [sp, #12]
   16c08:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   16c0a:	b158      	cbz	r0, 16c24 <rpmsg_send_offchannel_raw+0x20>
   16c0c:	6a00      	ldr	r0, [r0, #32]
   16c0e:	b148      	cbz	r0, 16c24 <rpmsg_send_offchannel_raw+0x20>
   16c10:	b143      	cbz	r3, 16c24 <rpmsg_send_offchannel_raw+0x20>
   16c12:	3401      	adds	r4, #1
   16c14:	d006      	beq.n	16c24 <rpmsg_send_offchannel_raw+0x20>
   16c16:	2e00      	cmp	r6, #0
   16c18:	db04      	blt.n	16c24 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   16c1a:	6f84      	ldr	r4, [r0, #120]	; 0x78
   16c1c:	b114      	cbz	r4, 16c24 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16c1e:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   16c20:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16c22:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   16c24:	4801      	ldr	r0, [pc, #4]	; (16c2c <rpmsg_send_offchannel_raw+0x28>)
}
   16c26:	bc70      	pop	{r4, r5, r6}
   16c28:	4770      	bx	lr
   16c2a:	bf00      	nop
   16c2c:	fffff82d 	.word	0xfffff82d

00016c30 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   16c30:	b470      	push	{r4, r5, r6}
   16c32:	9e03      	ldr	r6, [sp, #12]
   16c34:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   16c36:	b160      	cbz	r0, 16c52 <rpmsg_send_offchannel_nocopy+0x22>
   16c38:	6a00      	ldr	r0, [r0, #32]
   16c3a:	b150      	cbz	r0, 16c52 <rpmsg_send_offchannel_nocopy+0x22>
   16c3c:	b14b      	cbz	r3, 16c52 <rpmsg_send_offchannel_nocopy+0x22>
   16c3e:	3401      	adds	r4, #1
   16c40:	d007      	beq.n	16c52 <rpmsg_send_offchannel_nocopy+0x22>
   16c42:	2e00      	cmp	r6, #0
   16c44:	db05      	blt.n	16c52 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   16c46:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   16c4a:	b114      	cbz	r4, 16c52 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   16c4c:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   16c4e:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   16c50:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   16c52:	4801      	ldr	r0, [pc, #4]	; (16c58 <rpmsg_send_offchannel_nocopy+0x28>)
}
   16c54:	bc70      	pop	{r4, r5, r6}
   16c56:	4770      	bx	lr
   16c58:	fffff82d 	.word	0xfffff82d

00016c5c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   16c5c:	b570      	push	{r4, r5, r6, lr}
   16c5e:	460c      	mov	r4, r1
   16c60:	4611      	mov	r1, r2
   16c62:	4605      	mov	r5, r0
   16c64:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   16c66:	4b0c      	ldr	r3, [pc, #48]	; (16c98 <rpmsg_register_endpoint+0x3c>)
   16c68:	2220      	movs	r2, #32
   16c6a:	2900      	cmp	r1, #0
   16c6c:	bf08      	it	eq
   16c6e:	4619      	moveq	r1, r3
   16c70:	4620      	mov	r0, r4
   16c72:	f003 fb29 	bl	1a2c8 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   16c76:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   16c78:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   16c7a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   16c7c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   16c7e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   16c80:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   16c82:	9b06      	ldr	r3, [sp, #24]
   16c84:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   16c86:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   16c88:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   16c8c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   16c90:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   16c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16c94:	6013      	str	r3, [r2, #0]
}
   16c96:	bd70      	pop	{r4, r5, r6, pc}
   16c98:	00021839 	.word	0x00021839

00016c9c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   16c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16ca0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   16ca4:	460d      	mov	r5, r1
   16ca6:	4692      	mov	sl, r2
   16ca8:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   16caa:	4606      	mov	r6, r0
   16cac:	2800      	cmp	r0, #0
   16cae:	d06c      	beq.n	16d8a <rpmsg_create_ept+0xee>
   16cb0:	2900      	cmp	r1, #0
   16cb2:	d06a      	beq.n	16d8a <rpmsg_create_ept+0xee>
   16cb4:	f1b9 0f00 	cmp.w	r9, #0
   16cb8:	d067      	beq.n	16d8a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   16cba:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   16cbe:	4640      	mov	r0, r8
   16cc0:	f006 f99e 	bl	1d000 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   16cc4:	1c78      	adds	r0, r7, #1
   16cc6:	d140      	bne.n	16d4a <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   16cc8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   16cca:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   16cce:	f014 0401 	ands.w	r4, r4, #1
   16cd2:	d00b      	beq.n	16cec <rpmsg_create_ept+0x50>
	for (bit = start;
   16cd4:	2400      	movs	r4, #0
	     bit++)
   16cd6:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   16cd8:	2c80      	cmp	r4, #128	; 0x80
   16cda:	d054      	beq.n	16d86 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16cdc:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   16cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16ce2:	f004 011f 	and.w	r1, r4, #31
   16ce6:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   16ce8:	07d1      	lsls	r1, r2, #31
   16cea:	d4f4      	bmi.n	16cd6 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16cec:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16cee:	0960      	lsrs	r0, r4, #5
   16cf0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   16cf4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16cf8:	f004 041f 	and.w	r4, r4, #31
   16cfc:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16cfe:	430a      	orrs	r2, r1
   16d00:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   16d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16d06:	4652      	mov	r2, sl
   16d08:	e9cd 9301 	strd	r9, r3, [sp, #4]
   16d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16d0e:	4631      	mov	r1, r6
   16d10:	9300      	str	r3, [sp, #0]
   16d12:	4628      	mov	r0, r5
   16d14:	463b      	mov	r3, r7
   16d16:	f7ff ffa1 	bl	16c5c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   16d1a:	4640      	mov	r0, r8
   16d1c:	f000 fd50 	bl	177c0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   16d20:	7834      	ldrb	r4, [r6, #0]
   16d22:	b174      	cbz	r4, 16d42 <rpmsg_create_ept+0xa6>
   16d24:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   16d28:	b15c      	cbz	r4, 16d42 <rpmsg_create_ept+0xa6>
   16d2a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16d2c:	3301      	adds	r3, #1
   16d2e:	d12e      	bne.n	16d8e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   16d30:	2100      	movs	r1, #0
   16d32:	4630      	mov	r0, r6
   16d34:	f006 f993 	bl	1d05e <rpmsg_send_ns_message>

	if (status)
   16d38:	4604      	mov	r4, r0
   16d3a:	b110      	cbz	r0, 16d42 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   16d3c:	4630      	mov	r0, r6
   16d3e:	f006 f965 	bl	1d00c <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   16d42:	4620      	mov	r0, r4
   16d44:	b004      	add	sp, #16
   16d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   16d4a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   16d4e:	d3d9      	bcc.n	16d04 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   16d50:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   16d54:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   16d56:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   16d5a:	d80f      	bhi.n	16d7c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16d5c:	0958      	lsrs	r0, r3, #5
   16d5e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   16d62:	f003 031f 	and.w	r3, r3, #31
   16d66:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   16d6a:	07d2      	lsls	r2, r2, #31
   16d6c:	d40b      	bmi.n	16d86 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16d6e:	2201      	movs	r2, #1
   16d70:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16d74:	4323      	orrs	r3, r4
   16d76:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   16d7a:	e7c3      	b.n	16d04 <rpmsg_create_ept+0x68>
   16d7c:	4c05      	ldr	r4, [pc, #20]	; (16d94 <rpmsg_create_ept+0xf8>)
   16d7e:	4640      	mov	r0, r8
   16d80:	f000 fd1e 	bl	177c0 <z_impl_k_sem_give>
}
   16d84:	e7dd      	b.n	16d42 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   16d86:	4c04      	ldr	r4, [pc, #16]	; (16d98 <rpmsg_create_ept+0xfc>)
   16d88:	e7f9      	b.n	16d7e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   16d8a:	4c02      	ldr	r4, [pc, #8]	; (16d94 <rpmsg_create_ept+0xf8>)
   16d8c:	e7d9      	b.n	16d42 <rpmsg_create_ept+0xa6>
   16d8e:	2400      	movs	r4, #0
   16d90:	e7d7      	b.n	16d42 <rpmsg_create_ept+0xa6>
   16d92:	bf00      	nop
   16d94:	fffff82d 	.word	0xfffff82d
   16d98:	fffff829 	.word	0xfffff829

00016d9c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   16d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16da0:	b085      	sub	sp, #20
   16da2:	460f      	mov	r7, r1
   16da4:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   16da6:	a903      	add	r1, sp, #12
   16da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   16daa:	4605      	mov	r5, r0
   16dac:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   16dae:	f006 fb66 	bl	1d47e <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   16db2:	4604      	mov	r4, r0
   16db4:	b1e0      	cbz	r0, 16df0 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   16db6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   16db8:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   16dba:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   16dbe:	429e      	cmp	r6, r3
   16dc0:	bfa8      	it	ge
   16dc2:	461e      	movge	r6, r3
   16dc4:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16dc6:	f8d0 c008 	ldr.w	ip, [r0, #8]
   16dca:	1a61      	subs	r1, r4, r1
   16dcc:	4633      	mov	r3, r6
   16dce:	464a      	mov	r2, r9
   16dd0:	4561      	cmp	r1, ip
   16dd2:	bf28      	it	cs
   16dd4:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   16dd8:	f005 fef6 	bl	1cbc8 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   16ddc:	4623      	mov	r3, r4
   16dde:	4642      	mov	r2, r8
   16de0:	4639      	mov	r1, r7
   16de2:	4628      	mov	r0, r5
   16de4:	9600      	str	r6, [sp, #0]
   16de6:	f006 faea 	bl	1d3be <rpmsg_virtio_send_offchannel_nocopy>
}
   16dea:	b005      	add	sp, #20
   16dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   16df0:	4800      	ldr	r0, [pc, #0]	; (16df4 <rpmsg_virtio_send_offchannel_raw+0x58>)
   16df2:	e7fa      	b.n	16dea <rpmsg_virtio_send_offchannel_raw+0x4e>
   16df4:	fffff82e 	.word	0xfffff82e

00016df8 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   16df8:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   16dfa:	4604      	mov	r4, r0
   16dfc:	b1e0      	cbz	r0, 16e38 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   16dfe:	f100 0558 	add.w	r5, r0, #88	; 0x58
   16e02:	4628      	mov	r0, r5
   16e04:	f006 f9bb 	bl	1d17e <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   16e08:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16e0c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   16e0e:	b953      	cbnz	r3, 16e26 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   16e10:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   16e14:	3c10      	subs	r4, #16
	if (length <= 0) {
   16e16:	2c00      	cmp	r4, #0
   16e18:	dc00      	bgt.n	16e1c <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   16e1a:	4c08      	ldr	r4, [pc, #32]	; (16e3c <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   16e1c:	4628      	mov	r0, r5
   16e1e:	f006 f9ac 	bl	1d17a <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   16e22:	4620      	mov	r0, r4
   16e24:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   16e26:	2b01      	cmp	r3, #1
   16e28:	d1f7      	bne.n	16e1a <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   16e2a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   16e2e:	f006 f8cf 	bl	1cfd0 <virtqueue_get_desc_size>
   16e32:	f1a0 0410 	sub.w	r4, r0, #16
   16e36:	e7ee      	b.n	16e16 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   16e38:	4c01      	ldr	r4, [pc, #4]	; (16e40 <rpmsg_virtio_get_buffer_size+0x48>)
   16e3a:	e7f2      	b.n	16e22 <rpmsg_virtio_get_buffer_size+0x2a>
   16e3c:	fffff82e 	.word	0xfffff82e
   16e40:	fffff82d 	.word	0xfffff82d

00016e44 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   16e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e48:	b08a      	sub	sp, #40	; 0x28
   16e4a:	460d      	mov	r5, r1
   16e4c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   16e50:	4690      	mov	r8, r2
   16e52:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   16e54:	4604      	mov	r4, r0
   16e56:	b920      	cbnz	r0, 16e62 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   16e58:	4f81      	ldr	r7, [pc, #516]	; (17060 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   16e5a:	4638      	mov	r0, r7
   16e5c:	b00a      	add	sp, #40	; 0x28
   16e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   16e62:	2900      	cmp	r1, #0
   16e64:	d0f8      	beq.n	16e58 <rpmsg_init_vdev_with_config+0x14>
   16e66:	2b00      	cmp	r3, #0
   16e68:	d0f6      	beq.n	16e58 <rpmsg_init_vdev_with_config+0x14>
	memset(rdev, 0, sizeof(*rdev));
   16e6a:	2294      	movs	r2, #148	; 0x94
   16e6c:	2100      	movs	r1, #0
   16e6e:	f003 fa89 	bl	1a384 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16e72:	2201      	movs	r2, #1
   16e74:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16e78:	4611      	mov	r1, r2
   16e7a:	f006 fd14 	bl	1d8a6 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   16e7e:	4b79      	ldr	r3, [pc, #484]	; (17064 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   16e80:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   16e84:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   16e88:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   16e8a:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   16e8c:	4b76      	ldr	r3, [pc, #472]	; (17068 <rpmsg_init_vdev_with_config+0x224>)
   16e8e:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   16e90:	4b76      	ldr	r3, [pc, #472]	; (1706c <rpmsg_init_vdev_with_config+0x228>)
   16e92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   16e96:	4b76      	ldr	r3, [pc, #472]	; (17070 <rpmsg_init_vdev_with_config+0x22c>)
   16e98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   16e9c:	4b75      	ldr	r3, [pc, #468]	; (17074 <rpmsg_init_vdev_with_config+0x230>)
   16e9e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   16ea2:	4b75      	ldr	r3, [pc, #468]	; (17078 <rpmsg_init_vdev_with_config+0x234>)
   16ea4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   16ea8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16eac:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   16eb0:	f1b8 0f00 	cmp.w	r8, #0
   16eb4:	d16e      	bne.n	16f94 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   16eb6:	2f00      	cmp	r7, #0
   16eb8:	d0ce      	beq.n	16e58 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   16eba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   16ebe:	f104 0394 	add.w	r3, r4, #148	; 0x94
   16ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   16ec6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   16eca:	6a03      	ldr	r3, [r0, #32]
   16ecc:	689b      	ldr	r3, [r3, #8]
   16ece:	4798      	blx	r3
   16ed0:	2300      	movs	r3, #0
   16ed2:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   16ed4:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   16ed8:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   16eda:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   16ede:	f1b8 0f00 	cmp.w	r8, #0
   16ee2:	d16d      	bne.n	16fc0 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   16ee4:	7a3b      	ldrb	r3, [r7, #8]
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	d068      	beq.n	16fbc <rpmsg_init_vdev_with_config+0x178>
   16eea:	f109 030c 	add.w	r3, r9, #12
   16eee:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   16ef2:	f1b9 0f00 	cmp.w	r9, #0
   16ef6:	d0af      	beq.n	16e58 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   16ef8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   16efc:	2a00      	cmp	r2, #0
   16efe:	f000 80ad 	beq.w	1705c <rpmsg_init_vdev_with_config+0x218>
   16f02:	689b      	ldr	r3, [r3, #8]
   16f04:	2b00      	cmp	r3, #0
   16f06:	f000 80a9 	beq.w	1705c <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   16f0a:	4b5c      	ldr	r3, [pc, #368]	; (1707c <rpmsg_init_vdev_with_config+0x238>)
   16f0c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   16f0e:	4b5c      	ldr	r3, [pc, #368]	; (17080 <rpmsg_init_vdev_with_config+0x23c>)
   16f10:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   16f12:	4b5c      	ldr	r3, [pc, #368]	; (17084 <rpmsg_init_vdev_with_config+0x240>)
   16f14:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   16f16:	4b5c      	ldr	r3, [pc, #368]	; (17088 <rpmsg_init_vdev_with_config+0x244>)
   16f18:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16f1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16f1c:	681b      	ldr	r3, [r3, #0]
   16f1e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   16f22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16f24:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   16f26:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   16f2a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   16f2e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   16f32:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   16f34:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   16f38:	9300      	str	r3, [sp, #0]
   16f3a:	2202      	movs	r2, #2
   16f3c:	2100      	movs	r1, #0
   16f3e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   16f42:	ab04      	add	r3, sp, #16
   16f44:	f7ff fdd6 	bl	16af4 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   16f48:	4607      	mov	r7, r0
   16f4a:	2800      	cmp	r0, #0
   16f4c:	d185      	bne.n	16e5a <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   16f4e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   16f52:	f005 ffd8 	bl	1cf06 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   16f56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16f58:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   16f5a:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   16f5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16f5e:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   16f60:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   16f62:	f1b8 0f00 	cmp.w	r8, #0
   16f66:	d161      	bne.n	1702c <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16f68:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   16f6a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16f6e:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16f70:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   16f74:	895b      	ldrh	r3, [r3, #10]
   16f76:	4553      	cmp	r3, sl
   16f78:	d834      	bhi.n	16fe4 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   16f7a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   16f7e:	e9c4 4400 	strd	r4, r4, [r4]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d159      	bne.n	1703a <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   16f86:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16f8a:	2104      	movs	r1, #4
   16f8c:	6a03      	ldr	r3, [r0, #32]
   16f8e:	685b      	ldr	r3, [r3, #4]
   16f90:	4798      	blx	r3
}
   16f92:	e762      	b.n	16e5a <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   16f94:	f1b8 0f01 	cmp.w	r8, #1
   16f98:	d195      	bne.n	16ec6 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   16f9a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16f9e:	6a03      	ldr	r3, [r0, #32]
   16fa0:	681b      	ldr	r3, [r3, #0]
   16fa2:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   16fa4:	0642      	lsls	r2, r0, #25
   16fa6:	d506      	bpl.n	16fb6 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   16fa8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16fac:	2100      	movs	r1, #0
   16fae:	6a03      	ldr	r3, [r0, #32]
   16fb0:	685b      	ldr	r3, [r3, #4]
   16fb2:	4798      	blx	r3
}
   16fb4:	e7f1      	b.n	16f9a <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   16fb6:	0743      	lsls	r3, r0, #29
   16fb8:	d5ef      	bpl.n	16f9a <rpmsg_init_vdev_with_config+0x156>
   16fba:	e784      	b.n	16ec6 <rpmsg_init_vdev_with_config+0x82>
   16fbc:	464b      	mov	r3, r9
   16fbe:	e796      	b.n	16eee <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   16fc0:	f1b8 0f01 	cmp.w	r8, #1
   16fc4:	d1b1      	bne.n	16f2a <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   16fc6:	4b2e      	ldr	r3, [pc, #184]	; (17080 <rpmsg_init_vdev_with_config+0x23c>)
   16fc8:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   16fca:	4b2c      	ldr	r3, [pc, #176]	; (1707c <rpmsg_init_vdev_with_config+0x238>)
   16fcc:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   16fce:	4b2e      	ldr	r3, [pc, #184]	; (17088 <rpmsg_init_vdev_with_config+0x244>)
   16fd0:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   16fd2:	4b2c      	ldr	r3, [pc, #176]	; (17084 <rpmsg_init_vdev_with_config+0x240>)
   16fd4:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   16fd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16fd8:	699b      	ldr	r3, [r3, #24]
   16fda:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   16fde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16fe0:	681b      	ldr	r3, [r3, #0]
   16fe2:	e7a0      	b.n	16f26 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   16fe4:	4648      	mov	r0, r9
   16fe6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   16fea:	f006 fa39 	bl	1d460 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   16fee:	4605      	mov	r5, r0
   16ff0:	b1c8      	cbz	r0, 17026 <rpmsg_init_vdev_with_config+0x1e2>
   16ff2:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   16ff4:	9008      	str	r0, [sp, #32]
   16ff6:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16ff8:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   16ffa:	2200      	movs	r2, #0
   16ffc:	4281      	cmp	r1, r0
   16ffe:	bf28      	it	cs
   17000:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   17004:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17008:	4630      	mov	r0, r6
   1700a:	f005 fe17 	bl	1cc3c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1700e:	9500      	str	r5, [sp, #0]
   17010:	2301      	movs	r3, #1
   17012:	2200      	movs	r2, #0
   17014:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   17018:	a908      	add	r1, sp, #32
   1701a:	f005 feb5 	bl	1cd88 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1701e:	b918      	cbnz	r0, 17028 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17020:	f10a 0a01 	add.w	sl, sl, #1
   17024:	e7a4      	b.n	16f70 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   17026:	4819      	ldr	r0, [pc, #100]	; (1708c <rpmsg_init_vdev_with_config+0x248>)
   17028:	4607      	mov	r7, r0
   1702a:	e716      	b.n	16e5a <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1702c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   17030:	e9c4 4400 	strd	r4, r4, [r4]
   17034:	2b00      	cmp	r3, #0
   17036:	f43f af10 	beq.w	16e5a <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1703a:	2300      	movs	r3, #0
   1703c:	9302      	str	r3, [sp, #8]
   1703e:	4b14      	ldr	r3, [pc, #80]	; (17090 <rpmsg_init_vdev_with_config+0x24c>)
   17040:	4620      	mov	r0, r4
   17042:	9301      	str	r3, [sp, #4]
   17044:	2335      	movs	r3, #53	; 0x35
   17046:	4a13      	ldr	r2, [pc, #76]	; (17094 <rpmsg_init_vdev_with_config+0x250>)
   17048:	9300      	str	r3, [sp, #0]
   1704a:	f104 0108 	add.w	r1, r4, #8
   1704e:	f7ff fe05 	bl	16c5c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   17052:	f1b8 0f00 	cmp.w	r8, #0
   17056:	f47f af00 	bne.w	16e5a <rpmsg_init_vdev_with_config+0x16>
   1705a:	e794      	b.n	16f86 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1705c:	4f0b      	ldr	r7, [pc, #44]	; (1708c <rpmsg_init_vdev_with_config+0x248>)
   1705e:	e6fc      	b.n	16e5a <rpmsg_init_vdev_with_config+0x16>
   17060:	fffff82d 	.word	0xfffff82d
   17064:	00016d9d 	.word	0x00016d9d
   17068:	0001d16b 	.word	0x0001d16b
   1706c:	0001d37f 	.word	0x0001d37f
   17070:	0001d47f 	.word	0x0001d47f
   17074:	0001d3bf 	.word	0x0001d3bf
   17078:	0001d18b 	.word	0x0001d18b
   1707c:	0002183a 	.word	0x0002183a
   17080:	00021840 	.word	0x00021840
   17084:	0001d2cb 	.word	0x0001d2cb
   17088:	0001d179 	.word	0x0001d179
   1708c:	fffff82e 	.word	0xfffff82e
   17090:	0001d1cd 	.word	0x0001d1cd
   17094:	00021846 	.word	0x00021846

00017098 <rpmsg_init_vdev>:
{
   17098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1709a:	4605      	mov	r5, r0
   1709c:	460e      	mov	r6, r1
   1709e:	4617      	mov	r7, r2
   170a0:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   170a2:	4a07      	ldr	r2, [pc, #28]	; (170c0 <rpmsg_init_vdev+0x28>)
   170a4:	ac03      	add	r4, sp, #12
   170a6:	ca07      	ldmia	r2, {r0, r1, r2}
   170a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   170ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   170ae:	4631      	mov	r1, r6
   170b0:	9200      	str	r2, [sp, #0]
   170b2:	4628      	mov	r0, r5
   170b4:	463a      	mov	r2, r7
   170b6:	9401      	str	r4, [sp, #4]
   170b8:	f7ff fec4 	bl	16e44 <rpmsg_init_vdev_with_config>
}
   170bc:	b007      	add	sp, #28
   170be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170c0:	0001e6d0 	.word	0x0001e6d0

000170c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   170c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   170c8:	b086      	sub	sp, #24
   170ca:	4605      	mov	r5, r0
   170cc:	460e      	mov	r6, r1
   170ce:	af00      	add	r7, sp, #0
	__asm__ volatile(
   170d0:	f04f 0320 	mov.w	r3, #32
   170d4:	f3ef 8811 	mrs	r8, BASEPRI
   170d8:	f383 8812 	msr	BASEPRI_MAX, r3
   170dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   170e0:	f001 f8a6 	bl	18230 <z_impl_z_current_get>
   170e4:	2d04      	cmp	r5, #4
   170e6:	bf98      	it	ls
   170e8:	4b2c      	ldrls	r3, [pc, #176]	; (1719c <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   170ea:	46e9      	mov	r9, sp
   170ec:	b08a      	sub	sp, #40	; 0x28
   170ee:	4604      	mov	r4, r0
   170f0:	466a      	mov	r2, sp
   170f2:	bf94      	ite	ls
   170f4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   170f8:	4b29      	ldrhi	r3, [pc, #164]	; (171a0 <z_fatal_error+0xdc>)
   170fa:	61d3      	str	r3, [r2, #28]
   170fc:	f240 3301 	movw	r3, #769	; 0x301
   17100:	f04f 0a00 	mov.w	sl, #0
   17104:	8493      	strh	r3, [r2, #36]	; 0x24
   17106:	4927      	ldr	r1, [pc, #156]	; (171a4 <z_fatal_error+0xe0>)
   17108:	4b27      	ldr	r3, [pc, #156]	; (171a8 <z_fatal_error+0xe4>)
   1710a:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1710e:	f8c2 a020 	str.w	sl, [r2, #32]
   17112:	f842 3f10 	str.w	r3, [r2, #16]!
   17116:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1711a:	4653      	mov	r3, sl
   1711c:	4823      	ldr	r0, [pc, #140]	; (171ac <z_fatal_error+0xe8>)
   1711e:	f7f3 fec9 	bl	aeb4 <z_impl_z_log_msg_static_create>
   17122:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   17124:	b17e      	cbz	r6, 17146 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   17126:	69f3      	ldr	r3, [r6, #28]
   17128:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1712c:	b15b      	cbz	r3, 17146 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   1712e:	4b20      	ldr	r3, [pc, #128]	; (171b0 <z_fatal_error+0xec>)
   17130:	617b      	str	r3, [r7, #20]
   17132:	2302      	movs	r3, #2
   17134:	613b      	str	r3, [r7, #16]
   17136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1713a:	4653      	mov	r3, sl
   1713c:	481b      	ldr	r0, [pc, #108]	; (171ac <z_fatal_error+0xe8>)
   1713e:	f107 0210 	add.w	r2, r7, #16
   17142:	f7f3 feb7 	bl	aeb4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   17146:	b12c      	cbz	r4, 17154 <z_fatal_error+0x90>
   17148:	4620      	mov	r0, r4
   1714a:	f006 fafb 	bl	1d744 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1714e:	b108      	cbz	r0, 17154 <z_fatal_error+0x90>
   17150:	7803      	ldrb	r3, [r0, #0]
   17152:	b903      	cbnz	r3, 17156 <z_fatal_error+0x92>
		thread_name = "unknown";
   17154:	4817      	ldr	r0, [pc, #92]	; (171b4 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17156:	46e9      	mov	r9, sp
   17158:	b08a      	sub	sp, #40	; 0x28
   1715a:	466a      	mov	r2, sp
   1715c:	4b16      	ldr	r3, [pc, #88]	; (171b8 <z_fatal_error+0xf4>)
   1715e:	61d0      	str	r0, [r2, #28]
   17160:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17164:	f240 3301 	movw	r3, #769	; 0x301
   17168:	8413      	strh	r3, [r2, #32]
   1716a:	4b14      	ldr	r3, [pc, #80]	; (171bc <z_fatal_error+0xf8>)
   1716c:	f842 3f10 	str.w	r3, [r2, #16]!
   17170:	2300      	movs	r3, #0
   17172:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   17176:	480d      	ldr	r0, [pc, #52]	; (171ac <z_fatal_error+0xe8>)
   17178:	f7f3 fe9c 	bl	aeb4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1717c:	4631      	mov	r1, r6
   1717e:	46cd      	mov	sp, r9
   17180:	4628      	mov	r0, r5
   17182:	f7fe fd53 	bl	15c2c <k_sys_fatal_error_handler>
	__asm__ volatile(
   17186:	f388 8811 	msr	BASEPRI, r8
   1718a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1718e:	4620      	mov	r0, r4
   17190:	f7f5 f964 	bl	c45c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   17194:	3718      	adds	r7, #24
   17196:	46bd      	mov	sp, r7
   17198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1719c:	0001ef2c 	.word	0x0001ef2c
   171a0:	00021849 	.word	0x00021849
   171a4:	00021857 	.word	0x00021857
   171a8:	01000005 	.word	0x01000005
   171ac:	0001e60c 	.word	0x0001e60c
   171b0:	0002187f 	.word	0x0002187f
   171b4:	0001fa32 	.word	0x0001fa32
   171b8:	000218a0 	.word	0x000218a0
   171bc:	01000004 	.word	0x01000004

000171c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   171c0:	4b10      	ldr	r3, [pc, #64]	; (17204 <z_sys_init_run_level+0x44>)
{
   171c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   171c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   171c8:	3001      	adds	r0, #1
   171ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   171ce:	42a6      	cmp	r6, r4
   171d0:	d800      	bhi.n	171d4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   171d2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   171d4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   171d8:	b18d      	cbz	r5, 171fe <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   171da:	4628      	mov	r0, r5
   171dc:	4798      	blx	r3
			if (rc != 0) {
   171de:	b138      	cbz	r0, 171f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   171e0:	2800      	cmp	r0, #0
   171e2:	bfb8      	it	lt
   171e4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   171e6:	28ff      	cmp	r0, #255	; 0xff
   171e8:	bfa8      	it	ge
   171ea:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   171ec:	68eb      	ldr	r3, [r5, #12]
   171ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   171f0:	68ea      	ldr	r2, [r5, #12]
   171f2:	7853      	ldrb	r3, [r2, #1]
   171f4:	f043 0301 	orr.w	r3, r3, #1
   171f8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   171fa:	3408      	adds	r4, #8
   171fc:	e7e7      	b.n	171ce <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   171fe:	4798      	blx	r3
   17200:	e7fb      	b.n	171fa <z_sys_init_run_level+0x3a>
   17202:	bf00      	nop
   17204:	0001ef40 	.word	0x0001ef40

00017208 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   17208:	2201      	movs	r2, #1
{
   1720a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1720c:	4b09      	ldr	r3, [pc, #36]	; (17234 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1720e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   17210:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   17212:	f7ff ffd5 	bl	171c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17216:	f001 fb29 	bl	1886c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1721a:	2004      	movs	r0, #4
   1721c:	f7ff ffd0 	bl	171c0 <z_sys_init_run_level>

	z_init_static_threads();
   17220:	f000 f96c 	bl	174fc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   17224:	f7f1 fd16 	bl	8c54 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17228:	4a03      	ldr	r2, [pc, #12]	; (17238 <bg_thread_main+0x30>)
   1722a:	7b13      	ldrb	r3, [r2, #12]
   1722c:	f023 0301 	bic.w	r3, r3, #1
   17230:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17232:	bd08      	pop	{r3, pc}
   17234:	20009d45 	.word	0x20009d45
   17238:	20009650 	.word	0x20009650

0001723c <z_bss_zero>:
{
   1723c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1723e:	4803      	ldr	r0, [pc, #12]	; (1724c <z_bss_zero+0x10>)
   17240:	4a03      	ldr	r2, [pc, #12]	; (17250 <z_bss_zero+0x14>)
   17242:	2100      	movs	r1, #0
   17244:	1a12      	subs	r2, r2, r0
   17246:	f006 f9bf 	bl	1d5c8 <z_early_memset>
}
   1724a:	bd08      	pop	{r3, pc}
   1724c:	20008740 	.word	0x20008740
   17250:	20009d48 	.word	0x20009d48

00017254 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   17254:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   17256:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   17258:	4e13      	ldr	r6, [pc, #76]	; (172a8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1725a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1725c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   17260:	2300      	movs	r3, #0
{
   17262:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   17264:	e9cd 2304 	strd	r2, r3, [sp, #16]
   17268:	220f      	movs	r2, #15
   1726a:	9301      	str	r3, [sp, #4]
   1726c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17270:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   17272:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17276:	4d0d      	ldr	r5, [pc, #52]	; (172ac <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   17278:	490d      	ldr	r1, [pc, #52]	; (172b0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1727a:	fb03 5500 	mla	r5, r3, r0, r5
{
   1727e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   17280:	fb02 1100 	mla	r1, r2, r0, r1
   17284:	4b0b      	ldr	r3, [pc, #44]	; (172b4 <z_init_cpu+0x60>)
   17286:	4630      	mov	r0, r6
   17288:	9500      	str	r5, [sp, #0]
   1728a:	f000 f8db 	bl	17444 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1728e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   17290:	742c      	strb	r4, [r5, #16]
   17292:	f023 0304 	bic.w	r3, r3, #4
   17296:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   17298:	4b07      	ldr	r3, [pc, #28]	; (172b8 <z_init_cpu+0x64>)
   1729a:	3401      	adds	r4, #1
   1729c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   172a0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   172a2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   172a4:	b006      	add	sp, #24
   172a6:	bd70      	pop	{r4, r5, r6, pc}
   172a8:	200095c8 	.word	0x200095c8
   172ac:	20009bfc 	.word	0x20009bfc
   172b0:	2000baa0 	.word	0x2000baa0
   172b4:	000175b5 	.word	0x000175b5
   172b8:	2000b2a0 	.word	0x2000b2a0

000172bc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   172bc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   172be:	2000      	movs	r0, #0
{
   172c0:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   172c2:	f7ff ff7d 	bl	171c0 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   172c6:	4b2f      	ldr	r3, [pc, #188]	; (17384 <z_cstart+0xc8>)
	uint32_t msp =
   172c8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   172cc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   172d0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   172d4:	2400      	movs	r4, #0
   172d6:	23e0      	movs	r3, #224	; 0xe0
   172d8:	4d2b      	ldr	r5, [pc, #172]	; (17388 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   172da:	4e2c      	ldr	r6, [pc, #176]	; (1738c <z_cstart+0xd0>)
   172dc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   172e0:	77ec      	strb	r4, [r5, #31]
   172e2:	762c      	strb	r4, [r5, #24]
   172e4:	766c      	strb	r4, [r5, #25]
   172e6:	76ac      	strb	r4, [r5, #26]
   172e8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   172ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   172ee:	4f28      	ldr	r7, [pc, #160]	; (17390 <z_cstart+0xd4>)
   172f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   172f4:	626b      	str	r3, [r5, #36]	; 0x24
   172f6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   172fa:	f7f5 f813 	bl	c324 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   172fe:	f7f4 fb6b 	bl	b9d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17306:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17308:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1730a:	f7f5 fa55 	bl	c7b8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1730e:	f7f5 f8bb 	bl	c488 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   17312:	f7f3 fc5f 	bl	abd4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   17316:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1731a:	ad06      	add	r5, sp, #24
   1731c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1731e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   17322:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   17326:	f001 fa83 	bl	18830 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1732a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1732c:	f006 f940 	bl	1d5b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   17330:	2001      	movs	r0, #1
   17332:	f7ff ff45 	bl	171c0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17336:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   17338:	4d16      	ldr	r5, [pc, #88]	; (17394 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1733a:	f7ff ff41 	bl	171c0 <z_sys_init_run_level>
	z_sched_init();
   1733e:	f000 fed3 	bl	180e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17342:	4b15      	ldr	r3, [pc, #84]	; (17398 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   17344:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17346:	9305      	str	r3, [sp, #20]
   17348:	2301      	movs	r3, #1
   1734a:	4914      	ldr	r1, [pc, #80]	; (1739c <z_cstart+0xe0>)
   1734c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17350:	e9cd 4303 	strd	r4, r3, [sp, #12]
   17354:	4628      	mov	r0, r5
   17356:	463b      	mov	r3, r7
   17358:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1735c:	9400      	str	r4, [sp, #0]
   1735e:	f000 f871 	bl	17444 <z_setup_new_thread>
   17362:	4606      	mov	r6, r0
   17364:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   17366:	4628      	mov	r0, r5
   17368:	f022 0204 	bic.w	r2, r2, #4
   1736c:	736a      	strb	r2, [r5, #13]
   1736e:	f006 fbf7 	bl	1db60 <z_ready_thread>
	z_init_cpu(0);
   17372:	4620      	mov	r0, r4
   17374:	f7ff ff6e 	bl	17254 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17378:	463a      	mov	r2, r7
   1737a:	4631      	mov	r1, r6
   1737c:	4628      	mov	r0, r5
   1737e:	f7f4 fc9d 	bl	bcbc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17382:	bf00      	nop
   17384:	2000b2a0 	.word	0x2000b2a0
   17388:	e000ed00 	.word	0xe000ed00
   1738c:	20009bfc 	.word	0x20009bfc
   17390:	00017209 	.word	0x00017209
   17394:	20009650 	.word	0x20009650
   17398:	00021902 	.word	0x00021902
   1739c:	2000bbe0 	.word	0x2000bbe0

000173a0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   173a0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   173a2:	4c06      	ldr	r4, [pc, #24]	; (173bc <statics_init+0x1c>)
   173a4:	4d06      	ldr	r5, [pc, #24]	; (173c0 <statics_init+0x20>)
   173a6:	42ac      	cmp	r4, r5
   173a8:	d301      	bcc.n	173ae <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   173aa:	2000      	movs	r0, #0
   173ac:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   173ae:	4620      	mov	r0, r4
   173b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   173b4:	f006 f90c 	bl	1d5d0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   173b8:	3414      	adds	r4, #20
   173ba:	e7f4      	b.n	173a6 <statics_init+0x6>
   173bc:	2000856c 	.word	0x2000856c
   173c0:	20008580 	.word	0x20008580

000173c4 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   173c4:	2000      	movs	r0, #0
{
   173c6:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   173c8:	4c05      	ldr	r4, [pc, #20]	; (173e0 <init_mem_slab_module+0x1c>)
   173ca:	4d06      	ldr	r5, [pc, #24]	; (173e4 <init_mem_slab_module+0x20>)
   173cc:	42ac      	cmp	r4, r5
   173ce:	d300      	bcc.n	173d2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   173d0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   173d2:	4620      	mov	r0, r4
   173d4:	f006 f96e 	bl	1d6b4 <create_free_list>
		if (rc < 0) {
   173d8:	2800      	cmp	r0, #0
   173da:	dbf9      	blt.n	173d0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   173dc:	341c      	adds	r4, #28
   173de:	e7f5      	b.n	173cc <init_mem_slab_module+0x8>
   173e0:	20008518 	.word	0x20008518
   173e4:	2000856c 	.word	0x2000856c

000173e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   173e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   173ea:	460c      	mov	r4, r1
	__asm__ volatile(
   173ec:	f04f 0520 	mov.w	r5, #32
   173f0:	f3ef 8111 	mrs	r1, BASEPRI
   173f4:	f385 8812 	msr	BASEPRI_MAX, r5
   173f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   173fc:	6945      	ldr	r5, [r0, #20]
   173fe:	b15d      	cbz	r5, 17418 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   17400:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17402:	682b      	ldr	r3, [r5, #0]
   17404:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17406:	6983      	ldr	r3, [r0, #24]
   17408:	3301      	adds	r3, #1
   1740a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1740c:	2000      	movs	r0, #0
	__asm__ volatile(
   1740e:	f381 8811 	msr	BASEPRI, r1
   17412:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17416:	e011      	b.n	1743c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17418:	ea52 0603 	orrs.w	r6, r2, r3
   1741c:	d103      	bne.n	17426 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   1741e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   17422:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   17424:	e7f3      	b.n	1740e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17426:	e9cd 2300 	strd	r2, r3, [sp]
   1742a:	4602      	mov	r2, r0
   1742c:	3008      	adds	r0, #8
   1742e:	f000 fd65 	bl	17efc <z_pend_curr>
		if (result == 0) {
   17432:	b918      	cbnz	r0, 1743c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   17434:	4b02      	ldr	r3, [pc, #8]	; (17440 <k_mem_slab_alloc+0x58>)
   17436:	689b      	ldr	r3, [r3, #8]
   17438:	695b      	ldr	r3, [r3, #20]
   1743a:	6023      	str	r3, [r4, #0]
}
   1743c:	b002      	add	sp, #8
   1743e:	bd70      	pop	{r4, r5, r6, pc}
   17440:	20009bfc 	.word	0x20009bfc

00017444 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17448:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1744a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1744e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17450:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17452:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   17456:	2500      	movs	r5, #0
{
   17458:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   1745a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1745c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1745e:	e9c0 5506 	strd	r5, r5, [r0, #24]
   17462:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17464:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17468:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   1746c:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   17470:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   17472:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17474:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17476:	9202      	str	r2, [sp, #8]
   17478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   1747a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1747e:	9201      	str	r2, [sp, #4]
   17480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17482:	9200      	str	r2, [sp, #0]
   17484:	4642      	mov	r2, r8
   17486:	f7f4 fbf9 	bl	bc7c <arch_new_thread>
	if (!_current) {
   1748a:	4b05      	ldr	r3, [pc, #20]	; (174a0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1748c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1748e:	689b      	ldr	r3, [r3, #8]
   17490:	b103      	cbz	r3, 17494 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   17492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   17494:	4640      	mov	r0, r8
   17496:	6763      	str	r3, [r4, #116]	; 0x74
   17498:	b004      	add	sp, #16
   1749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1749e:	bf00      	nop
   174a0:	20009bfc 	.word	0x20009bfc

000174a4 <z_impl_k_thread_create>:
{
   174a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174a6:	2500      	movs	r5, #0
{
   174a8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174aa:	9505      	str	r5, [sp, #20]
   174ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   174ae:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174b2:	9504      	str	r5, [sp, #16]
   174b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   174b6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   174b8:	9503      	str	r5, [sp, #12]
   174ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   174bc:	9502      	str	r5, [sp, #8]
   174be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   174c0:	9501      	str	r5, [sp, #4]
   174c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   174c4:	9500      	str	r5, [sp, #0]
   174c6:	f7ff ffbd 	bl	17444 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   174ca:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   174ce:	bf08      	it	eq
   174d0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   174d4:	d005      	beq.n	174e2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   174d6:	ea56 0307 	orrs.w	r3, r6, r7
   174da:	d105      	bne.n	174e8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   174dc:	4620      	mov	r0, r4
   174de:	f000 fd83 	bl	17fe8 <z_sched_start>
}
   174e2:	4620      	mov	r0, r4
   174e4:	b007      	add	sp, #28
   174e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   174e8:	463a      	mov	r2, r7
   174ea:	4633      	mov	r3, r6
   174ec:	4902      	ldr	r1, [pc, #8]	; (174f8 <z_impl_k_thread_create+0x54>)
   174ee:	f104 0018 	add.w	r0, r4, #24
   174f2:	f000 ff75 	bl	183e0 <z_add_timeout>
   174f6:	e7f4      	b.n	174e2 <z_impl_k_thread_create+0x3e>
   174f8:	0001dbe9 	.word	0x0001dbe9

000174fc <z_init_static_threads>:
{
   174fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17500:	4c29      	ldr	r4, [pc, #164]	; (175a8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   17502:	4d2a      	ldr	r5, [pc, #168]	; (175ac <z_init_static_threads+0xb0>)
{
   17504:	b087      	sub	sp, #28
   17506:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   17508:	42ae      	cmp	r6, r5
   1750a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1750e:	d30f      	bcc.n	17530 <z_init_static_threads+0x34>
	k_sched_lock();
   17510:	f000 fdba 	bl	18088 <k_sched_lock>
   17514:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17518:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1751c:	4c22      	ldr	r4, [pc, #136]	; (175a8 <z_init_static_threads+0xac>)
   1751e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 175b0 <z_init_static_threads+0xb4>
   17522:	42ac      	cmp	r4, r5
   17524:	d320      	bcc.n	17568 <z_init_static_threads+0x6c>
}
   17526:	b007      	add	sp, #28
   17528:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1752c:	f000 bdc0 	b.w	180b0 <k_sched_unlock>
		z_setup_new_thread(
   17530:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17534:	9305      	str	r3, [sp, #20]
   17536:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1753a:	9304      	str	r3, [sp, #16]
   1753c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17540:	9303      	str	r3, [sp, #12]
   17542:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17546:	9302      	str	r3, [sp, #8]
   17548:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1754c:	9301      	str	r3, [sp, #4]
   1754e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17552:	9300      	str	r3, [sp, #0]
   17554:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   17558:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   1755c:	f7ff ff72 	bl	17444 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17560:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   17564:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17566:	e7ce      	b.n	17506 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17568:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1756a:	1c5a      	adds	r2, r3, #1
   1756c:	d00d      	beq.n	1758a <z_init_static_threads+0x8e>
   1756e:	2100      	movs	r1, #0
   17570:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   17572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17576:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1757a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1757e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17582:	d104      	bne.n	1758e <z_init_static_threads+0x92>
	z_sched_start(thread);
   17584:	4640      	mov	r0, r8
   17586:	f000 fd2f 	bl	17fe8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1758a:	342c      	adds	r4, #44	; 0x2c
   1758c:	e7c9      	b.n	17522 <z_init_static_threads+0x26>
   1758e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17592:	2300      	movs	r3, #0
   17594:	f7f0 fde0 	bl	8158 <__aeabi_uldivmod>
   17598:	4602      	mov	r2, r0
   1759a:	460b      	mov	r3, r1
   1759c:	f108 0018 	add.w	r0, r8, #24
   175a0:	4649      	mov	r1, r9
   175a2:	f000 ff1d 	bl	183e0 <z_add_timeout>
   175a6:	e7f0      	b.n	1758a <z_init_static_threads+0x8e>
   175a8:	0001e494 	.word	0x0001e494
   175ac:	0001e494 	.word	0x0001e494
   175b0:	0001dbe9 	.word	0x0001dbe9

000175b4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   175b4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   175b6:	4c0b      	ldr	r4, [pc, #44]	; (175e4 <idle+0x30>)
   175b8:	4d0b      	ldr	r5, [pc, #44]	; (175e8 <idle+0x34>)
	__asm__ volatile(
   175ba:	f04f 0220 	mov.w	r2, #32
   175be:	f3ef 8311 	mrs	r3, BASEPRI
   175c2:	f382 8812 	msr	BASEPRI_MAX, r2
   175c6:	f3bf 8f6f 	isb	sy
   175ca:	f006 fbbb 	bl	1dd44 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   175ce:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   175d0:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   175d2:	b913      	cbnz	r3, 175da <idle+0x26>
	arch_cpu_idle();
   175d4:	f7f4 fa06 	bl	b9e4 <arch_cpu_idle>
}
   175d8:	e7ef      	b.n	175ba <idle+0x6>
   175da:	f7f3 ffbf 	bl	b55c <pm_system_suspend>
   175de:	2800      	cmp	r0, #0
   175e0:	d1eb      	bne.n	175ba <idle+0x6>
   175e2:	e7f7      	b.n	175d4 <idle+0x20>
   175e4:	20009bfc 	.word	0x20009bfc
   175e8:	20009d45 	.word	0x20009d45

000175ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   175ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   175f0:	4604      	mov	r4, r0
   175f2:	4617      	mov	r7, r2
   175f4:	461e      	mov	r6, r3
   175f6:	f04f 0320 	mov.w	r3, #32
   175fa:	f3ef 8811 	mrs	r8, BASEPRI
   175fe:	f383 8812 	msr	BASEPRI_MAX, r3
   17602:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17606:	68c3      	ldr	r3, [r0, #12]
   17608:	4a33      	ldr	r2, [pc, #204]	; (176d8 <z_impl_k_mutex_lock+0xec>)
   1760a:	b17b      	cbz	r3, 1762c <z_impl_k_mutex_lock+0x40>
   1760c:	6880      	ldr	r0, [r0, #8]
   1760e:	6891      	ldr	r1, [r2, #8]
   17610:	4288      	cmp	r0, r1
   17612:	d019      	beq.n	17648 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17614:	ea57 0306 	orrs.w	r3, r7, r6
   17618:	d118      	bne.n	1764c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1761a:	f388 8811 	msr	BASEPRI, r8
   1761e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   17622:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   17626:	b002      	add	sp, #8
   17628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1762c:	6891      	ldr	r1, [r2, #8]
   1762e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   17632:	3301      	adds	r3, #1
   17634:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17636:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17638:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1763a:	60a3      	str	r3, [r4, #8]
   1763c:	f388 8811 	msr	BASEPRI, r8
   17640:	f3bf 8f6f 	isb	sy
		return 0;
   17644:	2000      	movs	r0, #0
   17646:	e7ee      	b.n	17626 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   17648:	6921      	ldr	r1, [r4, #16]
   1764a:	e7f2      	b.n	17632 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1764c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17650:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   17654:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   17658:	4299      	cmp	r1, r3
   1765a:	bfa8      	it	ge
   1765c:	4619      	movge	r1, r3
   1765e:	4291      	cmp	r1, r2
   17660:	bfb8      	it	lt
   17662:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17664:	428b      	cmp	r3, r1
   17666:	dd2e      	ble.n	176c6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   17668:	f006 f877 	bl	1d75a <adjust_owner_prio.isra.0>
   1766c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1766e:	4622      	mov	r2, r4
   17670:	4641      	mov	r1, r8
   17672:	e9cd 7600 	strd	r7, r6, [sp]
   17676:	4819      	ldr	r0, [pc, #100]	; (176dc <z_impl_k_mutex_lock+0xf0>)
   17678:	f000 fc40 	bl	17efc <z_pend_curr>
	if (got_mutex == 0) {
   1767c:	2800      	cmp	r0, #0
   1767e:	d0e1      	beq.n	17644 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   17680:	f04f 0320 	mov.w	r3, #32
   17684:	f3ef 8611 	mrs	r6, BASEPRI
   17688:	f383 8812 	msr	BASEPRI_MAX, r3
   1768c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   17690:	68a0      	ldr	r0, [r4, #8]
   17692:	b1d0      	cbz	r0, 176ca <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17694:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17696:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17698:	429c      	cmp	r4, r3
   1769a:	d00a      	beq.n	176b2 <z_impl_k_mutex_lock+0xc6>
   1769c:	b14b      	cbz	r3, 176b2 <z_impl_k_mutex_lock+0xc6>
   1769e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   176a2:	4299      	cmp	r1, r3
   176a4:	bfa8      	it	ge
   176a6:	4619      	movge	r1, r3
   176a8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   176ac:	4299      	cmp	r1, r3
   176ae:	bfb8      	it	lt
   176b0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   176b2:	f006 f852 	bl	1d75a <adjust_owner_prio.isra.0>
   176b6:	b140      	cbz	r0, 176ca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   176b8:	4631      	mov	r1, r6
   176ba:	4808      	ldr	r0, [pc, #32]	; (176dc <z_impl_k_mutex_lock+0xf0>)
   176bc:	f000 fc82 	bl	17fc4 <z_reschedule>
	return -EAGAIN;
   176c0:	f06f 000a 	mvn.w	r0, #10
   176c4:	e7af      	b.n	17626 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   176c6:	2500      	movs	r5, #0
   176c8:	e7d1      	b.n	1766e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   176ca:	2d00      	cmp	r5, #0
   176cc:	d1f4      	bne.n	176b8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   176ce:	f386 8811 	msr	BASEPRI, r6
   176d2:	f3bf 8f6f 	isb	sy
   176d6:	e7f3      	b.n	176c0 <z_impl_k_mutex_lock+0xd4>
   176d8:	20009bfc 	.word	0x20009bfc
   176dc:	20009d46 	.word	0x20009d46

000176e0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   176e0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   176e2:	6883      	ldr	r3, [r0, #8]
{
   176e4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   176e6:	b36b      	cbz	r3, 17744 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   176e8:	4a19      	ldr	r2, [pc, #100]	; (17750 <z_impl_k_mutex_unlock+0x70>)
   176ea:	6892      	ldr	r2, [r2, #8]
   176ec:	4293      	cmp	r3, r2
   176ee:	d12c      	bne.n	1774a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   176f0:	68c3      	ldr	r3, [r0, #12]
   176f2:	2b01      	cmp	r3, #1
   176f4:	d903      	bls.n	176fe <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   176f6:	3b01      	subs	r3, #1
   176f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   176fa:	2000      	movs	r0, #0
}
   176fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   176fe:	f04f 0320 	mov.w	r3, #32
   17702:	f3ef 8511 	mrs	r5, BASEPRI
   17706:	f383 8812 	msr	BASEPRI_MAX, r3
   1770a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1770e:	6901      	ldr	r1, [r0, #16]
   17710:	6880      	ldr	r0, [r0, #8]
   17712:	f006 f822 	bl	1d75a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17716:	4620      	mov	r0, r4
   17718:	f006 fa81 	bl	1dc1e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1771c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1771e:	b158      	cbz	r0, 17738 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   17720:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17724:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17726:	2200      	movs	r2, #0
   17728:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1772a:	f006 fa19 	bl	1db60 <z_ready_thread>
		z_reschedule(&lock, key);
   1772e:	4629      	mov	r1, r5
   17730:	4808      	ldr	r0, [pc, #32]	; (17754 <z_impl_k_mutex_unlock+0x74>)
   17732:	f000 fc47 	bl	17fc4 <z_reschedule>
   17736:	e7e0      	b.n	176fa <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   17738:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1773a:	f385 8811 	msr	BASEPRI, r5
   1773e:	f3bf 8f6f 	isb	sy
   17742:	e7da      	b.n	176fa <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   17744:	f06f 0015 	mvn.w	r0, #21
   17748:	e7d8      	b.n	176fc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1774a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1774e:	e7d5      	b.n	176fc <z_impl_k_mutex_unlock+0x1c>
   17750:	20009bfc 	.word	0x20009bfc
   17754:	20009d46 	.word	0x20009d46

00017758 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1775a:	4611      	mov	r1, r2
	__asm__ volatile(
   1775c:	f04f 0220 	mov.w	r2, #32
   17760:	f3ef 8511 	mrs	r5, BASEPRI
   17764:	f382 8812 	msr	BASEPRI_MAX, r2
   17768:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1776c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1776e:	b19c      	cbz	r4, 17798 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17770:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17772:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17774:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17778:	4294      	cmp	r4, r2
	list->head = node;
   1777a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1777c:	bf08      	it	eq
   1777e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17780:	2101      	movs	r1, #1
   17782:	4620      	mov	r0, r4
   17784:	f006 f85e 	bl	1d844 <z_queue_node_peek>
   17788:	4604      	mov	r4, r0
	__asm__ volatile(
   1778a:	f385 8811 	msr	BASEPRI, r5
   1778e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17792:	4620      	mov	r0, r4
   17794:	b003      	add	sp, #12
   17796:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17798:	ea51 0203 	orrs.w	r2, r1, r3
   1779c:	d0f5      	beq.n	1778a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1779e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   177a2:	e9cd 1300 	strd	r1, r3, [sp]
   177a6:	4610      	mov	r0, r2
   177a8:	4629      	mov	r1, r5
   177aa:	f000 fba7 	bl	17efc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   177ae:	2800      	cmp	r0, #0
   177b0:	d1ef      	bne.n	17792 <z_impl_k_queue_get+0x3a>
   177b2:	4b02      	ldr	r3, [pc, #8]	; (177bc <z_impl_k_queue_get+0x64>)
   177b4:	689b      	ldr	r3, [r3, #8]
   177b6:	695c      	ldr	r4, [r3, #20]
   177b8:	e7eb      	b.n	17792 <z_impl_k_queue_get+0x3a>
   177ba:	bf00      	nop
   177bc:	20009bfc 	.word	0x20009bfc

000177c0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   177c0:	b538      	push	{r3, r4, r5, lr}
   177c2:	4604      	mov	r4, r0
	__asm__ volatile(
   177c4:	f04f 0320 	mov.w	r3, #32
   177c8:	f3ef 8511 	mrs	r5, BASEPRI
   177cc:	f383 8812 	msr	BASEPRI_MAX, r3
   177d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   177d4:	f006 fa23 	bl	1dc1e <z_unpend_first_thread>

	if (thread != NULL) {
   177d8:	b148      	cbz	r0, 177ee <z_impl_k_sem_give+0x2e>
   177da:	2200      	movs	r2, #0
   177dc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   177de:	f006 f9bf 	bl	1db60 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   177e2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   177e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   177e8:	4807      	ldr	r0, [pc, #28]	; (17808 <z_impl_k_sem_give+0x48>)
   177ea:	f000 bbeb 	b.w	17fc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   177ee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   177f2:	429a      	cmp	r2, r3
   177f4:	bf18      	it	ne
   177f6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   177f8:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   177fa:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   177fc:	f104 0010 	add.w	r0, r4, #16
   17800:	f006 fc45 	bl	1e08e <z_handle_obj_poll_events>
}
   17804:	e7ed      	b.n	177e2 <z_impl_k_sem_give+0x22>
   17806:	bf00      	nop
   17808:	20009d46 	.word	0x20009d46

0001780c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1780c:	b513      	push	{r0, r1, r4, lr}
   1780e:	f04f 0420 	mov.w	r4, #32
   17812:	f3ef 8111 	mrs	r1, BASEPRI
   17816:	f384 8812 	msr	BASEPRI_MAX, r4
   1781a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1781e:	6884      	ldr	r4, [r0, #8]
   17820:	b144      	cbz	r4, 17834 <z_impl_k_sem_take+0x28>
		sem->count--;
   17822:	3c01      	subs	r4, #1
   17824:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   17826:	f381 8811 	msr	BASEPRI, r1
   1782a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1782e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17830:	b002      	add	sp, #8
   17832:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17834:	ea52 0403 	orrs.w	r4, r2, r3
   17838:	d106      	bne.n	17848 <z_impl_k_sem_take+0x3c>
   1783a:	f381 8811 	msr	BASEPRI, r1
   1783e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17842:	f06f 000f 	mvn.w	r0, #15
   17846:	e7f3      	b.n	17830 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17848:	e9cd 2300 	strd	r2, r3, [sp]
   1784c:	4602      	mov	r2, r0
   1784e:	4802      	ldr	r0, [pc, #8]	; (17858 <z_impl_k_sem_take+0x4c>)
   17850:	f000 fb54 	bl	17efc <z_pend_curr>
	return ret;
   17854:	e7ec      	b.n	17830 <z_impl_k_sem_take+0x24>
   17856:	bf00      	nop
   17858:	20009d46 	.word	0x20009d46

0001785c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1785c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1785e:	2400      	movs	r4, #0
   17860:	4b08      	ldr	r3, [pc, #32]	; (17884 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17862:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   17866:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   17868:	ab02      	add	r3, sp, #8
   1786a:	9300      	str	r3, [sp, #0]
   1786c:	4906      	ldr	r1, [pc, #24]	; (17888 <k_sys_work_q_init+0x2c>)
   1786e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17872:	4806      	ldr	r0, [pc, #24]	; (1788c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17874:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17878:	f000 f924 	bl	17ac4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1787c:	4620      	mov	r0, r4
   1787e:	b004      	add	sp, #16
   17880:	bd10      	pop	{r4, pc}
   17882:	bf00      	nop
   17884:	0002190a 	.word	0x0002190a
   17888:	2000c3e0 	.word	0x2000c3e0
   1788c:	200096d8 	.word	0x200096d8

00017890 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17894:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   17896:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1789a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
   1789e:	4e48      	ldr	r6, [pc, #288]	; (179c0 <work_queue_main+0x130>)
{
   178a0:	b085      	sub	sp, #20
	__asm__ volatile(
   178a2:	f04f 0320 	mov.w	r3, #32
   178a6:	f3ef 8711 	mrs	r7, BASEPRI
   178aa:	f383 8812 	msr	BASEPRI_MAX, r3
   178ae:	f3bf 8f6f 	isb	sy
   178b2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   178b6:	b98d      	cbnz	r5, 178dc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   178b8:	2102      	movs	r1, #2
   178ba:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   178be:	f006 f802 	bl	1d8c6 <flag_test_and_clear>
   178c2:	2800      	cmp	r0, #0
   178c4:	d143      	bne.n	1794e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   178c6:	2300      	movs	r3, #0
   178c8:	4639      	mov	r1, r7
   178ca:	e9cd 8900 	strd	r8, r9, [sp]
   178ce:	9302      	str	r3, [sp, #8]
   178d0:	f104 0290 	add.w	r2, r4, #144	; 0x90
   178d4:	483b      	ldr	r0, [pc, #236]	; (179c4 <work_queue_main+0x134>)
   178d6:	f000 fd11 	bl	182fc <z_sched_wait>
			continue;
   178da:	e7e2      	b.n	178a2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   178dc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   178e0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   178e2:	4295      	cmp	r5, r2
	list->head = node;
   178e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   178e8:	bf08      	it	eq
   178ea:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   178ee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   178f2:	f043 0302 	orr.w	r3, r3, #2
   178f6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   178fa:	68eb      	ldr	r3, [r5, #12]
   178fc:	f023 0304 	bic.w	r3, r3, #4
   17900:	f043 0301 	orr.w	r3, r3, #1
   17904:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   17906:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   17908:	f387 8811 	msr	BASEPRI, r7
   1790c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   17910:	4628      	mov	r0, r5
   17912:	4798      	blx	r3
	__asm__ volatile(
   17914:	f04f 0320 	mov.w	r3, #32
   17918:	f3ef 8b11 	mrs	fp, BASEPRI
   1791c:	f383 8812 	msr	BASEPRI_MAX, r3
   17920:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   17924:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17926:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   17928:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1792c:	d419      	bmi.n	17962 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1792e:	60ea      	str	r2, [r5, #12]
   17930:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   17934:	f023 0302 	bic.w	r3, r3, #2
   17938:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   1793c:	f38b 8811 	msr	BASEPRI, fp
   17940:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   17944:	05db      	lsls	r3, r3, #23
   17946:	d4ac      	bmi.n	178a2 <work_queue_main+0x12>
	z_impl_k_yield();
   17948:	f000 fbd6 	bl	180f8 <z_impl_k_yield>
}
   1794c:	e7a9      	b.n	178a2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1794e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   17952:	2200      	movs	r2, #0
   17954:	2101      	movs	r1, #1
   17956:	4628      	mov	r0, r5
   17958:	f006 f9bb 	bl	1dcd2 <z_sched_wake>
   1795c:	2800      	cmp	r0, #0
   1795e:	d1f8      	bne.n	17952 <work_queue_main+0xc2>
   17960:	e7b1      	b.n	178c6 <work_queue_main+0x36>
	return list->head;
   17962:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   17964:	f023 0303 	bic.w	r3, r3, #3
   17968:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1796a:	2800      	cmp	r0, #0
   1796c:	d0e0      	beq.n	17930 <work_queue_main+0xa0>
	return node->next;
   1796e:	2700      	movs	r7, #0
	parent->next = child;
   17970:	463b      	mov	r3, r7
	return node->next;
   17972:	f8d0 a000 	ldr.w	sl, [r0]
   17976:	2800      	cmp	r0, #0
   17978:	d0da      	beq.n	17930 <work_queue_main+0xa0>
		if (wc->work == work) {
   1797a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1797c:	4601      	mov	r1, r0
		if (wc->work == work) {
   1797e:	4295      	cmp	r5, r2
   17980:	d10c      	bne.n	1799c <work_queue_main+0x10c>
   17982:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   17984:	b99f      	cbnz	r7, 179ae <work_queue_main+0x11e>
   17986:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   17988:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1798a:	4282      	cmp	r2, r0
   1798c:	d100      	bne.n	17990 <work_queue_main+0x100>
	list->tail = node;
   1798e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   17990:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   17994:	f7ff ff14 	bl	177c0 <z_impl_k_sem_give>
}
   17998:	4639      	mov	r1, r7
   1799a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1799c:	f1ba 0f00 	cmp.w	sl, #0
   179a0:	d00b      	beq.n	179ba <work_queue_main+0x12a>
	return node->next;
   179a2:	f8da 2000 	ldr.w	r2, [sl]
   179a6:	4650      	mov	r0, sl
   179a8:	460f      	mov	r7, r1
   179aa:	4692      	mov	sl, r2
   179ac:	e7e3      	b.n	17976 <work_queue_main+0xe6>
	parent->next = child;
   179ae:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   179b0:	6872      	ldr	r2, [r6, #4]
   179b2:	4282      	cmp	r2, r0
	list->tail = node;
   179b4:	bf08      	it	eq
   179b6:	6077      	streq	r7, [r6, #4]
}
   179b8:	e7ea      	b.n	17990 <work_queue_main+0x100>
   179ba:	4652      	mov	r2, sl
   179bc:	e7f3      	b.n	179a6 <work_queue_main+0x116>
   179be:	bf00      	nop
   179c0:	20009c20 	.word	0x20009c20
   179c4:	20009d46 	.word	0x20009d46

000179c8 <cancel_sync_locked>:
{
   179c8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   179ca:	68c3      	ldr	r3, [r0, #12]
{
   179cc:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   179ce:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   179d2:	079b      	lsls	r3, r3, #30
{
   179d4:	460c      	mov	r4, r1
	if (ret) {
   179d6:	d50d      	bpl.n	179f4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   179d8:	2201      	movs	r2, #1
   179da:	2100      	movs	r1, #0
   179dc:	f104 0008 	add.w	r0, r4, #8
   179e0:	f005 ff61 	bl	1d8a6 <z_impl_k_sem_init>
	parent->next = child;
   179e4:	2300      	movs	r3, #0
   179e6:	6023      	str	r3, [r4, #0]
	return list->tail;
   179e8:	4b05      	ldr	r3, [pc, #20]	; (17a00 <cancel_sync_locked+0x38>)
	canceler->work = work;
   179ea:	6065      	str	r5, [r4, #4]
   179ec:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   179ee:	b91a      	cbnz	r2, 179f8 <cancel_sync_locked+0x30>
	list->head = node;
   179f0:	e9c3 4400 	strd	r4, r4, [r3]
}
   179f4:	4630      	mov	r0, r6
   179f6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   179f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   179fa:	605c      	str	r4, [r3, #4]
}
   179fc:	e7fa      	b.n	179f4 <cancel_sync_locked+0x2c>
   179fe:	bf00      	nop
   17a00:	20009c20 	.word	0x20009c20

00017a04 <submit_to_queue_locked>:
{
   17a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   17a06:	68c3      	ldr	r3, [r0, #12]
{
   17a08:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17a0a:	079a      	lsls	r2, r3, #30
{
   17a0c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17a0e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   17a12:	d42c      	bmi.n	17a6e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   17a14:	075b      	lsls	r3, r3, #29
   17a16:	d41a      	bmi.n	17a4e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   17a18:	680b      	ldr	r3, [r1, #0]
   17a1a:	b90b      	cbnz	r3, 17a20 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   17a1c:	6883      	ldr	r3, [r0, #8]
   17a1e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   17a20:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   17a22:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   17a24:	bf42      	ittt	mi
   17a26:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   17a28:	2602      	movmi	r6, #2
			*queuep = work->queue;
   17a2a:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   17a2c:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   17a2e:	bf58      	it	pl
   17a30:	2601      	movpl	r6, #1
	if (queue == NULL) {
   17a32:	2d00      	cmp	r5, #0
   17a34:	d03a      	beq.n	17aac <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17a36:	4b1f      	ldr	r3, [pc, #124]	; (17ab4 <submit_to_queue_locked+0xb0>)
   17a38:	689b      	ldr	r3, [r3, #8]
   17a3a:	42ab      	cmp	r3, r5
   17a3c:	d00a      	beq.n	17a54 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   17a3e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17a42:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   17a44:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17a48:	d414      	bmi.n	17a74 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   17a4a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   17a4e:	2300      	movs	r3, #0
   17a50:	603b      	str	r3, [r7, #0]
	return ret;
   17a52:	e025      	b.n	17aa0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17a54:	f005 fe6d 	bl	1d732 <k_is_in_isr>
   17a58:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   17a5c:	2800      	cmp	r0, #0
   17a5e:	d1f0      	bne.n	17a42 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17a60:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   17a62:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17a66:	d5f0      	bpl.n	17a4a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   17a68:	b152      	cbz	r2, 17a80 <submit_to_queue_locked+0x7c>
   17a6a:	075b      	lsls	r3, r3, #29
   17a6c:	d408      	bmi.n	17a80 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   17a6e:	f06f 060f 	mvn.w	r6, #15
   17a72:	e7ec      	b.n	17a4e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   17a74:	2a00      	cmp	r2, #0
   17a76:	d1fa      	bne.n	17a6e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   17a78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   17a7c:	2b00      	cmp	r3, #0
   17a7e:	d1f6      	bne.n	17a6e <submit_to_queue_locked+0x6a>
	parent->next = child;
   17a80:	2300      	movs	r3, #0
   17a82:	6023      	str	r3, [r4, #0]
	return list->tail;
   17a84:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   17a88:	b963      	cbnz	r3, 17aa4 <submit_to_queue_locked+0xa0>
	list->head = node;
   17a8a:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   17a8e:	4628      	mov	r0, r5
   17a90:	f005 ff33 	bl	1d8fa <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   17a94:	68e3      	ldr	r3, [r4, #12]
   17a96:	f043 0304 	orr.w	r3, r3, #4
   17a9a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   17a9c:	683b      	ldr	r3, [r7, #0]
   17a9e:	60a3      	str	r3, [r4, #8]
}
   17aa0:	4630      	mov	r0, r6
   17aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   17aa4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17aa6:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   17aaa:	e7f0      	b.n	17a8e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   17aac:	f06f 0615 	mvn.w	r6, #21
   17ab0:	e7cd      	b.n	17a4e <submit_to_queue_locked+0x4a>
   17ab2:	bf00      	nop
   17ab4:	20009bfc 	.word	0x20009bfc

00017ab8 <k_work_submit>:
{
   17ab8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   17aba:	4801      	ldr	r0, [pc, #4]	; (17ac0 <k_work_submit+0x8>)
   17abc:	f005 bfa3 	b.w	1da06 <k_work_submit_to_queue>
   17ac0:	200096d8 	.word	0x200096d8

00017ac4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   17ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ac6:	4604      	mov	r4, r0
	list->head = NULL;
   17ac8:	2000      	movs	r0, #0
   17aca:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   17acc:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   17ad0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17ad2:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   17ad6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   17ada:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17ade:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   17ae2:	b31d      	cbz	r5, 17b2c <k_work_queue_start+0x68>
   17ae4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   17ae6:	2800      	cmp	r0, #0
   17ae8:	f240 1001 	movw	r0, #257	; 0x101
   17aec:	bf08      	it	eq
   17aee:	2001      	moveq	r0, #1
	*flagp = flags;
   17af0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17af4:	2000      	movs	r0, #0
   17af6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17afa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17afe:	e9cd 3003 	strd	r3, r0, [sp, #12]
   17b02:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17b06:	e9cd 6706 	strd	r6, r7, [sp, #24]
   17b0a:	4620      	mov	r0, r4
   17b0c:	4b08      	ldr	r3, [pc, #32]	; (17b30 <k_work_queue_start+0x6c>)
   17b0e:	9400      	str	r4, [sp, #0]
   17b10:	f7ff fcc8 	bl	174a4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   17b14:	b125      	cbz	r5, 17b20 <k_work_queue_start+0x5c>
   17b16:	6829      	ldr	r1, [r5, #0]
   17b18:	b111      	cbz	r1, 17b20 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   17b1a:	4620      	mov	r0, r4
   17b1c:	f005 fe0f 	bl	1d73e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   17b20:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   17b22:	b009      	add	sp, #36	; 0x24
   17b24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17b28:	f005 be0e 	b.w	1d748 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   17b2c:	2001      	movs	r0, #1
   17b2e:	e7df      	b.n	17af0 <k_work_queue_start+0x2c>
   17b30:	00017891 	.word	0x00017891

00017b34 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   17b34:	b530      	push	{r4, r5, lr}
   17b36:	460a      	mov	r2, r1
   17b38:	4604      	mov	r4, r0
   17b3a:	b085      	sub	sp, #20
	__asm__ volatile(
   17b3c:	f04f 0320 	mov.w	r3, #32
   17b40:	f3ef 8511 	mrs	r5, BASEPRI
   17b44:	f383 8812 	msr	BASEPRI_MAX, r3
   17b48:	f3bf 8f6f 	isb	sy
	return *flagp;
   17b4c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   17b50:	f013 0f06 	tst.w	r3, #6
   17b54:	d11d      	bne.n	17b92 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   17b56:	b1b1      	cbz	r1, 17b86 <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   17b58:	f043 030c 	orr.w	r3, r3, #12
   17b5c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   17b60:	4620      	mov	r0, r4
   17b62:	f005 feca 	bl	1d8fa <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   17b66:	2300      	movs	r3, #0
   17b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b6c:	9302      	str	r3, [sp, #8]
   17b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b72:	4629      	mov	r1, r5
   17b74:	e9cd 2300 	strd	r2, r3, [sp]
   17b78:	480c      	ldr	r0, [pc, #48]	; (17bac <k_work_queue_drain+0x78>)
   17b7a:	f104 0298 	add.w	r2, r4, #152	; 0x98
   17b7e:	f000 fbbd 	bl	182fc <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   17b82:	b005      	add	sp, #20
   17b84:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   17b86:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   17b8a:	b148      	cbz	r0, 17ba0 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   17b8c:	f043 0304 	orr.w	r3, r3, #4
   17b90:	e7e4      	b.n	17b5c <k_work_queue_drain+0x28>
   17b92:	f043 0104 	orr.w	r1, r3, #4
   17b96:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		if (plug) {
   17b9a:	2a00      	cmp	r2, #0
   17b9c:	d0e0      	beq.n	17b60 <k_work_queue_drain+0x2c>
   17b9e:	e7db      	b.n	17b58 <k_work_queue_drain+0x24>
	__asm__ volatile(
   17ba0:	f385 8811 	msr	BASEPRI, r5
   17ba4:	f3bf 8f6f 	isb	sy
	return ret;
   17ba8:	e7eb      	b.n	17b82 <k_work_queue_drain+0x4e>
   17baa:	bf00      	nop
   17bac:	20009d46 	.word	0x20009d46

00017bb0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   17bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17bb2:	9001      	str	r0, [sp, #4]
   17bb4:	4608      	mov	r0, r1
	__asm__ volatile(
   17bb6:	f04f 0120 	mov.w	r1, #32
   17bba:	f3ef 8411 	mrs	r4, BASEPRI
   17bbe:	f381 8812 	msr	BASEPRI_MAX, r1
   17bc2:	f3bf 8f6f 	isb	sy
	return *flagp;
   17bc6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   17bc8:	f011 0f0e 	tst.w	r1, #14
   17bcc:	d116      	bne.n	17bfc <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17bce:	ea53 0502 	orrs.w	r5, r3, r2
   17bd2:	d108      	bne.n	17be6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   17bd4:	a901      	add	r1, sp, #4
   17bd6:	f7ff ff15 	bl	17a04 <submit_to_queue_locked>
	__asm__ volatile(
   17bda:	f384 8811 	msr	BASEPRI, r4
   17bde:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17be2:	b003      	add	sp, #12
   17be4:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   17be6:	f041 0108 	orr.w	r1, r1, #8
   17bea:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   17bec:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17bee:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   17bf0:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17bf2:	4903      	ldr	r1, [pc, #12]	; (17c00 <k_work_schedule_for_queue+0x50>)
   17bf4:	f000 fbf4 	bl	183e0 <z_add_timeout>
	return ret;
   17bf8:	2001      	movs	r0, #1
   17bfa:	e7ee      	b.n	17bda <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   17bfc:	2000      	movs	r0, #0
   17bfe:	e7ec      	b.n	17bda <k_work_schedule_for_queue+0x2a>
   17c00:	0001d96f 	.word	0x0001d96f

00017c04 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   17c04:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   17c06:	4801      	ldr	r0, [pc, #4]	; (17c0c <k_work_schedule+0x8>)
   17c08:	f7ff bfd2 	b.w	17bb0 <k_work_schedule_for_queue>
   17c0c:	200096d8 	.word	0x200096d8

00017c10 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   17c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17c12:	460c      	mov	r4, r1
   17c14:	4616      	mov	r6, r2
   17c16:	461d      	mov	r5, r3
   17c18:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   17c1a:	f04f 0320 	mov.w	r3, #32
   17c1e:	f3ef 8711 	mrs	r7, BASEPRI
   17c22:	f383 8812 	msr	BASEPRI_MAX, r3
   17c26:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   17c2a:	4608      	mov	r0, r1
   17c2c:	f005 fe56 	bl	1d8dc <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17c30:	ea55 0306 	orrs.w	r3, r5, r6
   17c34:	d109      	bne.n	17c4a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   17c36:	4620      	mov	r0, r4
   17c38:	a901      	add	r1, sp, #4
   17c3a:	f7ff fee3 	bl	17a04 <submit_to_queue_locked>
	__asm__ volatile(
   17c3e:	f387 8811 	msr	BASEPRI, r7
   17c42:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17c46:	b003      	add	sp, #12
   17c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   17c4a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17c4c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   17c50:	f043 0308 	orr.w	r3, r3, #8
   17c54:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   17c56:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17c58:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   17c5a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17c5c:	4902      	ldr	r1, [pc, #8]	; (17c68 <k_work_reschedule_for_queue+0x58>)
   17c5e:	462b      	mov	r3, r5
   17c60:	f000 fbbe 	bl	183e0 <z_add_timeout>
	return ret;
   17c64:	2001      	movs	r0, #1
   17c66:	e7ea      	b.n	17c3e <k_work_reschedule_for_queue+0x2e>
   17c68:	0001d96f 	.word	0x0001d96f

00017c6c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   17c6c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   17c6e:	4801      	ldr	r0, [pc, #4]	; (17c74 <k_work_reschedule+0x8>)
   17c70:	f7ff bfce 	b.w	17c10 <k_work_reschedule_for_queue>
   17c74:	200096d8 	.word	0x200096d8

00017c78 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   17c78:	89c3      	ldrh	r3, [r0, #14]
   17c7a:	2b7f      	cmp	r3, #127	; 0x7f
   17c7c:	d812      	bhi.n	17ca4 <sliceable+0x2c>
	int ret = slice_ticks;
   17c7e:	4b0a      	ldr	r3, [pc, #40]	; (17ca8 <sliceable+0x30>)
   17c80:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   17c82:	b163      	cbz	r3, 17c9e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17c84:	4b09      	ldr	r3, [pc, #36]	; (17cac <sliceable+0x34>)
   17c86:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17c8a:	681b      	ldr	r3, [r3, #0]
   17c8c:	429a      	cmp	r2, r3
   17c8e:	db09      	blt.n	17ca4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   17c90:	7b43      	ldrb	r3, [r0, #13]
   17c92:	06db      	lsls	r3, r3, #27
   17c94:	d106      	bne.n	17ca4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   17c96:	4b06      	ldr	r3, [pc, #24]	; (17cb0 <sliceable+0x38>)
   17c98:	1ac3      	subs	r3, r0, r3
   17c9a:	bf18      	it	ne
   17c9c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   17c9e:	f003 0001 	and.w	r0, r3, #1
   17ca2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   17ca4:	2300      	movs	r3, #0
   17ca6:	e7fa      	b.n	17c9e <sliceable+0x26>
   17ca8:	20009c30 	.word	0x20009c30
   17cac:	20009c2c 	.word	0x20009c2c
   17cb0:	200095c8 	.word	0x200095c8

00017cb4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   17cb4:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   17cb6:	4b04      	ldr	r3, [pc, #16]	; (17cc8 <slice_timeout+0x14>)
   17cb8:	1ac0      	subs	r0, r0, r3
   17cba:	4b04      	ldr	r3, [pc, #16]	; (17ccc <slice_timeout+0x18>)
   17cbc:	10c0      	asrs	r0, r0, #3
   17cbe:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   17cc0:	4b03      	ldr	r3, [pc, #12]	; (17cd0 <slice_timeout+0x1c>)
   17cc2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   17cc4:	4770      	bx	lr
   17cc6:	bf00      	nop
   17cc8:	20009780 	.word	0x20009780
   17ccc:	aaaaaaab 	.word	0xaaaaaaab
   17cd0:	20009d46 	.word	0x20009d46

00017cd4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   17cd4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   17cd6:	4b0e      	ldr	r3, [pc, #56]	; (17d10 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   17cd8:	4c0e      	ldr	r4, [pc, #56]	; (17d14 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   17cda:	7c1e      	ldrb	r6, [r3, #16]
{
   17cdc:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   17cde:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   17ce2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   17ce6:	4620      	mov	r0, r4
   17ce8:	f006 f816 	bl	1dd18 <z_abort_timeout>
	slice_expired[cpu] = false;
   17cec:	2200      	movs	r2, #0
   17cee:	4b0a      	ldr	r3, [pc, #40]	; (17d18 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   17cf0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   17cf2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   17cf4:	f7ff ffc0 	bl	17c78 <sliceable>
   17cf8:	b148      	cbz	r0, 17d0e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   17cfa:	4b08      	ldr	r3, [pc, #32]	; (17d1c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   17cfc:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   17cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   17d02:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   17d04:	4906      	ldr	r1, [pc, #24]	; (17d20 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   17d06:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   17d08:	17d3      	asrs	r3, r2, #31
   17d0a:	f000 bb69 	b.w	183e0 <z_add_timeout>
}
   17d0e:	bd70      	pop	{r4, r5, r6, pc}
   17d10:	20009bfc 	.word	0x20009bfc
   17d14:	20009780 	.word	0x20009780
   17d18:	20009d46 	.word	0x20009d46
   17d1c:	20009c30 	.word	0x20009c30
   17d20:	00017cb5 	.word	0x00017cb5

00017d24 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   17d24:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   17d26:	4d0d      	ldr	r5, [pc, #52]	; (17d5c <update_cache+0x38>)
   17d28:	462b      	mov	r3, r5
   17d2a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d2e:	429c      	cmp	r4, r3
   17d30:	d000      	beq.n	17d34 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17d32:	b904      	cbnz	r4, 17d36 <update_cache+0x12>
   17d34:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   17d36:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   17d38:	b938      	cbnz	r0, 17d4a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   17d3a:	7b5a      	ldrb	r2, [r3, #13]
   17d3c:	06d2      	lsls	r2, r2, #27
   17d3e:	d104      	bne.n	17d4a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17d40:	69a2      	ldr	r2, [r4, #24]
   17d42:	b912      	cbnz	r2, 17d4a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   17d44:	89da      	ldrh	r2, [r3, #14]
   17d46:	2a7f      	cmp	r2, #127	; 0x7f
   17d48:	d805      	bhi.n	17d56 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   17d4a:	429c      	cmp	r4, r3
   17d4c:	d002      	beq.n	17d54 <update_cache+0x30>
			z_reset_time_slice(thread);
   17d4e:	4620      	mov	r0, r4
   17d50:	f7ff ffc0 	bl	17cd4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   17d54:	4623      	mov	r3, r4
   17d56:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   17d58:	bd38      	pop	{r3, r4, r5, pc}
   17d5a:	bf00      	nop
   17d5c:	20009bfc 	.word	0x20009bfc

00017d60 <move_thread_to_end_of_prio_q>:
{
   17d60:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17d62:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17d66:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17d68:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   17d6a:	7b43      	ldrb	r3, [r0, #13]
   17d6c:	da04      	bge.n	17d78 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17d72:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   17d74:	f005 feb1 	bl	1dada <sys_dlist_remove>
	return list->head == list;
   17d78:	4a15      	ldr	r2, [pc, #84]	; (17dd0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   17d7a:	7b4b      	ldrb	r3, [r1, #13]
   17d7c:	4610      	mov	r0, r2
   17d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17d82:	734b      	strb	r3, [r1, #13]
   17d84:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   17d88:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d8a:	4283      	cmp	r3, r0
   17d8c:	bf08      	it	eq
   17d8e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17d90:	b923      	cbnz	r3, 17d9c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   17d92:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   17d96:	6021      	str	r1, [r4, #0]
	list->tail = node;
   17d98:	6211      	str	r1, [r2, #32]
}
   17d9a:	e00c      	b.n	17db6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   17d9c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   17da0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   17da4:	42b5      	cmp	r5, r6
   17da6:	d00e      	beq.n	17dc6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17da8:	42ae      	cmp	r6, r5
   17daa:	dd0c      	ble.n	17dc6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   17dac:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   17dae:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   17db2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   17db4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   17db6:	6890      	ldr	r0, [r2, #8]
}
   17db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17dbc:	1a43      	subs	r3, r0, r1
   17dbe:	4258      	negs	r0, r3
   17dc0:	4158      	adcs	r0, r3
   17dc2:	f7ff bfaf 	b.w	17d24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17dc6:	429c      	cmp	r4, r3
   17dc8:	d0e3      	beq.n	17d92 <move_thread_to_end_of_prio_q+0x32>
   17dca:	681b      	ldr	r3, [r3, #0]
   17dcc:	e7e0      	b.n	17d90 <move_thread_to_end_of_prio_q+0x30>
   17dce:	bf00      	nop
   17dd0:	20009bfc 	.word	0x20009bfc

00017dd4 <ready_thread>:
{
   17dd4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17dd6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   17dda:	7b42      	ldrb	r2, [r0, #13]
   17ddc:	2b00      	cmp	r3, #0
   17dde:	db29      	blt.n	17e34 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17de0:	06d3      	lsls	r3, r2, #27
   17de2:	d127      	bne.n	17e34 <ready_thread+0x60>
	return node->next != NULL;
   17de4:	6983      	ldr	r3, [r0, #24]
   17de6:	bb2b      	cbnz	r3, 17e34 <ready_thread+0x60>
	return list->head == list;
   17de8:	4913      	ldr	r1, [pc, #76]	; (17e38 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   17dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17dee:	7342      	strb	r2, [r0, #13]
   17df0:	460a      	mov	r2, r1
   17df2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17df6:	4294      	cmp	r4, r2
   17df8:	bf18      	it	ne
   17dfa:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   17dfc:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17dfe:	b923      	cbnz	r3, 17e0a <ready_thread+0x36>
	node->prev = tail;
   17e00:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   17e04:	6020      	str	r0, [r4, #0]
	list->tail = node;
   17e06:	6208      	str	r0, [r1, #32]
}
   17e08:	e00c      	b.n	17e24 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   17e0a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   17e0e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   17e12:	42b5      	cmp	r5, r6
   17e14:	d00a      	beq.n	17e2c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17e16:	42ae      	cmp	r6, r5
   17e18:	dd08      	ble.n	17e2c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   17e1a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17e1c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   17e20:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   17e22:	6058      	str	r0, [r3, #4]
		update_cache(0);
   17e24:	2000      	movs	r0, #0
}
   17e26:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   17e28:	f7ff bf7c 	b.w	17d24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17e2c:	42a3      	cmp	r3, r4
   17e2e:	d0e7      	beq.n	17e00 <ready_thread+0x2c>
   17e30:	681b      	ldr	r3, [r3, #0]
   17e32:	e7e4      	b.n	17dfe <ready_thread+0x2a>
}
   17e34:	bc70      	pop	{r4, r5, r6}
   17e36:	4770      	bx	lr
   17e38:	20009bfc 	.word	0x20009bfc

00017e3c <unready_thread>:
{
   17e3c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   17e3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17e42:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17e44:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   17e46:	7b43      	ldrb	r3, [r0, #13]
   17e48:	da04      	bge.n	17e54 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17e4e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17e50:	f005 fe43 	bl	1dada <sys_dlist_remove>
	update_cache(thread == _current);
   17e54:	4b04      	ldr	r3, [pc, #16]	; (17e68 <unready_thread+0x2c>)
   17e56:	6898      	ldr	r0, [r3, #8]
   17e58:	1a43      	subs	r3, r0, r1
   17e5a:	4258      	negs	r0, r3
   17e5c:	4158      	adcs	r0, r3
}
   17e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   17e62:	f7ff bf5f 	b.w	17d24 <update_cache>
   17e66:	bf00      	nop
   17e68:	20009bfc 	.word	0x20009bfc

00017e6c <pend_locked>:
{
   17e6c:	b570      	push	{r4, r5, r6, lr}
   17e6e:	4615      	mov	r5, r2
   17e70:	461c      	mov	r4, r3
   17e72:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   17e74:	f005 fe4c 	bl	1db10 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17e78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17e7c:	bf08      	it	eq
   17e7e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   17e82:	d008      	beq.n	17e96 <pend_locked+0x2a>
   17e84:	462a      	mov	r2, r5
   17e86:	4623      	mov	r3, r4
   17e88:	f106 0018 	add.w	r0, r6, #24
   17e8c:	4902      	ldr	r1, [pc, #8]	; (17e98 <pend_locked+0x2c>)
}
   17e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17e92:	f000 baa5 	b.w	183e0 <z_add_timeout>
   17e96:	bd70      	pop	{r4, r5, r6, pc}
   17e98:	0001dbe9 	.word	0x0001dbe9

00017e9c <z_time_slice>:
{
   17e9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17e9e:	f04f 0320 	mov.w	r3, #32
   17ea2:	f3ef 8511 	mrs	r5, BASEPRI
   17ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   17eaa:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   17eae:	4b10      	ldr	r3, [pc, #64]	; (17ef0 <z_time_slice+0x54>)
	if (pending_current == curr) {
   17eb0:	4a10      	ldr	r2, [pc, #64]	; (17ef4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   17eb2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   17eb4:	6810      	ldr	r0, [r2, #0]
   17eb6:	42a0      	cmp	r0, r4
   17eb8:	d106      	bne.n	17ec8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   17eba:	f7ff ff0b 	bl	17cd4 <z_reset_time_slice>
	__asm__ volatile(
   17ebe:	f385 8811 	msr	BASEPRI, r5
   17ec2:	f3bf 8f6f 	isb	sy
}
   17ec6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   17ec8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   17eca:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   17ecc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   17ece:	4a0a      	ldr	r2, [pc, #40]	; (17ef8 <z_time_slice+0x5c>)
   17ed0:	5cd3      	ldrb	r3, [r2, r3]
   17ed2:	2b00      	cmp	r3, #0
   17ed4:	d0f3      	beq.n	17ebe <z_time_slice+0x22>
   17ed6:	4620      	mov	r0, r4
   17ed8:	f7ff fece 	bl	17c78 <sliceable>
   17edc:	2800      	cmp	r0, #0
   17ede:	d0ee      	beq.n	17ebe <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   17ee0:	7b63      	ldrb	r3, [r4, #13]
   17ee2:	06db      	lsls	r3, r3, #27
   17ee4:	d102      	bne.n	17eec <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   17ee6:	4620      	mov	r0, r4
   17ee8:	f7ff ff3a 	bl	17d60 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   17eec:	4620      	mov	r0, r4
   17eee:	e7e4      	b.n	17eba <z_time_slice+0x1e>
   17ef0:	20009bfc 	.word	0x20009bfc
   17ef4:	20009c28 	.word	0x20009c28
   17ef8:	20009d46 	.word	0x20009d46

00017efc <z_pend_curr>:
{
   17efc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   17efe:	480c      	ldr	r0, [pc, #48]	; (17f30 <z_pend_curr+0x34>)
   17f00:	4d0c      	ldr	r5, [pc, #48]	; (17f34 <z_pend_curr+0x38>)
   17f02:	6886      	ldr	r6, [r0, #8]
{
   17f04:	460c      	mov	r4, r1
	pending_current = _current;
   17f06:	602e      	str	r6, [r5, #0]
{
   17f08:	4611      	mov	r1, r2
   17f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   17f0e:	f04f 0620 	mov.w	r6, #32
   17f12:	f3ef 8511 	mrs	r5, BASEPRI
   17f16:	f386 8812 	msr	BASEPRI_MAX, r6
   17f1a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   17f1e:	6880      	ldr	r0, [r0, #8]
   17f20:	f7ff ffa4 	bl	17e6c <pend_locked>
	ret = arch_swap(key);
   17f24:	4620      	mov	r0, r4
}
   17f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17f2a:	f7f3 be4d 	b.w	bbc8 <arch_swap>
   17f2e:	bf00      	nop
   17f30:	20009bfc 	.word	0x20009bfc
   17f34:	20009c28 	.word	0x20009c28

00017f38 <z_set_prio>:
{
   17f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f3a:	4604      	mov	r4, r0
   17f3c:	f04f 0320 	mov.w	r3, #32
   17f40:	f3ef 8611 	mrs	r6, BASEPRI
   17f44:	f383 8812 	msr	BASEPRI_MAX, r3
   17f48:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   17f4c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   17f4e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17f50:	06da      	lsls	r2, r3, #27
   17f52:	d119      	bne.n	17f88 <z_set_prio+0x50>
	return node->next != NULL;
   17f54:	6985      	ldr	r5, [r0, #24]
   17f56:	b9bd      	cbnz	r5, 17f88 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17f5c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17f5e:	f005 fdbc 	bl	1dada <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17f62:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   17f64:	4a16      	ldr	r2, [pc, #88]	; (17fc0 <z_set_prio+0x88>)
   17f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17f6a:	7343      	strb	r3, [r0, #13]
   17f6c:	4613      	mov	r3, r2
				thread->base.prio = prio;
   17f6e:	7381      	strb	r1, [r0, #14]
   17f70:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f74:	4298      	cmp	r0, r3
   17f76:	bf18      	it	ne
   17f78:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   17f7a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17f7c:	b95d      	cbnz	r5, 17f96 <z_set_prio+0x5e>
	node->prev = tail;
   17f7e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   17f82:	6004      	str	r4, [r0, #0]
	list->tail = node;
   17f84:	6214      	str	r4, [r2, #32]
}
   17f86:	e011      	b.n	17fac <z_set_prio+0x74>
   17f88:	2000      	movs	r0, #0
			thread->base.prio = prio;
   17f8a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   17f8c:	f386 8811 	msr	BASEPRI, r6
   17f90:	f3bf 8f6f 	isb	sy
}
   17f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   17f96:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   17f9a:	42b9      	cmp	r1, r7
   17f9c:	d00b      	beq.n	17fb6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17f9e:	428f      	cmp	r7, r1
   17fa0:	dd09      	ble.n	17fb6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   17fa2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   17fa4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   17fa8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17faa:	606c      	str	r4, [r5, #4]
			update_cache(1);
   17fac:	2001      	movs	r0, #1
   17fae:	f7ff feb9 	bl	17d24 <update_cache>
   17fb2:	2001      	movs	r0, #1
   17fb4:	e7ea      	b.n	17f8c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   17fb6:	42a8      	cmp	r0, r5
   17fb8:	d0e1      	beq.n	17f7e <z_set_prio+0x46>
   17fba:	682d      	ldr	r5, [r5, #0]
   17fbc:	e7de      	b.n	17f7c <z_set_prio+0x44>
   17fbe:	bf00      	nop
   17fc0:	20009bfc 	.word	0x20009bfc

00017fc4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17fc4:	b949      	cbnz	r1, 17fda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17fc6:	f3ef 8005 	mrs	r0, IPSR
   17fca:	b930      	cbnz	r0, 17fda <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   17fcc:	4b05      	ldr	r3, [pc, #20]	; (17fe4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   17fce:	699a      	ldr	r2, [r3, #24]
   17fd0:	689b      	ldr	r3, [r3, #8]
   17fd2:	429a      	cmp	r2, r3
   17fd4:	d001      	beq.n	17fda <z_reschedule+0x16>
   17fd6:	f7f3 bdf7 	b.w	bbc8 <arch_swap>
   17fda:	f381 8811 	msr	BASEPRI, r1
   17fde:	f3bf 8f6f 	isb	sy
}
   17fe2:	4770      	bx	lr
   17fe4:	20009bfc 	.word	0x20009bfc

00017fe8 <z_sched_start>:
{
   17fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
   17fea:	f04f 0220 	mov.w	r2, #32
   17fee:	f3ef 8411 	mrs	r4, BASEPRI
   17ff2:	f382 8812 	msr	BASEPRI_MAX, r2
   17ff6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   17ffa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   17ffc:	0751      	lsls	r1, r2, #29
   17ffe:	d404      	bmi.n	1800a <z_sched_start+0x22>
	__asm__ volatile(
   18000:	f384 8811 	msr	BASEPRI, r4
   18004:	f3bf 8f6f 	isb	sy
}
   18008:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1800a:	f022 0204 	bic.w	r2, r2, #4
   1800e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18010:	f7ff fee0 	bl	17dd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18014:	4621      	mov	r1, r4
}
   18016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1801a:	4801      	ldr	r0, [pc, #4]	; (18020 <z_sched_start+0x38>)
   1801c:	f7ff bfd2 	b.w	17fc4 <z_reschedule>
   18020:	20009d47 	.word	0x20009d47

00018024 <z_impl_k_thread_suspend>:
{
   18024:	b570      	push	{r4, r5, r6, lr}
   18026:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18028:	3018      	adds	r0, #24
   1802a:	f005 fe75 	bl	1dd18 <z_abort_timeout>
	__asm__ volatile(
   1802e:	f04f 0320 	mov.w	r3, #32
   18032:	f3ef 8611 	mrs	r6, BASEPRI
   18036:	f383 8812 	msr	BASEPRI_MAX, r3
   1803a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1803e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   18042:	7b63      	ldrb	r3, [r4, #13]
   18044:	2a00      	cmp	r2, #0
   18046:	da05      	bge.n	18054 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   1804c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1804e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18050:	f005 fd43 	bl	1dada <sys_dlist_remove>
		update_cache(thread == _current);
   18054:	4d0b      	ldr	r5, [pc, #44]	; (18084 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18056:	7b63      	ldrb	r3, [r4, #13]
   18058:	68a8      	ldr	r0, [r5, #8]
   1805a:	f043 0310 	orr.w	r3, r3, #16
   1805e:	7363      	strb	r3, [r4, #13]
   18060:	1b03      	subs	r3, r0, r4
   18062:	4258      	negs	r0, r3
   18064:	4158      	adcs	r0, r3
   18066:	f7ff fe5d 	bl	17d24 <update_cache>
	__asm__ volatile(
   1806a:	f386 8811 	msr	BASEPRI, r6
   1806e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18072:	68ab      	ldr	r3, [r5, #8]
   18074:	42a3      	cmp	r3, r4
   18076:	d103      	bne.n	18080 <z_impl_k_thread_suspend+0x5c>
}
   18078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1807c:	f005 be0f 	b.w	1dc9e <z_reschedule_unlocked>
}
   18080:	bd70      	pop	{r4, r5, r6, pc}
   18082:	bf00      	nop
   18084:	20009bfc 	.word	0x20009bfc

00018088 <k_sched_lock>:
	__asm__ volatile(
   18088:	f04f 0320 	mov.w	r3, #32
   1808c:	f3ef 8111 	mrs	r1, BASEPRI
   18090:	f383 8812 	msr	BASEPRI_MAX, r3
   18094:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18098:	4b04      	ldr	r3, [pc, #16]	; (180ac <k_sched_lock+0x24>)
   1809a:	689a      	ldr	r2, [r3, #8]
   1809c:	7bd3      	ldrb	r3, [r2, #15]
   1809e:	3b01      	subs	r3, #1
   180a0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   180a2:	f381 8811 	msr	BASEPRI, r1
   180a6:	f3bf 8f6f 	isb	sy
}
   180aa:	4770      	bx	lr
   180ac:	20009bfc 	.word	0x20009bfc

000180b0 <k_sched_unlock>:
{
   180b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   180b2:	f04f 0320 	mov.w	r3, #32
   180b6:	f3ef 8411 	mrs	r4, BASEPRI
   180ba:	f383 8812 	msr	BASEPRI_MAX, r3
   180be:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   180c2:	4b08      	ldr	r3, [pc, #32]	; (180e4 <k_sched_unlock+0x34>)
		update_cache(0);
   180c4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   180c6:	689a      	ldr	r2, [r3, #8]
   180c8:	7bd3      	ldrb	r3, [r2, #15]
   180ca:	3301      	adds	r3, #1
   180cc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   180ce:	f7ff fe29 	bl	17d24 <update_cache>
	__asm__ volatile(
   180d2:	f384 8811 	msr	BASEPRI, r4
   180d6:	f3bf 8f6f 	isb	sy
}
   180da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   180de:	f005 bdde 	b.w	1dc9e <z_reschedule_unlocked>
   180e2:	bf00      	nop
   180e4:	20009bfc 	.word	0x20009bfc

000180e8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   180e8:	4b02      	ldr	r3, [pc, #8]	; (180f4 <z_sched_init+0xc>)
   180ea:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   180ee:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   180f2:	4770      	bx	lr
   180f4:	20009bfc 	.word	0x20009bfc

000180f8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   180f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   180fa:	f04f 0320 	mov.w	r3, #32
   180fe:	f3ef 8511 	mrs	r5, BASEPRI
   18102:	f383 8812 	msr	BASEPRI_MAX, r3
   18106:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1810a:	4919      	ldr	r1, [pc, #100]	; (18170 <z_impl_k_yield+0x78>)
   1810c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1810e:	7b43      	ldrb	r3, [r0, #13]
   18110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18114:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18116:	f005 fce0 	bl	1dada <sys_dlist_remove>
	return list->head == list;
   1811a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1811c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1811e:	7b5a      	ldrb	r2, [r3, #13]
   18120:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18124:	735a      	strb	r2, [r3, #13]
   18126:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   1812a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1812c:	4282      	cmp	r2, r0
   1812e:	bf08      	it	eq
   18130:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18132:	b922      	cbnz	r2, 1813e <z_impl_k_yield+0x46>
	node->prev = tail;
   18134:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   18138:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1813a:	620b      	str	r3, [r1, #32]
}
   1813c:	e00c      	b.n	18158 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1813e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   18142:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   18146:	42be      	cmp	r6, r7
   18148:	d00e      	beq.n	18168 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1814a:	42b7      	cmp	r7, r6
   1814c:	dd0c      	ble.n	18168 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1814e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18150:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   18154:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   18156:	6053      	str	r3, [r2, #4]
	update_cache(1);
   18158:	2001      	movs	r0, #1
   1815a:	f7ff fde3 	bl	17d24 <update_cache>
   1815e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   18160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18164:	f7f3 bd30 	b.w	bbc8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18168:	42a2      	cmp	r2, r4
   1816a:	d0e3      	beq.n	18134 <z_impl_k_yield+0x3c>
   1816c:	6812      	ldr	r2, [r2, #0]
   1816e:	e7e0      	b.n	18132 <z_impl_k_yield+0x3a>
   18170:	20009bfc 	.word	0x20009bfc

00018174 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18174:	ea50 0301 	orrs.w	r3, r0, r1
{
   18178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1817c:	4605      	mov	r5, r0
   1817e:	460e      	mov	r6, r1
	if (ticks == 0) {
   18180:	d103      	bne.n	1818a <z_tick_sleep+0x16>
	z_impl_k_yield();
   18182:	f7ff ffb9 	bl	180f8 <z_impl_k_yield>
		k_yield();
		return 0;
   18186:	2000      	movs	r0, #0
   18188:	e02c      	b.n	181e4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1818a:	1c83      	adds	r3, r0, #2
   1818c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   18190:	db2a      	blt.n	181e8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   18192:	f005 fde7 	bl	1dd64 <sys_clock_tick_get_32>
   18196:	182c      	adds	r4, r5, r0
   18198:	f04f 0320 	mov.w	r3, #32
   1819c:	f3ef 8811 	mrs	r8, BASEPRI
   181a0:	f383 8812 	msr	BASEPRI_MAX, r3
   181a4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   181a8:	4f11      	ldr	r7, [pc, #68]	; (181f0 <z_tick_sleep+0x7c>)
   181aa:	4b12      	ldr	r3, [pc, #72]	; (181f4 <z_tick_sleep+0x80>)
   181ac:	68b8      	ldr	r0, [r7, #8]
   181ae:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   181b0:	f7ff fe44 	bl	17e3c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   181b4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   181b6:	4910      	ldr	r1, [pc, #64]	; (181f8 <z_tick_sleep+0x84>)
   181b8:	462a      	mov	r2, r5
   181ba:	4633      	mov	r3, r6
   181bc:	3018      	adds	r0, #24
   181be:	f000 f90f 	bl	183e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   181c2:	68ba      	ldr	r2, [r7, #8]
   181c4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   181c6:	7b53      	ldrb	r3, [r2, #13]
   181c8:	f043 0310 	orr.w	r3, r3, #16
   181cc:	7353      	strb	r3, [r2, #13]
   181ce:	f7f3 fcfb 	bl	bbc8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   181d2:	f005 fdc7 	bl	1dd64 <sys_clock_tick_get_32>
   181d6:	1a20      	subs	r0, r4, r0
   181d8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   181dc:	2801      	cmp	r0, #1
   181de:	f173 0300 	sbcs.w	r3, r3, #0
   181e2:	dbd0      	blt.n	18186 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   181e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   181e8:	f06f 0401 	mvn.w	r4, #1
   181ec:	1a24      	subs	r4, r4, r0
   181ee:	e7d3      	b.n	18198 <z_tick_sleep+0x24>
   181f0:	20009bfc 	.word	0x20009bfc
   181f4:	20009c28 	.word	0x20009c28
   181f8:	0001dbe9 	.word	0x0001dbe9

000181fc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   181fc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   18200:	bf08      	it	eq
   18202:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   18206:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18208:	d106      	bne.n	18218 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1820a:	4b08      	ldr	r3, [pc, #32]	; (1822c <z_impl_k_sleep+0x30>)
   1820c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1820e:	f7ff ff09 	bl	18024 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   18216:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   18218:	f7ff ffac 	bl	18174 <z_tick_sleep>
   1821c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18220:	fb80 0303 	smull	r0, r3, r0, r3
   18224:	0bc0      	lsrs	r0, r0, #15
   18226:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1822a:	e7f4      	b.n	18216 <z_impl_k_sleep+0x1a>
   1822c:	20009bfc 	.word	0x20009bfc

00018230 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18230:	4b01      	ldr	r3, [pc, #4]	; (18238 <z_impl_z_current_get+0x8>)
   18232:	6898      	ldr	r0, [r3, #8]
   18234:	4770      	bx	lr
   18236:	bf00      	nop
   18238:	20009bfc 	.word	0x20009bfc

0001823c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18240:	4604      	mov	r4, r0
   18242:	f04f 0320 	mov.w	r3, #32
   18246:	f3ef 8611 	mrs	r6, BASEPRI
   1824a:	f383 8812 	msr	BASEPRI_MAX, r3
   1824e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   18252:	7b03      	ldrb	r3, [r0, #12]
   18254:	07d9      	lsls	r1, r3, #31
   18256:	d50b      	bpl.n	18270 <z_thread_abort+0x34>
	__asm__ volatile(
   18258:	f386 8811 	msr	BASEPRI, r6
   1825c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   18260:	4040      	eors	r0, r0
   18262:	f380 8811 	msr	BASEPRI, r0
   18266:	f04f 0004 	mov.w	r0, #4
   1826a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18270:	7b43      	ldrb	r3, [r0, #13]
   18272:	071a      	lsls	r2, r3, #28
   18274:	d504      	bpl.n	18280 <z_thread_abort+0x44>
   18276:	f386 8811 	msr	BASEPRI, r6
   1827a:	f3bf 8f6f 	isb	sy
   1827e:	e7f5      	b.n	1826c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18280:	f023 0220 	bic.w	r2, r3, #32
   18284:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   18288:	09d2      	lsrs	r2, r2, #7
   1828a:	d120      	bne.n	182ce <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1828c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1828e:	68a3      	ldr	r3, [r4, #8]
   18290:	b113      	cbz	r3, 18298 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   18292:	4620      	mov	r0, r4
   18294:	f005 fc29 	bl	1daea <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   18298:	f104 0018 	add.w	r0, r4, #24
   1829c:	f005 fd3c 	bl	1dd18 <z_abort_timeout>
   182a0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   182a4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   182a8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   182aa:	42bd      	cmp	r5, r7
   182ac:	d000      	beq.n	182b0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   182ae:	b9b5      	cbnz	r5, 182de <z_thread_abort+0xa2>
		update_cache(1);
   182b0:	2001      	movs	r0, #1
   182b2:	f7ff fd37 	bl	17d24 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   182b6:	4b10      	ldr	r3, [pc, #64]	; (182f8 <z_thread_abort+0xbc>)
   182b8:	689b      	ldr	r3, [r3, #8]
   182ba:	42a3      	cmp	r3, r4
   182bc:	d1db      	bne.n	18276 <z_thread_abort+0x3a>
   182be:	f3ef 8305 	mrs	r3, IPSR
   182c2:	2b00      	cmp	r3, #0
   182c4:	d1d7      	bne.n	18276 <z_thread_abort+0x3a>
   182c6:	4630      	mov	r0, r6
   182c8:	f7f3 fc7e 	bl	bbc8 <arch_swap>
	return ret;
   182cc:	e7d3      	b.n	18276 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   182ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   182d2:	f043 0308 	orr.w	r3, r3, #8
   182d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   182d8:	f005 fbff 	bl	1dada <sys_dlist_remove>
}
   182dc:	e7d7      	b.n	1828e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   182de:	4628      	mov	r0, r5
   182e0:	f005 fc03 	bl	1daea <unpend_thread_no_timeout>
   182e4:	f105 0018 	add.w	r0, r5, #24
   182e8:	f005 fd16 	bl	1dd18 <z_abort_timeout>
		ready_thread(thread);
   182ec:	4628      	mov	r0, r5
   182ee:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   182f2:	f7ff fd6f 	bl	17dd4 <ready_thread>
   182f6:	e7d7      	b.n	182a8 <z_thread_abort+0x6c>
   182f8:	20009bfc 	.word	0x20009bfc

000182fc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   182fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   182fe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   18302:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18304:	e9cd 6700 	strd	r6, r7, [sp]
   18308:	f7ff fdf8 	bl	17efc <z_pend_curr>

	if (data != NULL) {
   1830c:	b11c      	cbz	r4, 18316 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1830e:	4b03      	ldr	r3, [pc, #12]	; (1831c <z_sched_wait+0x20>)
   18310:	689b      	ldr	r3, [r3, #8]
   18312:	695b      	ldr	r3, [r3, #20]
   18314:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   18316:	b002      	add	sp, #8
   18318:	bdd0      	pop	{r4, r6, r7, pc}
   1831a:	bf00      	nop
   1831c:	20009bfc 	.word	0x20009bfc

00018320 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   18320:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   18322:	4806      	ldr	r0, [pc, #24]	; (1833c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   18324:	4a06      	ldr	r2, [pc, #24]	; (18340 <z_data_copy+0x20>)
   18326:	4907      	ldr	r1, [pc, #28]	; (18344 <z_data_copy+0x24>)
   18328:	1a12      	subs	r2, r2, r0
   1832a:	f005 f94f 	bl	1d5cc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1832e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   18332:	4a05      	ldr	r2, [pc, #20]	; (18348 <z_data_copy+0x28>)
   18334:	4905      	ldr	r1, [pc, #20]	; (1834c <z_data_copy+0x2c>)
   18336:	4806      	ldr	r0, [pc, #24]	; (18350 <z_data_copy+0x30>)
   18338:	f005 b948 	b.w	1d5cc <z_early_memcpy>
   1833c:	20008000 	.word	0x20008000
   18340:	20008740 	.word	0x20008740
   18344:	00021944 	.word	0x00021944
   18348:	00000000 	.word	0x00000000
   1834c:	00021944 	.word	0x00021944
   18350:	20008000 	.word	0x20008000

00018354 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   18354:	4b03      	ldr	r3, [pc, #12]	; (18364 <elapsed+0x10>)
   18356:	681b      	ldr	r3, [r3, #0]
   18358:	b90b      	cbnz	r3, 1835e <elapsed+0xa>
   1835a:	f7fd b9cd 	b.w	156f8 <sys_clock_elapsed>
}
   1835e:	2000      	movs	r0, #0
   18360:	4770      	bx	lr
   18362:	bf00      	nop
   18364:	20009c34 	.word	0x20009c34

00018368 <next_timeout>:

static int32_t next_timeout(void)
{
   18368:	b510      	push	{r4, lr}
	return list->head == list;
   1836a:	4b0e      	ldr	r3, [pc, #56]	; (183a4 <next_timeout+0x3c>)
   1836c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1836e:	429c      	cmp	r4, r3
   18370:	d104      	bne.n	1837c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18372:	f7ff ffef 	bl	18354 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   18376:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1837a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1837c:	f7ff ffea 	bl	18354 <elapsed>
	if ((to == NULL) ||
   18380:	2c00      	cmp	r4, #0
   18382:	d0f8      	beq.n	18376 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   18384:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   18388:	1a1b      	subs	r3, r3, r0
   1838a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1838e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18392:	f172 0100 	sbcs.w	r1, r2, #0
   18396:	daee      	bge.n	18376 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   18398:	2a00      	cmp	r2, #0
   1839a:	bfac      	ite	ge
   1839c:	4618      	movge	r0, r3
   1839e:	2000      	movlt	r0, #0
	return ret;
   183a0:	e7eb      	b.n	1837a <next_timeout+0x12>
   183a2:	bf00      	nop
   183a4:	200083e0 	.word	0x200083e0

000183a8 <remove_timeout>:
{
   183a8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   183aa:	b170      	cbz	r0, 183ca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   183ac:	4b0b      	ldr	r3, [pc, #44]	; (183dc <remove_timeout+0x34>)
   183ae:	685b      	ldr	r3, [r3, #4]
   183b0:	4298      	cmp	r0, r3
   183b2:	d00a      	beq.n	183ca <remove_timeout+0x22>
   183b4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   183b6:	b143      	cbz	r3, 183ca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   183b8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   183bc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   183c0:	1912      	adds	r2, r2, r4
   183c2:	eb41 0105 	adc.w	r1, r1, r5
   183c6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   183ca:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   183ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   183d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   183d2:	2300      	movs	r3, #0
	node->prev = NULL;
   183d4:	e9c0 3300 	strd	r3, r3, [r0]
}
   183d8:	bd30      	pop	{r4, r5, pc}
   183da:	bf00      	nop
   183dc:	200083e0 	.word	0x200083e0

000183e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   183e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   183e4:	bf08      	it	eq
   183e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   183ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183ec:	4604      	mov	r4, r0
   183ee:	461d      	mov	r5, r3
   183f0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   183f2:	d05c      	beq.n	184ae <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   183f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   183f6:	f04f 0320 	mov.w	r3, #32
   183fa:	f3ef 8711 	mrs	r7, BASEPRI
   183fe:	f383 8812 	msr	BASEPRI_MAX, r3
   18402:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18406:	3201      	adds	r2, #1
   18408:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   1840c:	da24      	bge.n	18458 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1840e:	f06f 0301 	mvn.w	r3, #1
   18412:	492c      	ldr	r1, [pc, #176]	; (184c4 <z_add_timeout+0xe4>)
   18414:	e9d1 2000 	ldrd	r2, r0, [r1]
   18418:	1a9b      	subs	r3, r3, r2
   1841a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1841e:	eb62 0000 	sbc.w	r0, r2, r0
   18422:	1b9e      	subs	r6, r3, r6
   18424:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   18428:	2e01      	cmp	r6, #1
   1842a:	f170 0300 	sbcs.w	r3, r0, #0
   1842e:	da01      	bge.n	18434 <z_add_timeout+0x54>
   18430:	2601      	movs	r6, #1
   18432:	2000      	movs	r0, #0
   18434:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   18438:	4e23      	ldr	r6, [pc, #140]	; (184c8 <z_add_timeout+0xe8>)
   1843a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1843e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18440:	45b4      	cmp	ip, r6
   18442:	bf08      	it	eq
   18444:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   18448:	f1bc 0f00 	cmp.w	ip, #0
   1844c:	d10d      	bne.n	1846a <z_add_timeout+0x8a>
	node->prev = tail;
   1844e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   18452:	602c      	str	r4, [r5, #0]
	list->tail = node;
   18454:	6074      	str	r4, [r6, #4]
}
   18456:	e01c      	b.n	18492 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   18458:	f7ff ff7c 	bl	18354 <elapsed>
   1845c:	3601      	adds	r6, #1
   1845e:	f145 0500 	adc.w	r5, r5, #0
   18462:	1836      	adds	r6, r6, r0
   18464:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   18468:	e7e4      	b.n	18434 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1846a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1846e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   18472:	4293      	cmp	r3, r2
   18474:	eb71 0e00 	sbcs.w	lr, r1, r0
   18478:	da1a      	bge.n	184b0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1847a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1847c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   18480:	eb60 0001 	sbc.w	r0, r0, r1
   18484:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   18488:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1848c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1848e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   18492:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18494:	42b3      	cmp	r3, r6
   18496:	d006      	beq.n	184a6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18498:	429c      	cmp	r4, r3
   1849a:	d104      	bne.n	184a6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   1849c:	f7ff ff64 	bl	18368 <next_timeout>
   184a0:	2100      	movs	r1, #0
   184a2:	f7fd f8f7 	bl	15694 <sys_clock_set_timeout>
	__asm__ volatile(
   184a6:	f387 8811 	msr	BASEPRI, r7
   184aa:	f3bf 8f6f 	isb	sy
		}
	}
}
   184ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   184b0:	1a9b      	subs	r3, r3, r2
   184b2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   184b6:	45ac      	cmp	ip, r5
   184b8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   184bc:	d0c7      	beq.n	1844e <z_add_timeout+0x6e>
   184be:	f8dc c000 	ldr.w	ip, [ip]
   184c2:	e7c1      	b.n	18448 <z_add_timeout+0x68>
   184c4:	20009798 	.word	0x20009798
   184c8:	200083e0 	.word	0x200083e0

000184cc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   184cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   184d0:	f04f 0320 	mov.w	r3, #32
   184d4:	f3ef 8c11 	mrs	ip, BASEPRI
   184d8:	f383 8812 	msr	BASEPRI_MAX, r3
   184dc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   184e0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18594 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   184e4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 18598 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   184e8:	2400      	movs	r4, #0
	announce_remaining = ticks;
   184ea:	f8c9 0000 	str.w	r0, [r9]
   184ee:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   184f2:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   184f4:	4550      	cmp	r0, sl
   184f6:	bf08      	it	eq
   184f8:	2000      	moveq	r0, #0
		curr_tick += dt;
   184fa:	4f28      	ldr	r7, [pc, #160]	; (1859c <sys_clock_announce+0xd0>)
   184fc:	46e0      	mov	r8, ip
   184fe:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   18502:	f8d9 3000 	ldr.w	r3, [r9]
   18506:	b380      	cbz	r0, 1856a <sys_clock_announce+0x9e>
   18508:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   1850c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   18510:	42b3      	cmp	r3, r6
   18512:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   18516:	da05      	bge.n	18524 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   18518:	1af6      	subs	r6, r6, r3
   1851a:	eb6c 040e 	sbc.w	r4, ip, lr
   1851e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   18522:	e022      	b.n	1856a <sys_clock_announce+0x9e>
		curr_tick += dt;
   18524:	18b2      	adds	r2, r6, r2
   18526:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   1852a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   1852e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   18532:	f7ff ff39 	bl	183a8 <remove_timeout>
	__asm__ volatile(
   18536:	f388 8811 	msr	BASEPRI, r8
   1853a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1853e:	6883      	ldr	r3, [r0, #8]
   18540:	4798      	blx	r3
	__asm__ volatile(
   18542:	f04f 0320 	mov.w	r3, #32
   18546:	f3ef 8811 	mrs	r8, BASEPRI
   1854a:	f383 8812 	msr	BASEPRI_MAX, r3
   1854e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   18552:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   18556:	f8da 0000 	ldr.w	r0, [sl]
   1855a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1855c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   1855e:	46c4      	mov	ip, r8
   18560:	f8c9 3000 	str.w	r3, [r9]
   18564:	d1ca      	bne.n	184fc <sys_clock_announce+0x30>
		curr_tick += dt;
   18566:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1856a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1856c:	189a      	adds	r2, r3, r2
   1856e:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
   18572:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   18576:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   1857a:	f7ff fef5 	bl	18368 <next_timeout>
   1857e:	4621      	mov	r1, r4
   18580:	f7fd f888 	bl	15694 <sys_clock_set_timeout>
	__asm__ volatile(
   18584:	f388 8811 	msr	BASEPRI, r8
   18588:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   1858c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   18590:	f7ff bc84 	b.w	17e9c <z_time_slice>
   18594:	200083e0 	.word	0x200083e0
   18598:	20009c34 	.word	0x20009c34
   1859c:	20009798 	.word	0x20009798

000185a0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   185a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   185a2:	f04f 0320 	mov.w	r3, #32
   185a6:	f3ef 8411 	mrs	r4, BASEPRI
   185aa:	f383 8812 	msr	BASEPRI_MAX, r3
   185ae:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   185b2:	f7ff fecf 	bl	18354 <elapsed>
   185b6:	4603      	mov	r3, r0
   185b8:	4a05      	ldr	r2, [pc, #20]	; (185d0 <sys_clock_tick_get+0x30>)
   185ba:	e9d2 0100 	ldrd	r0, r1, [r2]
   185be:	1818      	adds	r0, r3, r0
   185c0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   185c4:	f384 8811 	msr	BASEPRI, r4
   185c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   185cc:	bd10      	pop	{r4, pc}
   185ce:	bf00      	nop
   185d0:	20009798 	.word	0x20009798

000185d4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   185d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185d6:	4604      	mov	r4, r0
	__asm__ volatile(
   185d8:	f04f 0320 	mov.w	r3, #32
   185dc:	f3ef 8711 	mrs	r7, BASEPRI
   185e0:	f383 8812 	msr	BASEPRI_MAX, r3
   185e4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   185e8:	6802      	ldr	r2, [r0, #0]
   185ea:	b122      	cbz	r2, 185f6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   185ec:	f387 8811 	msr	BASEPRI, r7
   185f0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   185f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   185f6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   185fa:	1c58      	adds	r0, r3, #1
   185fc:	f146 0100 	adc.w	r1, r6, #0
   18600:	2802      	cmp	r0, #2
   18602:	f171 0100 	sbcs.w	r1, r1, #0
   18606:	d327      	bcc.n	18658 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   18608:	2b01      	cmp	r3, #1
   1860a:	f176 0100 	sbcs.w	r1, r6, #0
   1860e:	bfbc      	itt	lt
   18610:	2301      	movlt	r3, #1
   18612:	4616      	movlt	r6, r2
   18614:	1e5d      	subs	r5, r3, #1
   18616:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   1861a:	f005 fba7 	bl	1dd6c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1861e:	3001      	adds	r0, #1
   18620:	f141 0100 	adc.w	r1, r1, #0
   18624:	1940      	adds	r0, r0, r5
   18626:	eb46 0101 	adc.w	r1, r6, r1
   1862a:	2801      	cmp	r0, #1
   1862c:	f171 0100 	sbcs.w	r1, r1, #0
   18630:	db3a      	blt.n	186a8 <z_timer_expiration_handler+0xd4>
   18632:	f005 fb9b 	bl	1dd6c <z_impl_k_uptime_ticks>
   18636:	3001      	adds	r0, #1
   18638:	f141 0100 	adc.w	r1, r1, #0
   1863c:	f06f 0201 	mvn.w	r2, #1
   18640:	1940      	adds	r0, r0, r5
   18642:	eb46 0301 	adc.w	r3, r6, r1
   18646:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1864a:	1a12      	subs	r2, r2, r0
   1864c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18650:	4620      	mov	r0, r4
   18652:	4918      	ldr	r1, [pc, #96]	; (186b4 <z_timer_expiration_handler+0xe0>)
   18654:	f7ff fec4 	bl	183e0 <z_add_timeout>
	timer->status += 1U;
   18658:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1865a:	3301      	adds	r3, #1
   1865c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   1865e:	6a23      	ldr	r3, [r4, #32]
   18660:	b173      	cbz	r3, 18680 <z_timer_expiration_handler+0xac>
   18662:	f387 8811 	msr	BASEPRI, r7
   18666:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   1866a:	4620      	mov	r0, r4
   1866c:	6a23      	ldr	r3, [r4, #32]
   1866e:	4798      	blx	r3
	__asm__ volatile(
   18670:	f04f 0320 	mov.w	r3, #32
   18674:	f3ef 8711 	mrs	r7, BASEPRI
   18678:	f383 8812 	msr	BASEPRI_MAX, r3
   1867c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18680:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18684:	42a5      	cmp	r5, r4
   18686:	d0b1      	beq.n	185ec <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   18688:	2d00      	cmp	r5, #0
   1868a:	d0af      	beq.n	185ec <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   1868c:	4628      	mov	r0, r5
   1868e:	f005 fa77 	bl	1db80 <z_unpend_thread_no_timeout>
   18692:	2300      	movs	r3, #0
   18694:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   18696:	f387 8811 	msr	BASEPRI, r7
   1869a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1869e:	4628      	mov	r0, r5
}
   186a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   186a4:	f005 ba5c 	b.w	1db60 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   186a8:	f06f 0201 	mvn.w	r2, #1
   186ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   186b0:	e7ce      	b.n	18650 <z_timer_expiration_handler+0x7c>
   186b2:	bf00      	nop
   186b4:	000185d5 	.word	0x000185d5

000186b8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   186b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   186bc:	bf08      	it	eq
   186be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   186c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   186c6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   186ca:	4605      	mov	r5, r0
   186cc:	461c      	mov	r4, r3
   186ce:	4691      	mov	r9, r2
   186d0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   186d2:	d01c      	beq.n	1870e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   186d4:	1c53      	adds	r3, r2, #1
   186d6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   186da:	db09      	blt.n	186f0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   186dc:	2a01      	cmp	r2, #1
   186de:	f174 0300 	sbcs.w	r3, r4, #0
   186e2:	bfbc      	itt	lt
   186e4:	2201      	movlt	r2, #1
   186e6:	2400      	movlt	r4, #0
   186e8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   186ec:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   186f0:	4628      	mov	r0, r5
   186f2:	f005 fb11 	bl	1dd18 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   186f6:	2300      	movs	r3, #0
	timer->period = period;
   186f8:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   186fc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   186fe:	464a      	mov	r2, r9
   18700:	4643      	mov	r3, r8
   18702:	4628      	mov	r0, r5
		     duration);
}
   18704:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18708:	4902      	ldr	r1, [pc, #8]	; (18714 <z_impl_k_timer_start+0x5c>)
   1870a:	f7ff be69 	b.w	183e0 <z_add_timeout>
}
   1870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18712:	bf00      	nop
   18714:	000185d5 	.word	0x000185d5

00018718 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   18718:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1871c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1871e:	4b29      	ldr	r3, [pc, #164]	; (187c4 <z_impl_k_poll+0xac>)
{
   18720:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   18722:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   18724:	2301      	movs	r3, #1
   18726:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1872a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1872e:	ea52 0305 	orrs.w	r3, r2, r5
   18732:	bf0c      	ite	eq
   18734:	2301      	moveq	r3, #1
   18736:	2300      	movne	r3, #0
   18738:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1873c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1873e:	f005 fb97 	bl	1de70 <register_events>
   18742:	4681      	mov	r9, r0
	__asm__ volatile(
   18744:	f04f 0320 	mov.w	r3, #32
   18748:	f3ef 8a11 	mrs	sl, BASEPRI
   1874c:	f383 8812 	msr	BASEPRI_MAX, r3
   18750:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   18754:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   18758:	b964      	cbnz	r4, 18774 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1875a:	4601      	mov	r1, r0
   1875c:	4652      	mov	r2, sl
   1875e:	4640      	mov	r0, r8
   18760:	f005 fc57 	bl	1e012 <clear_event_registrations>
	__asm__ volatile(
   18764:	f38a 8811 	msr	BASEPRI, sl
   18768:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1876c:	4620      	mov	r0, r4
   1876e:	b002      	add	sp, #8
   18770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   18774:	2300      	movs	r3, #0
   18776:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1877a:	ea56 0305 	orrs.w	r3, r6, r5
   1877e:	d106      	bne.n	1878e <z_impl_k_poll+0x76>
   18780:	f38a 8811 	msr	BASEPRI, sl
   18784:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   18788:	f06f 040a 	mvn.w	r4, #10
   1878c:	e7ee      	b.n	1876c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1878e:	4651      	mov	r1, sl
   18790:	e9cd 6500 	strd	r6, r5, [sp]
   18794:	4a0c      	ldr	r2, [pc, #48]	; (187c8 <z_impl_k_poll+0xb0>)
   18796:	480d      	ldr	r0, [pc, #52]	; (187cc <z_impl_k_poll+0xb4>)
   18798:	f7ff fbb0 	bl	17efc <z_pend_curr>
   1879c:	4604      	mov	r4, r0
	__asm__ volatile(
   1879e:	f04f 0320 	mov.w	r3, #32
   187a2:	f3ef 8511 	mrs	r5, BASEPRI
   187a6:	f383 8812 	msr	BASEPRI_MAX, r3
   187aa:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   187ae:	462a      	mov	r2, r5
   187b0:	4649      	mov	r1, r9
   187b2:	4640      	mov	r0, r8
   187b4:	f005 fc2d 	bl	1e012 <clear_event_registrations>
	__asm__ volatile(
   187b8:	f385 8811 	msr	BASEPRI, r5
   187bc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   187c0:	e7d4      	b.n	1876c <z_impl_k_poll+0x54>
   187c2:	bf00      	nop
   187c4:	20009bfc 	.word	0x20009bfc
   187c8:	200083e8 	.word	0x200083e8
   187cc:	20009d47 	.word	0x20009d47

000187d0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   187d0:	b538      	push	{r3, r4, r5, lr}
   187d2:	4603      	mov	r3, r0
	__asm__ volatile(
   187d4:	f04f 0220 	mov.w	r2, #32
   187d8:	f3ef 8511 	mrs	r5, BASEPRI
   187dc:	f382 8812 	msr	BASEPRI_MAX, r2
   187e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   187e4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   187e6:	2101      	movs	r1, #1
   187e8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   187ea:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   187ec:	4283      	cmp	r3, r0
   187ee:	d106      	bne.n	187fe <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   187f0:	f385 8811 	msr	BASEPRI, r5
   187f4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   187f8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   187fa:	4620      	mov	r0, r4
   187fc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   187fe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18802:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18804:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18806:	2300      	movs	r3, #0
	node->prev = NULL;
   18808:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1880c:	f005 fba7 	bl	1df5e <signal_poll_event>
	z_reschedule(&lock, key);
   18810:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18812:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18814:	4801      	ldr	r0, [pc, #4]	; (1881c <z_impl_k_poll_signal_raise+0x4c>)
   18816:	f7ff fbd5 	bl	17fc4 <z_reschedule>
	return rc;
   1881a:	e7ee      	b.n	187fa <z_impl_k_poll_signal_raise+0x2a>
   1881c:	20009d47 	.word	0x20009d47

00018820 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   18820:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   18822:	4601      	mov	r1, r0
   18824:	4801      	ldr	r0, [pc, #4]	; (1882c <k_aligned_alloc+0xc>)
   18826:	f005 bc45 	b.w	1e0b4 <z_heap_aligned_alloc>
   1882a:	bf00      	nop
   1882c:	2000856c 	.word	0x2000856c

00018830 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   18830:	4b01      	ldr	r3, [pc, #4]	; (18838 <k_thread_system_pool_assign+0x8>)
   18832:	6743      	str	r3, [r0, #116]	; 0x74
}
   18834:	4770      	bx	lr
   18836:	bf00      	nop
   18838:	2000856c 	.word	0x2000856c

0001883c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1883c:	b538      	push	{r3, r4, r5, lr}
   1883e:	4604      	mov	r4, r0
   18840:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   18842:	f004 ff76 	bl	1d732 <k_is_in_isr>
   18846:	b920      	cbnz	r0, 18852 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   18848:	4b06      	ldr	r3, [pc, #24]	; (18864 <z_thread_aligned_alloc+0x28>)
   1884a:	689b      	ldr	r3, [r3, #8]
   1884c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1884e:	b90b      	cbnz	r3, 18854 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   18850:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   18852:	4b05      	ldr	r3, [pc, #20]	; (18868 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   18854:	462a      	mov	r2, r5
   18856:	4621      	mov	r1, r4
   18858:	4618      	mov	r0, r3
}
   1885a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1885e:	f005 bc29 	b.w	1e0b4 <z_heap_aligned_alloc>
   18862:	bf00      	nop
   18864:	20009bfc 	.word	0x20009bfc
   18868:	2000856c 	.word	0x2000856c

0001886c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1886c:	4801      	ldr	r0, [pc, #4]	; (18874 <boot_banner+0x8>)
   1886e:	f000 b877 	b.w	18960 <printk>
   18872:	bf00      	nop
   18874:	00021913 	.word	0x00021913

00018878 <app_led_cb>:
{
   18878:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   1887a:	2002      	movs	r0, #2
   1887c:	f7fd b9a4 	b.w	15bc8 <dk_set_led>

00018880 <z_log_msg_static_create.constprop.0>:
   18880:	2300      	movs	r3, #0
   18882:	f7f2 bb17 	b.w	aeb4 <z_impl_z_log_msg_static_create>

00018886 <cbpprintf_external>:
{
   18886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1888a:	4606      	mov	r6, r0
   1888c:	460d      	mov	r5, r1
   1888e:	4617      	mov	r7, r2
	if (buf == NULL) {
   18890:	4698      	mov	r8, r3
   18892:	b32b      	cbz	r3, 188e0 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   18894:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   18898:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1889c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   188a0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   188a2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   188a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   188a8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   188ac:	441c      	add	r4, r3
   188ae:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   188b0:	45ca      	cmp	sl, r9
   188b2:	d309      	bcc.n	188c8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   188b4:	4639      	mov	r1, r7
   188b6:	4630      	mov	r0, r6
   188b8:	46ac      	mov	ip, r5
   188ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
   188be:	f108 0308 	add.w	r3, r8, #8
}
   188c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   188c6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   188c8:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   188cc:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   188d0:	4620      	mov	r0, r4
		*ps = s;
   188d2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   188d6:	f001 fd0b 	bl	1a2f0 <strlen>
   188da:	3001      	adds	r0, #1
   188dc:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   188de:	e7e7      	b.n	188b0 <cbpprintf_external+0x2a>
}
   188e0:	f06f 0015 	mvn.w	r0, #21
   188e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000188e8 <is_ptr>:
{
   188e8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   188ea:	2500      	movs	r5, #0
{
   188ec:	4602      	mov	r2, r0
	bool mod = false;
   188ee:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   188f0:	4614      	mov	r4, r2
   188f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   188f6:	b90b      	cbnz	r3, 188fc <is_ptr+0x14>
					return false;
   188f8:	4618      	mov	r0, r3
   188fa:	e009      	b.n	18910 <is_ptr+0x28>
		if (mod) {
   188fc:	b198      	cbz	r0, 18926 <is_ptr+0x3e>
			if (cnt == n) {
   188fe:	428d      	cmp	r5, r1
   18900:	d107      	bne.n	18912 <is_ptr+0x2a>
				if (c == 'p') {
   18902:	2b70      	cmp	r3, #112	; 0x70
   18904:	d004      	beq.n	18910 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   18906:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1890a:	2a3a      	cmp	r2, #58	; 0x3a
   1890c:	d80b      	bhi.n	18926 <is_ptr+0x3e>
					return false;
   1890e:	2000      	movs	r0, #0
}
   18910:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   18912:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   18916:	2e3a      	cmp	r6, #58	; 0x3a
   18918:	d805      	bhi.n	18926 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1891a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1891c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1891e:	1c94      	adds	r4, r2, #2
   18920:	2b00      	cmp	r3, #0
   18922:	d0e9      	beq.n	188f8 <is_ptr+0x10>
   18924:	2000      	movs	r0, #0
		if (c == '%') {
   18926:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   18928:	4622      	mov	r2, r4
			mod = !mod;
   1892a:	bf08      	it	eq
   1892c:	f080 0001 	eoreq.w	r0, r0, #1
   18930:	e7de      	b.n	188f0 <is_ptr+0x8>

00018932 <arch_printk_char_out>:
}
   18932:	2000      	movs	r0, #0
   18934:	4770      	bx	lr

00018936 <str_out>:
{
   18936:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18938:	688a      	ldr	r2, [r1, #8]
   1893a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1893c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1893e:	b114      	cbz	r4, 18946 <str_out+0x10>
   18940:	684b      	ldr	r3, [r1, #4]
   18942:	4293      	cmp	r3, r2
   18944:	dc01      	bgt.n	1894a <str_out+0x14>
		ctx->count++;
   18946:	608d      	str	r5, [r1, #8]
}
   18948:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1894a:	3b01      	subs	r3, #1
   1894c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1894e:	bf08      	it	eq
   18950:	2200      	moveq	r2, #0
   18952:	608d      	str	r5, [r1, #8]
   18954:	bf0c      	ite	eq
   18956:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18958:	54a0      	strbne	r0, [r4, r2]
   1895a:	e7f5      	b.n	18948 <str_out+0x12>

0001895c <vprintk>:
		z_log_vprintk(fmt, ap);
   1895c:	f000 bf95 	b.w	1988a <z_log_vprintk>

00018960 <printk>:
{
   18960:	b40f      	push	{r0, r1, r2, r3}
   18962:	b507      	push	{r0, r1, r2, lr}
   18964:	a904      	add	r1, sp, #16
   18966:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1896a:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1896c:	f000 ff8d 	bl	1988a <z_log_vprintk>
}
   18970:	b003      	add	sp, #12
   18972:	f85d eb04 	ldr.w	lr, [sp], #4
   18976:	b004      	add	sp, #16
   18978:	4770      	bx	lr

0001897a <snprintk>:
{
   1897a:	b40c      	push	{r2, r3}
   1897c:	b507      	push	{r0, r1, r2, lr}
   1897e:	ab04      	add	r3, sp, #16
   18980:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   18984:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   18986:	f7f0 fe53 	bl	9630 <vsnprintk>
}
   1898a:	b003      	add	sp, #12
   1898c:	f85d eb04 	ldr.w	lr, [sp], #4
   18990:	b002      	add	sp, #8
   18992:	4770      	bx	lr

00018994 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18994:	4604      	mov	r4, r0
   18996:	b508      	push	{r3, lr}
   18998:	4608      	mov	r0, r1
   1899a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1899c:	461a      	mov	r2, r3
   1899e:	47a0      	blx	r4
	return z_impl_z_current_get();
   189a0:	f7ff fc46 	bl	18230 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   189a4:	f7f3 fd5a 	bl	c45c <z_impl_k_thread_abort>

000189a8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   189a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   189ac:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   189ae:	0840      	lsrs	r0, r0, #1
   189b0:	4770      	bx	lr

000189b2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   189b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189b4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   189b6:	f7ff fff7 	bl	189a8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   189ba:	fab0 f080 	clz	r0, r0
   189be:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   189c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   189c6:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   189ca:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   189cc:	1d17      	adds	r7, r2, #4
{
   189ce:	460c      	mov	r4, r1
   189d0:	3206      	adds	r2, #6
   189d2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   189d4:	b956      	cbnz	r6, 189ec <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   189d6:	2101      	movs	r1, #1
   189d8:	fa01 f000 	lsl.w	r0, r1, r0
   189dc:	68d9      	ldr	r1, [r3, #12]
   189de:	4301      	orrs	r1, r0
   189e0:	60d9      	str	r1, [r3, #12]
		b->next = c;
   189e2:	f8cc 4010 	str.w	r4, [ip, #16]
   189e6:	53dd      	strh	r5, [r3, r7]
   189e8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   189ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   189ec:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   189ee:	3104      	adds	r1, #4
   189f0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   189f2:	53d8      	strh	r0, [r3, r7]
   189f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   189f8:	529e      	strh	r6, [r3, r2]
   189fa:	80c5      	strh	r5, [r0, #6]
   189fc:	525d      	strh	r5, [r3, r1]
   189fe:	e7f4      	b.n	189ea <free_list_add+0x38>

00018a00 <free_list_remove_bidx>:
{
   18a00:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   18a02:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   18a06:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   18a08:	4299      	cmp	r1, r3
   18a0a:	f102 0104 	add.w	r1, r2, #4
   18a0e:	d10a      	bne.n	18a26 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   18a10:	2301      	movs	r3, #1
   18a12:	fa03 f202 	lsl.w	r2, r3, r2
   18a16:	68c3      	ldr	r3, [r0, #12]
   18a18:	ea23 0302 	bic.w	r3, r3, r2
   18a1c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   18a1e:	2300      	movs	r3, #0
   18a20:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   18a24:	bd10      	pop	{r4, pc}
   18a26:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   18a28:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   18a2c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   18a30:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18a34:	80cb      	strh	r3, [r1, #6]
   18a36:	8082      	strh	r2, [r0, #4]
}
   18a38:	e7f4      	b.n	18a24 <free_list_remove_bidx+0x24>

00018a3a <free_list_remove>:
{
   18a3a:	b508      	push	{r3, lr}
   18a3c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   18a3e:	f7ff ffb3 	bl	189a8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   18a42:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   18a46:	4618      	mov	r0, r3
}
   18a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   18a4c:	f1c2 021f 	rsb	r2, r2, #31
   18a50:	f7ff bfd6 	b.w	18a00 <free_list_remove_bidx>

00018a54 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   18a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a58:	fab1 f581 	clz	r5, r1
   18a5c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   18a60:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   18a64:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   18a68:	4603      	mov	r3, r0
   18a6a:	460e      	mov	r6, r1
	if (b->next) {
   18a6c:	b1c2      	cbz	r2, 18aa0 <alloc_chunk+0x4c>
   18a6e:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   18a70:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   18a74:	4618      	mov	r0, r3
   18a76:	4621      	mov	r1, r4
   18a78:	f7ff ff96 	bl	189a8 <chunk_size>
   18a7c:	42b0      	cmp	r0, r6
   18a7e:	d306      	bcc.n	18a8e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   18a80:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   18a82:	4618      	mov	r0, r3
   18a84:	f7ff ffbc 	bl	18a00 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   18a88:	4620      	mov	r0, r4
   18a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   18a8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   18a92:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   18a94:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   18a96:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   18a9a:	d001      	beq.n	18aa0 <alloc_chunk+0x4c>
   18a9c:	4282      	cmp	r2, r0
   18a9e:	d1e7      	bne.n	18a70 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   18aa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18aa4:	f1c5 0220 	rsb	r2, r5, #32
   18aa8:	4094      	lsls	r4, r2
   18aaa:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   18aac:	4014      	ands	r4, r2
   18aae:	d0eb      	beq.n	18a88 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   18ab0:	fa94 f2a4 	rbit	r2, r4
   18ab4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   18ab8:	1d11      	adds	r1, r2, #4
   18aba:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   18abe:	4621      	mov	r1, r4
   18ac0:	e7df      	b.n	18a82 <alloc_chunk+0x2e>

00018ac2 <merge_chunks>:
{
   18ac2:	b538      	push	{r3, r4, r5, lr}
   18ac4:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   18ac6:	f7ff ff6f 	bl	189a8 <chunk_size>
{
   18aca:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   18acc:	4604      	mov	r4, r0
   18ace:	4611      	mov	r1, r2
   18ad0:	4618      	mov	r0, r3
   18ad2:	f7ff ff69 	bl	189a8 <chunk_size>
   18ad6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18ad8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   18ada:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   18ade:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   18ae0:	4618      	mov	r0, r3
   18ae2:	f7ff ff61 	bl	189a8 <chunk_size>
	void *cmem = &buf[c];
   18ae6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   18ae8:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   18aec:	bd38      	pop	{r3, r4, r5, pc}

00018aee <split_chunks>:
{
   18aee:	b538      	push	{r3, r4, r5, lr}
   18af0:	460c      	mov	r4, r1
   18af2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   18af4:	f7ff ff58 	bl	189a8 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   18af8:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   18afa:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   18afc:	4405      	add	r5, r0
   18afe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18b02:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   18b04:	8060      	strh	r0, [r4, #2]
   18b06:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18b0a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   18b0c:	8044      	strh	r4, [r0, #2]
   18b0e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   18b12:	4618      	mov	r0, r3
   18b14:	4611      	mov	r1, r2
   18b16:	f7ff ff47 	bl	189a8 <chunk_size>
	void *cmem = &buf[c];
   18b1a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   18b1c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   18b20:	bd38      	pop	{r3, r4, r5, pc}

00018b22 <free_chunk>:
{
   18b22:	b538      	push	{r3, r4, r5, lr}
   18b24:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   18b26:	f7ff ff3f 	bl	189a8 <chunk_size>
   18b2a:	460c      	mov	r4, r1
   18b2c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   18b2e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   18b32:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   18b34:	07da      	lsls	r2, r3, #31
   18b36:	d40a      	bmi.n	18b4e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   18b38:	4628      	mov	r0, r5
   18b3a:	f7ff ff7e 	bl	18a3a <free_list_remove>
	return c + chunk_size(h, c);
   18b3e:	4621      	mov	r1, r4
   18b40:	4628      	mov	r0, r5
   18b42:	f7ff ff31 	bl	189a8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   18b46:	1822      	adds	r2, r4, r0
   18b48:	4628      	mov	r0, r5
   18b4a:	f7ff ffba 	bl	18ac2 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   18b4e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   18b52:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   18b54:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   18b58:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   18b5a:	07db      	lsls	r3, r3, #31
   18b5c:	d40c      	bmi.n	18b78 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   18b5e:	4628      	mov	r0, r5
   18b60:	f7ff ff6b 	bl	18a3a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   18b64:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   18b68:	4622      	mov	r2, r4
   18b6a:	1a61      	subs	r1, r4, r1
   18b6c:	4628      	mov	r0, r5
   18b6e:	f7ff ffa8 	bl	18ac2 <merge_chunks>
   18b72:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   18b76:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   18b78:	4621      	mov	r1, r4
   18b7a:	4628      	mov	r0, r5
}
   18b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   18b80:	f7ff bf17 	b.w	189b2 <free_list_add>

00018b84 <sys_heap_free>:
	if (mem == NULL) {
   18b84:	b161      	cbz	r1, 18ba0 <sys_heap_free+0x1c>
   18b86:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18b88:	3904      	subs	r1, #4
   18b8a:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   18b8c:	f021 0307 	bic.w	r3, r1, #7
   18b90:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18b92:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   18b94:	08c9      	lsrs	r1, r1, #3
   18b96:	f022 0201 	bic.w	r2, r2, #1
   18b9a:	805a      	strh	r2, [r3, #2]
   18b9c:	f7ff bfc1 	b.w	18b22 <free_chunk>
}
   18ba0:	4770      	bx	lr

00018ba2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   18ba2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   18ba4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   18ba6:	b909      	cbnz	r1, 18bac <sys_heap_alloc+0xa>
		return NULL;
   18ba8:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   18baa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   18bac:	68ab      	ldr	r3, [r5, #8]
   18bae:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18bb2:	d9f9      	bls.n	18ba8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18bb4:	310b      	adds	r1, #11
   18bb6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   18bb8:	4621      	mov	r1, r4
   18bba:	4628      	mov	r0, r5
   18bbc:	f7ff ff4a 	bl	18a54 <alloc_chunk>
	if (c == 0U) {
   18bc0:	4606      	mov	r6, r0
   18bc2:	2800      	cmp	r0, #0
   18bc4:	d0f0      	beq.n	18ba8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   18bc6:	4601      	mov	r1, r0
   18bc8:	4628      	mov	r0, r5
   18bca:	f7ff feed 	bl	189a8 <chunk_size>
   18bce:	42a0      	cmp	r0, r4
   18bd0:	d907      	bls.n	18be2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   18bd2:	4628      	mov	r0, r5
   18bd4:	1932      	adds	r2, r6, r4
   18bd6:	f7ff ff8a 	bl	18aee <split_chunks>
		free_list_add(h, c + chunk_sz);
   18bda:	4611      	mov	r1, r2
   18bdc:	4628      	mov	r0, r5
   18bde:	f7ff fee8 	bl	189b2 <free_list_add>
	void *cmem = &buf[c];
   18be2:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   18be6:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18be8:	8853      	ldrh	r3, [r2, #2]
   18bea:	3004      	adds	r0, #4
   18bec:	f043 0301 	orr.w	r3, r3, #1
   18bf0:	8053      	strh	r3, [r2, #2]
	return mem;
   18bf2:	e7da      	b.n	18baa <sys_heap_alloc+0x8>

00018bf4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   18bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18bf8:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   18bfc:	ea19 0901 	ands.w	r9, r9, r1
{
   18c00:	460f      	mov	r7, r1
   18c02:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   18c04:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   18c06:	d00c      	beq.n	18c22 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   18c08:	424b      	negs	r3, r1
   18c0a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   18c0c:	2b04      	cmp	r3, #4
   18c0e:	461a      	mov	r2, r3
   18c10:	464f      	mov	r7, r9
   18c12:	bf28      	it	cs
   18c14:	2204      	movcs	r2, #4
	rew = align & -align;
   18c16:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   18c18:	b964      	cbnz	r4, 18c34 <sys_heap_aligned_alloc+0x40>
		return NULL;
   18c1a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   18c1c:	4628      	mov	r0, r5
   18c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   18c22:	2904      	cmp	r1, #4
   18c24:	d804      	bhi.n	18c30 <sys_heap_aligned_alloc+0x3c>
}
   18c26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   18c2a:	4611      	mov	r1, r2
   18c2c:	f7ff bfb9 	b.w	18ba2 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   18c30:	2204      	movs	r2, #4
   18c32:	e7f1      	b.n	18c18 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   18c34:	68b3      	ldr	r3, [r6, #8]
   18c36:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   18c3a:	d9ee      	bls.n	18c1a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18c3c:	f104 010b 	add.w	r1, r4, #11
   18c40:	4439      	add	r1, r7
   18c42:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   18c44:	4630      	mov	r0, r6
   18c46:	08c9      	lsrs	r1, r1, #3
   18c48:	f7ff ff04 	bl	18a54 <alloc_chunk>
	if (c0 == 0) {
   18c4c:	4680      	mov	r8, r0
   18c4e:	2800      	cmp	r0, #0
   18c50:	d0e3      	beq.n	18c1a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   18c52:	f109 0504 	add.w	r5, r9, #4
   18c56:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   18c5a:	1e7b      	subs	r3, r7, #1
   18c5c:	4435      	add	r5, r6
   18c5e:	441d      	add	r5, r3
   18c60:	427f      	negs	r7, r7
   18c62:	403d      	ands	r5, r7
   18c64:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18c68:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18c6a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18c6c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18c6e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18c70:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   18c74:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   18c76:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18c7a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   18c7e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   18c82:	d208      	bcs.n	18c96 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   18c84:	4601      	mov	r1, r0
   18c86:	463a      	mov	r2, r7
   18c88:	4630      	mov	r0, r6
   18c8a:	f7ff ff30 	bl	18aee <split_chunks>
		free_list_add(h, c0);
   18c8e:	4641      	mov	r1, r8
   18c90:	4630      	mov	r0, r6
   18c92:	f7ff fe8e 	bl	189b2 <free_list_add>
	return c + chunk_size(h, c);
   18c96:	4639      	mov	r1, r7
   18c98:	4630      	mov	r0, r6
   18c9a:	f7ff fe85 	bl	189a8 <chunk_size>
   18c9e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   18ca0:	4284      	cmp	r4, r0
   18ca2:	d207      	bcs.n	18cb4 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   18ca4:	4630      	mov	r0, r6
   18ca6:	4622      	mov	r2, r4
   18ca8:	f7ff ff21 	bl	18aee <split_chunks>
		free_list_add(h, c_end);
   18cac:	4621      	mov	r1, r4
   18cae:	4630      	mov	r0, r6
   18cb0:	f7ff fe7f 	bl	189b2 <free_list_add>
	void *cmem = &buf[c];
   18cb4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18cb8:	8873      	ldrh	r3, [r6, #2]
   18cba:	f043 0301 	orr.w	r3, r3, #1
   18cbe:	8073      	strh	r3, [r6, #2]
   18cc0:	e7ac      	b.n	18c1c <sys_heap_aligned_alloc+0x28>

00018cc2 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   18cc2:	b4f0      	push	{r4, r5, r6, r7}
   18cc4:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   18cc6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   18cc8:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   18cca:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   18ccc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   18cd0:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   18cd4:	1a0e      	subs	r6, r1, r0
   18cd6:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   18cd8:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   18cdc:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   18cde:	2700      	movs	r7, #0
   18ce0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   18ce2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   18ce6:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   18ce8:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18cea:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   18cec:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   18cf6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   18cfa:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   18cfe:	4294      	cmp	r4, r2
   18d00:	d1fb      	bne.n	18cfa <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18d02:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18d04:	f042 0201 	orr.w	r2, r2, #1
   18d08:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   18d0a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18d0c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   18d0e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   18d12:	8007      	strh	r7, [r0, #0]
   18d14:	8065      	strh	r5, [r4, #2]
   18d16:	1984      	adds	r4, r0, r6
   18d18:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   18d1c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   18d20:	8067      	strh	r7, [r4, #2]
   18d22:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18d24:	885a      	ldrh	r2, [r3, #2]
   18d26:	f042 0201 	orr.w	r2, r2, #1
   18d2a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   18d2c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   18d2e:	f7ff be40 	b.w	189b2 <free_list_add>

00018d32 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18d32:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   18d34:	f013 0307 	ands.w	r3, r3, #7
   18d38:	d105      	bne.n	18d46 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   18d3a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   18d3c:	2b00      	cmp	r3, #0
   18d3e:	bf0c      	ite	eq
   18d40:	2000      	moveq	r0, #0
   18d42:	2003      	movne	r0, #3
   18d44:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   18d46:	2b02      	cmp	r3, #2
   18d48:	d105      	bne.n	18d56 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   18d4a:	8b40      	ldrh	r0, [r0, #26]
   18d4c:	fab0 f080 	clz	r0, r0
   18d50:	0940      	lsrs	r0, r0, #5
   18d52:	0080      	lsls	r0, r0, #2
   18d54:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   18d56:	2b01      	cmp	r3, #1
   18d58:	d105      	bne.n	18d66 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   18d5a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   18d5c:	2b00      	cmp	r3, #0
   18d5e:	bf0c      	ite	eq
   18d60:	2000      	moveq	r0, #0
   18d62:	2005      	movne	r0, #5
   18d64:	4770      	bx	lr
	int evt = EVT_NOP;
   18d66:	2000      	movs	r0, #0
}
   18d68:	4770      	bx	lr

00018d6a <validate_args>:
{
   18d6a:	b510      	push	{r4, lr}
   18d6c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18d6e:	b100      	cbz	r0, 18d72 <validate_args+0x8>
   18d70:	b911      	cbnz	r1, 18d78 <validate_args+0xe>
		return -EINVAL;
   18d72:	f06f 0015 	mvn.w	r0, #21
}
   18d76:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   18d78:	1d08      	adds	r0, r1, #4
   18d7a:	f000 f895 	bl	18ea8 <sys_notify_validate>
	if ((rv == 0)
   18d7e:	2800      	cmp	r0, #0
   18d80:	d1f9      	bne.n	18d76 <validate_args+0xc>
	    && ((cli->notify.flags
   18d82:	68a3      	ldr	r3, [r4, #8]
   18d84:	2b03      	cmp	r3, #3
   18d86:	d9f6      	bls.n	18d76 <validate_args+0xc>
   18d88:	e7f3      	b.n	18d72 <validate_args+0x8>

00018d8a <notify_one>:
{
   18d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d8e:	460d      	mov	r5, r1
   18d90:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18d92:	4619      	mov	r1, r3
   18d94:	1d28      	adds	r0, r5, #4
{
   18d96:	4690      	mov	r8, r2
   18d98:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18d9a:	f000 f899 	bl	18ed0 <sys_notify_finalize>
	if (cb) {
   18d9e:	4604      	mov	r4, r0
   18da0:	b138      	cbz	r0, 18db2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   18da2:	4633      	mov	r3, r6
   18da4:	4642      	mov	r2, r8
   18da6:	4629      	mov	r1, r5
   18da8:	4638      	mov	r0, r7
   18daa:	46a4      	mov	ip, r4
}
   18dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   18db0:	4760      	bx	ip
}
   18db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018db6 <transition_complete>:
{
   18db6:	b410      	push	{r4}
	__asm__ volatile(
   18db8:	f04f 0420 	mov.w	r4, #32
   18dbc:	f3ef 8211 	mrs	r2, BASEPRI
   18dc0:	f384 8812 	msr	BASEPRI_MAX, r4
   18dc4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18dc8:	6141      	str	r1, [r0, #20]
}
   18dca:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   18dcc:	2101      	movs	r1, #1
   18dce:	f7f0 bc45 	b.w	965c <process_event>

00018dd2 <onoff_manager_init>:
{
   18dd2:	b538      	push	{r3, r4, r5, lr}
   18dd4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   18dd6:	4605      	mov	r5, r0
   18dd8:	b158      	cbz	r0, 18df2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   18dda:	b151      	cbz	r1, 18df2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   18ddc:	680b      	ldr	r3, [r1, #0]
   18dde:	b143      	cbz	r3, 18df2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   18de0:	684b      	ldr	r3, [r1, #4]
   18de2:	b133      	cbz	r3, 18df2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   18de4:	221c      	movs	r2, #28
   18de6:	2100      	movs	r1, #0
   18de8:	f001 facc 	bl	1a384 <memset>
	return 0;
   18dec:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   18dee:	612c      	str	r4, [r5, #16]
}
   18df0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18df2:	f06f 0015 	mvn.w	r0, #21
   18df6:	e7fb      	b.n	18df0 <onoff_manager_init+0x1e>

00018df8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   18df8:	b570      	push	{r4, r5, r6, lr}
   18dfa:	4605      	mov	r5, r0
   18dfc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   18dfe:	f7ff ffb4 	bl	18d6a <validate_args>

	if (rv < 0) {
   18e02:	1e04      	subs	r4, r0, #0
   18e04:	db15      	blt.n	18e32 <onoff_request+0x3a>
   18e06:	f04f 0320 	mov.w	r3, #32
   18e0a:	f3ef 8211 	mrs	r2, BASEPRI
   18e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   18e12:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   18e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e1a:	8b6b      	ldrh	r3, [r5, #26]
   18e1c:	8b2c      	ldrh	r4, [r5, #24]
   18e1e:	428b      	cmp	r3, r1
   18e20:	f004 0407 	and.w	r4, r4, #7
   18e24:	d107      	bne.n	18e36 <onoff_request+0x3e>
	__asm__ volatile(
   18e26:	f382 8811 	msr	BASEPRI, r2
   18e2a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   18e2e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   18e32:	4620      	mov	r0, r4
   18e34:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   18e36:	2c02      	cmp	r4, #2
   18e38:	d10c      	bne.n	18e54 <onoff_request+0x5c>
		mgr->refs += 1U;
   18e3a:	3301      	adds	r3, #1
   18e3c:	836b      	strh	r3, [r5, #26]
   18e3e:	f382 8811 	msr	BASEPRI, r2
   18e42:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   18e46:	2300      	movs	r3, #0
   18e48:	4622      	mov	r2, r4
   18e4a:	4631      	mov	r1, r6
   18e4c:	4628      	mov	r0, r5
   18e4e:	f7ff ff9c 	bl	18d8a <notify_one>
   18e52:	e7ee      	b.n	18e32 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   18e54:	2c06      	cmp	r4, #6
   18e56:	d814      	bhi.n	18e82 <onoff_request+0x8a>
   18e58:	e8df f004 	tbb	[pc, r4]
   18e5c:	13131304 	.word	0x13131304
   18e60:	1a04      	.short	0x1a04
   18e62:	04          	.byte	0x04
   18e63:	00          	.byte	0x00
	parent->next = child;
   18e64:	2300      	movs	r3, #0
   18e66:	6033      	str	r3, [r6, #0]
	return list->tail;
   18e68:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   18e6a:	b93b      	cbnz	r3, 18e7c <onoff_request+0x84>
	list->head = node;
   18e6c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   18e70:	b9ac      	cbnz	r4, 18e9e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   18e72:	2102      	movs	r1, #2
   18e74:	4628      	mov	r0, r5
   18e76:	f7f0 fbf1 	bl	965c <process_event>
   18e7a:	e7da      	b.n	18e32 <onoff_request+0x3a>
	parent->next = child;
   18e7c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   18e7e:	606e      	str	r6, [r5, #4]
}
   18e80:	e7f6      	b.n	18e70 <onoff_request+0x78>
   18e82:	f382 8811 	msr	BASEPRI, r2
   18e86:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   18e8a:	f06f 0404 	mvn.w	r4, #4
   18e8e:	e7d0      	b.n	18e32 <onoff_request+0x3a>
   18e90:	f382 8811 	msr	BASEPRI, r2
   18e94:	f3bf 8f6f 	isb	sy
   18e98:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18e9c:	e7c9      	b.n	18e32 <onoff_request+0x3a>
   18e9e:	f382 8811 	msr	BASEPRI, r2
   18ea2:	f3bf 8f6f 	isb	sy
		if (notify) {
   18ea6:	e7c4      	b.n	18e32 <onoff_request+0x3a>

00018ea8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18ea8:	4603      	mov	r3, r0
   18eaa:	b140      	cbz	r0, 18ebe <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18eac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18eae:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   18eb2:	2a02      	cmp	r2, #2
   18eb4:	d006      	beq.n	18ec4 <sys_notify_validate+0x1c>
   18eb6:	2a03      	cmp	r2, #3
   18eb8:	d004      	beq.n	18ec4 <sys_notify_validate+0x1c>
   18eba:	2a01      	cmp	r2, #1
   18ebc:	d005      	beq.n	18eca <sys_notify_validate+0x22>
   18ebe:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   18ec2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18ec4:	681a      	ldr	r2, [r3, #0]
   18ec6:	2a00      	cmp	r2, #0
   18ec8:	d0f9      	beq.n	18ebe <sys_notify_validate+0x16>
		notify->result = 0;
   18eca:	2000      	movs	r0, #0
   18ecc:	6098      	str	r0, [r3, #8]
   18ece:	4770      	bx	lr

00018ed0 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   18ed0:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18ed2:	6842      	ldr	r2, [r0, #4]
   18ed4:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   18ed6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18eda:	2a02      	cmp	r2, #2
   18edc:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   18ee0:	6081      	str	r1, [r0, #8]
	switch (method) {
   18ee2:	d007      	beq.n	18ef4 <sys_notify_finalize+0x24>
   18ee4:	2a03      	cmp	r2, #3
   18ee6:	d002      	beq.n	18eee <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18ee8:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   18eea:	2000      	movs	r0, #0
   18eec:	e001      	b.n	18ef2 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   18eee:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18ef0:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   18ef2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   18ef4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18ef6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   18ef8:	2800      	cmp	r0, #0
   18efa:	d0f6      	beq.n	18eea <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   18efc:	f7ff fc68 	bl	187d0 <z_impl_k_poll_signal_raise>
   18f00:	e7f3      	b.n	18eea <sys_notify_finalize+0x1a>

00018f02 <encode_uint>:
{
   18f02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f06:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   18f08:	78d3      	ldrb	r3, [r2, #3]
{
   18f0a:	4680      	mov	r8, r0
	switch (specifier) {
   18f0c:	2b6f      	cmp	r3, #111	; 0x6f
{
   18f0e:	460f      	mov	r7, r1
   18f10:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   18f12:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   18f16:	d029      	beq.n	18f6c <encode_uint+0x6a>
   18f18:	d824      	bhi.n	18f64 <encode_uint+0x62>
		return 10;
   18f1a:	2b58      	cmp	r3, #88	; 0x58
   18f1c:	bf0c      	ite	eq
   18f1e:	2610      	moveq	r6, #16
   18f20:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   18f22:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   18f26:	4632      	mov	r2, r6
   18f28:	2300      	movs	r3, #0
   18f2a:	4640      	mov	r0, r8
   18f2c:	4639      	mov	r1, r7
   18f2e:	f7ef f913 	bl	8158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18f32:	2a09      	cmp	r2, #9
   18f34:	b2d4      	uxtb	r4, r2
   18f36:	d81e      	bhi.n	18f76 <encode_uint+0x74>
   18f38:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   18f3a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18f3c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   18f3e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18f42:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   18f46:	d301      	bcc.n	18f4c <encode_uint+0x4a>
   18f48:	45d1      	cmp	r9, sl
   18f4a:	d811      	bhi.n	18f70 <encode_uint+0x6e>
	if (conv->flag_hash) {
   18f4c:	782b      	ldrb	r3, [r5, #0]
   18f4e:	069b      	lsls	r3, r3, #26
   18f50:	d505      	bpl.n	18f5e <encode_uint+0x5c>
		if (radix == 8) {
   18f52:	2e08      	cmp	r6, #8
   18f54:	d115      	bne.n	18f82 <encode_uint+0x80>
			conv->altform_0 = true;
   18f56:	78ab      	ldrb	r3, [r5, #2]
   18f58:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   18f5c:	70ab      	strb	r3, [r5, #2]
}
   18f5e:	4648      	mov	r0, r9
   18f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   18f64:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   18f68:	2b70      	cmp	r3, #112	; 0x70
   18f6a:	e7d7      	b.n	18f1c <encode_uint+0x1a>
	switch (specifier) {
   18f6c:	2608      	movs	r6, #8
   18f6e:	e7d8      	b.n	18f22 <encode_uint+0x20>
		value /= radix;
   18f70:	4680      	mov	r8, r0
   18f72:	460f      	mov	r7, r1
   18f74:	e7d7      	b.n	18f26 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18f76:	f1bb 0f19 	cmp.w	fp, #25
   18f7a:	bf94      	ite	ls
   18f7c:	3437      	addls	r4, #55	; 0x37
   18f7e:	3457      	addhi	r4, #87	; 0x57
   18f80:	e7db      	b.n	18f3a <encode_uint+0x38>
		} else if (radix == 16) {
   18f82:	2e10      	cmp	r6, #16
   18f84:	d1eb      	bne.n	18f5e <encode_uint+0x5c>
			conv->altform_0c = true;
   18f86:	78ab      	ldrb	r3, [r5, #2]
   18f88:	f043 0310 	orr.w	r3, r3, #16
   18f8c:	e7e6      	b.n	18f5c <encode_uint+0x5a>

00018f8e <outs>:
{
   18f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f92:	4607      	mov	r7, r0
   18f94:	4688      	mov	r8, r1
   18f96:	4615      	mov	r5, r2
   18f98:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18f9a:	4614      	mov	r4, r2
   18f9c:	42b4      	cmp	r4, r6
   18f9e:	d305      	bcc.n	18fac <outs+0x1e>
   18fa0:	b10e      	cbz	r6, 18fa6 <outs+0x18>
	return (int)count;
   18fa2:	1b60      	subs	r0, r4, r5
   18fa4:	e008      	b.n	18fb8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18fa6:	7823      	ldrb	r3, [r4, #0]
   18fa8:	2b00      	cmp	r3, #0
   18faa:	d0fa      	beq.n	18fa2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   18fac:	4641      	mov	r1, r8
   18fae:	f814 0b01 	ldrb.w	r0, [r4], #1
   18fb2:	47b8      	blx	r7
		if (rc < 0) {
   18fb4:	2800      	cmp	r0, #0
   18fb6:	daf1      	bge.n	18f9c <outs+0xe>
}
   18fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018fbc <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   18fbc:	b40f      	push	{r0, r1, r2, r3}
   18fbe:	b507      	push	{r0, r1, r2, lr}
   18fc0:	a904      	add	r1, sp, #16
   18fc2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   18fc6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   18fc8:	f7ff fcc8 	bl	1895c <vprintk>

	va_end(ap);
}
   18fcc:	b003      	add	sp, #12
   18fce:	f85d eb04 	ldr.w	lr, [sp], #4
   18fd2:	b004      	add	sp, #16
   18fd4:	4770      	bx	lr

00018fd6 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   18fd6:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   18fd8:	6903      	ldr	r3, [r0, #16]
{
   18fda:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   18fdc:	f013 0008 	ands.w	r0, r3, #8
   18fe0:	d109      	bne.n	18ff6 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   18fe2:	6813      	ldr	r3, [r2, #0]
   18fe4:	68d4      	ldr	r4, [r2, #12]
   18fe6:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
   18fe8:	bf9b      	ittet	ls
   18fea:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   18fec:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   18fee:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   18ff0:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   18ff2:	600b      	str	r3, [r1, #0]
}
   18ff4:	bd10      	pop	{r4, pc}
   18ff6:	2300      	movs	r3, #0
		return false;
   18ff8:	4618      	mov	r0, r3
   18ffa:	e7fa      	b.n	18ff2 <free_space+0x1c>

00018ffc <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   18ffc:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   18ffe:	a901      	add	r1, sp, #4
{
   19000:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   19002:	f7ff ffe8 	bl	18fd6 <free_space>
   19006:	b120      	cbz	r0, 19012 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   19008:	9b01      	ldr	r3, [sp, #4]
   1900a:	68e2      	ldr	r2, [r4, #12]
   1900c:	3b01      	subs	r3, #1
   1900e:	4413      	add	r3, r2
   19010:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   19012:	6a20      	ldr	r0, [r4, #32]
   19014:	9b01      	ldr	r3, [sp, #4]
   19016:	1ac0      	subs	r0, r0, r3
}
   19018:	3801      	subs	r0, #1
   1901a:	b002      	add	sp, #8
   1901c:	bd10      	pop	{r4, pc}

0001901e <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   1901e:	b510      	push	{r4, lr}
   19020:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   19022:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   19024:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   19026:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   19028:	07d2      	lsls	r2, r2, #31
   1902a:	d502      	bpl.n	19032 <idx_inc+0x14>
		return i & (buffer->size - 1);
   1902c:	3b01      	subs	r3, #1
   1902e:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   19030:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   19032:	4298      	cmp	r0, r3
   19034:	bf28      	it	cs
   19036:	1ac0      	subcs	r0, r0, r3
   19038:	e7fa      	b.n	19030 <idx_inc+0x12>

0001903a <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   1903a:	b510      	push	{r4, lr}
   1903c:	4604      	mov	r4, r0
   1903e:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   19040:	68c1      	ldr	r1, [r0, #12]
   19042:	f7ff ffec 	bl	1901e <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   19046:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   19048:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   1904a:	f023 0308 	bic.w	r3, r3, #8
   1904e:	6123      	str	r3, [r4, #16]
}
   19050:	bd10      	pop	{r4, pc}

00019052 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   19052:	b538      	push	{r3, r4, r5, lr}
   19054:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   19056:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   19058:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1905a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1905c:	f043 0302 	orr.w	r3, r3, #2
{
   19060:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   19062:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   19066:	6801      	ldr	r1, [r0, #0]
   19068:	462a      	mov	r2, r5
   1906a:	f7ff ffd8 	bl	1901e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1906e:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   19070:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   19072:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   19074:	bf08      	it	eq
   19076:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   19078:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   1907a:	bf08      	it	eq
   1907c:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   19080:	462a      	mov	r2, r5
   19082:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   19084:	bf08      	it	eq
   19086:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   19088:	f7ff ffc9 	bl	1901e <idx_inc>
   1908c:	6060      	str	r0, [r4, #4]
}
   1908e:	bd38      	pop	{r3, r4, r5, pc}

00019090 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   19090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   19094:	68c7      	ldr	r7, [r0, #12]
   19096:	69c6      	ldr	r6, [r0, #28]
{
   19098:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   1909a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   1909e:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   190a0:	f003 0303 	and.w	r3, r3, #3
   190a4:	2b02      	cmp	r3, #2
{
   190a6:	4688      	mov	r8, r1
   190a8:	4691      	mov	r9, r2
   190aa:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   190ae:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   190b2:	d009      	beq.n	190c8 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   190b4:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   190b6:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   190ba:	6923      	ldr	r3, [r4, #16]
   190bc:	0799      	lsls	r1, r3, #30
   190be:	d410      	bmi.n	190e2 <drop_item_locked+0x52>
		return false;
   190c0:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   190c2:	b003      	add	sp, #12
   190c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   190c8:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   190cc:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   190ce:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   190d0:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   190d4:	d0f1      	beq.n	190ba <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   190d6:	f7ff ffb0 	bl	1903a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   190da:	68e3      	ldr	r3, [r4, #12]
   190dc:	60a3      	str	r3, [r4, #8]
		return true;
   190de:	2001      	movs	r0, #1
   190e0:	e7ef      	b.n	190c2 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   190e2:	69a3      	ldr	r3, [r4, #24]
   190e4:	4650      	mov	r0, sl
   190e6:	4798      	blx	r3
	return item->hdr.valid;
   190e8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   190ec:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   190ee:	07da      	lsls	r2, r3, #31
   190f0:	d5e6      	bpl.n	190c0 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   190f2:	f013 0302 	ands.w	r3, r3, #2
   190f6:	d01d      	beq.n	19134 <drop_item_locked+0xa4>
		if (free_wlen) {
   190f8:	f1b8 0f00 	cmp.w	r8, #0
   190fc:	d003      	beq.n	19106 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   190fe:	4641      	mov	r1, r8
   19100:	4620      	mov	r0, r4
   19102:	f7ff ffa6 	bl	19052 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   19106:	6861      	ldr	r1, [r4, #4]
   19108:	462a      	mov	r2, r5
   1910a:	4620      	mov	r0, r4
   1910c:	f7ff ff87 	bl	1901e <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   19110:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   19114:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   19116:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   19118:	d104      	bne.n	19124 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   1911a:	462a      	mov	r2, r5
   1911c:	4620      	mov	r0, r4
   1911e:	f7ff ff7e 	bl	1901e <idx_inc>
   19122:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   19124:	68a3      	ldr	r3, [r4, #8]
   19126:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   19128:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   1912a:	6923      	ldr	r3, [r4, #16]
   1912c:	f043 0308 	orr.w	r3, r3, #8
   19130:	6123      	str	r3, [r4, #16]
   19132:	e7d4      	b.n	190de <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   19134:	4601      	mov	r1, r0
   19136:	4620      	mov	r0, r4
   19138:	9301      	str	r3, [sp, #4]
   1913a:	f7ff ff7e 	bl	1903a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1913e:	68e2      	ldr	r2, [r4, #12]
   19140:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   19142:	f1b8 0f00 	cmp.w	r8, #0
   19146:	d004      	beq.n	19152 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   19148:	6821      	ldr	r1, [r4, #0]
   1914a:	69e2      	ldr	r2, [r4, #28]
   1914c:	9b01      	ldr	r3, [sp, #4]
   1914e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   19152:	eb05 0208 	add.w	r2, r5, r8
   19156:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   1915a:	6821      	ldr	r1, [r4, #0]
   1915c:	4620      	mov	r0, r4
   1915e:	f7ff ff5e 	bl	1901e <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   19162:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   19164:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   19166:	f043 0308 	orr.w	r3, r3, #8
   1916a:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   1916c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   19170:	f36f 0300 	bfc	r3, #0, #1
   19174:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   19178:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   1917c:	e7af      	b.n	190de <drop_item_locked+0x4e>

0001917e <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   1917e:	b570      	push	{r4, r5, r6, lr}
   19180:	4604      	mov	r4, r0
   19182:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   19184:	f7ff ff4b 	bl	1901e <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   19188:	6823      	ldr	r3, [r4, #0]
   1918a:	4283      	cmp	r3, r0
   1918c:	d105      	bne.n	1919a <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   1918e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   19190:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   19192:	f023 0308 	bic.w	r3, r3, #8
   19196:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   19198:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   1919a:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   1919c:	00ab      	lsls	r3, r5, #2
   1919e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   191a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   191a6:	6861      	ldr	r1, [r4, #4]
   191a8:	462a      	mov	r2, r5
   191aa:	4620      	mov	r0, r4
   191ac:	f7ff ff37 	bl	1901e <idx_inc>
   191b0:	6060      	str	r0, [r4, #4]
   191b2:	e7f1      	b.n	19198 <post_drop_action+0x1a>

000191b4 <max_utilization_update>:
{
   191b4:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   191b6:	6903      	ldr	r3, [r0, #16]
{
   191b8:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   191ba:	075b      	lsls	r3, r3, #29
   191bc:	d506      	bpl.n	191cc <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   191be:	6a45      	ldr	r5, [r0, #36]	; 0x24
   191c0:	f7ff ff1c 	bl	18ffc <get_usage>
   191c4:	4285      	cmp	r5, r0
   191c6:	bf2c      	ite	cs
   191c8:	6265      	strcs	r5, [r4, #36]	; 0x24
   191ca:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   191cc:	bd38      	pop	{r3, r4, r5, pc}

000191ce <mpsc_pbuf_init>:
{
   191ce:	b538      	push	{r3, r4, r5, lr}
   191d0:	460d      	mov	r5, r1
   191d2:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   191d4:	221c      	movs	r2, #28
   191d6:	2100      	movs	r1, #0
   191d8:	f001 f8d4 	bl	1a384 <memset>
	buffer->max_usage = 0;
   191dc:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   191de:	68eb      	ldr	r3, [r5, #12]
   191e0:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   191e2:	68ab      	ldr	r3, [r5, #8]
   191e4:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   191e6:	682b      	ldr	r3, [r5, #0]
   191e8:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   191ea:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   191ec:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   191ee:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   191f0:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   191f2:	b123      	cbz	r3, 191fe <mpsc_pbuf_init+0x30>
   191f4:	1e59      	subs	r1, r3, #1
   191f6:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   191f8:	bf08      	it	eq
   191fa:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   191fe:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19200:	2201      	movs	r2, #1
   19202:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19206:	2100      	movs	r1, #0
}
   19208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1920c:	f004 bb4b 	b.w	1d8a6 <z_impl_k_sem_init>

00019210 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   19210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   19214:	2500      	movs	r5, #0
{
   19216:	b087      	sub	sp, #28
   19218:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   1921a:	6a03      	ldr	r3, [r0, #32]
{
   1921c:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
   1921e:	428b      	cmp	r3, r1
{
   19220:	460e      	mov	r6, r1
   19222:	4692      	mov	sl, r2
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   19224:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
   19226:	9503      	str	r5, [sp, #12]
	uint32_t tmp_wr_idx_shift = 0;
   19228:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
   1922a:	d33a      	bcc.n	192a2 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   1922c:	f04f 0320 	mov.w	r3, #32
   19230:	f3ef 8b11 	mrs	fp, BASEPRI
   19234:	f383 8812 	msr	BASEPRI_MAX, r3
   19238:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   1923c:	9a05      	ldr	r2, [sp, #20]
   1923e:	46d8      	mov	r8, fp
   19240:	b12a      	cbz	r2, 1924e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   19242:	4629      	mov	r1, r5
   19244:	4620      	mov	r0, r4
   19246:	f7ff ff9a 	bl	1917e <post_drop_action>
			tmp_wr_idx_shift = 0;
   1924a:	2300      	movs	r3, #0
   1924c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   1924e:	a904      	add	r1, sp, #16
   19250:	4620      	mov	r0, r4
   19252:	f7ff fec0 	bl	18fd6 <free_space>

		if (free_wlen >= wlen) {
   19256:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
   19258:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   1925a:	42b1      	cmp	r1, r6
   1925c:	d32a      	bcc.n	192b4 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1925e:	6822      	ldr	r2, [r4, #0]
			item =
   19260:	69e3      	ldr	r3, [r4, #28]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   19262:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   19264:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   19268:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
   1926c:	f021 0103 	bic.w	r1, r1, #3
   19270:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   19274:	6821      	ldr	r1, [r4, #0]
   19276:	4632      	mov	r2, r6
   19278:	f7ff fed1 	bl	1901e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1927c:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1927e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   19280:	4298      	cmp	r0, r3
   19282:	d012      	beq.n	192aa <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   19284:	2700      	movs	r7, #0
	__asm__ volatile(
   19286:	f388 8811 	msr	BASEPRI, r8
   1928a:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   1928e:	9903      	ldr	r1, [sp, #12]
   19290:	b129      	cbz	r1, 1929e <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   19292:	6962      	ldr	r2, [r4, #20]
   19294:	b10a      	cbz	r2, 1929a <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   19296:	4620      	mov	r0, r4
   19298:	4790      	blx	r2
			}
			dropped_item = NULL;
   1929a:	2300      	movs	r3, #0
   1929c:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   1929e:	2f00      	cmp	r7, #0
   192a0:	d1c4      	bne.n	1922c <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   192a2:	4648      	mov	r0, r9
   192a4:	b007      	add	sp, #28
   192a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   192aa:	6923      	ldr	r3, [r4, #16]
   192ac:	f043 0308 	orr.w	r3, r3, #8
   192b0:	6123      	str	r3, [r4, #16]
   192b2:	e7e7      	b.n	19284 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   192b4:	b118      	cbz	r0, 192be <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   192b6:	4620      	mov	r0, r4
   192b8:	f7ff fecb 	bl	19052 <add_skip_item>
			cont = true;
   192bc:	e7e3      	b.n	19286 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   192be:	9b00      	ldr	r3, [sp, #0]
   192c0:	ea5a 0303 	orrs.w	r3, sl, r3
   192c4:	d01a      	beq.n	192fc <mpsc_pbuf_alloc+0xec>
   192c6:	9101      	str	r1, [sp, #4]
   192c8:	f004 fa33 	bl	1d732 <k_is_in_isr>
   192cc:	9901      	ldr	r1, [sp, #4]
   192ce:	b9a8      	cbnz	r0, 192fc <mpsc_pbuf_alloc+0xec>
   192d0:	f38b 8811 	msr	BASEPRI, fp
   192d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   192d8:	4652      	mov	r2, sl
   192da:	9b00      	ldr	r3, [sp, #0]
   192dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   192e0:	f7fe fa94 	bl	1780c <z_impl_k_sem_take>
	__asm__ volatile(
   192e4:	f04f 0320 	mov.w	r3, #32
   192e8:	f3ef 8811 	mrs	r8, BASEPRI
   192ec:	f383 8812 	msr	BASEPRI_MAX, r3
   192f0:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   192f4:	fab0 f780 	clz	r7, r0
   192f8:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   192fa:	e7c4      	b.n	19286 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   192fc:	4620      	mov	r0, r4
   192fe:	ab05      	add	r3, sp, #20
   19300:	aa03      	add	r2, sp, #12
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   19302:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   19304:	f7ff fec4 	bl	19090 <drop_item_locked>
   19308:	4607      	mov	r7, r0
   1930a:	e7bc      	b.n	19286 <mpsc_pbuf_alloc+0x76>

0001930c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1930c:	b570      	push	{r4, r5, r6, lr}
   1930e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   19310:	6983      	ldr	r3, [r0, #24]
   19312:	4608      	mov	r0, r1
{
   19314:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   19316:	4798      	blx	r3
   19318:	4602      	mov	r2, r0
   1931a:	f04f 0320 	mov.w	r3, #32
   1931e:	f3ef 8611 	mrs	r6, BASEPRI
   19322:	f383 8812 	msr	BASEPRI_MAX, r3
   19326:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1932a:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1932c:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   1932e:	f043 0301 	orr.w	r3, r3, #1
   19332:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   19334:	6861      	ldr	r1, [r4, #4]
   19336:	f7ff fe72 	bl	1901e <idx_inc>
   1933a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1933c:	4620      	mov	r0, r4
   1933e:	f7ff ff39 	bl	191b4 <max_utilization_update>
	__asm__ volatile(
   19342:	f386 8811 	msr	BASEPRI, r6
   19346:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   1934a:	bd70      	pop	{r4, r5, r6, pc}

0001934c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1934e:	4604      	mov	r4, r0
	__asm__ volatile(
   19350:	f04f 0320 	mov.w	r3, #32
   19354:	f3ef 8611 	mrs	r6, BASEPRI
   19358:	f383 8812 	msr	BASEPRI_MAX, r3
   1935c:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   19360:	6923      	ldr	r3, [r4, #16]
   19362:	f013 0f08 	tst.w	r3, #8
   19366:	68a3      	ldr	r3, [r4, #8]
   19368:	d102      	bne.n	19370 <mpsc_pbuf_claim+0x24>
   1936a:	6862      	ldr	r2, [r4, #4]
   1936c:	4293      	cmp	r3, r2
   1936e:	d900      	bls.n	19372 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   19370:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   19372:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   19374:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
   19376:	b92a      	cbnz	r2, 19384 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   19378:	f386 8811 	msr	BASEPRI, r6
   1937c:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   19380:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   19382:	e033      	b.n	193ec <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   19384:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   19388:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1938c:	f012 0003 	ands.w	r0, r2, #3
   19390:	d0f2      	beq.n	19378 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   19392:	2802      	cmp	r0, #2
   19394:	d103      	bne.n	1939e <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   19396:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1939a:	08ad      	lsrs	r5, r5, #2
   1939c:	d105      	bne.n	193aa <mpsc_pbuf_claim+0x5e>
   1939e:	07d0      	lsls	r0, r2, #31
   193a0:	d412      	bmi.n	193c8 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   193a2:	4638      	mov	r0, r7
   193a4:	69a3      	ldr	r3, [r4, #24]
   193a6:	4798      	blx	r3
   193a8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   193aa:	68a1      	ldr	r1, [r4, #8]
   193ac:	462a      	mov	r2, r5
   193ae:	4620      	mov	r0, r4
   193b0:	f7ff fe35 	bl	1901e <idx_inc>
				rd_idx_inc(buffer, inc);
   193b4:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   193b6:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   193b8:	4620      	mov	r0, r4
   193ba:	f7ff fe3e 	bl	1903a <rd_idx_inc>
   193be:	f386 8811 	msr	BASEPRI, r6
   193c2:	f3bf 8f6f 	isb	sy
	} while (cont);
   193c6:	e7c3      	b.n	19350 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   193c8:	f042 0202 	orr.w	r2, r2, #2
   193cc:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   193d0:	69a3      	ldr	r3, [r4, #24]
   193d2:	4638      	mov	r0, r7
					idx_inc(buffer, buffer->tmp_rd_idx,
   193d4:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   193d6:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   193d8:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   193da:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   193dc:	4620      	mov	r0, r4
   193de:	f7ff fe1e 	bl	1901e <idx_inc>
				buffer->tmp_rd_idx =
   193e2:	60a0      	str	r0, [r4, #8]
   193e4:	f386 8811 	msr	BASEPRI, r6
   193e8:	f3bf 8f6f 	isb	sy
}
   193ec:	4638      	mov	r0, r7
   193ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000193f0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   193f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193f2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   193f4:	6983      	ldr	r3, [r0, #24]
   193f6:	4608      	mov	r0, r1
{
   193f8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   193fa:	4798      	blx	r3
   193fc:	4606      	mov	r6, r0
	__asm__ volatile(
   193fe:	f04f 0320 	mov.w	r3, #32
   19402:	f3ef 8711 	mrs	r7, BASEPRI
   19406:	f383 8812 	msr	BASEPRI_MAX, r3
   1940a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1940e:	782b      	ldrb	r3, [r5, #0]
   19410:	f36f 0300 	bfc	r3, #0, #1
   19414:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   19416:	6923      	ldr	r3, [r4, #16]
   19418:	079b      	lsls	r3, r3, #30
   1941a:	d505      	bpl.n	19428 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1941c:	68e2      	ldr	r2, [r4, #12]
   1941e:	69e3      	ldr	r3, [r4, #28]
   19420:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   19424:	429d      	cmp	r5, r3
   19426:	d11a      	bne.n	1945e <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   19428:	782b      	ldrb	r3, [r5, #0]
   1942a:	f36f 0341 	bfc	r3, #1, #1
   1942e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   19430:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   19434:	4299      	cmp	r1, r3
   19436:	d104      	bne.n	19442 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   19438:	4632      	mov	r2, r6
   1943a:	4620      	mov	r0, r4
   1943c:	f7ff fdef 	bl	1901e <idx_inc>
   19440:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   19442:	4631      	mov	r1, r6
   19444:	4620      	mov	r0, r4
   19446:	f7ff fdf8 	bl	1903a <rd_idx_inc>
	__asm__ volatile(
   1944a:	f387 8811 	msr	BASEPRI, r7
   1944e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   19452:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   19456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1945a:	f7fe b9b1 	b.w	177c0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1945e:	682b      	ldr	r3, [r5, #0]
   19460:	f360 039f 	bfi	r3, r0, #2, #30
   19464:	602b      	str	r3, [r5, #0]
   19466:	e7f0      	b.n	1944a <mpsc_pbuf_free+0x5a>

00019468 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   19468:	6902      	ldr	r2, [r0, #16]
   1946a:	6883      	ldr	r3, [r0, #8]
   1946c:	0712      	lsls	r2, r2, #28
   1946e:	d402      	bmi.n	19476 <mpsc_pbuf_is_pending+0xe>
   19470:	6842      	ldr	r2, [r0, #4]
   19472:	429a      	cmp	r2, r3
   19474:	d200      	bcs.n	19478 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   19476:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   19478:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1947a:	1e18      	subs	r0, r3, #0
   1947c:	bf18      	it	ne
   1947e:	2001      	movne	r0, #1
   19480:	4770      	bx	lr

00019482 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19482:	4770      	bx	lr

00019484 <nordicsemi_nrf53_init>:
{
   19484:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19486:	f04f 0320 	mov.w	r3, #32
   1948a:	f3ef 8511 	mrs	r5, BASEPRI
   1948e:	f383 8812 	msr	BASEPRI_MAX, r3
   19492:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   19496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1949a:	2401      	movs	r4, #1
   1949c:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1949e:	4621      	mov	r1, r4
   194a0:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   194a4:	2021      	movs	r0, #33	; 0x21
   194a6:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   194aa:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   194ae:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   194b2:	f000 f824 	bl	194fe <soc_secure_gpio_pin_mcu_select>
   194b6:	4621      	mov	r1, r4
   194b8:	2020      	movs	r0, #32
   194ba:	f000 f820 	bl	194fe <soc_secure_gpio_pin_mcu_select>
   194be:	4621      	mov	r1, r4
   194c0:	200b      	movs	r0, #11
   194c2:	f000 f81c 	bl	194fe <soc_secure_gpio_pin_mcu_select>
   194c6:	4621      	mov	r1, r4
   194c8:	200a      	movs	r0, #10
   194ca:	f000 f818 	bl	194fe <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   194ce:	f385 8811 	msr	BASEPRI, r5
   194d2:	f3bf 8f6f 	isb	sy
}
   194d6:	2000      	movs	r0, #0
   194d8:	bd38      	pop	{r3, r4, r5, pc}

000194da <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   194da:	2806      	cmp	r0, #6
   194dc:	d108      	bne.n	194f0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   194de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   194e2:	2201      	movs	r2, #1
   194e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   194e8:	f3bf 8f4f 	dsb	sy
        __WFE();
   194ec:	bf20      	wfe
    while (true)
   194ee:	e7fd      	b.n	194ec <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   194f0:	4770      	bx	lr

000194f2 <pm_state_exit_post_ops>:
   194f2:	2300      	movs	r3, #0
   194f4:	f383 8811 	msr	BASEPRI, r3
   194f8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   194fc:	4770      	bx	lr

000194fe <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   194fe:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   19500:	aa01      	add	r2, sp, #4
   19502:	f003 fa59 	bl	1c9b8 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   19506:	b003      	add	sp, #12
   19508:	f85d fb04 	ldr.w	pc, [sp], #4

0001950c <z_log_msg_static_create.constprop.0>:
   1950c:	2300      	movs	r3, #0
   1950e:	f7f1 bcd1 	b.w	aeb4 <z_impl_z_log_msg_static_create>

00019512 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   19512:	6903      	ldr	r3, [r0, #16]
}
   19514:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   19518:	4770      	bx	lr

0001951a <drop_tx_buffer>:
}
   1951a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1951e:	4770      	bx	lr

00019520 <release_rx_buffer>:
{
   19520:	4608      	mov	r0, r1
   19522:	b508      	push	{r3, lr}
   19524:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   19526:	b118      	cbz	r0, 19530 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   19528:	f003 fdba 	bl	1d0a0 <rpmsg_release_rx_buffer>
	return 0;
   1952c:	2000      	movs	r0, #0
}
   1952e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   19530:	f06f 0001 	mvn.w	r0, #1
   19534:	e7fb      	b.n	1952e <release_rx_buffer+0xe>

00019536 <hold_rx_buffer>:
{
   19536:	4608      	mov	r0, r1
   19538:	b508      	push	{r3, lr}
   1953a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1953c:	b118      	cbz	r0, 19546 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1953e:	f003 fda7 	bl	1d090 <rpmsg_hold_rx_buffer>
	return 0;
   19542:	2000      	movs	r0, #0
}
   19544:	bd08      	pop	{r3, pc}
		return -ENOENT;
   19546:	f06f 0001 	mvn.w	r0, #1
   1954a:	e7fb      	b.n	19544 <hold_rx_buffer+0xe>

0001954c <send_nocopy>:
{
   1954c:	b513      	push	{r0, r1, r4, lr}
   1954e:	4604      	mov	r4, r0
   19550:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19552:	6921      	ldr	r1, [r4, #16]
   19554:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   19558:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1955c:	2902      	cmp	r1, #2
   1955e:	d109      	bne.n	19574 <send_nocopy+0x28>
	if (len == 0) {
   19560:	b15b      	cbz	r3, 1957a <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   19562:	b168      	cbz	r0, 19580 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   19564:	9300      	str	r3, [sp, #0]
   19566:	4613      	mov	r3, r2
   19568:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1956c:	f7fd fb60 	bl	16c30 <rpmsg_send_offchannel_nocopy>
}
   19570:	b002      	add	sp, #8
   19572:	bd10      	pop	{r4, pc}
		return -EBUSY;
   19574:	f06f 000f 	mvn.w	r0, #15
   19578:	e7fa      	b.n	19570 <send_nocopy+0x24>
		return -EBADMSG;
   1957a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1957e:	e7f7      	b.n	19570 <send_nocopy+0x24>
		return -ENOENT;
   19580:	f06f 0001 	mvn.w	r0, #1
   19584:	e7f4      	b.n	19570 <send_nocopy+0x24>

00019586 <get_tx_buffer>:
{
   19586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1958a:	461c      	mov	r4, r3
   1958c:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   19590:	4616      	mov	r6, r2
   19592:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   19594:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   19596:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   19598:	b339      	cbz	r1, 195ea <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1959a:	b34a      	cbz	r2, 195f0 <get_tx_buffer+0x6a>
   1959c:	b344      	cbz	r4, 195f0 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1959e:	1c6a      	adds	r2, r5, #1
   195a0:	f143 0300 	adc.w	r3, r3, #0
   195a4:	2a02      	cmp	r2, #2
   195a6:	f173 0300 	sbcs.w	r3, r3, #0
   195aa:	d224      	bcs.n	195f6 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   195ac:	6822      	ldr	r2, [r4, #0]
   195ae:	b142      	cbz	r2, 195c2 <get_tx_buffer+0x3c>
   195b0:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   195b4:	429a      	cmp	r2, r3
   195b6:	d904      	bls.n	195c2 <get_tx_buffer+0x3c>
		return -ENOMEM;
   195b8:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   195bc:	6023      	str	r3, [r4, #0]
}
   195be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   195c2:	ea05 0908 	and.w	r9, r5, r8
   195c6:	f109 0301 	add.w	r3, r9, #1
   195ca:	425a      	negs	r2, r3
   195cc:	415a      	adcs	r2, r3
   195ce:	4621      	mov	r1, r4
   195d0:	4638      	mov	r0, r7
   195d2:	f003 fd6e 	bl	1d0b2 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   195d6:	b988      	cbnz	r0, 195fc <get_tx_buffer+0x76>
   195d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   195dc:	bf08      	it	eq
   195de:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   195e2:	d0f0      	beq.n	195c6 <get_tx_buffer+0x40>
		return -ENOBUFS;
   195e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   195e8:	e7e9      	b.n	195be <get_tx_buffer+0x38>
		return -ENOENT;
   195ea:	f06f 0001 	mvn.w	r0, #1
   195ee:	e7e6      	b.n	195be <get_tx_buffer+0x38>
		return -EINVAL;
   195f0:	f06f 0015 	mvn.w	r0, #21
   195f4:	e7e3      	b.n	195be <get_tx_buffer+0x38>
		return -ENOTSUP;
   195f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   195fa:	e7e0      	b.n	195be <get_tx_buffer+0x38>
	(*r_data) = payload;
   195fc:	6030      	str	r0, [r6, #0]
	return 0;
   195fe:	2000      	movs	r0, #0
   19600:	e7dd      	b.n	195be <get_tx_buffer+0x38>

00019602 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   19602:	f003 bd9b 	b.w	1d13c <rpmsg_destroy_ept>

00019606 <get_ept_slot_with_name>:
{
   19606:	b538      	push	{r3, r4, r5, lr}
   19608:	460d      	mov	r5, r1
   1960a:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1960c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   19610:	4628      	mov	r0, r5
   19612:	f000 fe7d 	bl	1a310 <strcmp>
   19616:	b130      	cbz	r0, 19626 <get_ept_slot_with_name+0x20>
   19618:	4628      	mov	r0, r5
   1961a:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1961e:	f000 fe77 	bl	1a310 <strcmp>
   19622:	b920      	cbnz	r0, 1962e <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   19624:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   19626:	2370      	movs	r3, #112	; 0x70
   19628:	fb03 4000 	mla	r0, r3, r0, r4
}
   1962c:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1962e:	2000      	movs	r0, #0
   19630:	e7fc      	b.n	1962c <get_ept_slot_with_name+0x26>

00019632 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   19632:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   19636:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   1963a:	f004 b9e4 	b.w	1da06 <k_work_submit_to_queue>

0001963e <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1963e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   19642:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   19646:	3b00      	subs	r3, #0
   19648:	bf18      	it	ne
   1964a:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1964c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19650:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   19654:	f003 bcce 	b.w	1cff4 <virtqueue_notification>

00019658 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   19658:	68cb      	ldr	r3, [r1, #12]
   1965a:	b133      	cbz	r3, 1966a <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1965c:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1965e:	6883      	ldr	r3, [r0, #8]
   19660:	681b      	ldr	r3, [r3, #0]
   19662:	b113      	cbz	r3, 1966a <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   19664:	2200      	movs	r2, #0
   19666:	6909      	ldr	r1, [r1, #16]
   19668:	4718      	bx	r3
}
   1966a:	4770      	bx	lr

0001966c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1966c:	f7fe b838 	b.w	176e0 <z_impl_k_mutex_unlock>

00019670 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19670:	e8d0 3fef 	ldaex	r3, [r0]
   19674:	e8c0 1fe2 	stlex	r2, r1, [r0]
   19678:	2a00      	cmp	r2, #0
   1967a:	d1f9      	bne.n	19670 <atomic_set.isra.0>
}
   1967c:	4770      	bx	lr

0001967e <backend_init>:
{
   1967e:	b510      	push	{r4, lr}
	data->role = conf->role;
   19680:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   19682:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   1968a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1968e:	f004 f86c 	bl	1d76a <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   19692:	2100      	movs	r1, #0
   19694:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   19698:	f7ff ffea 	bl	19670 <atomic_set.isra.0>
}
   1969c:	4608      	mov	r0, r1
   1969e:	bd10      	pop	{r4, pc}

000196a0 <ns_bind_cb>:
{
   196a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   196a4:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   196a6:	460d      	mov	r5, r1
   196a8:	b379      	cbz	r1, 1970a <ns_bind_cb+0x6a>
   196aa:	780b      	ldrb	r3, [r1, #0]
   196ac:	b36b      	cbz	r3, 1970a <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   196ae:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   196b2:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   196b6:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   196b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   196bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   196c0:	4620      	mov	r0, r4
   196c2:	f7fd ff93 	bl	175ec <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   196c6:	462a      	mov	r2, r5
   196c8:	4640      	mov	r0, r8
   196ca:	a901      	add	r1, sp, #4
   196cc:	f7f0 fe5a 	bl	a384 <get_ept>
	if (rpmsg_ept == NULL) {
   196d0:	9e01      	ldr	r6, [sp, #4]
   196d2:	b92e      	cbnz	r6, 196e0 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   196d4:	4620      	mov	r0, r4
}
   196d6:	b002      	add	sp, #8
   196d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   196dc:	f7ff bfc6 	b.w	1966c <k_mutex_unlock.isra.0>
	if (ept_cached) {
   196e0:	b158      	cbz	r0, 196fa <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   196e2:	4620      	mov	r0, r4
   196e4:	f7ff ffc2 	bl	1966c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   196e8:	463b      	mov	r3, r7
   196ea:	462a      	mov	r2, r5
   196ec:	4631      	mov	r1, r6
   196ee:	4640      	mov	r0, r8
}
   196f0:	b002      	add	sp, #8
   196f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   196f6:	f7f0 be23 	b.w	a340 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   196fa:	2220      	movs	r2, #32
   196fc:	4629      	mov	r1, r5
   196fe:	f106 0040 	add.w	r0, r6, #64	; 0x40
   19702:	f000 fde1 	bl	1a2c8 <strncpy>
		rpmsg_ept->dest = dest;
   19706:	6637      	str	r7, [r6, #96]	; 0x60
   19708:	e7e4      	b.n	196d4 <ns_bind_cb+0x34>
}
   1970a:	b002      	add	sp, #8
   1970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019710 <ept_cb>:
{
   19710:	b510      	push	{r4, lr}
   19712:	4608      	mov	r0, r1
   19714:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   19716:	4611      	mov	r1, r2
   19718:	b952      	cbnz	r2, 19730 <ept_cb+0x20>
		if (!ept->bound) {
   1971a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1971e:	b92a      	cbnz	r2, 1972c <ept_cb+0x1c>
			ept->bound = true;
   19720:	2201      	movs	r2, #1
			bound_cb(ept);
   19722:	4618      	mov	r0, r3
			ept->bound = true;
   19724:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   19728:	f7f0 ff7e 	bl	a628 <bound_cb>
}
   1972c:	2000      	movs	r0, #0
   1972e:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   19730:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   19732:	6854      	ldr	r4, [r2, #4]
   19734:	2c00      	cmp	r4, #0
   19736:	d0f9      	beq.n	1972c <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   19738:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1973a:	47a0      	blx	r4
   1973c:	e7f6      	b.n	1972c <ept_cb+0x1c>

0001973e <deregister_ept>:
{
   1973e:	b510      	push	{r4, lr}
   19740:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19742:	6903      	ldr	r3, [r0, #16]
   19744:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   19748:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1974c:	2b02      	cmp	r3, #2
   1974e:	d10a      	bne.n	19766 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   19750:	b161      	cbz	r1, 1976c <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   19752:	4608      	mov	r0, r1
   19754:	f003 fcf2 	bl	1d13c <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   19758:	2270      	movs	r2, #112	; 0x70
   1975a:	2100      	movs	r1, #0
   1975c:	4620      	mov	r0, r4
   1975e:	f000 fe11 	bl	1a384 <memset>
	return 0;
   19762:	2000      	movs	r0, #0
}
   19764:	bd10      	pop	{r4, pc}
		return -EBUSY;
   19766:	f06f 000f 	mvn.w	r0, #15
   1976a:	e7fb      	b.n	19764 <deregister_ept+0x26>
		return -ENOENT;
   1976c:	f06f 0001 	mvn.w	r0, #1
   19770:	e7f8      	b.n	19764 <deregister_ept+0x26>

00019772 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   19772:	f003 bce3 	b.w	1d13c <rpmsg_destroy_ept>

00019776 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   19776:	b538      	push	{r3, r4, r5, lr}
   19778:	460d      	mov	r5, r1
	if (!instance) {
   1977a:	4604      	mov	r4, r0
   1977c:	b160      	cbz	r0, 19798 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1977e:	30e0      	adds	r0, #224	; 0xe0
   19780:	f003 ff08 	bl	1d594 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   19784:	b10d      	cbz	r5, 1978a <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   19786:	2000      	movs	r0, #0
}
   19788:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   1978a:	220c      	movs	r2, #12
   1978c:	4629      	mov	r1, r5
   1978e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   19792:	f000 fdf7 	bl	1a384 <memset>
   19796:	e7f6      	b.n	19786 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   19798:	f06f 0015 	mvn.w	r0, #21
   1979c:	e7f4      	b.n	19788 <ipc_rpmsg_deinit+0x12>

0001979e <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1979e:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   197a0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   197a4:	b113      	cbz	r3, 197ac <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   197a6:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   197aa:	4718      	bx	r3
}
   197ac:	4770      	bx	lr

000197ae <virtio_set_features>:
}
   197ae:	4770      	bx	lr

000197b0 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   197b0:	6983      	ldr	r3, [r0, #24]
   197b2:	b913      	cbnz	r3, 197ba <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   197b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   197b8:	7019      	strb	r1, [r3, #0]
}
   197ba:	4770      	bx	lr

000197bc <virtio_get_features>:
}
   197bc:	2001      	movs	r0, #1
   197be:	4770      	bx	lr

000197c0 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   197c0:	6983      	ldr	r3, [r0, #24]
   197c2:	2b01      	cmp	r3, #1
   197c4:	d104      	bne.n	197d0 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   197c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   197ca:	7818      	ldrb	r0, [r3, #0]
   197cc:	b2c0      	uxtb	r0, r0
   197ce:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   197d0:	2004      	movs	r0, #4
}
   197d2:	4770      	bx	lr

000197d4 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   197d4:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   197d6:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   197d8:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   197da:	4620      	mov	r0, r4
   197dc:	f004 fc84 	bl	1e0e8 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   197e0:	4605      	mov	r5, r0
   197e2:	b118      	cbz	r0, 197ec <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   197e4:	4622      	mov	r2, r4
   197e6:	2100      	movs	r1, #0
   197e8:	f000 fdcc 	bl	1a384 <memset>
	}

	return vqs;
}
   197ec:	4628      	mov	r0, r5
   197ee:	bd38      	pop	{r3, r4, r5, pc}

000197f0 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   197f0:	b538      	push	{r3, r4, r5, lr}
   197f2:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   197f4:	2230      	movs	r2, #48	; 0x30
   197f6:	2100      	movs	r1, #0
   197f8:	f000 fdc4 	bl	1a384 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   197fc:	2218      	movs	r2, #24
   197fe:	2100      	movs	r1, #0
   19800:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   19804:	f000 fdbe 	bl	1a384 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   19808:	2218      	movs	r2, #24
   1980a:	2100      	movs	r1, #0
   1980c:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   19810:	f000 fdb8 	bl	1a384 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   19814:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   19818:	f7fd f9bc 	bl	16b94 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1981c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   19820:	f7fd f9b8 	bl	16b94 <virtqueue_free>
	vr->shm_io = 0;
   19824:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   19826:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1982a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1982e:	f003 f962 	bl	1caf6 <metal_device_close>
	metal_finish();
   19832:	f7fd f927 	bl	16a84 <metal_finish>
	if (io->ops.close)
   19836:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   19838:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1983c:	b10b      	cbz	r3, 19842 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1983e:	4628      	mov	r0, r5
   19840:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   19842:	2238      	movs	r2, #56	; 0x38
   19844:	2100      	movs	r1, #0
   19846:	4628      	mov	r0, r5
   19848:	f000 fd9c 	bl	1a384 <memset>

	return 0;
}
   1984c:	2000      	movs	r0, #0
   1984e:	bd38      	pop	{r3, r4, r5, pc}

00019850 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   19850:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   19852:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   19854:	bf5f      	itttt	pl
   19856:	6803      	ldrpl	r3, [r0, #0]
   19858:	8842      	ldrhpl	r2, [r0, #2]
   1985a:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   1985e:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   19862:	bf5d      	ittte	pl
   19864:	3017      	addpl	r0, #23
   19866:	f020 0007 	bicpl.w	r0, r0, #7
   1986a:	0880      	lsrpl	r0, r0, #2
	return 0;
   1986c:	2000      	movmi	r0, #0
}
   1986e:	4770      	bx	lr

00019870 <dummy_timestamp>:
}
   19870:	2000      	movs	r0, #0
   19872:	4770      	bx	lr

00019874 <default_get_timestamp>:
   19874:	f003 b86a 	b.w	1c94c <sys_clock_cycle_get_32>

00019878 <atomic_inc>:
{
   19878:	4603      	mov	r3, r0
}
   1987a:	e8d3 0fef 	ldaex	r0, [r3]
   1987e:	1c42      	adds	r2, r0, #1
   19880:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19884:	2900      	cmp	r1, #0
   19886:	d1f8      	bne.n	1987a <atomic_inc+0x2>
   19888:	4770      	bx	lr

0001988a <z_log_vprintk>:
{
   1988a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   1988c:	2300      	movs	r3, #0
   1988e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19892:	461a      	mov	r2, r3
   19894:	4619      	mov	r1, r3
   19896:	4618      	mov	r0, r3
   19898:	e9cd 3300 	strd	r3, r3, [sp]
   1989c:	f7f1 fb8e 	bl	afbc <z_impl_z_log_msg_runtime_vcreate>
}
   198a0:	b005      	add	sp, #20
   198a2:	f85d fb04 	ldr.w	pc, [sp], #4

000198a6 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   198a6:	2001      	movs	r0, #1
   198a8:	f7f1 b94c 	b.w	ab44 <z_log_dropped>

000198ac <z_log_get_tag>:
}
   198ac:	2000      	movs	r0, #0
   198ae:	4770      	bx	lr

000198b0 <z_cbprintf_cpy>:
{
   198b0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   198b2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   198b6:	1b9b      	subs	r3, r3, r6
   198b8:	428b      	cmp	r3, r1
{
   198ba:	460c      	mov	r4, r1
   198bc:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   198be:	d30a      	bcc.n	198d6 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   198c0:	6813      	ldr	r3, [r2, #0]
   198c2:	460a      	mov	r2, r1
   198c4:	4601      	mov	r1, r0
   198c6:	1998      	adds	r0, r3, r6
   198c8:	f000 fd51 	bl	1a36e <memcpy>
	return len;
   198cc:	4620      	mov	r0, r4
	desc->off += len;
   198ce:	68ab      	ldr	r3, [r5, #8]
   198d0:	4423      	add	r3, r4
   198d2:	60ab      	str	r3, [r5, #8]
}
   198d4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   198d6:	f06f 001b 	mvn.w	r0, #27
   198da:	e7fb      	b.n	198d4 <z_cbprintf_cpy+0x24>

000198dc <z_log_msg_finalize>:
{
   198dc:	b570      	push	{r4, r5, r6, lr}
   198de:	460e      	mov	r6, r1
   198e0:	4615      	mov	r5, r2
   198e2:	4619      	mov	r1, r3
	if (!msg) {
   198e4:	4604      	mov	r4, r0
   198e6:	b918      	cbnz	r0, 198f0 <z_log_msg_finalize+0x14>
}
   198e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   198ec:	f7f1 b92a 	b.w	ab44 <z_log_dropped>
	if (data) {
   198f0:	b133      	cbz	r3, 19900 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   198f2:	f3c2 234a 	ubfx	r3, r2, #9, #11
   198f6:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   198f8:	0d12      	lsrs	r2, r2, #20
   198fa:	4418      	add	r0, r3
   198fc:	f000 fd37 	bl	1a36e <memcpy>
	msg->hdr.source = source;
   19900:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   19904:	4620      	mov	r0, r4
}
   19906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1990a:	f7f1 ba9f 	b.w	ae4c <z_log_msg_commit>

0001990e <buffer_write>:
{
   1990e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19910:	4606      	mov	r6, r0
   19912:	460d      	mov	r5, r1
   19914:	4614      	mov	r4, r2
   19916:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   19918:	4621      	mov	r1, r4
   1991a:	4628      	mov	r0, r5
   1991c:	463a      	mov	r2, r7
   1991e:	47b0      	blx	r6
	} while (len != 0);
   19920:	1a24      	subs	r4, r4, r0
		buf += processed;
   19922:	4405      	add	r5, r0
	} while (len != 0);
   19924:	d1f8      	bne.n	19918 <buffer_write+0xa>
}
   19926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019928 <cbvprintf>:
{
   19928:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1992a:	2400      	movs	r4, #0
   1992c:	9400      	str	r4, [sp, #0]
   1992e:	f7ef ffa3 	bl	9878 <z_cbvprintf_impl>
}
   19932:	b002      	add	sp, #8
   19934:	bd10      	pop	{r4, pc}

00019936 <log_output_flush>:
{
   19936:	b510      	push	{r4, lr}
		     output->control_block->offset,
   19938:	6842      	ldr	r2, [r0, #4]
{
   1993a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1993c:	e9d2 2300 	ldrd	r2, r3, [r2]
   19940:	6881      	ldr	r1, [r0, #8]
   19942:	6800      	ldr	r0, [r0, #0]
   19944:	f7ff ffe3 	bl	1990e <buffer_write>
	output->control_block->offset = 0;
   19948:	2200      	movs	r2, #0
   1994a:	6863      	ldr	r3, [r4, #4]
   1994c:	601a      	str	r2, [r3, #0]
}
   1994e:	bd10      	pop	{r4, pc}

00019950 <out_func>:
{
   19950:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   19952:	684b      	ldr	r3, [r1, #4]
{
   19954:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   19956:	681a      	ldr	r2, [r3, #0]
   19958:	68cb      	ldr	r3, [r1, #12]
{
   1995a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1995c:	429a      	cmp	r2, r3
   1995e:	d102      	bne.n	19966 <out_func+0x16>
		log_output_flush(out_ctx);
   19960:	4608      	mov	r0, r1
   19962:	f7ff ffe8 	bl	19936 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19966:	6863      	ldr	r3, [r4, #4]
   19968:	e8d3 2fef 	ldaex	r2, [r3]
   1996c:	1c51      	adds	r1, r2, #1
   1996e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   19972:	2800      	cmp	r0, #0
   19974:	d1f8      	bne.n	19968 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   19976:	68a3      	ldr	r3, [r4, #8]
}
   19978:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1997a:	549d      	strb	r5, [r3, r2]
}
   1997c:	bd38      	pop	{r3, r4, r5, pc}

0001997e <cr_out_func>:
	if (c == '\n') {
   1997e:	280a      	cmp	r0, #10
{
   19980:	b538      	push	{r3, r4, r5, lr}
   19982:	4604      	mov	r4, r0
   19984:	460d      	mov	r5, r1
	if (c == '\n') {
   19986:	d102      	bne.n	1998e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   19988:	200d      	movs	r0, #13
   1998a:	f7ff ffe1 	bl	19950 <out_func>
	out_func(c, ctx);
   1998e:	4629      	mov	r1, r5
   19990:	4620      	mov	r0, r4
   19992:	f7ff ffdd 	bl	19950 <out_func>
}
   19996:	2000      	movs	r0, #0
   19998:	bd38      	pop	{r3, r4, r5, pc}

0001999a <log_backend_uart_init>:
}
   1999a:	4770      	bx	lr

0001999c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1999c:	b538      	push	{r3, r4, r5, lr}
   1999e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   199a0:	42ab      	cmp	r3, r5
{
   199a2:	4611      	mov	r1, r2
   199a4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   199a6:	d804      	bhi.n	199b2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   199a8:	461a      	mov	r2, r3
   199aa:	f000 fce0 	bl	1a36e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   199ae:	4620      	mov	r0, r4
   199b0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   199b2:	2400      	movs	r4, #0
   199b4:	e7fb      	b.n	199ae <_copy+0x12>

000199b6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   199b6:	f000 bce5 	b.w	1a384 <memset>

000199ba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   199ba:	09c3      	lsrs	r3, r0, #7
   199bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   199c0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   199c4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   199c8:	b2c0      	uxtb	r0, r0
   199ca:	4770      	bx	lr

000199cc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   199cc:	78cb      	ldrb	r3, [r1, #3]
   199ce:	7802      	ldrb	r2, [r0, #0]
   199d0:	4053      	eors	r3, r2
   199d2:	7003      	strb	r3, [r0, #0]
   199d4:	884b      	ldrh	r3, [r1, #2]
   199d6:	7842      	ldrb	r2, [r0, #1]
   199d8:	4053      	eors	r3, r2
   199da:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   199dc:	680a      	ldr	r2, [r1, #0]
   199de:	7883      	ldrb	r3, [r0, #2]
   199e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   199e4:	7083      	strb	r3, [r0, #2]
   199e6:	680a      	ldr	r2, [r1, #0]
   199e8:	78c3      	ldrb	r3, [r0, #3]
   199ea:	4053      	eors	r3, r2
   199ec:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   199ee:	79cb      	ldrb	r3, [r1, #7]
   199f0:	7902      	ldrb	r2, [r0, #4]
   199f2:	4053      	eors	r3, r2
   199f4:	7103      	strb	r3, [r0, #4]
   199f6:	88cb      	ldrh	r3, [r1, #6]
   199f8:	7942      	ldrb	r2, [r0, #5]
   199fa:	4053      	eors	r3, r2
   199fc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   199fe:	684a      	ldr	r2, [r1, #4]
   19a00:	7983      	ldrb	r3, [r0, #6]
   19a02:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19a06:	7183      	strb	r3, [r0, #6]
   19a08:	684a      	ldr	r2, [r1, #4]
   19a0a:	79c3      	ldrb	r3, [r0, #7]
   19a0c:	4053      	eors	r3, r2
   19a0e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   19a10:	7acb      	ldrb	r3, [r1, #11]
   19a12:	7a02      	ldrb	r2, [r0, #8]
   19a14:	4053      	eors	r3, r2
   19a16:	7203      	strb	r3, [r0, #8]
   19a18:	7a42      	ldrb	r2, [r0, #9]
   19a1a:	894b      	ldrh	r3, [r1, #10]
   19a1c:	4053      	eors	r3, r2
   19a1e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   19a20:	688a      	ldr	r2, [r1, #8]
   19a22:	7a83      	ldrb	r3, [r0, #10]
   19a24:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19a28:	7283      	strb	r3, [r0, #10]
   19a2a:	688a      	ldr	r2, [r1, #8]
   19a2c:	7ac3      	ldrb	r3, [r0, #11]
   19a2e:	4053      	eors	r3, r2
   19a30:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   19a32:	7bcb      	ldrb	r3, [r1, #15]
   19a34:	7b02      	ldrb	r2, [r0, #12]
   19a36:	4053      	eors	r3, r2
   19a38:	7303      	strb	r3, [r0, #12]
   19a3a:	89cb      	ldrh	r3, [r1, #14]
   19a3c:	7b42      	ldrb	r2, [r0, #13]
   19a3e:	4053      	eors	r3, r2
   19a40:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   19a42:	68ca      	ldr	r2, [r1, #12]
   19a44:	7b83      	ldrb	r3, [r0, #14]
   19a46:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19a4a:	7383      	strb	r3, [r0, #14]
   19a4c:	68ca      	ldr	r2, [r1, #12]
   19a4e:	7bc3      	ldrb	r3, [r0, #15]
   19a50:	4053      	eors	r3, r2
   19a52:	73c3      	strb	r3, [r0, #15]
}
   19a54:	4770      	bx	lr

00019a56 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   19a56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19a58:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19a5a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19a5c:	f88d 2000 	strb.w	r2, [sp]
   19a60:	7942      	ldrb	r2, [r0, #5]
   19a62:	f88d 2001 	strb.w	r2, [sp, #1]
   19a66:	7a82      	ldrb	r2, [r0, #10]
   19a68:	f88d 2002 	strb.w	r2, [sp, #2]
   19a6c:	7bc2      	ldrb	r2, [r0, #15]
   19a6e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19a72:	7902      	ldrb	r2, [r0, #4]
   19a74:	f88d 2004 	strb.w	r2, [sp, #4]
   19a78:	7a42      	ldrb	r2, [r0, #9]
   19a7a:	f88d 2005 	strb.w	r2, [sp, #5]
   19a7e:	7b82      	ldrb	r2, [r0, #14]
   19a80:	f88d 2006 	strb.w	r2, [sp, #6]
   19a84:	78c2      	ldrb	r2, [r0, #3]
   19a86:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19a8a:	7a02      	ldrb	r2, [r0, #8]
   19a8c:	f88d 2008 	strb.w	r2, [sp, #8]
   19a90:	7b42      	ldrb	r2, [r0, #13]
   19a92:	f88d 2009 	strb.w	r2, [sp, #9]
   19a96:	7882      	ldrb	r2, [r0, #2]
   19a98:	f88d 200a 	strb.w	r2, [sp, #10]
   19a9c:	79c2      	ldrb	r2, [r0, #7]
   19a9e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19aa2:	7b02      	ldrb	r2, [r0, #12]
   19aa4:	f88d 200c 	strb.w	r2, [sp, #12]
   19aa8:	7842      	ldrb	r2, [r0, #1]
   19aaa:	f88d 200d 	strb.w	r2, [sp, #13]
   19aae:	7982      	ldrb	r2, [r0, #6]
   19ab0:	f88d 200e 	strb.w	r2, [sp, #14]
   19ab4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19ab8:	2310      	movs	r3, #16
   19aba:	466a      	mov	r2, sp
   19abc:	4619      	mov	r1, r3
   19abe:	f7ff ff6d 	bl	1999c <_copy>
}
   19ac2:	b005      	add	sp, #20
   19ac4:	f85d fb04 	ldr.w	pc, [sp], #4

00019ac8 <mult_row_column>:
{
   19ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19aca:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19acc:	7808      	ldrb	r0, [r1, #0]
{
   19ace:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19ad0:	f7ff ff73 	bl	199ba <_double_byte>
   19ad4:	4605      	mov	r5, r0
   19ad6:	7860      	ldrb	r0, [r4, #1]
   19ad8:	f7ff ff6f 	bl	199ba <_double_byte>
   19adc:	78a2      	ldrb	r2, [r4, #2]
   19ade:	7863      	ldrb	r3, [r4, #1]
   19ae0:	4053      	eors	r3, r2
   19ae2:	78e2      	ldrb	r2, [r4, #3]
   19ae4:	4053      	eors	r3, r2
   19ae6:	405d      	eors	r5, r3
   19ae8:	4068      	eors	r0, r5
   19aea:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   19aec:	7860      	ldrb	r0, [r4, #1]
   19aee:	7827      	ldrb	r7, [r4, #0]
   19af0:	f7ff ff63 	bl	199ba <_double_byte>
   19af4:	4605      	mov	r5, r0
   19af6:	78a0      	ldrb	r0, [r4, #2]
   19af8:	f7ff ff5f 	bl	199ba <_double_byte>
   19afc:	78a3      	ldrb	r3, [r4, #2]
   19afe:	405f      	eors	r7, r3
   19b00:	78e3      	ldrb	r3, [r4, #3]
   19b02:	405f      	eors	r7, r3
   19b04:	407d      	eors	r5, r7
   19b06:	4068      	eors	r0, r5
   19b08:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   19b0a:	7863      	ldrb	r3, [r4, #1]
   19b0c:	7827      	ldrb	r7, [r4, #0]
   19b0e:	78a0      	ldrb	r0, [r4, #2]
   19b10:	405f      	eors	r7, r3
   19b12:	f7ff ff52 	bl	199ba <_double_byte>
   19b16:	4605      	mov	r5, r0
   19b18:	78e0      	ldrb	r0, [r4, #3]
   19b1a:	f7ff ff4e 	bl	199ba <_double_byte>
   19b1e:	78e3      	ldrb	r3, [r4, #3]
   19b20:	405f      	eors	r7, r3
   19b22:	407d      	eors	r5, r7
   19b24:	4068      	eors	r0, r5
   19b26:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   19b28:	7820      	ldrb	r0, [r4, #0]
   19b2a:	f7ff ff46 	bl	199ba <_double_byte>
   19b2e:	7862      	ldrb	r2, [r4, #1]
   19b30:	7823      	ldrb	r3, [r4, #0]
   19b32:	4053      	eors	r3, r2
   19b34:	78a2      	ldrb	r2, [r4, #2]
   19b36:	4053      	eors	r3, r2
   19b38:	ea80 0503 	eor.w	r5, r0, r3
   19b3c:	78e0      	ldrb	r0, [r4, #3]
   19b3e:	f7ff ff3c 	bl	199ba <_double_byte>
   19b42:	b2ed      	uxtb	r5, r5
   19b44:	4045      	eors	r5, r0
   19b46:	70f5      	strb	r5, [r6, #3]
}
   19b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019b4a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   19b4a:	b570      	push	{r4, r5, r6, lr}
   19b4c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   19b4e:	4605      	mov	r5, r0
{
   19b50:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   19b52:	2800      	cmp	r0, #0
   19b54:	d049      	beq.n	19bea <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   19b56:	2900      	cmp	r1, #0
   19b58:	d049      	beq.n	19bee <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   19b5a:	2a00      	cmp	r2, #0
   19b5c:	d049      	beq.n	19bf2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   19b5e:	2310      	movs	r3, #16
   19b60:	460a      	mov	r2, r1
   19b62:	4668      	mov	r0, sp
   19b64:	4619      	mov	r1, r3
   19b66:	f7ff ff19 	bl	1999c <_copy>
	add_round_key(state, s->words);
   19b6a:	4621      	mov	r1, r4
   19b6c:	4668      	mov	r0, sp
   19b6e:	f7ff ff2d 	bl	199cc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   19b72:	3410      	adds	r4, #16
   19b74:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   19b78:	4668      	mov	r0, sp
   19b7a:	f7f1 fdb7 	bl	b6ec <sub_bytes>
		shift_rows(state);
   19b7e:	4668      	mov	r0, sp
   19b80:	f7ff ff69 	bl	19a56 <shift_rows>
	mult_row_column(t, s);
   19b84:	4669      	mov	r1, sp
   19b86:	a804      	add	r0, sp, #16
   19b88:	f7ff ff9e 	bl	19ac8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   19b8c:	a901      	add	r1, sp, #4
   19b8e:	a805      	add	r0, sp, #20
   19b90:	f7ff ff9a 	bl	19ac8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   19b94:	a902      	add	r1, sp, #8
   19b96:	a806      	add	r0, sp, #24
   19b98:	f7ff ff96 	bl	19ac8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   19b9c:	a903      	add	r1, sp, #12
   19b9e:	a807      	add	r0, sp, #28
   19ba0:	f7ff ff92 	bl	19ac8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19ba4:	2310      	movs	r3, #16
   19ba6:	4668      	mov	r0, sp
   19ba8:	4619      	mov	r1, r3
   19baa:	eb0d 0203 	add.w	r2, sp, r3
   19bae:	f7ff fef5 	bl	1999c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   19bb2:	4621      	mov	r1, r4
   19bb4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   19bb6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   19bb8:	f7ff ff08 	bl	199cc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   19bbc:	42b4      	cmp	r4, r6
   19bbe:	d1db      	bne.n	19b78 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   19bc0:	f7f1 fd94 	bl	b6ec <sub_bytes>
	shift_rows(state);
   19bc4:	4668      	mov	r0, sp
   19bc6:	f7ff ff46 	bl	19a56 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   19bca:	4621      	mov	r1, r4
   19bcc:	4668      	mov	r0, sp
   19bce:	f7ff fefd 	bl	199cc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   19bd2:	2310      	movs	r3, #16
   19bd4:	466a      	mov	r2, sp
   19bd6:	4619      	mov	r1, r3
   19bd8:	4628      	mov	r0, r5
   19bda:	f7ff fedf 	bl	1999c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   19bde:	4668      	mov	r0, sp
   19be0:	2210      	movs	r2, #16
   19be2:	2100      	movs	r1, #0
   19be4:	f7ff fee7 	bl	199b6 <_set>

	return TC_CRYPTO_SUCCESS;
   19be8:	2001      	movs	r0, #1
}
   19bea:	b008      	add	sp, #32
   19bec:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19bee:	4608      	mov	r0, r1
   19bf0:	e7fb      	b.n	19bea <tc_aes_encrypt+0xa0>
   19bf2:	4610      	mov	r0, r2
   19bf4:	e7f9      	b.n	19bea <tc_aes_encrypt+0xa0>

00019bf6 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19bf6:	460a      	mov	r2, r1
{
   19bf8:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19bfa:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   19bfe:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19c00:	2b00      	cmp	r3, #0
   19c02:	bfac      	ite	ge
   19c04:	2300      	movge	r3, #0
   19c06:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   19c08:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19c0c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   19c10:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   19c12:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   19c16:	d002      	beq.n	19c1e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   19c18:	7813      	ldrb	r3, [r2, #0]
   19c1a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   19c1c:	e7f4      	b.n	19c08 <gf_double+0x12>
	}
}
   19c1e:	bd10      	pop	{r4, pc}

00019c20 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   19c20:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   19c22:	b120      	cbz	r0, 19c2e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   19c24:	2258      	movs	r2, #88	; 0x58
   19c26:	2100      	movs	r1, #0
   19c28:	f7ff fec5 	bl	199b6 <_set>
   19c2c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19c2e:	bd08      	pop	{r3, pc}

00019c30 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   19c30:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19c32:	4604      	mov	r4, r0
   19c34:	b188      	cbz	r0, 19c5a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19c36:	2210      	movs	r2, #16
   19c38:	2100      	movs	r1, #0
   19c3a:	f7ff febc 	bl	199b6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   19c3e:	2210      	movs	r2, #16
   19c40:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19c44:	2100      	movs	r1, #0
   19c46:	f7ff feb6 	bl	199b6 <_set>
	s->leftover_offset = 0;
   19c4a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   19c4c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   19c4e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   19c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19c54:	2001      	movs	r0, #1
   19c56:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   19c5a:	bd10      	pop	{r4, pc}

00019c5c <tc_cmac_setup>:
{
   19c5c:	b570      	push	{r4, r5, r6, lr}
   19c5e:	4604      	mov	r4, r0
   19c60:	460d      	mov	r5, r1
   19c62:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   19c64:	b310      	cbz	r0, 19cac <tc_cmac_setup+0x50>
   19c66:	b311      	cbz	r1, 19cae <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   19c68:	2258      	movs	r2, #88	; 0x58
   19c6a:	2100      	movs	r1, #0
   19c6c:	f7ff fea3 	bl	199b6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   19c70:	4629      	mov	r1, r5
   19c72:	4630      	mov	r0, r6
	s->sched = sched;
   19c74:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   19c76:	f7f1 fd45 	bl	b704 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19c7a:	2210      	movs	r2, #16
   19c7c:	2100      	movs	r1, #0
   19c7e:	4620      	mov	r0, r4
   19c80:	f7ff fe99 	bl	199b6 <_set>
	gf_double (s->K1, s->iv);
   19c84:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   19c88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19c8a:	4621      	mov	r1, r4
   19c8c:	4620      	mov	r0, r4
   19c8e:	f7ff ff5c 	bl	19b4a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19c92:	4621      	mov	r1, r4
   19c94:	4628      	mov	r0, r5
   19c96:	f7ff ffae 	bl	19bf6 <gf_double>
	gf_double (s->K2, s->K1);
   19c9a:	4629      	mov	r1, r5
   19c9c:	f104 0020 	add.w	r0, r4, #32
   19ca0:	f7ff ffa9 	bl	19bf6 <gf_double>
	tc_cmac_init(s);
   19ca4:	4620      	mov	r0, r4
   19ca6:	f7ff ffc3 	bl	19c30 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   19caa:	2001      	movs	r0, #1
}
   19cac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19cae:	4608      	mov	r0, r1
   19cb0:	e7fc      	b.n	19cac <tc_cmac_setup+0x50>

00019cb2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   19cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cb6:	460e      	mov	r6, r1
   19cb8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19cba:	4604      	mov	r4, r0
   19cbc:	2800      	cmp	r0, #0
   19cbe:	d060      	beq.n	19d82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   19cc0:	b1fa      	cbz	r2, 19d02 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   19cc2:	2900      	cmp	r1, #0
   19cc4:	d05d      	beq.n	19d82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   19cc6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   19cca:	ea53 0102 	orrs.w	r1, r3, r2
   19cce:	d058      	beq.n	19d82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   19cd0:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   19cd2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   19cd6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   19cda:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   19cde:	f1b8 0f00 	cmp.w	r8, #0
   19ce2:	d02c      	beq.n	19d3e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19ce4:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19ce8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   19cec:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19cee:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   19cf0:	d20a      	bcs.n	19d08 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19cf2:	462b      	mov	r3, r5
   19cf4:	4632      	mov	r2, r6
   19cf6:	4629      	mov	r1, r5
   19cf8:	f7ff fe50 	bl	1999c <_copy>
			s->leftover_offset += data_length;
   19cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19cfe:	442b      	add	r3, r5
   19d00:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   19d02:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   19d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   19d08:	463b      	mov	r3, r7
   19d0a:	4632      	mov	r2, r6
   19d0c:	4639      	mov	r1, r7
   19d0e:	f7ff fe45 	bl	1999c <_copy>
		s->leftover_offset = 0;
   19d12:	2300      	movs	r3, #0
   19d14:	3d10      	subs	r5, #16
   19d16:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19d18:	4445      	add	r5, r8
		data += remaining_space;
   19d1a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d1c:	1e63      	subs	r3, r4, #1
   19d1e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   19d22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19d26:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d2a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   19d2c:	ea82 0200 	eor.w	r2, r2, r0
   19d30:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d32:	d1f6      	bne.n	19d22 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19d34:	4621      	mov	r1, r4
   19d36:	4620      	mov	r0, r4
   19d38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19d3a:	f7ff ff06 	bl	19b4a <tc_aes_encrypt>
   19d3e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   19d42:	2d10      	cmp	r5, #16
   19d44:	d80a      	bhi.n	19d5c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   19d46:	2d00      	cmp	r5, #0
   19d48:	d0db      	beq.n	19d02 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   19d4a:	462b      	mov	r3, r5
   19d4c:	4632      	mov	r2, r6
   19d4e:	4629      	mov	r1, r5
   19d50:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19d54:	f7ff fe22 	bl	1999c <_copy>
		s->leftover_offset = data_length;
   19d58:	6465      	str	r5, [r4, #68]	; 0x44
   19d5a:	e7d2      	b.n	19d02 <tc_cmac_update+0x50>
   19d5c:	1e63      	subs	r3, r4, #1
   19d5e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   19d60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19d64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d68:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   19d6a:	ea82 0200 	eor.w	r2, r2, r0
   19d6e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d70:	d1f6      	bne.n	19d60 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19d72:	4621      	mov	r1, r4
   19d74:	4620      	mov	r0, r4
   19d76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19d78:	f7ff fee7 	bl	19b4a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   19d7c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   19d7e:	3d10      	subs	r5, #16
   19d80:	e7df      	b.n	19d42 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   19d82:	2000      	movs	r0, #0
   19d84:	e7be      	b.n	19d04 <tc_cmac_update+0x52>

00019d86 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   19d86:	b570      	push	{r4, r5, r6, lr}
   19d88:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19d8a:	4605      	mov	r5, r0
   19d8c:	b1f0      	cbz	r0, 19dcc <tc_cmac_final+0x46>
   19d8e:	b371      	cbz	r1, 19dee <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   19d90:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   19d92:	2a10      	cmp	r2, #16
   19d94:	d11b      	bne.n	19dce <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   19d96:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19d98:	1e63      	subs	r3, r4, #1
   19d9a:	3901      	subs	r1, #1
   19d9c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19da0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19da4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19da8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19daa:	ea82 0206 	eor.w	r2, r2, r6
   19dae:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   19db2:	ea82 0206 	eor.w	r2, r2, r6
   19db6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19db8:	d1f2      	bne.n	19da0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   19dba:	4621      	mov	r1, r4
   19dbc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19dbe:	4628      	mov	r0, r5
   19dc0:	f7ff fec3 	bl	19b4a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   19dc4:	4620      	mov	r0, r4
   19dc6:	f7ff ff2b 	bl	19c20 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   19dca:	2001      	movs	r0, #1
}
   19dcc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   19dce:	f102 0030 	add.w	r0, r2, #48	; 0x30
   19dd2:	2100      	movs	r1, #0
   19dd4:	f1c2 0210 	rsb	r2, r2, #16
   19dd8:	4420      	add	r0, r4
   19dda:	f7ff fdec 	bl	199b6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   19dde:	2280      	movs	r2, #128	; 0x80
   19de0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   19de2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   19de6:	4423      	add	r3, r4
   19de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   19dec:	e7d4      	b.n	19d98 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   19dee:	4608      	mov	r0, r1
   19df0:	e7ec      	b.n	19dcc <tc_cmac_final+0x46>

00019df2 <tc_sha256_update>:
{
   19df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19df4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   19df6:	b110      	cbz	r0, 19dfe <tc_sha256_update+0xc>
   19df8:	b1f9      	cbz	r1, 19e3a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   19dfa:	b90a      	cbnz	r2, 19e00 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   19dfc:	2001      	movs	r0, #1
}
   19dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   19e00:	2700      	movs	r7, #0
   19e02:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   19e04:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   19e08:	6e83      	ldr	r3, [r0, #104]	; 0x68
   19e0a:	1c5a      	adds	r2, r3, #1
   19e0c:	6682      	str	r2, [r0, #104]	; 0x68
   19e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   19e12:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   19e14:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   19e16:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   19e1a:	d90b      	bls.n	19e34 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   19e1c:	4631      	mov	r1, r6
   19e1e:	f7f1 fcc5 	bl	b7ac <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   19e22:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   19e26:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   19e2a:	f142 0200 	adc.w	r2, r2, #0
   19e2e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   19e32:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   19e34:	42a5      	cmp	r5, r4
   19e36:	d1e7      	bne.n	19e08 <tc_sha256_update+0x16>
   19e38:	e7e0      	b.n	19dfc <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   19e3a:	4608      	mov	r0, r1
   19e3c:	e7df      	b.n	19dfe <tc_sha256_update+0xc>

00019e3e <tc_sha256_final>:
{
   19e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e40:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   19e42:	4605      	mov	r5, r0
   19e44:	2800      	cmp	r0, #0
   19e46:	d054      	beq.n	19ef2 <tc_sha256_final+0xb4>
   19e48:	2900      	cmp	r1, #0
   19e4a:	d053      	beq.n	19ef4 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   19e4c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   19e4e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   19e52:	00d8      	lsls	r0, r3, #3
   19e54:	1812      	adds	r2, r2, r0
   19e56:	f141 0100 	adc.w	r1, r1, #0
   19e5a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   19e5e:	2280      	movs	r2, #128	; 0x80
   19e60:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   19e62:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   19e64:	4423      	add	r3, r4
   19e66:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   19e68:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   19e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   19e70:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   19e74:	d90a      	bls.n	19e8c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   19e76:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   19e7a:	4639      	mov	r1, r7
   19e7c:	4430      	add	r0, r6
   19e7e:	f7ff fd9a 	bl	199b6 <_set>
		compress(s->iv, s->leftover);
   19e82:	4631      	mov	r1, r6
   19e84:	4620      	mov	r0, r4
   19e86:	f7f1 fc91 	bl	b7ac <compress>
		s->leftover_offset = 0;
   19e8a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   19e8c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   19e8e:	2100      	movs	r1, #0
   19e90:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   19e94:	4430      	add	r0, r6
   19e96:	f7ff fd8e 	bl	199b6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   19e9a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   19e9c:	4631      	mov	r1, r6
   19e9e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   19ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   19ea2:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   19ea4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   19ea6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   19eaa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   19eae:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   19eb0:	0e1b      	lsrs	r3, r3, #24
   19eb2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   19eb6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   19eb8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   19ebc:	f7f1 fc76 	bl	b7ac <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19ec0:	1d2b      	adds	r3, r5, #4
   19ec2:	1f21      	subs	r1, r4, #4
   19ec4:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   19ec6:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19eca:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   19ecc:	0e10      	lsrs	r0, r2, #24
   19ece:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   19ed2:	0c10      	lsrs	r0, r2, #16
   19ed4:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   19ed8:	0a10      	lsrs	r0, r2, #8
   19eda:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   19ede:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19ee2:	42ab      	cmp	r3, r5
   19ee4:	d1ef      	bne.n	19ec6 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   19ee6:	4620      	mov	r0, r4
   19ee8:	2270      	movs	r2, #112	; 0x70
   19eea:	2100      	movs	r1, #0
   19eec:	f7ff fd63 	bl	199b6 <_set>
	return TC_CRYPTO_SUCCESS;
   19ef0:	2001      	movs	r0, #1
}
   19ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   19ef4:	4608      	mov	r0, r1
   19ef6:	e7fc      	b.n	19ef2 <tc_sha256_final+0xb4>

00019ef8 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   19ef8:	b530      	push	{r4, r5, lr}
   19efa:	1e43      	subs	r3, r0, #1
   19efc:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   19efe:	42a9      	cmp	r1, r5
   19f00:	d106      	bne.n	19f10 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   19f02:	2136      	movs	r1, #54	; 0x36
   19f04:	245c      	movs	r4, #92	; 0x5c
   19f06:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   19f08:	1a13      	subs	r3, r2, r0
   19f0a:	2b3f      	cmp	r3, #63	; 0x3f
   19f0c:	d90c      	bls.n	19f28 <rekey+0x30>
	}
}
   19f0e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   19f10:	780c      	ldrb	r4, [r1, #0]
   19f12:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   19f16:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   19f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   19f1e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   19f22:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   19f26:	e7ea      	b.n	19efe <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   19f28:	f802 1b01 	strb.w	r1, [r2], #1
   19f2c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   19f30:	e7ea      	b.n	19f08 <rekey+0x10>

00019f32 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   19f32:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f34:	460e      	mov	r6, r1
   19f36:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   19f38:	4605      	mov	r5, r0
{
   19f3a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   19f3c:	b1b8      	cbz	r0, 19f6e <tc_hmac_set_key+0x3c>
   19f3e:	b341      	cbz	r1, 19f92 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   19f40:	b34a      	cbz	r2, 19f96 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   19f42:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   19f44:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   19f48:	d813      	bhi.n	19f72 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   19f4a:	a810      	add	r0, sp, #64	; 0x40
   19f4c:	f7f1 fd18 	bl	b980 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   19f50:	4622      	mov	r2, r4
   19f52:	4669      	mov	r1, sp
   19f54:	a810      	add	r0, sp, #64	; 0x40
   19f56:	f7ff ff4c 	bl	19df2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   19f5a:	a910      	add	r1, sp, #64	; 0x40
   19f5c:	a834      	add	r0, sp, #208	; 0xd0
   19f5e:	f7ff ff6e 	bl	19e3e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   19f62:	4622      	mov	r2, r4
   19f64:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   19f66:	4638      	mov	r0, r7
   19f68:	f7ff ffc6 	bl	19ef8 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   19f6c:	2001      	movs	r0, #1
}
   19f6e:	b04d      	add	sp, #308	; 0x134
   19f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   19f72:	f7f1 fd05 	bl	b980 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   19f76:	4622      	mov	r2, r4
   19f78:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   19f7a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   19f7e:	4628      	mov	r0, r5
   19f80:	f7ff ff37 	bl	19df2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   19f84:	4629      	mov	r1, r5
   19f86:	4620      	mov	r0, r4
   19f88:	f7ff ff59 	bl	19e3e <tc_sha256_final>
		rekey(ctx->key,
   19f8c:	2220      	movs	r2, #32
   19f8e:	4621      	mov	r1, r4
   19f90:	e7e9      	b.n	19f66 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   19f92:	4608      	mov	r0, r1
   19f94:	e7eb      	b.n	19f6e <tc_hmac_set_key+0x3c>
   19f96:	4610      	mov	r0, r2
   19f98:	e7e9      	b.n	19f6e <tc_hmac_set_key+0x3c>

00019f9a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   19f9a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   19f9c:	4604      	mov	r4, r0
   19f9e:	b140      	cbz	r0, 19fb2 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   19fa0:	f7f1 fcee 	bl	b980 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   19fa4:	2240      	movs	r2, #64	; 0x40
   19fa6:	4620      	mov	r0, r4
   19fa8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   19fac:	f7ff ff21 	bl	19df2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   19fb0:	2001      	movs	r0, #1
}
   19fb2:	bd10      	pop	{r4, pc}

00019fb4 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   19fb4:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   19fb6:	b110      	cbz	r0, 19fbe <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   19fb8:	f7ff ff1b 	bl	19df2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   19fbc:	2001      	movs	r0, #1
}
   19fbe:	bd08      	pop	{r3, pc}

00019fc0 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   19fc0:	b570      	push	{r4, r5, r6, lr}
   19fc2:	460e      	mov	r6, r1
   19fc4:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19fc6:	4605      	mov	r5, r0
   19fc8:	b1f0      	cbz	r0, 1a008 <tc_hmac_final+0x48>
   19fca:	2920      	cmp	r1, #32
   19fcc:	d11c      	bne.n	1a008 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   19fce:	b1ea      	cbz	r2, 1a00c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   19fd0:	4611      	mov	r1, r2
   19fd2:	f7ff ff34 	bl	19e3e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   19fd6:	4620      	mov	r0, r4
   19fd8:	f7f1 fcd2 	bl	b980 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   19fdc:	2240      	movs	r2, #64	; 0x40
   19fde:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   19fe2:	4620      	mov	r0, r4
   19fe4:	f7ff ff05 	bl	19df2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   19fe8:	4632      	mov	r2, r6
   19fea:	4629      	mov	r1, r5
   19fec:	4620      	mov	r0, r4
   19fee:	f7ff ff00 	bl	19df2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   19ff2:	4621      	mov	r1, r4
   19ff4:	4628      	mov	r0, r5
   19ff6:	f7ff ff22 	bl	19e3e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   19ffa:	4620      	mov	r0, r4
   19ffc:	22f0      	movs	r2, #240	; 0xf0
   19ffe:	2100      	movs	r1, #0
   1a000:	f7ff fcd9 	bl	199b6 <_set>

	return TC_CRYPTO_SUCCESS;
   1a004:	2001      	movs	r0, #1
}
   1a006:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a008:	2000      	movs	r0, #0
   1a00a:	e7fc      	b.n	1a006 <tc_hmac_final+0x46>
   1a00c:	4610      	mov	r0, r2
   1a00e:	e7fa      	b.n	1a006 <tc_hmac_final+0x46>

0001a010 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1a010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a014:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1a016:	f04f 0b01 	mov.w	fp, #1
{
   1a01a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1a01c:	2300      	movs	r3, #0
{
   1a01e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a020:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1a024:	4631      	mov	r1, r6
{
   1a026:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a028:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1a02a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1a02e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1a032:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a036:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a03a:	f7ff ff7a 	bl	19f32 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1a03e:	4620      	mov	r0, r4
   1a040:	f7ff ffab 	bl	19f9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a044:	2220      	movs	r2, #32
   1a046:	4629      	mov	r1, r5
   1a048:	4620      	mov	r0, r4
   1a04a:	f7ff ffb3 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1a04e:	465a      	mov	r2, fp
   1a050:	4620      	mov	r0, r4
   1a052:	f10d 0106 	add.w	r1, sp, #6
   1a056:	f7ff ffad 	bl	19fb4 <tc_hmac_update>

	if (data && datalen)
   1a05a:	f1b8 0f00 	cmp.w	r8, #0
   1a05e:	d007      	beq.n	1a070 <update+0x60>
   1a060:	f1b9 0f00 	cmp.w	r9, #0
   1a064:	d004      	beq.n	1a070 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1a066:	464a      	mov	r2, r9
   1a068:	4641      	mov	r1, r8
   1a06a:	4620      	mov	r0, r4
   1a06c:	f7ff ffa2 	bl	19fb4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1a070:	b13f      	cbz	r7, 1a082 <update+0x72>
   1a072:	f1ba 0f00 	cmp.w	sl, #0
   1a076:	d004      	beq.n	1a082 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1a078:	4652      	mov	r2, sl
   1a07a:	4639      	mov	r1, r7
   1a07c:	4620      	mov	r0, r4
   1a07e:	f7ff ff99 	bl	19fb4 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1a082:	4622      	mov	r2, r4
   1a084:	2120      	movs	r1, #32
   1a086:	4630      	mov	r0, r6
   1a088:	f7ff ff9a 	bl	19fc0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a08c:	2220      	movs	r2, #32
   1a08e:	4631      	mov	r1, r6
   1a090:	4620      	mov	r0, r4
   1a092:	f7ff ff4e 	bl	19f32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1a096:	4620      	mov	r0, r4
   1a098:	f7ff ff7f 	bl	19f9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a09c:	2220      	movs	r2, #32
   1a09e:	4629      	mov	r1, r5
   1a0a0:	4620      	mov	r0, r4
   1a0a2:	f7ff ff87 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a0a6:	4622      	mov	r2, r4
   1a0a8:	2120      	movs	r1, #32
   1a0aa:	4628      	mov	r0, r5
   1a0ac:	f7ff ff88 	bl	19fc0 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1a0b0:	f1b8 0f00 	cmp.w	r8, #0
   1a0b4:	d03a      	beq.n	1a12c <_flash_used+0xa4>
   1a0b6:	f1b9 0f00 	cmp.w	r9, #0
   1a0ba:	d037      	beq.n	1a12c <_flash_used+0xa4>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a0bc:	2220      	movs	r2, #32
   1a0be:	4631      	mov	r1, r6
   1a0c0:	4620      	mov	r0, r4
   1a0c2:	f7ff ff36 	bl	19f32 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	f7ff ff67 	bl	19f9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a0cc:	2220      	movs	r2, #32
   1a0ce:	4629      	mov	r1, r5
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	f7ff ff6f 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1a0d6:	2201      	movs	r2, #1
   1a0d8:	f10d 0107 	add.w	r1, sp, #7
   1a0dc:	4620      	mov	r0, r4
   1a0de:	f7ff ff69 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1a0e2:	464a      	mov	r2, r9
   1a0e4:	4641      	mov	r1, r8
   1a0e6:	4620      	mov	r0, r4
   1a0e8:	f7ff ff64 	bl	19fb4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1a0ec:	b13f      	cbz	r7, 1a0fe <_flash_used+0x76>
   1a0ee:	f1ba 0f00 	cmp.w	sl, #0
   1a0f2:	d004      	beq.n	1a0fe <_flash_used+0x76>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1a0f4:	4652      	mov	r2, sl
   1a0f6:	4639      	mov	r1, r7
   1a0f8:	4620      	mov	r0, r4
   1a0fa:	f7ff ff5b 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1a0fe:	4622      	mov	r2, r4
   1a100:	2120      	movs	r1, #32
   1a102:	4630      	mov	r0, r6
   1a104:	f7ff ff5c 	bl	19fc0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a108:	2220      	movs	r2, #32
   1a10a:	4631      	mov	r1, r6
   1a10c:	4620      	mov	r0, r4
   1a10e:	f7ff ff10 	bl	19f32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff ff41 	bl	19f9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a118:	2220      	movs	r2, #32
   1a11a:	4629      	mov	r1, r5
   1a11c:	4620      	mov	r0, r4
   1a11e:	f7ff ff49 	bl	19fb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a122:	4622      	mov	r2, r4
   1a124:	2120      	movs	r1, #32
   1a126:	4628      	mov	r0, r5
   1a128:	f7ff ff4a 	bl	19fc0 <tc_hmac_final>
}
   1a12c:	b003      	add	sp, #12
   1a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a132 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1a132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a134:	460c      	mov	r4, r1
   1a136:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1a138:	4605      	mov	r5, r0
   1a13a:	b1b0      	cbz	r0, 1a16a <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1a13c:	b1b9      	cbz	r1, 1a16e <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1a13e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1a140:	2220      	movs	r2, #32
   1a142:	2100      	movs	r1, #0
   1a144:	30f0      	adds	r0, #240	; 0xf0
   1a146:	f7ff fc36 	bl	199b6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1a14a:	2220      	movs	r2, #32
   1a14c:	2101      	movs	r1, #1
   1a14e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1a152:	f7ff fc30 	bl	199b6 <_set>
	update(prng, personalization, plen, 0, 0);
   1a156:	4628      	mov	r0, r5
   1a158:	4633      	mov	r3, r6
   1a15a:	463a      	mov	r2, r7
   1a15c:	4621      	mov	r1, r4
   1a15e:	9600      	str	r6, [sp, #0]
   1a160:	f7ff ff56 	bl	1a010 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1a164:	2001      	movs	r0, #1
	prng->countdown = 0;
   1a166:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1a16a:	b003      	add	sp, #12
   1a16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a16e:	4608      	mov	r0, r1
   1a170:	e7fb      	b.n	1a16a <tc_hmac_prng_init+0x38>

0001a172 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1a172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a174:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1a176:	4605      	mov	r5, r0
   1a178:	b180      	cbz	r0, 1a19c <tc_hmac_prng_reseed+0x2a>
   1a17a:	b179      	cbz	r1, 1a19c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1a17c:	2a1f      	cmp	r2, #31
   1a17e:	d90d      	bls.n	1a19c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1a180:	b153      	cbz	r3, 1a198 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1a182:	b16c      	cbz	r4, 1a1a0 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1a184:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1a186:	f7ff ff43 	bl	1a010 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1a18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	return TC_CRYPTO_SUCCESS;
   1a18e:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1a190:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1a194:	b003      	add	sp, #12
   1a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1a198:	9300      	str	r3, [sp, #0]
   1a19a:	e7f4      	b.n	1a186 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1a19c:	2000      	movs	r0, #0
   1a19e:	e7f9      	b.n	1a194 <tc_hmac_prng_reseed+0x22>
   1a1a0:	4620      	mov	r0, r4
   1a1a2:	e7f7      	b.n	1a194 <tc_hmac_prng_reseed+0x22>

0001a1a4 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1a1a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a1a8:	460d      	mov	r5, r1
   1a1aa:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1a1ac:	4680      	mov	r8, r0
   1a1ae:	b3d8      	cbz	r0, 1a228 <tc_hmac_prng_generate+0x84>
   1a1b0:	b3d2      	cbz	r2, 1a228 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1a1b2:	1e4b      	subs	r3, r1, #1
   1a1b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1a1b8:	d236      	bcs.n	1a228 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1a1ba:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1a1be:	b3ab      	cbz	r3, 1a22c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1a1c0:	3b01      	subs	r3, #1
   1a1c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a1c6:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a1ca:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a1ce:	2220      	movs	r2, #32
   1a1d0:	4649      	mov	r1, r9
   1a1d2:	4620      	mov	r0, r4
   1a1d4:	f7ff fead 	bl	19f32 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1a1d8:	4620      	mov	r0, r4
   1a1da:	f7ff fede 	bl	19f9a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a1de:	2220      	movs	r2, #32
   1a1e0:	4639      	mov	r1, r7
   1a1e2:	4620      	mov	r0, r4
   1a1e4:	f7ff fee6 	bl	19fb4 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a1e8:	4622      	mov	r2, r4
   1a1ea:	2120      	movs	r1, #32
   1a1ec:	4638      	mov	r0, r7
   1a1ee:	f7ff fee7 	bl	19fc0 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1a1f2:	2d20      	cmp	r5, #32
   1a1f4:	462e      	mov	r6, r5
   1a1f6:	bf28      	it	cs
   1a1f8:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1a1fa:	4640      	mov	r0, r8
   1a1fc:	4633      	mov	r3, r6
   1a1fe:	463a      	mov	r2, r7
   1a200:	4631      	mov	r1, r6
   1a202:	f7ff fbcb 	bl	1999c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1a206:	2d20      	cmp	r5, #32
   1a208:	bf38      	it	cc
   1a20a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1a20c:	3d20      	subs	r5, #32
		out += bufferlen;
   1a20e:	44b0      	add	r8, r6
	while (outlen != 0) {
   1a210:	d1dd      	bne.n	1a1ce <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1a212:	4620      	mov	r0, r4
   1a214:	462b      	mov	r3, r5
   1a216:	462a      	mov	r2, r5
   1a218:	4629      	mov	r1, r5
   1a21a:	9500      	str	r5, [sp, #0]
   1a21c:	f7ff fef8 	bl	1a010 <update>

	return TC_CRYPTO_SUCCESS;
   1a220:	2001      	movs	r0, #1
}
   1a222:	b003      	add	sp, #12
   1a224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1a228:	2000      	movs	r0, #0
   1a22a:	e7fa      	b.n	1a222 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1a22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a230:	e7f7      	b.n	1a222 <tc_hmac_prng_generate+0x7e>

0001a232 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1a232:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1a234:	6800      	ldr	r0, [r0, #0]
   1a236:	f7f1 bbfb 	b.w	ba30 <z_arm_fatal_error>

0001a23a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a23a:	2100      	movs	r1, #0
   1a23c:	2001      	movs	r0, #1
   1a23e:	f7f1 bbf7 	b.w	ba30 <z_arm_fatal_error>

0001a242 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1a242:	b508      	push	{r3, lr}
	handler();
   1a244:	f7f1 fca0 	bl	bb88 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a24c:	f7f1 bd6a 	b.w	bd24 <z_arm_exc_exit>

0001a250 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1a250:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1a252:	f383 880b 	msr	PSPLIM, r3
}
   1a256:	4770      	bx	lr

0001a258 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1a258:	2300      	movs	r3, #0
   1a25a:	f7f0 be2b 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001a25e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1a25e:	4770      	bx	lr

0001a260 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1a260:	4770      	bx	lr

0001a262 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1a262:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1a266:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a26a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1a26c:	bf08      	it	eq
   1a26e:	f06f 0015 	mvneq.w	r0, #21
   1a272:	4770      	bx	lr

0001a274 <mpu_configure_region>:
{
   1a274:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1a276:	890a      	ldrh	r2, [r1, #8]
   1a278:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1a27a:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1a27c:	684c      	ldr	r4, [r1, #4]
   1a27e:	f002 021f 	and.w	r2, r2, #31
{
   1a282:	b085      	sub	sp, #20
   1a284:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1a288:	9300      	str	r3, [sp, #0]
   1a28a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1a28e:	f023 031f 	bic.w	r3, r3, #31
   1a292:	1e62      	subs	r2, r4, #1
   1a294:	4413      	add	r3, r2
   1a296:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1a29a:	2807      	cmp	r0, #7
   1a29c:	9303      	str	r3, [sp, #12]
   1a29e:	d904      	bls.n	1a2aa <mpu_configure_region+0x36>
}
   1a2a0:	b005      	add	sp, #20
   1a2a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a2a6:	f7f2 b925 	b.w	c4f4 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1a2aa:	4669      	mov	r1, sp
   1a2ac:	f7f2 f908 	bl	c4c0 <region_init>
}
   1a2b0:	b005      	add	sp, #20
   1a2b2:	bd30      	pop	{r4, r5, pc}

0001a2b4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a2b4:	4603      	mov	r3, r0
   1a2b6:	3901      	subs	r1, #1
   1a2b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a2bc:	b90a      	cbnz	r2, 1a2c2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a2be:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a2c0:	4770      	bx	lr
		*d = *s;
   1a2c2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a2c6:	e7f7      	b.n	1a2b8 <strcpy+0x4>

0001a2c8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1a2c8:	4603      	mov	r3, r0
{
   1a2ca:	b510      	push	{r4, lr}
   1a2cc:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1a2ce:	b922      	cbnz	r2, 1a2da <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1a2d0:	2100      	movs	r1, #0
   1a2d2:	441a      	add	r2, r3
	while (n > 0) {
   1a2d4:	4293      	cmp	r3, r2
   1a2d6:	d108      	bne.n	1a2ea <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1a2d8:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1a2da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a2de:	2c00      	cmp	r4, #0
   1a2e0:	d0f6      	beq.n	1a2d0 <strncpy+0x8>
		*d = *s;
   1a2e2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1a2e6:	3a01      	subs	r2, #1
   1a2e8:	e7f1      	b.n	1a2ce <strncpy+0x6>
		*d = '\0';
   1a2ea:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a2ee:	e7f1      	b.n	1a2d4 <strncpy+0xc>

0001a2f0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1a2f0:	4603      	mov	r3, r0
	size_t n = 0;
   1a2f2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1a2f4:	5c1a      	ldrb	r2, [r3, r0]
   1a2f6:	b902      	cbnz	r2, 1a2fa <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a2f8:	4770      	bx	lr
		n++;
   1a2fa:	3001      	adds	r0, #1
   1a2fc:	e7fa      	b.n	1a2f4 <strlen+0x4>

0001a2fe <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1a2fe:	4603      	mov	r3, r0
	size_t n = 0;
   1a300:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1a302:	5c1a      	ldrb	r2, [r3, r0]
   1a304:	b10a      	cbz	r2, 1a30a <strnlen+0xc>
   1a306:	4288      	cmp	r0, r1
   1a308:	d100      	bne.n	1a30c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1a30a:	4770      	bx	lr
		n++;
   1a30c:	3001      	adds	r0, #1
   1a30e:	e7f8      	b.n	1a302 <strnlen+0x4>

0001a310 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a310:	1e43      	subs	r3, r0, #1
   1a312:	3901      	subs	r1, #1
   1a314:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a318:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1a31c:	4282      	cmp	r2, r0
   1a31e:	d101      	bne.n	1a324 <strcmp+0x14>
   1a320:	2a00      	cmp	r2, #0
   1a322:	d1f7      	bne.n	1a314 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a324:	1a10      	subs	r0, r2, r0
   1a326:	4770      	bx	lr

0001a328 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1a328:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1a32a:	460b      	mov	r3, r1
   1a32c:	4605      	mov	r5, r0
   1a32e:	b162      	cbz	r2, 1a34a <strncmp+0x22>
   1a330:	f810 6b01 	ldrb.w	r6, [r0], #1
   1a334:	781c      	ldrb	r4, [r3, #0]
   1a336:	3101      	adds	r1, #1
   1a338:	42b4      	cmp	r4, r6
   1a33a:	d100      	bne.n	1a33e <strncmp+0x16>
   1a33c:	b91c      	cbnz	r4, 1a346 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1a33e:	782a      	ldrb	r2, [r5, #0]
   1a340:	781b      	ldrb	r3, [r3, #0]
   1a342:	1ad0      	subs	r0, r2, r3
   1a344:	e002      	b.n	1a34c <strncmp+0x24>
		n--;
   1a346:	3a01      	subs	r2, #1
   1a348:	e7ef      	b.n	1a32a <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1a34a:	4610      	mov	r0, r2
}
   1a34c:	bd70      	pop	{r4, r5, r6, pc}

0001a34e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a34e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a350:	b15a      	cbz	r2, 1a36a <memcmp+0x1c>
   1a352:	3901      	subs	r1, #1
   1a354:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a356:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a35a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a35e:	42a0      	cmp	r0, r4
   1a360:	d001      	beq.n	1a366 <memcmp+0x18>
   1a362:	429a      	cmp	r2, r3
   1a364:	d0f7      	beq.n	1a356 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a366:	1ad0      	subs	r0, r2, r3
}
   1a368:	bd10      	pop	{r4, pc}
		return 0;
   1a36a:	4610      	mov	r0, r2
   1a36c:	e7fc      	b.n	1a368 <memcmp+0x1a>

0001a36e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1a36e:	b510      	push	{r4, lr}
   1a370:	1e43      	subs	r3, r0, #1
   1a372:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a374:	4291      	cmp	r1, r2
   1a376:	d100      	bne.n	1a37a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a378:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1a37a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a37e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a382:	e7f7      	b.n	1a374 <memcpy+0x6>

0001a384 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1a384:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1a386:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1a388:	4402      	add	r2, r0
   1a38a:	4293      	cmp	r3, r2
   1a38c:	d100      	bne.n	1a390 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a38e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1a390:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a394:	e7f9      	b.n	1a38a <memset+0x6>

0001a396 <_stdout_hook_default>:
}
   1a396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a39a:	4770      	bx	lr

0001a39c <bt_rpa_irk_matches>:

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1a39c:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1a39e:	b530      	push	{r4, r5, lr}
   1a3a0:	4605      	mov	r5, r0
   1a3a2:	b087      	sub	sp, #28
   1a3a4:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1a3a6:	a802      	add	r0, sp, #8
   1a3a8:	4411      	add	r1, r2
   1a3aa:	f7ff ffe0 	bl	1a36e <memcpy>
	(void)memset(res + 3, 0, 13);
   1a3ae:	220d      	movs	r2, #13
   1a3b0:	2100      	movs	r1, #0
   1a3b2:	f10d 000b 	add.w	r0, sp, #11
   1a3b6:	f7ff ffe5 	bl	1a384 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1a3ba:	aa02      	add	r2, sp, #8
   1a3bc:	4611      	mov	r1, r2
   1a3be:	4628      	mov	r0, r5
   1a3c0:	f000 fb40 	bl	1aa44 <bt_encrypt_le>
	if (err) {
   1a3c4:	b110      	cbz	r0, 1a3cc <bt_rpa_irk_matches+0x30>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   1a3c6:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   1a3c8:	b007      	add	sp, #28
   1a3ca:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   1a3cc:	2203      	movs	r2, #3
   1a3ce:	a902      	add	r1, sp, #8
   1a3d0:	a801      	add	r0, sp, #4
   1a3d2:	f7ff ffcc 	bl	1a36e <memcpy>
	return !memcmp(addr->val, hash, 3);
   1a3d6:	2203      	movs	r2, #3
   1a3d8:	4620      	mov	r0, r4
   1a3da:	a901      	add	r1, sp, #4
   1a3dc:	f7ff ffb7 	bl	1a34e <memcmp>
   1a3e0:	fab0 f080 	clz	r0, r0
   1a3e4:	0940      	lsrs	r0, r0, #5
   1a3e6:	e7ef      	b.n	1a3c8 <bt_rpa_irk_matches+0x2c>

0001a3e8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a3e8:	b510      	push	{r4, lr}
   1a3ea:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a3ec:	7801      	ldrb	r1, [r0, #0]
   1a3ee:	7822      	ldrb	r2, [r4, #0]
{
   1a3f0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a3f2:	428a      	cmp	r2, r1
   1a3f4:	d00f      	beq.n	1a416 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1a3f6:	4669      	mov	r1, sp
   1a3f8:	f7f2 faa0 	bl	c93c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a3fc:	4620      	mov	r0, r4
   1a3fe:	a905      	add	r1, sp, #20
   1a400:	f7f2 fa9c 	bl	c93c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a404:	2210      	movs	r2, #16
   1a406:	f10d 0115 	add.w	r1, sp, #21
   1a40a:	f10d 0001 	add.w	r0, sp, #1
   1a40e:	f7ff ff9e 	bl	1a34e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1a412:	b00a      	add	sp, #40	; 0x28
   1a414:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1a416:	2a01      	cmp	r2, #1
   1a418:	d006      	beq.n	1a428 <bt_uuid_cmp+0x40>
   1a41a:	2a02      	cmp	r2, #2
   1a41c:	d007      	beq.n	1a42e <bt_uuid_cmp+0x46>
   1a41e:	b972      	cbnz	r2, 1a43e <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a420:	8840      	ldrh	r0, [r0, #2]
   1a422:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a424:	1ac0      	subs	r0, r0, r3
   1a426:	e7f4      	b.n	1a412 <bt_uuid_cmp+0x2a>
   1a428:	6840      	ldr	r0, [r0, #4]
   1a42a:	6863      	ldr	r3, [r4, #4]
   1a42c:	e7fa      	b.n	1a424 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a42e:	2210      	movs	r2, #16
   1a430:	1c61      	adds	r1, r4, #1
   1a432:	3001      	adds	r0, #1
}
   1a434:	b00a      	add	sp, #40	; 0x28
   1a436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a43a:	f7ff bf88 	b.w	1a34e <memcmp>
	switch (u1->type) {
   1a43e:	f06f 0015 	mvn.w	r0, #21
   1a442:	e7e6      	b.n	1a412 <bt_uuid_cmp+0x2a>

0001a444 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a444:	2a04      	cmp	r2, #4
{
   1a446:	b510      	push	{r4, lr}
	switch (data_len) {
   1a448:	d00a      	beq.n	1a460 <bt_uuid_create+0x1c>
   1a44a:	2a10      	cmp	r2, #16
   1a44c:	d00d      	beq.n	1a46a <bt_uuid_create+0x26>
   1a44e:	2a02      	cmp	r2, #2
   1a450:	f04f 0300 	mov.w	r3, #0
   1a454:	d10f      	bne.n	1a476 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1a456:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a458:	880b      	ldrh	r3, [r1, #0]
   1a45a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1a45c:	2001      	movs	r0, #1
}
   1a45e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1a460:	2301      	movs	r3, #1
   1a462:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a464:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a466:	6043      	str	r3, [r0, #4]
		break;
   1a468:	e7f8      	b.n	1a45c <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1a46a:	2302      	movs	r3, #2
   1a46c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a470:	f7ff ff7d 	bl	1a36e <memcpy>
		break;
   1a474:	e7f2      	b.n	1a45c <bt_uuid_create+0x18>
	switch (data_len) {
   1a476:	4618      	mov	r0, r3
   1a478:	e7f1      	b.n	1a45e <bt_uuid_create+0x1a>

0001a47a <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1a47a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1a47c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a47e:	2106      	movs	r1, #6
{
   1a480:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a482:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a486:	f7f4 fe67 	bl	f158 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1a48a:	b918      	cbnz	r0, 1a494 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1a48c:	79a3      	ldrb	r3, [r4, #6]
   1a48e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a492:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1a494:	bd10      	pop	{r4, pc}

0001a496 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   1a496:	b510      	push	{r4, lr}
   1a498:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1a49a:	2207      	movs	r2, #7
   1a49c:	f7ff ff67 	bl	1a36e <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   1a4a0:	7823      	ldrb	r3, [r4, #0]
   1a4a2:	f023 0302 	bic.w	r3, r3, #2
   1a4a6:	7023      	strb	r3, [r4, #0]
}
   1a4a8:	bd10      	pop	{r4, pc}

0001a4aa <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   1a4aa:	7800      	ldrb	r0, [r0, #0]
}
   1a4ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1a4b0:	4770      	bx	lr

0001a4b2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a4b2:	280f      	cmp	r0, #15
   1a4b4:	d807      	bhi.n	1a4c6 <bt_hci_evt_get_flags+0x14>
   1a4b6:	280d      	cmp	r0, #13
   1a4b8:	d80b      	bhi.n	1a4d2 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1a4ba:	2805      	cmp	r0, #5
   1a4bc:	bf08      	it	eq
   1a4be:	2003      	moveq	r0, #3
   1a4c0:	bf18      	it	ne
   1a4c2:	2002      	movne	r0, #2
   1a4c4:	4770      	bx	lr
	switch (evt) {
   1a4c6:	2813      	cmp	r0, #19
   1a4c8:	d003      	beq.n	1a4d2 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1a4ca:	281a      	cmp	r0, #26
   1a4cc:	bf08      	it	eq
   1a4ce:	2001      	moveq	r0, #1
   1a4d0:	e7f6      	b.n	1a4c0 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1a4d2:	2001      	movs	r0, #1
	}
}
   1a4d4:	4770      	bx	lr

0001a4d6 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1a4d6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1a4da:	b183      	cbz	r3, 1a4fe <update_sec_level+0x28>
   1a4dc:	7b5a      	ldrb	r2, [r3, #13]
   1a4de:	07d1      	lsls	r1, r2, #31
   1a4e0:	d50d      	bpl.n	1a4fe <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1a4e2:	06d2      	lsls	r2, r2, #27
   1a4e4:	d50d      	bpl.n	1a502 <update_sec_level+0x2c>
   1a4e6:	7b1b      	ldrb	r3, [r3, #12]
   1a4e8:	2b10      	cmp	r3, #16
   1a4ea:	bf14      	ite	ne
   1a4ec:	2303      	movne	r3, #3
   1a4ee:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   1a4f0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1a4f2:	7a80      	ldrb	r0, [r0, #10]
}
   1a4f4:	4298      	cmp	r0, r3
   1a4f6:	bf8c      	ite	hi
   1a4f8:	2000      	movhi	r0, #0
   1a4fa:	2001      	movls	r0, #1
   1a4fc:	4770      	bx	lr
   1a4fe:	2302      	movs	r3, #2
   1a500:	e7f6      	b.n	1a4f0 <update_sec_level+0x1a>
   1a502:	2303      	movs	r3, #3
   1a504:	e7f4      	b.n	1a4f0 <update_sec_level+0x1a>

0001a506 <hci_vendor_event>:
}
   1a506:	4770      	bx	lr

0001a508 <atomic_or>:
{
   1a508:	4603      	mov	r3, r0
   1a50a:	b510      	push	{r4, lr}
}
   1a50c:	e8d3 0fef 	ldaex	r0, [r3]
   1a510:	ea40 0201 	orr.w	r2, r0, r1
   1a514:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1a518:	2c00      	cmp	r4, #0
   1a51a:	d1f7      	bne.n	1a50c <atomic_or+0x4>
   1a51c:	bd10      	pop	{r4, pc}

0001a51e <z_log_msg_static_create.constprop.0>:
   1a51e:	2300      	movs	r3, #0
   1a520:	f7f0 bcc8 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001a524 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a524:	e8d0 3fef 	ldaex	r3, [r0]
   1a528:	400b      	ands	r3, r1
   1a52a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1a52e:	2a00      	cmp	r2, #0
   1a530:	d1f8      	bne.n	1a524 <atomic_and.isra.0>
}
   1a532:	4770      	bx	lr

0001a534 <sys_put_le64>:
	dst[1] = val >> 8;
   1a534:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1a538:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1a53a:	2300      	movs	r3, #0
   1a53c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1a53e:	0e00      	lsrs	r0, r0, #24
   1a540:	70d0      	strb	r0, [r2, #3]
   1a542:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1a546:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1a548:	7093      	strb	r3, [r2, #2]
   1a54a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1a54c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1a54e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1a550:	71d1      	strb	r1, [r2, #7]
}
   1a552:	4770      	bx	lr

0001a554 <bt_hci_disconnect>:
{
   1a554:	b570      	push	{r4, r5, r6, lr}
   1a556:	4606      	mov	r6, r0
   1a558:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a55a:	f240 4006 	movw	r0, #1030	; 0x406
   1a55e:	2103      	movs	r1, #3
   1a560:	f7f2 fef2 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a564:	4604      	mov	r4, r0
   1a566:	b168      	cbz	r0, 1a584 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1a568:	2103      	movs	r1, #3
   1a56a:	300c      	adds	r0, #12
   1a56c:	f001 ffeb 	bl	1c546 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1a570:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1a572:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a574:	4621      	mov	r1, r4
}
   1a576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a57a:	2200      	movs	r2, #0
   1a57c:	f240 4006 	movw	r0, #1030	; 0x406
   1a580:	f7f2 bf1c 	b.w	d3bc <bt_hci_cmd_send_sync>
}
   1a584:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a588:	bd70      	pop	{r4, r5, r6, pc}

0001a58a <bt_le_set_data_len>:
{
   1a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a58c:	4607      	mov	r7, r0
   1a58e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a590:	f242 0022 	movw	r0, #8226	; 0x2022
   1a594:	2106      	movs	r1, #6
{
   1a596:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a598:	f7f2 fed6 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a59c:	4604      	mov	r4, r0
   1a59e:	b178      	cbz	r0, 1a5c0 <bt_le_set_data_len+0x36>
   1a5a0:	2106      	movs	r1, #6
   1a5a2:	300c      	adds	r0, #12
   1a5a4:	f001 ffcf 	bl	1c546 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a5a8:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1a5aa:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a5ac:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1a5ae:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a5b0:	4621      	mov	r1, r4
}
   1a5b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a5b6:	2200      	movs	r2, #0
   1a5b8:	f242 0022 	movw	r0, #8226	; 0x2022
   1a5bc:	f7f2 befe 	b.w	d3bc <bt_hci_cmd_send_sync>
}
   1a5c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a5c6 <bt_le_set_phy>:
{
   1a5c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a5ca:	4681      	mov	r9, r0
   1a5cc:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a5ce:	f242 0032 	movw	r0, #8242	; 0x2032
   1a5d2:	2107      	movs	r1, #7
{
   1a5d4:	4617      	mov	r7, r2
   1a5d6:	461e      	mov	r6, r3
   1a5d8:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a5dc:	f7f2 feb4 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a5e0:	4605      	mov	r5, r0
   1a5e2:	b1a0      	cbz	r0, 1a60e <bt_le_set_phy+0x48>
   1a5e4:	2107      	movs	r1, #7
   1a5e6:	300c      	adds	r0, #12
   1a5e8:	f001 ffad 	bl	1c546 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a5ec:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1a5f0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a5f4:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1a5f6:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1a5f8:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1a5fa:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a5fe:	4629      	mov	r1, r5
}
   1a600:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a604:	2200      	movs	r2, #0
   1a606:	f242 0032 	movw	r0, #8242	; 0x2032
   1a60a:	f7f2 bed7 	b.w	d3bc <bt_hci_cmd_send_sync>
}
   1a60e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a616 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1a616:	68c0      	ldr	r0, [r0, #12]
   1a618:	f7f2 bfa4 	b.w	d564 <bt_hci_le_enh_conn_complete>

0001a61c <bt_le_conn_params_valid>:
{
   1a61c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a61e:	8803      	ldrh	r3, [r0, #0]
   1a620:	8842      	ldrh	r2, [r0, #2]
   1a622:	4293      	cmp	r3, r2
   1a624:	d819      	bhi.n	1a65a <bt_le_conn_params_valid+0x3e>
   1a626:	2b05      	cmp	r3, #5
   1a628:	d917      	bls.n	1a65a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a62a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1a62e:	d814      	bhi.n	1a65a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1a630:	8883      	ldrh	r3, [r0, #4]
   1a632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a636:	d210      	bcs.n	1a65a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a638:	f640 4476 	movw	r4, #3190	; 0xc76
   1a63c:	88c0      	ldrh	r0, [r0, #6]
   1a63e:	f1a0 010a 	sub.w	r1, r0, #10
   1a642:	b289      	uxth	r1, r1
   1a644:	42a1      	cmp	r1, r4
   1a646:	d808      	bhi.n	1a65a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1a648:	3301      	adds	r3, #1
   1a64a:	b29b      	uxth	r3, r3
   1a64c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a64e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1a652:	bf34      	ite	cc
   1a654:	2001      	movcc	r0, #1
   1a656:	2000      	movcs	r0, #0
}
   1a658:	bd10      	pop	{r4, pc}
		return false;
   1a65a:	2000      	movs	r0, #0
   1a65c:	e7fc      	b.n	1a658 <bt_le_conn_params_valid+0x3c>

0001a65e <le_conn_param_neg_reply>:
{
   1a65e:	b570      	push	{r4, r5, r6, lr}
   1a660:	4606      	mov	r6, r0
   1a662:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a664:	f242 0021 	movw	r0, #8225	; 0x2021
   1a668:	2103      	movs	r1, #3
   1a66a:	f7f2 fe6d 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a66e:	4604      	mov	r4, r0
   1a670:	b918      	cbnz	r0, 1a67a <le_conn_param_neg_reply+0x1c>
}
   1a672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a676:	f7f2 ba5f 	b.w	cb38 <le_conn_param_neg_reply.part.0>
   1a67a:	2103      	movs	r1, #3
   1a67c:	300c      	adds	r0, #12
   1a67e:	f001 ff62 	bl	1c546 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a682:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a684:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a686:	4621      	mov	r1, r4
}
   1a688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a68c:	f242 0021 	movw	r0, #8225	; 0x2021
   1a690:	f7f3 b9d2 	b.w	da38 <bt_hci_cmd_send>

0001a694 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1a694:	2000      	movs	r0, #0
   1a696:	4770      	bx	lr

0001a698 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1a698:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1a69a:	f7f9 fc1d 	bl	13ed8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1a69e:	b118      	cbz	r0, 1a6a8 <bt_addr_le_is_bonded+0x10>
   1a6a0:	89c0      	ldrh	r0, [r0, #14]
   1a6a2:	3800      	subs	r0, #0
   1a6a4:	bf18      	it	ne
   1a6a6:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1a6a8:	bd08      	pop	{r3, pc}

0001a6aa <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1a6aa:	2207      	movs	r2, #7
{
   1a6ac:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1a6ae:	f7ff fe4e 	bl	1a34e <memcmp>
}
   1a6b2:	fab0 f080 	clz	r0, r0
   1a6b6:	0940      	lsrs	r0, r0, #5
   1a6b8:	bd08      	pop	{r3, pc}

0001a6ba <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1a6ba:	2207      	movs	r2, #7
   1a6bc:	f7ff be57 	b.w	1a36e <memcpy>

0001a6c0 <hci_id_add>:
{
   1a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6c4:	4688      	mov	r8, r1
   1a6c6:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   1a6c8:	4605      	mov	r5, r0
   1a6ca:	bb08      	cbnz	r0, 1a710 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1a6cc:	2127      	movs	r1, #39	; 0x27
   1a6ce:	f242 0027 	movw	r0, #8231	; 0x2027
   1a6d2:	f7f2 fe39 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a6d6:	4604      	mov	r4, r0
   1a6d8:	b1f0      	cbz	r0, 1a718 <hci_id_add+0x58>
   1a6da:	2127      	movs	r1, #39	; 0x27
   1a6dc:	300c      	adds	r0, #12
   1a6de:	f001 ff32 	bl	1c546 <net_buf_simple_add>
   1a6e2:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1a6e4:	4641      	mov	r1, r8
   1a6e6:	f7ff ffe8 	bl	1a6ba <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1a6ea:	4639      	mov	r1, r7
   1a6ec:	2210      	movs	r2, #16
   1a6ee:	1df0      	adds	r0, r6, #7
   1a6f0:	f7ff fe3d 	bl	1a36e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1a6f4:	4629      	mov	r1, r5
   1a6f6:	2210      	movs	r2, #16
   1a6f8:	f106 0017 	add.w	r0, r6, #23
   1a6fc:	f7ff fe42 	bl	1a384 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1a700:	462a      	mov	r2, r5
   1a702:	4621      	mov	r1, r4
}
   1a704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1a708:	f242 0027 	movw	r0, #8231	; 0x2027
   1a70c:	f7f2 be56 	b.w	d3bc <bt_hci_cmd_send_sync>
		return -EINVAL;
   1a710:	f06f 0015 	mvn.w	r0, #21
}
   1a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1a718:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a71c:	e7fa      	b.n	1a714 <hci_id_add+0x54>

0001a71e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a71e:	7a03      	ldrb	r3, [r0, #8]
{
   1a720:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a722:	075b      	lsls	r3, r3, #29
   1a724:	d505      	bpl.n	1a732 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1a726:	4601      	mov	r1, r0
   1a728:	322a      	adds	r2, #42	; 0x2a
   1a72a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a72e:	f7ff bfc7 	b.w	1a6c0 <hci_id_add>
}
   1a732:	4770      	bx	lr

0001a734 <z_log_msg_static_create.constprop.0>:
   1a734:	2300      	movs	r3, #0
   1a736:	f7f0 bbbd 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001a73a <addr_res_enable>:
{
   1a73a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1a73c:	2101      	movs	r1, #1
{
   1a73e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1a740:	f242 002d 	movw	r0, #8237	; 0x202d
   1a744:	f7f2 fe00 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1a748:	4604      	mov	r4, r0
   1a74a:	b158      	cbz	r0, 1a764 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1a74c:	4629      	mov	r1, r5
   1a74e:	300c      	adds	r0, #12
   1a750:	f001 ff08 	bl	1c564 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1a754:	4621      	mov	r1, r4
}
   1a756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1a75a:	2200      	movs	r2, #0
   1a75c:	f242 002d 	movw	r0, #8237	; 0x202d
   1a760:	f7f2 be2c 	b.w	d3bc <bt_hci_cmd_send_sync>
}
   1a764:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a768:	bd38      	pop	{r3, r4, r5, pc}

0001a76a <adv_unpause_enabled>:
{
   1a76a:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a76c:	f100 0310 	add.w	r3, r0, #16
   1a770:	e8d3 2fef 	ldaex	r2, [r3]
   1a774:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1a778:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1a77c:	2c00      	cmp	r4, #0
   1a77e:	d1f7      	bne.n	1a770 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1a780:	0413      	lsls	r3, r2, #16
   1a782:	d503      	bpl.n	1a78c <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   1a784:	2101      	movs	r1, #1
}
   1a786:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   1a788:	f000 b957 	b.w	1aa3a <bt_le_adv_set_enable>
}
   1a78c:	bc10      	pop	{r4}
   1a78e:	4770      	bx	lr

0001a790 <find_rl_conflict>:
{
   1a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   1a794:	684f      	ldr	r7, [r1, #4]
{
   1a796:	4605      	mov	r5, r0
   1a798:	460c      	mov	r4, r1
   1a79a:	b086      	sub	sp, #24
	if (conflict->found) {
   1a79c:	b9c7      	cbnz	r7, 1a7d0 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   1a79e:	7a03      	ldrb	r3, [r0, #8]
   1a7a0:	075b      	lsls	r3, r3, #29
   1a7a2:	d515      	bpl.n	1a7d0 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1a7a4:	6808      	ldr	r0, [r1, #0]
   1a7a6:	1c69      	adds	r1, r5, #1
   1a7a8:	3001      	adds	r0, #1
   1a7aa:	f7ff ff7e 	bl	1a6aa <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1a7ae:	f8d4 8000 	ldr.w	r8, [r4]
   1a7b2:	2216      	movs	r2, #22
   1a7b4:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1a7b6:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1a7b8:	4668      	mov	r0, sp
   1a7ba:	f7ff fde3 	bl	1a384 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1a7be:	2210      	movs	r2, #16
   1a7c0:	4669      	mov	r1, sp
   1a7c2:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1a7c6:	f7ff fdc2 	bl	1a34e <memcmp>
   1a7ca:	b920      	cbnz	r0, 1a7d6 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   1a7cc:	b106      	cbz	r6, 1a7d0 <find_rl_conflict+0x40>
		conflict->found = resident;
   1a7ce:	6065      	str	r5, [r4, #4]
}
   1a7d0:	b006      	add	sp, #24
   1a7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7d6:	6820      	ldr	r0, [r4, #0]
   1a7d8:	2210      	movs	r2, #16
   1a7da:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1a7de:	302a      	adds	r0, #42	; 0x2a
   1a7e0:	f7ff fdb5 	bl	1a34e <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1a7e4:	2800      	cmp	r0, #0
   1a7e6:	d0f2      	beq.n	1a7ce <find_rl_conflict+0x3e>
   1a7e8:	e7f0      	b.n	1a7cc <find_rl_conflict+0x3c>

0001a7ea <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a7ea:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a7ee:	e8d3 2faf 	lda	r2, [r3]
   1a7f2:	0612      	lsls	r2, r2, #24
   1a7f4:	d50a      	bpl.n	1a80c <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a7f6:	e8d3 1fef 	ldaex	r1, [r3]
   1a7fa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1a7fe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a802:	2a00      	cmp	r2, #0
   1a804:	d1f7      	bne.n	1a7f6 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   1a806:	2100      	movs	r1, #0
   1a808:	f000 b917 	b.w	1aa3a <bt_le_adv_set_enable>
}
   1a80c:	4770      	bx	lr

0001a80e <bt_lookup_id_addr>:
{
   1a80e:	b510      	push	{r4, lr}
   1a810:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   1a812:	b930      	cbnz	r0, 1a822 <bt_lookup_id_addr+0x14>
   1a814:	b119      	cbz	r1, 1a81e <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   1a816:	f7f9 fb1b 	bl	13e50 <bt_keys_find_irk>
		if (keys) {
   1a81a:	b100      	cbz	r0, 1a81e <bt_lookup_id_addr+0x10>
			return &keys->addr;
   1a81c:	1c44      	adds	r4, r0, #1
}
   1a81e:	4620      	mov	r0, r4
   1a820:	bd10      	pop	{r4, pc}
		return NULL;
   1a822:	2400      	movs	r4, #0
   1a824:	e7fb      	b.n	1a81e <bt_lookup_id_addr+0x10>

0001a826 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1a826:	b118      	cbz	r0, 1a830 <bt_id_set_adv_random_addr+0xa>
   1a828:	b111      	cbz	r1, 1a830 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1a82a:	4608      	mov	r0, r1
   1a82c:	f7f3 be30 	b.w	e490 <set_random_address>
}
   1a830:	f06f 0015 	mvn.w	r0, #21
   1a834:	4770      	bx	lr

0001a836 <bt_id_set_adv_private_addr>:
{
   1a836:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1a838:	4604      	mov	r4, r0
   1a83a:	b180      	cbz	r0, 1a85e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a83c:	2106      	movs	r1, #6
   1a83e:	4668      	mov	r0, sp
   1a840:	f7f4 fc8a 	bl	f158 <bt_rand>
	if (err) {
   1a844:	b948      	cbnz	r0, 1a85a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1a846:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a84a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1a84c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a850:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1a852:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a856:	f7ff ffe6 	bl	1a826 <bt_id_set_adv_random_addr>
}
   1a85a:	b002      	add	sp, #8
   1a85c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a85e:	f06f 0015 	mvn.w	r0, #21
   1a862:	e7fa      	b.n	1a85a <bt_id_set_adv_private_addr+0x24>

0001a864 <bt_id_adv_random_addr_check>:
}
   1a864:	3800      	subs	r0, #0
   1a866:	bf18      	it	ne
   1a868:	2001      	movne	r0, #1
   1a86a:	4770      	bx	lr

0001a86c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1a86c:	7a03      	ldrb	r3, [r0, #8]
   1a86e:	07d9      	lsls	r1, r3, #31
   1a870:	d504      	bpl.n	1a87c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1a872:	f023 0301 	bic.w	r3, r3, #1
   1a876:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1a878:	f7f3 bef2 	b.w	e660 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1a87c:	0799      	lsls	r1, r3, #30
   1a87e:	d504      	bpl.n	1a88a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1a880:	f023 0302 	bic.w	r3, r3, #2
   1a884:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1a886:	f7f3 bf05 	b.w	e694 <bt_id_del>
}
   1a88a:	4770      	bx	lr

0001a88c <get_adv_channel_map>:
{
   1a88c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1a88e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1a892:	bf0c      	ite	eq
   1a894:	2007      	moveq	r0, #7
   1a896:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1a898:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1a89a:	bf48      	it	mi
   1a89c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1a8a0:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1a8a2:	bf48      	it	mi
   1a8a4:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1a8a8:	4770      	bx	lr

0001a8aa <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a8aa:	e8d0 0faf 	lda	r0, [r0]
}
   1a8ae:	4770      	bx	lr

0001a8b0 <atomic_and>:
{
   1a8b0:	4603      	mov	r3, r0
   1a8b2:	b510      	push	{r4, lr}
}
   1a8b4:	e8d3 0fef 	ldaex	r0, [r3]
   1a8b8:	ea00 0201 	and.w	r2, r0, r1
   1a8bc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1a8c0:	2c00      	cmp	r4, #0
   1a8c2:	d1f7      	bne.n	1a8b4 <atomic_and+0x4>
   1a8c4:	bd10      	pop	{r4, pc}

0001a8c6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a8c6:	2301      	movs	r3, #1
{
   1a8c8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a8ca:	fa03 f101 	lsl.w	r1, r3, r1
{
   1a8ce:	4604      	mov	r4, r0
	if (val) {
   1a8d0:	b142      	cbz	r2, 1a8e4 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a8d2:	e8d4 3fef 	ldaex	r3, [r4]
   1a8d6:	430b      	orrs	r3, r1
   1a8d8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a8dc:	2a00      	cmp	r2, #0
   1a8de:	d1f8      	bne.n	1a8d2 <atomic_set_bit_to+0xc>
	}
}
   1a8e0:	bc10      	pop	{r4}
   1a8e2:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8e4:	43c9      	mvns	r1, r1
}
   1a8e6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8e8:	f7ff bfe2 	b.w	1a8b0 <atomic_and>

0001a8ec <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8f0:	b087      	sub	sp, #28
   1a8f2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1a8f6:	4605      	mov	r5, r0
   1a8f8:	460c      	mov	r4, r1
   1a8fa:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1a8fc:	2100      	movs	r1, #0
   1a8fe:	2210      	movs	r2, #16
   1a900:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a902:	461f      	mov	r7, r3
   1a904:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1a908:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1a90c:	f7ff fd3a 	bl	1a384 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1a910:	b9ce      	cbnz	r6, 1a946 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1a912:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1a916:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1a918:	f242 0008 	movw	r0, #8200	; 0x2008
   1a91c:	a902      	add	r1, sp, #8
   1a91e:	f7f4 f887 	bl	ea30 <hci_set_ad>
		if (err) {
   1a922:	4604      	mov	r4, r0
   1a924:	b958      	cbnz	r0, 1a93e <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1a926:	f1ba 0f00 	cmp.w	sl, #0
   1a92a:	d13a      	bne.n	1a9a2 <le_adv_update.constprop.0+0xb6>
   1a92c:	3510      	adds	r5, #16
   1a92e:	e8d5 3fef 	ldaex	r3, [r5]
   1a932:	f043 0304 	orr.w	r3, r3, #4
   1a936:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1a93a:	2a00      	cmp	r2, #0
   1a93c:	d1f7      	bne.n	1a92e <le_adv_update.constprop.0+0x42>
}
   1a93e:	4620      	mov	r0, r4
   1a940:	b007      	add	sp, #28
   1a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1a946:	f7f3 fca5 	bl	e294 <bt_get_name>
   1a94a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1a94c:	b9e4      	cbnz	r4, 1a988 <le_adv_update.constprop.0+0x9c>
   1a94e:	bb37      	cbnz	r7, 1a99e <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1a950:	4658      	mov	r0, fp
   1a952:	f7ff fccd 	bl	1a2f0 <strlen>
   1a956:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1a958:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1a95a:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1a95e:	f88d 3000 	strb.w	r3, [sp]
   1a962:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1a966:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1a96a:	d1d4      	bne.n	1a916 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1a96c:	2202      	movs	r2, #2
			d[1].data = &data;
   1a96e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1a972:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1a974:	e7d0      	b.n	1a918 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a976:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1a97a:	3a08      	subs	r2, #8
   1a97c:	2a01      	cmp	r2, #1
   1a97e:	d924      	bls.n	1a9ca <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1a980:	3301      	adds	r3, #1
   1a982:	4598      	cmp	r8, r3
   1a984:	d1f7      	bne.n	1a976 <le_adv_update.constprop.0+0x8a>
   1a986:	e7e2      	b.n	1a94e <le_adv_update.constprop.0+0x62>
   1a988:	2300      	movs	r3, #0
   1a98a:	e7fa      	b.n	1a982 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a98c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1a990:	3a08      	subs	r2, #8
   1a992:	2a01      	cmp	r2, #1
   1a994:	d919      	bls.n	1a9ca <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1a996:	3301      	adds	r3, #1
   1a998:	4599      	cmp	r9, r3
   1a99a:	d1f7      	bne.n	1a98c <le_adv_update.constprop.0+0xa0>
   1a99c:	e7d8      	b.n	1a950 <le_adv_update.constprop.0+0x64>
   1a99e:	2300      	movs	r3, #0
   1a9a0:	e7fa      	b.n	1a998 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1a9a2:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1a9a4:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1a9a6:	bf08      	it	eq
   1a9a8:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a9aa:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1a9ae:	bf08      	it	eq
   1a9b0:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a9b2:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1a9b4:	bf08      	it	eq
   1a9b6:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1a9ba:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a9be:	f7f4 f837 	bl	ea30 <hci_set_ad>
		if (err) {
   1a9c2:	2800      	cmp	r0, #0
   1a9c4:	d0b2      	beq.n	1a92c <le_adv_update.constprop.0+0x40>
   1a9c6:	4604      	mov	r4, r0
   1a9c8:	e7b9      	b.n	1a93e <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1a9ca:	f06f 0415 	mvn.w	r4, #21
   1a9ce:	e7b6      	b.n	1a93e <le_adv_update.constprop.0+0x52>

0001a9d0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1a9d0:	6843      	ldr	r3, [r0, #4]
   1a9d2:	f013 0008 	ands.w	r0, r3, #8
   1a9d6:	d00a      	beq.n	1a9ee <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1a9d8:	035a      	lsls	r2, r3, #13
   1a9da:	d407      	bmi.n	1a9ec <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1a9dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1a9e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a9e4:	bf14      	ite	ne
   1a9e6:	2002      	movne	r0, #2
   1a9e8:	2001      	moveq	r0, #1
   1a9ea:	4770      	bx	lr
   1a9ec:	2001      	movs	r0, #1
}
   1a9ee:	4770      	bx	lr

0001a9f0 <bt_le_adv_set_enable_legacy>:
{
   1a9f0:	b570      	push	{r4, r5, r6, lr}
   1a9f2:	4606      	mov	r6, r0
   1a9f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a9f6:	f242 000a 	movw	r0, #8202	; 0x200a
   1a9fa:	2101      	movs	r1, #1
{
   1a9fc:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a9fe:	f7f2 fca3 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1aa02:	4604      	mov	r4, r0
   1aa04:	b1b0      	cbz	r0, 1aa34 <bt_le_adv_set_enable_legacy+0x44>
   1aa06:	300c      	adds	r0, #12
	if (enable) {
   1aa08:	b195      	cbz	r5, 1aa30 <bt_le_adv_set_enable_legacy+0x40>
   1aa0a:	2101      	movs	r1, #1
   1aa0c:	f001 fdaa 	bl	1c564 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1aa10:	4620      	mov	r0, r4
   1aa12:	f106 0210 	add.w	r2, r6, #16
   1aa16:	a903      	add	r1, sp, #12
   1aa18:	2307      	movs	r3, #7
   1aa1a:	9500      	str	r5, [sp, #0]
   1aa1c:	f7f2 fc82 	bl	d324 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1aa20:	2200      	movs	r2, #0
   1aa22:	4621      	mov	r1, r4
   1aa24:	f242 000a 	movw	r0, #8202	; 0x200a
   1aa28:	f7f2 fcc8 	bl	d3bc <bt_hci_cmd_send_sync>
}
   1aa2c:	b006      	add	sp, #24
   1aa2e:	bd70      	pop	{r4, r5, r6, pc}
   1aa30:	4629      	mov	r1, r5
   1aa32:	e7eb      	b.n	1aa0c <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1aa34:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aa38:	e7f8      	b.n	1aa2c <bt_le_adv_set_enable_legacy+0x3c>

0001aa3a <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1aa3a:	f7ff bfd9 	b.w	1a9f0 <bt_le_adv_set_enable_legacy>

0001aa3e <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1aa3e:	3018      	adds	r0, #24
   1aa40:	f003 b806 	b.w	1da50 <k_work_cancel_delayable>

0001aa44 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa46:	460d      	mov	r5, r1
   1aa48:	4614      	mov	r4, r2
   1aa4a:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   1aa4c:	b370      	cbz	r0, 1aaac <bt_encrypt_le+0x68>
   1aa4e:	b369      	cbz	r1, 1aaac <bt_encrypt_le+0x68>
   1aa50:	b362      	cbz	r2, 1aaac <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   1aa52:	466e      	mov	r6, sp
   1aa54:	4632      	mov	r2, r6
   1aa56:	4637      	mov	r7, r6
   1aa58:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   1aa5c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   1aa60:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   1aa62:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1aa66:	d1f9      	bne.n	1aa5c <bt_encrypt_le+0x18>
	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1aa68:	4631      	mov	r1, r6
   1aa6a:	a804      	add	r0, sp, #16
   1aa6c:	f7f0 fe4a 	bl	b704 <tc_aes128_set_encrypt_key>
   1aa70:	b1e0      	cbz	r0, 1aaac <bt_encrypt_le+0x68>
   1aa72:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   1aa76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1aa7a:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   1aa7c:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   1aa80:	d1f9      	bne.n	1aa76 <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1aa82:	4639      	mov	r1, r7
   1aa84:	4620      	mov	r0, r4
   1aa86:	aa04      	add	r2, sp, #16
   1aa88:	f7ff f85f 	bl	19b4a <tc_aes_encrypt>
   1aa8c:	b170      	cbz	r0, 1aaac <bt_encrypt_le+0x68>
   1aa8e:	1e63      	subs	r3, r4, #1
   1aa90:	f104 0210 	add.w	r2, r4, #16
   1aa94:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1aa96:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1aa9a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1aa9e:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1aaa0:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1aaa2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1aaa4:	d1f7      	bne.n	1aa96 <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1aaa6:	2000      	movs	r0, #0
}
   1aaa8:	b031      	add	sp, #196	; 0xc4
   1aaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1aaac:	f06f 0015 	mvn.w	r0, #21
   1aab0:	e7fa      	b.n	1aaa8 <bt_encrypt_le+0x64>

0001aab2 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aab2:	2200      	movs	r2, #0
	return list->head;
   1aab4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aab6:	b90b      	cbnz	r3, 1aabc <sys_slist_find_and_remove+0xa>
   1aab8:	4618      	mov	r0, r3
   1aaba:	4770      	bx	lr
   1aabc:	428b      	cmp	r3, r1
   1aabe:	d110      	bne.n	1aae2 <sys_slist_find_and_remove+0x30>
	return node->next;
   1aac0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aac2:	b942      	cbnz	r2, 1aad6 <sys_slist_find_and_remove+0x24>
   1aac4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1aac6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aac8:	4291      	cmp	r1, r2
   1aaca:	d100      	bne.n	1aace <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1aacc:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1aace:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aad0:	2001      	movs	r0, #1
	parent->next = child;
   1aad2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aad4:	4770      	bx	lr
	parent->next = child;
   1aad6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aad8:	6843      	ldr	r3, [r0, #4]
   1aada:	4299      	cmp	r1, r3
	list->tail = node;
   1aadc:	bf08      	it	eq
   1aade:	6042      	streq	r2, [r0, #4]
}
   1aae0:	e7f5      	b.n	1aace <sys_slist_find_and_remove+0x1c>
	return node->next;
   1aae2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aae4:	681b      	ldr	r3, [r3, #0]
   1aae6:	e7e6      	b.n	1aab6 <sys_slist_find_and_remove+0x4>

0001aae8 <atomic_and>:
{
   1aae8:	4603      	mov	r3, r0
   1aaea:	b510      	push	{r4, lr}
}
   1aaec:	e8d3 0fef 	ldaex	r0, [r3]
   1aaf0:	ea00 0201 	and.w	r2, r0, r1
   1aaf4:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1aaf8:	2c00      	cmp	r4, #0
   1aafa:	d1f7      	bne.n	1aaec <atomic_and+0x4>
   1aafc:	bd10      	pop	{r4, pc}

0001aafe <z_log_msg_static_create.constprop.0>:
   1aafe:	2300      	movs	r3, #0
   1ab00:	f7f0 b9d8 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001ab04 <tx_complete_work>:
	tx_notify(conn);
   1ab04:	3828      	subs	r0, #40	; 0x28
   1ab06:	f7f4 bcb5 	b.w	f474 <tx_notify>

0001ab0a <bt_conn_reset_rx_state>:
{
   1ab0a:	b510      	push	{r4, lr}
   1ab0c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1ab0e:	6900      	ldr	r0, [r0, #16]
   1ab10:	b118      	cbz	r0, 1ab1a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1ab12:	f7f9 fb4f 	bl	141b4 <net_buf_unref>
	conn->rx = NULL;
   1ab16:	2300      	movs	r3, #0
   1ab18:	6123      	str	r3, [r4, #16]
}
   1ab1a:	bd10      	pop	{r4, pc}

0001ab1c <conn_cleanup>:
{
   1ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab20:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1ab22:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1ab24:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1ab28:	2300      	movs	r3, #0
   1ab2a:	2200      	movs	r2, #0
   1ab2c:	4630      	mov	r0, r6
   1ab2e:	f001 fcaf 	bl	1c490 <net_buf_get>
   1ab32:	4603      	mov	r3, r0
   1ab34:	b950      	cbnz	r0, 1ab4c <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1ab36:	4620      	mov	r0, r4
   1ab38:	f7ff ffe7 	bl	1ab0a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ab3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ab40:	2200      	movs	r2, #0
}
   1ab42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1ab46:	2300      	movs	r3, #0
   1ab48:	f7fd b890 	b.w	17c6c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1ab4c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1ab4e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   1ab50:	f7f9 fb30 	bl	141b4 <net_buf_unref>
		if (tx) {
   1ab54:	2d00      	cmp	r5, #0
   1ab56:	d0e7      	beq.n	1ab28 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1ab58:	4629      	mov	r1, r5
   1ab5a:	4620      	mov	r0, r4
   1ab5c:	f7f4 fcba 	bl	f4d4 <conn_tx_destroy>
   1ab60:	e7e0      	b.n	1ab24 <conn_cleanup+0x8>

0001ab62 <bt_conn_ref>:
{
   1ab62:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1ab64:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ab68:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1ab6c:	b15b      	cbz	r3, 1ab86 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1ab6e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ab70:	e8d2 4fef 	ldaex	r4, [r2]
   1ab74:	429c      	cmp	r4, r3
   1ab76:	d104      	bne.n	1ab82 <bt_conn_ref+0x20>
   1ab78:	e8c2 1fec 	stlex	ip, r1, [r2]
   1ab7c:	f1bc 0f00 	cmp.w	ip, #0
   1ab80:	d1f6      	bne.n	1ab70 <bt_conn_ref+0xe>
   1ab82:	d1f1      	bne.n	1ab68 <bt_conn_ref+0x6>
}
   1ab84:	bd10      	pop	{r4, pc}
			return NULL;
   1ab86:	4618      	mov	r0, r3
   1ab88:	e7fc      	b.n	1ab84 <bt_conn_ref+0x22>

0001ab8a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1ab8a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ab8e:	e8d3 2fef 	ldaex	r2, [r3]
   1ab92:	3a01      	subs	r2, #1
   1ab94:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ab98:	2900      	cmp	r1, #0
   1ab9a:	d1f8      	bne.n	1ab8e <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1ab9c:	f240 1201 	movw	r2, #257	; 0x101
   1aba0:	8841      	ldrh	r1, [r0, #2]
   1aba2:	4291      	cmp	r1, r2
   1aba4:	d104      	bne.n	1abb0 <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aba6:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1abaa:	b90b      	cbnz	r3, 1abb0 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   1abac:	f7f4 b9fc 	b.w	efa8 <bt_le_adv_resume>
}
   1abb0:	4770      	bx	lr

0001abb2 <conn_lookup_handle>:
{
   1abb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1abb6:	4607      	mov	r7, r0
   1abb8:	460e      	mov	r6, r1
   1abba:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1abbc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1abbe:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1abc2:	42b4      	cmp	r4, r6
   1abc4:	d103      	bne.n	1abce <conn_lookup_handle+0x1c>
	return NULL;
   1abc6:	2300      	movs	r3, #0
}
   1abc8:	4618      	mov	r0, r3
   1abca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1abce:	fb09 7004 	mla	r0, r9, r4, r7
   1abd2:	f7ff ffc6 	bl	1ab62 <bt_conn_ref>
   1abd6:	4603      	mov	r3, r0
		if (!conn) {
   1abd8:	b158      	cbz	r0, 1abf2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1abda:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1abdc:	2d01      	cmp	r5, #1
   1abde:	d002      	beq.n	1abe6 <conn_lookup_handle+0x34>
   1abe0:	3d07      	subs	r5, #7
   1abe2:	2d01      	cmp	r5, #1
   1abe4:	d803      	bhi.n	1abee <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1abe6:	881a      	ldrh	r2, [r3, #0]
   1abe8:	4542      	cmp	r2, r8
   1abea:	d0ed      	beq.n	1abc8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1abec:	4618      	mov	r0, r3
   1abee:	f7ff ffcc 	bl	1ab8a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1abf2:	3401      	adds	r4, #1
   1abf4:	e7e5      	b.n	1abc2 <conn_lookup_handle+0x10>

0001abf6 <bt_conn_connected>:
{
   1abf6:	b510      	push	{r4, lr}
   1abf8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1abfa:	f7f5 fb29 	bl	10250 <bt_l2cap_connected>
	notify_connected(conn);
   1abfe:	4620      	mov	r0, r4
}
   1ac00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1ac04:	f7f4 bc04 	b.w	f410 <notify_connected>

0001ac08 <bt_conn_disconnect>:
{
   1ac08:	b510      	push	{r4, lr}
	switch (conn->state) {
   1ac0a:	7b43      	ldrb	r3, [r0, #13]
{
   1ac0c:	4604      	mov	r4, r0
	switch (conn->state) {
   1ac0e:	3b02      	subs	r3, #2
   1ac10:	2b06      	cmp	r3, #6
   1ac12:	d816      	bhi.n	1ac42 <bt_conn_disconnect+0x3a>
   1ac14:	e8df f003 	tbb	[pc, r3]
   1ac18:	15151504 	.word	0x15151504
   1ac1c:	0b09      	.short	0x0b09
   1ac1e:	09          	.byte	0x09
   1ac1f:	00          	.byte	0x00
		conn->err = reason;
   1ac20:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ac22:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1ac24:	4620      	mov	r0, r4
   1ac26:	f7f4 fecd 	bl	f9c4 <bt_conn_set_state>
{
   1ac2a:	2000      	movs	r0, #0
}
   1ac2c:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   1ac2e:	8800      	ldrh	r0, [r0, #0]
   1ac30:	f7ff fc90 	bl	1a554 <bt_hci_disconnect>
	if (err) {
   1ac34:	2800      	cmp	r0, #0
   1ac36:	d1f9      	bne.n	1ac2c <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   1ac38:	7b63      	ldrb	r3, [r4, #13]
   1ac3a:	2b07      	cmp	r3, #7
   1ac3c:	d1f5      	bne.n	1ac2a <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1ac3e:	2108      	movs	r1, #8
   1ac40:	e7f0      	b.n	1ac24 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   1ac42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ac46:	e7f1      	b.n	1ac2c <bt_conn_disconnect+0x24>

0001ac48 <bt_conn_ltk_present>:
{
   1ac48:	b510      	push	{r4, lr}
   1ac4a:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   1ac4c:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
	if (!keys) {
   1ac50:	b928      	cbnz	r0, 1ac5e <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ac52:	7a20      	ldrb	r0, [r4, #8]
   1ac54:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ac58:	f7f9 f93e 	bl	13ed8 <bt_keys_find_addr>
	if (keys) {
   1ac5c:	b138      	cbz	r0, 1ac6e <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ac5e:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   1ac60:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ac62:	b92a      	cbnz	r2, 1ac70 <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   1ac64:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   1ac68:	bf14      	ite	ne
   1ac6a:	2001      	movne	r0, #1
   1ac6c:	2000      	moveq	r0, #0
}
   1ac6e:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   1ac70:	f013 0f24 	tst.w	r3, #36	; 0x24
   1ac74:	e7f8      	b.n	1ac68 <bt_conn_ltk_present+0x20>

0001ac76 <bt_conn_set_security>:
{
   1ac76:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ac78:	7b43      	ldrb	r3, [r0, #13]
{
   1ac7a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ac7c:	2b07      	cmp	r3, #7
{
   1ac7e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1ac80:	d122      	bne.n	1acc8 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1ac82:	7a43      	ldrb	r3, [r0, #9]
   1ac84:	428b      	cmp	r3, r1
   1ac86:	d215      	bcs.n	1acb4 <bt_conn_set_security+0x3e>
   1ac88:	7a83      	ldrb	r3, [r0, #10]
   1ac8a:	428b      	cmp	r3, r1
   1ac8c:	d212      	bcs.n	1acb4 <bt_conn_set_security+0x3e>
	if (val) {
   1ac8e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1ac90:	f100 0004 	add.w	r0, r0, #4
   1ac94:	d510      	bpl.n	1acb8 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ac96:	e8d0 3fef 	ldaex	r3, [r0]
   1ac9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1ac9e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1aca2:	2a00      	cmp	r2, #0
   1aca4:	d1f7      	bne.n	1ac96 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1aca6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1acaa:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1acac:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1acae:	f7f8 fa95 	bl	131dc <bt_smp_start_security>
	if (err) {
   1acb2:	b930      	cbnz	r0, 1acc2 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   1acb4:	2000      	movs	r0, #0
}
   1acb6:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1acb8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1acbc:	f7ff ff14 	bl	1aae8 <atomic_and>
   1acc0:	e7f1      	b.n	1aca6 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   1acc2:	7a63      	ldrb	r3, [r4, #9]
   1acc4:	72a3      	strb	r3, [r4, #10]
   1acc6:	e7f6      	b.n	1acb6 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   1acc8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1accc:	e7f3      	b.n	1acb6 <bt_conn_set_security+0x40>

0001acce <bt_conn_get_security>:
}
   1acce:	7a40      	ldrb	r0, [r0, #9]
   1acd0:	4770      	bx	lr

0001acd2 <bt_conn_is_peer_addr_le>:
{
   1acd2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1acd4:	7a03      	ldrb	r3, [r0, #8]
{
   1acd6:	4604      	mov	r4, r0
	if (id != conn->id) {
   1acd8:	428b      	cmp	r3, r1
{
   1acda:	4615      	mov	r5, r2
	if (id != conn->id) {
   1acdc:	d115      	bne.n	1ad0a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1acde:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ace2:	2207      	movs	r2, #7
   1ace4:	4628      	mov	r0, r5
   1ace6:	f7ff fb32 	bl	1a34e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1acea:	b180      	cbz	r0, 1ad0e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1acec:	78e3      	ldrb	r3, [r4, #3]
   1acee:	2207      	movs	r2, #7
   1acf0:	b943      	cbnz	r3, 1ad04 <bt_conn_is_peer_addr_le+0x32>
   1acf2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1acf6:	4628      	mov	r0, r5
   1acf8:	f7ff fb29 	bl	1a34e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1acfc:	fab0 f080 	clz	r0, r0
   1ad00:	0940      	lsrs	r0, r0, #5
}
   1ad02:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1ad04:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ad08:	e7f5      	b.n	1acf6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ad0a:	2000      	movs	r0, #0
   1ad0c:	e7f9      	b.n	1ad02 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ad0e:	2001      	movs	r0, #1
   1ad10:	e7f7      	b.n	1ad02 <bt_conn_is_peer_addr_le+0x30>

0001ad12 <bt_conn_get_dst>:
}
   1ad12:	3088      	adds	r0, #136	; 0x88
   1ad14:	4770      	bx	lr

0001ad16 <bt_conn_le_conn_update>:
{
   1ad16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad18:	4607      	mov	r7, r0
   1ad1a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ad1c:	f242 0013 	movw	r0, #8211	; 0x2013
   1ad20:	210e      	movs	r1, #14
   1ad22:	f7f2 fb11 	bl	d348 <bt_hci_cmd_create>
	if (!buf) {
   1ad26:	4606      	mov	r6, r0
   1ad28:	b1d0      	cbz	r0, 1ad60 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ad2a:	210e      	movs	r1, #14
   1ad2c:	300c      	adds	r0, #12
   1ad2e:	f001 fc0a 	bl	1c546 <net_buf_simple_add>
   1ad32:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ad34:	220e      	movs	r2, #14
   1ad36:	2100      	movs	r1, #0
   1ad38:	f7ff fb24 	bl	1a384 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ad3c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ad3e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ad40:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ad42:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ad44:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ad46:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ad48:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ad4a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ad4e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ad50:	88ab      	ldrh	r3, [r5, #4]
   1ad52:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ad54:	88eb      	ldrh	r3, [r5, #6]
   1ad56:	8123      	strh	r3, [r4, #8]
}
   1ad58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ad5c:	f7f2 bb2e 	b.w	d3bc <bt_hci_cmd_send_sync>
}
   1ad60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ad66 <l2cap_connected>:
}
   1ad66:	4770      	bx	lr

0001ad68 <z_log_msg_static_create.constprop.0>:
   1ad68:	2300      	movs	r3, #0
   1ad6a:	f7f0 b8a3 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001ad6e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ad6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad70:	4605      	mov	r5, r0
   1ad72:	460f      	mov	r7, r1
   1ad74:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1ad76:	2300      	movs	r3, #0
   1ad78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ad7c:	2104      	movs	r1, #4
   1ad7e:	2000      	movs	r0, #0
   1ad80:	f7f4 ff2a 	bl	fbd8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1ad84:	4604      	mov	r4, r0
   1ad86:	b920      	cbnz	r0, 1ad92 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1ad88:	4628      	mov	r0, r5
}
   1ad8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ad8e:	f7f5 ba23 	b.w	101d8 <l2cap_create_le_sig_pdu.part.0>
   1ad92:	2104      	movs	r1, #4
   1ad94:	300c      	adds	r0, #12
   1ad96:	f001 fbd6 	bl	1c546 <net_buf_simple_add>
	hdr->code = code;
   1ad9a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1ad9c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ad9e:	8046      	strh	r6, [r0, #2]
}
   1ada0:	4620      	mov	r0, r4
   1ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ada4 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1ada4:	4770      	bx	lr

0001ada6 <bt_l2cap_chan_del>:
{
   1ada6:	b570      	push	{r4, r5, r6, lr}
   1ada8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1adaa:	e9d0 3500 	ldrd	r3, r5, [r0]
   1adae:	b123      	cbz	r3, 1adba <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1adb0:	686b      	ldr	r3, [r5, #4]
   1adb2:	b103      	cbz	r3, 1adb6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1adb4:	4798      	blx	r3
	chan->conn = NULL;
   1adb6:	2300      	movs	r3, #0
   1adb8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1adba:	68e3      	ldr	r3, [r4, #12]
   1adbc:	b10b      	cbz	r3, 1adc2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1adbe:	4620      	mov	r0, r4
   1adc0:	4798      	blx	r3
	if (ops->released) {
   1adc2:	6a2b      	ldr	r3, [r5, #32]
   1adc4:	b11b      	cbz	r3, 1adce <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1adc6:	4620      	mov	r0, r4
}
   1adc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1adcc:	4718      	bx	r3
}
   1adce:	bd70      	pop	{r4, r5, r6, pc}

0001add0 <bt_l2cap_disconnected>:
{
   1add0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1add2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1add4:	b130      	cbz	r0, 1ade4 <bt_l2cap_disconnected+0x14>
	return node->next;
   1add6:	f850 4908 	ldr.w	r4, [r0], #-8
   1adda:	b104      	cbz	r4, 1adde <bt_l2cap_disconnected+0xe>
   1addc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1adde:	f7ff ffe2 	bl	1ada6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ade2:	b904      	cbnz	r4, 1ade6 <bt_l2cap_disconnected+0x16>
}
   1ade4:	bd38      	pop	{r3, r4, r5, pc}
   1ade6:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ade8:	b12d      	cbz	r5, 1adf6 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1adea:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1adec:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1adee:	f7ff ffda 	bl	1ada6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1adf2:	462c      	mov	r4, r5
   1adf4:	e7f7      	b.n	1ade6 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1adf6:	4620      	mov	r0, r4
}
   1adf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1adfc:	f7ff bfd3 	b.w	1ada6 <bt_l2cap_chan_del>

0001ae00 <bt_l2cap_security_changed>:
{
   1ae00:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1ae02:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1ae04:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ae06:	b1bb      	cbz	r3, 1ae38 <bt_l2cap_security_changed+0x38>
   1ae08:	4618      	mov	r0, r3
	return node->next;
   1ae0a:	f850 4908 	ldr.w	r4, [r0], #-8
   1ae0e:	b104      	cbz	r4, 1ae12 <bt_l2cap_security_changed+0x12>
   1ae10:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1ae12:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1ae16:	689b      	ldr	r3, [r3, #8]
   1ae18:	b10b      	cbz	r3, 1ae1e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1ae1a:	4629      	mov	r1, r5
   1ae1c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ae1e:	b15c      	cbz	r4, 1ae38 <bt_l2cap_security_changed+0x38>
   1ae20:	4620      	mov	r0, r4
   1ae22:	68a4      	ldr	r4, [r4, #8]
   1ae24:	6843      	ldr	r3, [r0, #4]
   1ae26:	b124      	cbz	r4, 1ae32 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   1ae28:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ae2a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1ae2c:	2b00      	cmp	r3, #0
   1ae2e:	d1f4      	bne.n	1ae1a <bt_l2cap_security_changed+0x1a>
   1ae30:	e7f6      	b.n	1ae20 <bt_l2cap_security_changed+0x20>
   1ae32:	689b      	ldr	r3, [r3, #8]
   1ae34:	2b00      	cmp	r3, #0
   1ae36:	d1f0      	bne.n	1ae1a <bt_l2cap_security_changed+0x1a>
}
   1ae38:	bd38      	pop	{r3, r4, r5, pc}

0001ae3a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ae3a:	3104      	adds	r1, #4
   1ae3c:	f7f4 becc 	b.w	fbd8 <bt_conn_create_pdu_timeout>

0001ae40 <bt_l2cap_send_cb>:
{
   1ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae44:	4614      	mov	r4, r2
   1ae46:	4605      	mov	r5, r0
   1ae48:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ae4a:	f102 000c 	add.w	r0, r2, #12
   1ae4e:	2104      	movs	r1, #4
   1ae50:	461e      	mov	r6, r3
   1ae52:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ae56:	f001 fb8d 	bl	1c574 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ae5a:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   1ae5c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ae5e:	3a04      	subs	r2, #4
   1ae60:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ae62:	4643      	mov	r3, r8
   1ae64:	4632      	mov	r2, r6
   1ae66:	4621      	mov	r1, r4
   1ae68:	4628      	mov	r0, r5
}
   1ae6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ae6e:	f7f4 bce9 	b.w	f844 <bt_conn_send_cb>

0001ae72 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1ae72:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ae74:	b128      	cbz	r0, 1ae82 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ae76:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ae78:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ae7a:	428b      	cmp	r3, r1
   1ae7c:	d001      	beq.n	1ae82 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   1ae7e:	6880      	ldr	r0, [r0, #8]
   1ae80:	e7f8      	b.n	1ae74 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1ae82:	4770      	bx	lr

0001ae84 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ae84:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ae86:	b128      	cbz	r0, 1ae94 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ae88:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ae8a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ae8c:	428b      	cmp	r3, r1
   1ae8e:	d001      	beq.n	1ae94 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1ae90:	6880      	ldr	r0, [r0, #8]
   1ae92:	e7f8      	b.n	1ae86 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1ae94:	4770      	bx	lr

0001ae96 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1ae96:	4770      	bx	lr

0001ae98 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ae98:	4603      	mov	r3, r0
	return list->head;
   1ae9a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ae9c:	b128      	cbz	r0, 1aeaa <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ae9e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1aea0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aea2:	4288      	cmp	r0, r1
	list->head = node;
   1aea4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1aea6:	bf08      	it	eq
   1aea8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1aeaa:	4770      	bx	lr

0001aeac <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1aeac:	4603      	mov	r3, r0
	size_t bytes = 0;
   1aeae:	2000      	movs	r0, #0

	while (buf) {
   1aeb0:	b903      	cbnz	r3, 1aeb4 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1aeb2:	4770      	bx	lr
		bytes += buf->len;
   1aeb4:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1aeb6:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1aeb8:	4410      	add	r0, r2
		buf = buf->frags;
   1aeba:	e7f9      	b.n	1aeb0 <net_buf_frags_len+0x4>

0001aebc <attr_read_type_cb>:
{
   1aebc:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1aebe:	68d4      	ldr	r4, [r2, #12]
   1aec0:	3102      	adds	r1, #2
   1aec2:	7823      	ldrb	r3, [r4, #0]
   1aec4:	b913      	cbnz	r3, 1aecc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1aec6:	7021      	strb	r1, [r4, #0]
	return true;
   1aec8:	2001      	movs	r0, #1
}
   1aeca:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1aecc:	428b      	cmp	r3, r1
   1aece:	d0fb      	beq.n	1aec8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1aed0:	8a03      	ldrh	r3, [r0, #16]
   1aed2:	3b02      	subs	r3, #2
   1aed4:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   1aed6:	2000      	movs	r0, #0
   1aed8:	6110      	str	r0, [r2, #16]
		return false;
   1aeda:	e7f6      	b.n	1aeca <attr_read_type_cb+0xe>

0001aedc <att_prepare_write_req>:
}
   1aedc:	2006      	movs	r0, #6
   1aede:	4770      	bx	lr

0001aee0 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aee0:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1aee4:	4108      	asrs	r0, r1
}
   1aee6:	f000 0001 	and.w	r0, r0, #1
   1aeea:	4770      	bx	lr

0001aeec <write_cb>:
{
   1aeec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1aeee:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1aef0:	4601      	mov	r1, r0
{
   1aef2:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1aef4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1aef8:	6820      	ldr	r0, [r4, #0]
   1aefa:	f000 fe49 	bl	1bb90 <bt_gatt_check_perm>
   1aefe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1af00:	bb00      	cbnz	r0, 1af44 <write_cb+0x58>
	if (!data->req) {
   1af02:	7a23      	ldrb	r3, [r4, #8]
   1af04:	b1b3      	cbz	r3, 1af34 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1af06:	f1a3 0218 	sub.w	r2, r3, #24
   1af0a:	4253      	negs	r3, r2
   1af0c:	4153      	adcs	r3, r2
   1af0e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1af10:	9301      	str	r3, [sp, #4]
   1af12:	8a63      	ldrh	r3, [r4, #18]
   1af14:	4629      	mov	r1, r5
   1af16:	9300      	str	r3, [sp, #0]
   1af18:	68ae      	ldr	r6, [r5, #8]
   1af1a:	8a23      	ldrh	r3, [r4, #16]
   1af1c:	68e2      	ldr	r2, [r4, #12]
   1af1e:	6820      	ldr	r0, [r4, #0]
   1af20:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1af22:	2800      	cmp	r0, #0
   1af24:	db08      	blt.n	1af38 <write_cb+0x4c>
   1af26:	8a23      	ldrh	r3, [r4, #16]
   1af28:	4298      	cmp	r0, r3
   1af2a:	d10e      	bne.n	1af4a <write_cb+0x5e>
	data->err = 0U;
   1af2c:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1af2e:	2001      	movs	r0, #1
	data->err = 0U;
   1af30:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1af32:	e008      	b.n	1af46 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1af34:	2302      	movs	r3, #2
   1af36:	e7eb      	b.n	1af10 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1af38:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1af3c:	d305      	bcc.n	1af4a <write_cb+0x5e>
		return -err;
   1af3e:	4240      	negs	r0, r0
   1af40:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1af42:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1af44:	2000      	movs	r0, #0
}
   1af46:	b002      	add	sp, #8
   1af48:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1af4a:	200e      	movs	r0, #14
   1af4c:	e7f9      	b.n	1af42 <write_cb+0x56>

0001af4e <bt_gatt_foreach_attr>:
{
   1af4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1af50:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1af54:	2300      	movs	r3, #0
   1af56:	461a      	mov	r2, r3
   1af58:	9300      	str	r3, [sp, #0]
   1af5a:	f7f6 fd91 	bl	11a80 <bt_gatt_foreach_attr_type>
}
   1af5e:	b005      	add	sp, #20
   1af60:	f85d fb04 	ldr.w	pc, [sp], #4

0001af64 <find_info_cb>:
{
   1af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1af66:	6893      	ldr	r3, [r2, #8]
{
   1af68:	4605      	mov	r5, r0
   1af6a:	460e      	mov	r6, r1
   1af6c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1af6e:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1af70:	b963      	cbnz	r3, 1af8c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1af72:	6850      	ldr	r0, [r2, #4]
   1af74:	2101      	movs	r1, #1
   1af76:	300c      	adds	r0, #12
   1af78:	f001 fae5 	bl	1c546 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1af7c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1af7e:	682b      	ldr	r3, [r5, #0]
   1af80:	781b      	ldrb	r3, [r3, #0]
   1af82:	2b00      	cmp	r3, #0
   1af84:	bf14      	ite	ne
   1af86:	2302      	movne	r3, #2
   1af88:	2301      	moveq	r3, #1
   1af8a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1af8c:	68a3      	ldr	r3, [r4, #8]
   1af8e:	781b      	ldrb	r3, [r3, #0]
   1af90:	2b01      	cmp	r3, #1
   1af92:	d003      	beq.n	1af9c <find_info_cb+0x38>
   1af94:	2b02      	cmp	r3, #2
   1af96:	d019      	beq.n	1afcc <find_info_cb+0x68>
   1af98:	2000      	movs	r0, #0
   1af9a:	e016      	b.n	1afca <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1af9c:	682b      	ldr	r3, [r5, #0]
   1af9e:	781b      	ldrb	r3, [r3, #0]
   1afa0:	2b00      	cmp	r3, #0
   1afa2:	d1f9      	bne.n	1af98 <find_info_cb+0x34>
   1afa4:	6860      	ldr	r0, [r4, #4]
   1afa6:	2104      	movs	r1, #4
   1afa8:	300c      	adds	r0, #12
   1afaa:	f001 facc 	bl	1c546 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1afae:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1afb0:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1afb2:	682a      	ldr	r2, [r5, #0]
   1afb4:	68e3      	ldr	r3, [r4, #12]
   1afb6:	8852      	ldrh	r2, [r2, #2]
   1afb8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1afba:	6863      	ldr	r3, [r4, #4]
   1afbc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1afbe:	8a1b      	ldrh	r3, [r3, #16]
   1afc0:	1ac0      	subs	r0, r0, r3
   1afc2:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1afc4:	bf94      	ite	ls
   1afc6:	2000      	movls	r0, #0
   1afc8:	2001      	movhi	r0, #1
}
   1afca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1afcc:	682b      	ldr	r3, [r5, #0]
   1afce:	781b      	ldrb	r3, [r3, #0]
   1afd0:	2b02      	cmp	r3, #2
   1afd2:	d1e1      	bne.n	1af98 <find_info_cb+0x34>
   1afd4:	6860      	ldr	r0, [r4, #4]
   1afd6:	2112      	movs	r1, #18
   1afd8:	300c      	adds	r0, #12
   1afda:	f001 fab4 	bl	1c546 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1afde:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1afe0:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1afe2:	6829      	ldr	r1, [r5, #0]
   1afe4:	68e0      	ldr	r0, [r4, #12]
   1afe6:	2210      	movs	r2, #16
   1afe8:	3101      	adds	r1, #1
   1afea:	3002      	adds	r0, #2
   1afec:	f7ff f9bf 	bl	1a36e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1aff0:	6863      	ldr	r3, [r4, #4]
   1aff2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1aff4:	8a1b      	ldrh	r3, [r3, #16]
   1aff6:	1ac0      	subs	r0, r0, r3
   1aff8:	2812      	cmp	r0, #18
   1affa:	e7e3      	b.n	1afc4 <find_info_cb+0x60>

0001affc <att_chan_mtu_updated>:
{
   1affc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1affe:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1b000:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b002:	b352      	cbz	r2, 1b05a <att_chan_mtu_updated+0x5e>
	return node->next;
   1b004:	6813      	ldr	r3, [r2, #0]
   1b006:	b103      	cbz	r3, 1b00a <att_chan_mtu_updated+0xe>
   1b008:	3b88      	subs	r3, #136	; 0x88
   1b00a:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   1b00e:	2200      	movs	r2, #0
   1b010:	4611      	mov	r1, r2
   1b012:	e000      	b.n	1b016 <att_chan_mtu_updated+0x1a>
   1b014:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   1b016:	4284      	cmp	r4, r0
   1b018:	d007      	beq.n	1b02a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1b01a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1b01c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1b01e:	42b1      	cmp	r1, r6
   1b020:	bf38      	it	cc
   1b022:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1b024:	42a2      	cmp	r2, r4
   1b026:	bf38      	it	cc
   1b028:	4622      	movcc	r2, r4
   1b02a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b02c:	b12b      	cbz	r3, 1b03a <att_chan_mtu_updated+0x3e>
   1b02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1b032:	2b00      	cmp	r3, #0
   1b034:	d1ee      	bne.n	1b014 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1b036:	4284      	cmp	r4, r0
   1b038:	d1ef      	bne.n	1b01a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1b03a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1b03c:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1b03e:	428b      	cmp	r3, r1
   1b040:	d801      	bhi.n	1b046 <att_chan_mtu_updated+0x4a>
   1b042:	4290      	cmp	r0, r2
   1b044:	d90b      	bls.n	1b05e <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1b046:	4282      	cmp	r2, r0
   1b048:	bf38      	it	cc
   1b04a:	4602      	movcc	r2, r0
   1b04c:	4299      	cmp	r1, r3
   1b04e:	6828      	ldr	r0, [r5, #0]
   1b050:	bf38      	it	cc
   1b052:	4619      	movcc	r1, r3
}
   1b054:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1b056:	f7f7 b971 	b.w	1233c <bt_gatt_att_max_mtu_changed>
   1b05a:	4611      	mov	r1, r2
   1b05c:	e7ed      	b.n	1b03a <att_chan_mtu_updated+0x3e>
}
   1b05e:	bc70      	pop	{r4, r5, r6}
   1b060:	4770      	bx	lr

0001b062 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b062:	68d0      	ldr	r0, [r2, #12]
   1b064:	3104      	adds	r1, #4
   1b066:	7803      	ldrb	r3, [r0, #0]
   1b068:	b913      	cbnz	r3, 1b070 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b06a:	7001      	strb	r1, [r0, #0]
	return true;
   1b06c:	2001      	movs	r0, #1
   1b06e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b070:	428b      	cmp	r3, r1
   1b072:	d0fb      	beq.n	1b06c <attr_read_group_cb+0xa>
		data->group = NULL;
   1b074:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b076:	6891      	ldr	r1, [r2, #8]
   1b078:	8a0b      	ldrh	r3, [r1, #16]
   1b07a:	3b04      	subs	r3, #4
   1b07c:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   1b07e:	6110      	str	r0, [r2, #16]
}
   1b080:	4770      	bx	lr

0001b082 <z_log_msg_static_create.constprop.0>:
   1b082:	2300      	movs	r3, #0
   1b084:	f7ef bf16 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001b088 <chan_req_send>:
{
   1b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b08a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b08c:	6888      	ldr	r0, [r1, #8]
   1b08e:	f7ff ff0d 	bl	1aeac <net_buf_frags_len>
   1b092:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1b094:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b096:	4283      	cmp	r3, r0
   1b098:	d30b      	bcc.n	1b0b2 <chan_req_send+0x2a>
	req->buf = NULL;
   1b09a:	2600      	movs	r6, #0
	chan->req = req;
   1b09c:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   1b09e:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1b0a0:	4628      	mov	r0, r5
	req->buf = NULL;
   1b0a2:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1b0a4:	4639      	mov	r1, r7
   1b0a6:	f7f5 fb13 	bl	106d0 <chan_send>
	if (err) {
   1b0aa:	b108      	cbz	r0, 1b0b0 <chan_req_send+0x28>
		req->buf = buf;
   1b0ac:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1b0ae:	63ae      	str	r6, [r5, #56]	; 0x38
}
   1b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1b0b2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b0b6:	e7fb      	b.n	1b0b0 <chan_req_send+0x28>

0001b0b8 <process_queue>:
{
   1b0b8:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1b0ba:	2200      	movs	r2, #0
{
   1b0bc:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1b0be:	2300      	movs	r3, #0
   1b0c0:	4608      	mov	r0, r1
{
   1b0c2:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1b0c4:	f001 f9e4 	bl	1c490 <net_buf_get>
	if (buf) {
   1b0c8:	4605      	mov	r5, r0
   1b0ca:	b158      	cbz	r0, 1b0e4 <process_queue+0x2c>
	return chan_send(chan, buf);
   1b0cc:	4601      	mov	r1, r0
   1b0ce:	4620      	mov	r0, r4
   1b0d0:	f7f5 fafe 	bl	106d0 <chan_send>
		if (err) {
   1b0d4:	4604      	mov	r4, r0
   1b0d6:	b118      	cbz	r0, 1b0e0 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1b0d8:	4629      	mov	r1, r5
   1b0da:	4630      	mov	r0, r6
   1b0dc:	f002 fbd5 	bl	1d88a <k_queue_prepend>
}
   1b0e0:	4620      	mov	r0, r4
   1b0e2:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b0e4:	f06f 0401 	mvn.w	r4, #1
   1b0e8:	e7fa      	b.n	1b0e0 <process_queue+0x28>

0001b0ea <bt_att_chan_send_rsp>:
{
   1b0ea:	b538      	push	{r3, r4, r5, lr}
   1b0ec:	4604      	mov	r4, r0
   1b0ee:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1b0f0:	f7f5 faee 	bl	106d0 <chan_send>
	if (err) {
   1b0f4:	b130      	cbz	r0, 1b104 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b0f6:	4629      	mov	r1, r5
   1b0f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   1b0fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b100:	f001 b9f5 	b.w	1c4ee <net_buf_put>
}
   1b104:	bd38      	pop	{r3, r4, r5, pc}

0001b106 <att_chan_read>:
{
   1b106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b10a:	4680      	mov	r8, r0
   1b10c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b10e:	4610      	mov	r0, r2
{
   1b110:	4699      	mov	r9, r3
   1b112:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b114:	f7ff feca 	bl	1aeac <net_buf_frags_len>
   1b118:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1b11c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b11e:	4283      	cmp	r3, r0
   1b120:	d97a      	bls.n	1b218 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b122:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1b126:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1b128:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b12a:	f001 f9e6 	bl	1c4fa <net_buf_frag_last>
	size_t len, total = 0;
   1b12e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b132:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b134:	4630      	mov	r0, r6
   1b136:	f7ff feb9 	bl	1aeac <net_buf_frags_len>
   1b13a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1b13e:	f105 070c 	add.w	r7, r5, #12
   1b142:	1a24      	subs	r4, r4, r0
   1b144:	4638      	mov	r0, r7
   1b146:	f001 fa42 	bl	1c5ce <net_buf_simple_tailroom>
   1b14a:	4284      	cmp	r4, r0
   1b14c:	d211      	bcs.n	1b172 <att_chan_read+0x6c>
   1b14e:	4630      	mov	r0, r6
   1b150:	f7ff feac 	bl	1aeac <net_buf_frags_len>
   1b154:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b158:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b15a:	bb34      	cbnz	r4, 1b1aa <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b15c:	7ab0      	ldrb	r0, [r6, #10]
   1b15e:	f7f8 ff67 	bl	14030 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b162:	2200      	movs	r2, #0
   1b164:	2300      	movs	r3, #0
   1b166:	f001 f98e 	bl	1c486 <net_buf_alloc_fixed>
			if (!frag) {
   1b16a:	4605      	mov	r5, r0
   1b16c:	b930      	cbnz	r0, 1b17c <att_chan_read+0x76>
	return total;
   1b16e:	4657      	mov	r7, sl
   1b170:	e02c      	b.n	1b1cc <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b172:	4638      	mov	r0, r7
   1b174:	f001 fa2b 	bl	1c5ce <net_buf_simple_tailroom>
   1b178:	4604      	mov	r4, r0
   1b17a:	e7ee      	b.n	1b15a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b17c:	4601      	mov	r1, r0
   1b17e:	4630      	mov	r0, r6
   1b180:	f001 f9cc 	bl	1c51c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b184:	4630      	mov	r0, r6
   1b186:	f7ff fe91 	bl	1aeac <net_buf_frags_len>
   1b18a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b18e:	f105 070c 	add.w	r7, r5, #12
   1b192:	1a24      	subs	r4, r4, r0
   1b194:	4638      	mov	r0, r7
   1b196:	f001 fa1a 	bl	1c5ce <net_buf_simple_tailroom>
   1b19a:	4284      	cmp	r4, r0
   1b19c:	d21a      	bcs.n	1b1d4 <att_chan_read+0xce>
   1b19e:	4630      	mov	r0, r6
   1b1a0:	f7ff fe84 	bl	1aeac <net_buf_frags_len>
   1b1a4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b1a8:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b1aa:	68e9      	ldr	r1, [r5, #12]
   1b1ac:	8a2a      	ldrh	r2, [r5, #16]
   1b1ae:	f8cd 9000 	str.w	r9, [sp]
   1b1b2:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b1b6:	440a      	add	r2, r1
   1b1b8:	9803      	ldr	r0, [sp, #12]
   1b1ba:	4659      	mov	r1, fp
   1b1bc:	b2a3      	uxth	r3, r4
   1b1be:	47b8      	blx	r7
		if (read < 0) {
   1b1c0:	1e07      	subs	r7, r0, #0
   1b1c2:	da0c      	bge.n	1b1de <att_chan_read+0xd8>
				return total;
   1b1c4:	f1ba 0f00 	cmp.w	sl, #0
   1b1c8:	bf18      	it	ne
   1b1ca:	4657      	movne	r7, sl
}
   1b1cc:	4638      	mov	r0, r7
   1b1ce:	b005      	add	sp, #20
   1b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1d4:	4638      	mov	r0, r7
   1b1d6:	f001 f9fa 	bl	1c5ce <net_buf_simple_tailroom>
   1b1da:	4604      	mov	r4, r0
   1b1dc:	e7e5      	b.n	1b1aa <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b1e0:	b993      	cbnz	r3, 1b208 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b1e2:	4639      	mov	r1, r7
   1b1e4:	f105 000c 	add.w	r0, r5, #12
   1b1e8:	f001 f9ad 	bl	1c546 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b1ec:	4630      	mov	r0, r6
   1b1ee:	f7ff fe5d 	bl	1aeac <net_buf_frags_len>
   1b1f2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1b1f6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b1f8:	4283      	cmp	r3, r0
		total += read;
   1b1fa:	44ba      	add	sl, r7
		offset += read;
   1b1fc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b200:	d9b5      	bls.n	1b16e <att_chan_read+0x68>
   1b202:	42a7      	cmp	r7, r4
   1b204:	d096      	beq.n	1b134 <att_chan_read+0x2e>
   1b206:	e7b2      	b.n	1b16e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b208:	4639      	mov	r1, r7
   1b20a:	4628      	mov	r0, r5
   1b20c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b210:	4798      	blx	r3
   1b212:	2800      	cmp	r0, #0
   1b214:	d1e5      	bne.n	1b1e2 <att_chan_read+0xdc>
   1b216:	e7aa      	b.n	1b16e <att_chan_read+0x68>
		return 0;
   1b218:	2700      	movs	r7, #0
   1b21a:	e7d7      	b.n	1b1cc <att_chan_read+0xc6>

0001b21c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b21c:	2200      	movs	r2, #0
	return list->head;
   1b21e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b220:	b903      	cbnz	r3, 1b224 <sys_slist_find_and_remove.isra.0+0x8>
   1b222:	4770      	bx	lr
   1b224:	428b      	cmp	r3, r1
   1b226:	d10f      	bne.n	1b248 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1b228:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b22a:	b93a      	cbnz	r2, 1b23c <sys_slist_find_and_remove.isra.0+0x20>
   1b22c:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1b22e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b230:	4291      	cmp	r1, r2
   1b232:	d100      	bne.n	1b236 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b234:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b236:	2300      	movs	r3, #0
   1b238:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b23a:	4770      	bx	lr
	parent->next = child;
   1b23c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b23e:	6843      	ldr	r3, [r0, #4]
   1b240:	4299      	cmp	r1, r3
	list->tail = node;
   1b242:	bf08      	it	eq
   1b244:	6042      	streq	r2, [r0, #4]
}
   1b246:	e7f6      	b.n	1b236 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b248:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b24a:	681b      	ldr	r3, [r3, #0]
   1b24c:	e7e8      	b.n	1b220 <sys_slist_find_and_remove.isra.0+0x4>

0001b24e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b24e:	2301      	movs	r3, #1
   1b250:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b252:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b254:	e8d0 2fef 	ldaex	r2, [r0]
   1b258:	401a      	ands	r2, r3
   1b25a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1b25e:	2900      	cmp	r1, #0
   1b260:	d1f8      	bne.n	1b254 <atomic_clear_bit+0x6>
}
   1b262:	4770      	bx	lr

0001b264 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1b264:	2006      	movs	r0, #6
   1b266:	4770      	bx	lr

0001b268 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b268:	2301      	movs	r3, #1
{
   1b26a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b26c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b270:	e8d0 3fef 	ldaex	r3, [r0]
   1b274:	ea43 0201 	orr.w	r2, r3, r1
   1b278:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1b27c:	2c00      	cmp	r4, #0
   1b27e:	d1f7      	bne.n	1b270 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1b280:	4219      	tst	r1, r3
}
   1b282:	bf14      	ite	ne
   1b284:	2001      	movne	r0, #1
   1b286:	2000      	moveq	r0, #0
   1b288:	bd10      	pop	{r4, pc}

0001b28a <read_cb>:
{
   1b28a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1b28c:	2300      	movs	r3, #0
{
   1b28e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1b290:	6816      	ldr	r6, [r2, #0]
{
   1b292:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1b294:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b296:	4629      	mov	r1, r5
	data->err = 0x00;
   1b298:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b29a:	2295      	movs	r2, #149	; 0x95
   1b29c:	f000 fc78 	bl	1bb90 <bt_gatt_check_perm>
   1b2a0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b2a2:	b980      	cbnz	r0, 1b2c6 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b2a4:	e9cd 0000 	strd	r0, r0, [sp]
   1b2a8:	4629      	mov	r1, r5
   1b2aa:	4630      	mov	r0, r6
   1b2ac:	88a3      	ldrh	r3, [r4, #4]
   1b2ae:	68a2      	ldr	r2, [r4, #8]
   1b2b0:	f7ff ff29 	bl	1b106 <att_chan_read>
	if (ret < 0) {
   1b2b4:	2800      	cmp	r0, #0
   1b2b6:	da09      	bge.n	1b2cc <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1b2b8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1b2bc:	bf32      	itee	cc
   1b2be:	200e      	movcc	r0, #14
		return -err;
   1b2c0:	4240      	negcs	r0, r0
   1b2c2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1b2c4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b2c6:	2000      	movs	r0, #0
}
   1b2c8:	b002      	add	sp, #8
   1b2ca:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1b2cc:	2001      	movs	r0, #1
   1b2ce:	e7fb      	b.n	1b2c8 <read_cb+0x3e>

0001b2d0 <read_vl_cb>:
{
   1b2d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1b2d4:	2300      	movs	r3, #0
{
   1b2d6:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1b2d8:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b2dc:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1b2de:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b2e2:	4631      	mov	r1, r6
	data->err = 0x00;
   1b2e4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b2e6:	2295      	movs	r2, #149	; 0x95
   1b2e8:	f000 fc52 	bl	1bb90 <bt_gatt_check_perm>
   1b2ec:	4605      	mov	r5, r0
   1b2ee:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b2f0:	b9e0      	cbnz	r0, 1b32c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1b2f2:	68a0      	ldr	r0, [r4, #8]
   1b2f4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1b2f8:	8a02      	ldrh	r2, [r0, #16]
   1b2fa:	1a9b      	subs	r3, r3, r2
   1b2fc:	2b01      	cmp	r3, #1
   1b2fe:	dd15      	ble.n	1b32c <read_vl_cb+0x5c>
   1b300:	2102      	movs	r1, #2
   1b302:	300c      	adds	r0, #12
   1b304:	f001 f91f 	bl	1c546 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b308:	e9cd 5500 	strd	r5, r5, [sp]
   1b30c:	4607      	mov	r7, r0
   1b30e:	88a3      	ldrh	r3, [r4, #4]
   1b310:	4631      	mov	r1, r6
   1b312:	4640      	mov	r0, r8
   1b314:	68a2      	ldr	r2, [r4, #8]
   1b316:	f7ff fef6 	bl	1b106 <att_chan_read>
	if (read < 0) {
   1b31a:	1e03      	subs	r3, r0, #0
   1b31c:	da0a      	bge.n	1b334 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1b31e:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1b322:	bf32      	itee	cc
   1b324:	230e      	movcc	r3, #14
		return -err;
   1b326:	425b      	negcs	r3, r3
   1b328:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1b32a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b32c:	2000      	movs	r0, #0
}
   1b32e:	b002      	add	sp, #8
   1b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1b334:	2001      	movs	r0, #1
	rsp->len = read;
   1b336:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1b338:	e7f9      	b.n	1b32e <read_vl_cb+0x5e>

0001b33a <bt_att_sent>:
{
   1b33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   1b33c:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   1b340:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b342:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   1b344:	2104      	movs	r1, #4
   1b346:	3030      	adds	r0, #48	; 0x30
   1b348:	f7ff ff81 	bl	1b24e <atomic_clear_bit>
	if (!att) {
   1b34c:	b304      	cbz	r4, 1b390 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b34e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1b350:	b98b      	cbnz	r3, 1b376 <bt_att_sent+0x3c>
   1b352:	6863      	ldr	r3, [r4, #4]
   1b354:	b17b      	cbz	r3, 1b376 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b356:	1d20      	adds	r0, r4, #4
   1b358:	f7ff fd9e 	bl	1ae98 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b35c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b35e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b360:	4638      	mov	r0, r7
   1b362:	f7ff fe91 	bl	1b088 <chan_req_send>
   1b366:	2800      	cmp	r0, #0
   1b368:	da12      	bge.n	1b390 <bt_att_sent+0x56>
	return list->head;
   1b36a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1b36c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b36e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1b370:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b372:	b903      	cbnz	r3, 1b376 <bt_att_sent+0x3c>
	list->tail = node;
   1b374:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b376:	4638      	mov	r0, r7
   1b378:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1b37c:	f7ff fe9c 	bl	1b0b8 <process_queue>
	if (!err) {
   1b380:	b130      	cbz	r0, 1b390 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   1b382:	4638      	mov	r0, r7
   1b384:	f104 010c 	add.w	r1, r4, #12
}
   1b388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1b38c:	f7ff be94 	b.w	1b0b8 <process_queue>
}
   1b390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b392 <att_req_send_process>:
{
   1b392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1b396:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1b398:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b39a:	2c00      	cmp	r4, #0
   1b39c:	d03a      	beq.n	1b414 <att_req_send_process+0x82>
	return node->next;
   1b39e:	f854 6988 	ldr.w	r6, [r4], #-136
   1b3a2:	b106      	cbz	r6, 1b3a6 <att_req_send_process+0x14>
   1b3a4:	3e88      	subs	r6, #136	; 0x88
{
   1b3a6:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1b3a8:	f108 0704 	add.w	r7, r8, #4
{
   1b3ac:	461d      	mov	r5, r3
   1b3ae:	e013      	b.n	1b3d8 <att_req_send_process+0x46>
		if (!req && prev &&
   1b3b0:	b1bb      	cbz	r3, 1b3e2 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b3b2:	2103      	movs	r1, #3
   1b3b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b3b8:	f7ff fd92 	bl	1aee0 <atomic_test_bit>
   1b3bc:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b3be:	f103 0034 	add.w	r0, r3, #52	; 0x34
   1b3c2:	f7ff fd8d 	bl	1aee0 <atomic_test_bit>
		if (!req && prev &&
   1b3c6:	4282      	cmp	r2, r0
   1b3c8:	d10b      	bne.n	1b3e2 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b3ca:	b31e      	cbz	r6, 1b414 <att_req_send_process+0x82>
   1b3cc:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   1b3d0:	b102      	cbz	r2, 1b3d4 <att_req_send_process+0x42>
   1b3d2:	3a88      	subs	r2, #136	; 0x88
{
   1b3d4:	4634      	mov	r4, r6
   1b3d6:	4616      	mov	r6, r2
		if (chan->req) {
   1b3d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1b3da:	2a00      	cmp	r2, #0
   1b3dc:	d1f5      	bne.n	1b3ca <att_req_send_process+0x38>
		if (!req && prev &&
   1b3de:	2d00      	cmp	r5, #0
   1b3e0:	d0e6      	beq.n	1b3b0 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1b3e2:	4638      	mov	r0, r7
   1b3e4:	f7ff fd58 	bl	1ae98 <sys_slist_get>
	if (node) {
   1b3e8:	4605      	mov	r5, r0
   1b3ea:	b908      	cbnz	r0, 1b3f0 <att_req_send_process+0x5e>
   1b3ec:	4623      	mov	r3, r4
   1b3ee:	e7ec      	b.n	1b3ca <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1b3f0:	4601      	mov	r1, r0
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	f7ff fe48 	bl	1b088 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1b3f8:	2800      	cmp	r0, #0
   1b3fa:	da0b      	bge.n	1b414 <att_req_send_process+0x82>
	return list->head;
   1b3fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1b400:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b402:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1b406:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d1ee      	bne.n	1b3ec <att_req_send_process+0x5a>
	list->tail = node;
   1b40e:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1b412:	e7eb      	b.n	1b3ec <att_req_send_process+0x5a>
}
   1b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b418 <bt_att_status>:
{
   1b418:	b538      	push	{r3, r4, r5, lr}
   1b41a:	4605      	mov	r5, r0
   1b41c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b41e:	2100      	movs	r1, #0
   1b420:	f7ff fd5e 	bl	1aee0 <atomic_test_bit>
   1b424:	b1b8      	cbz	r0, 1b456 <bt_att_status+0x3e>
	if (!chan->att) {
   1b426:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1b42a:	b1a0      	cbz	r0, 1b456 <bt_att_status+0x3e>
	if (chan->req) {
   1b42c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1b42e:	b993      	cbnz	r3, 1b456 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   1b430:	3004      	adds	r0, #4
   1b432:	f7ff fd31 	bl	1ae98 <sys_slist_get>
	if (!node) {
   1b436:	4604      	mov	r4, r0
   1b438:	b168      	cbz	r0, 1b456 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   1b43a:	4601      	mov	r1, r0
   1b43c:	1f28      	subs	r0, r5, #4
   1b43e:	f7ff fe23 	bl	1b088 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b442:	2800      	cmp	r0, #0
   1b444:	da07      	bge.n	1b456 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   1b446:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1b44a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b44c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b44e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b450:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b452:	b902      	cbnz	r2, 1b456 <bt_att_status+0x3e>
	list->tail = node;
   1b454:	609c      	str	r4, [r3, #8]
}
   1b456:	bd38      	pop	{r3, r4, r5, pc}

0001b458 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1b458:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1b45a:	6883      	ldr	r3, [r0, #8]
   1b45c:	699b      	ldr	r3, [r3, #24]
   1b45e:	b10b      	cbz	r3, 1b464 <att_sent+0xc>
		chan->ops->sent(chan);
   1b460:	3004      	adds	r0, #4
   1b462:	4718      	bx	r3
}
   1b464:	4770      	bx	lr

0001b466 <att_unknown>:
{
   1b466:	b510      	push	{r4, lr}
   1b468:	460c      	mov	r4, r1
	if (!err) {
   1b46a:	b90a      	cbnz	r2, 1b470 <att_unknown+0xa>
		att_sent(conn, user_data);
   1b46c:	f7ff fff4 	bl	1b458 <att_sent>
	tx_meta_data_free(user_data);
   1b470:	4620      	mov	r0, r4
}
   1b472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b476:	f7f5 b85d 	b.w	10534 <tx_meta_data_free>

0001b47a <att_tx_complete>:
{
   1b47a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b47e:	4606      	mov	r6, r0
   1b480:	460d      	mov	r5, r1
	if (!err) {
   1b482:	4614      	mov	r4, r2
   1b484:	b122      	cbz	r2, 1b490 <att_tx_complete+0x16>
}
   1b486:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1b48a:	4608      	mov	r0, r1
   1b48c:	f7f5 b852 	b.w	10534 <tx_meta_data_free>
		att_sent(conn, user_data);
   1b490:	f7ff ffe2 	bl	1b458 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1b494:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1b496:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1b498:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1b49c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1b4a0:	f7f5 f848 	bl	10534 <tx_meta_data_free>
	if (!err && func) {
   1b4a4:	b92f      	cbnz	r7, 1b4b2 <att_tx_complete+0x38>
}
   1b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1b4aa:	4649      	mov	r1, r9
   1b4ac:	4630      	mov	r0, r6
   1b4ae:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1b4b0:	3401      	adds	r4, #1
   1b4b2:	b2a3      	uxth	r3, r4
   1b4b4:	4543      	cmp	r3, r8
   1b4b6:	d3f8      	bcc.n	1b4aa <att_tx_complete+0x30>
   1b4b8:	e7f5      	b.n	1b4a6 <att_tx_complete+0x2c>

0001b4ba <att_req_sent>:
{
   1b4ba:	b510      	push	{r4, lr}
   1b4bc:	460c      	mov	r4, r1
	if (!err) {
   1b4be:	b90a      	cbnz	r2, 1b4c4 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1b4c0:	f7ff ffca 	bl	1b458 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1b4c4:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1b4c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b4c8:	b12b      	cbz	r3, 1b4d6 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1b4ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b4ce:	2300      	movs	r3, #0
   1b4d0:	3058      	adds	r0, #88	; 0x58
   1b4d2:	f7fc fbcb 	bl	17c6c <k_work_reschedule>
	tx_meta_data_free(user_data);
   1b4d6:	4620      	mov	r0, r4
}
   1b4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b4dc:	f7f5 b82a 	b.w	10534 <tx_meta_data_free>

0001b4e0 <att_cfm_sent>:
{
   1b4e0:	b510      	push	{r4, lr}
   1b4e2:	460c      	mov	r4, r1
	if (!err) {
   1b4e4:	b90a      	cbnz	r2, 1b4ea <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1b4e6:	f7ff ffb7 	bl	1b458 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   1b4ea:	6820      	ldr	r0, [r4, #0]
   1b4ec:	2101      	movs	r1, #1
   1b4ee:	3034      	adds	r0, #52	; 0x34
   1b4f0:	f7ff fead 	bl	1b24e <atomic_clear_bit>
	tx_meta_data_free(data);
   1b4f4:	4620      	mov	r0, r4
}
   1b4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b4fa:	f7f5 b81b 	b.w	10534 <tx_meta_data_free>

0001b4fe <att_rsp_sent>:
{
   1b4fe:	b510      	push	{r4, lr}
   1b500:	460c      	mov	r4, r1
	if (!err) {
   1b502:	b90a      	cbnz	r2, 1b508 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1b504:	f7ff ffa8 	bl	1b458 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   1b508:	6820      	ldr	r0, [r4, #0]
   1b50a:	2100      	movs	r1, #0
   1b50c:	3034      	adds	r0, #52	; 0x34
   1b50e:	f7ff fe9e 	bl	1b24e <atomic_clear_bit>
	tx_meta_data_free(data);
   1b512:	4620      	mov	r0, r4
}
   1b514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b518:	f7f5 b80c 	b.w	10534 <tx_meta_data_free>

0001b51c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b520:	4688      	mov	r8, r1
   1b522:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b524:	2101      	movs	r1, #1
   1b526:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b528:	4605      	mov	r5, r0
   1b52a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b52c:	f7f5 fac8 	bl	10ac0 <bt_att_chan_create_pdu>
	if (!buf) {
   1b530:	4604      	mov	r4, r0
   1b532:	b170      	cbz	r0, 1b552 <send_err_rsp.part.0+0x36>
   1b534:	2104      	movs	r1, #4
   1b536:	300c      	adds	r0, #12
   1b538:	f001 f805 	bl	1c546 <net_buf_simple_add>
	rsp->request = req;
   1b53c:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1b540:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1b544:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1b546:	4621      	mov	r1, r4
   1b548:	4628      	mov	r0, r5
}
   1b54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1b54e:	f7ff bdcc 	b.w	1b0ea <bt_att_chan_send_rsp>
}
   1b552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b556 <att_write_req>:
{
   1b556:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b558:	460c      	mov	r4, r1
   1b55a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b55c:	f101 000c 	add.w	r0, r1, #12
   1b560:	f001 f829 	bl	1c5b6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b564:	8a22      	ldrh	r2, [r4, #16]
   1b566:	4603      	mov	r3, r0
   1b568:	9201      	str	r2, [sp, #4]
   1b56a:	68e2      	ldr	r2, [r4, #12]
   1b56c:	2112      	movs	r1, #18
   1b56e:	9200      	str	r2, [sp, #0]
   1b570:	4628      	mov	r0, r5
   1b572:	2213      	movs	r2, #19
   1b574:	f7f5 fbc8 	bl	10d08 <att_write_rsp.constprop.0>
}
   1b578:	b003      	add	sp, #12
   1b57a:	bd30      	pop	{r4, r5, pc}

0001b57c <att_write_cmd>:
{
   1b57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b57e:	460c      	mov	r4, r1
   1b580:	4605      	mov	r5, r0
   1b582:	f101 000c 	add.w	r0, r1, #12
   1b586:	f001 f816 	bl	1c5b6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b58a:	8a22      	ldrh	r2, [r4, #16]
   1b58c:	4603      	mov	r3, r0
   1b58e:	9201      	str	r2, [sp, #4]
   1b590:	68e2      	ldr	r2, [r4, #12]
   1b592:	4628      	mov	r0, r5
   1b594:	9200      	str	r2, [sp, #0]
   1b596:	2200      	movs	r2, #0
   1b598:	4611      	mov	r1, r2
   1b59a:	f7f5 fbb5 	bl	10d08 <att_write_rsp.constprop.0>
}
   1b59e:	b003      	add	sp, #12
   1b5a0:	bd30      	pop	{r4, r5, pc}

0001b5a2 <att_read_blob_req>:
{
   1b5a2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b5a4:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b5a6:	210c      	movs	r1, #12
   1b5a8:	8813      	ldrh	r3, [r2, #0]
   1b5aa:	8852      	ldrh	r2, [r2, #2]
   1b5ac:	9200      	str	r2, [sp, #0]
   1b5ae:	220d      	movs	r2, #13
   1b5b0:	f7f5 fd6e 	bl	11090 <att_read_rsp>
}
   1b5b4:	b003      	add	sp, #12
   1b5b6:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5ba <att_read_req>:
{
   1b5ba:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b5bc:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1b5be:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b5c0:	210a      	movs	r1, #10
   1b5c2:	881b      	ldrh	r3, [r3, #0]
   1b5c4:	9200      	str	r2, [sp, #0]
   1b5c6:	220b      	movs	r2, #11
   1b5c8:	f7f5 fd62 	bl	11090 <att_read_rsp>
}
   1b5cc:	b003      	add	sp, #12
   1b5ce:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5d2 <att_mtu_req>:
{
   1b5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5d4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1b5d6:	f850 2b34 	ldr.w	r2, [r0], #52
{
   1b5da:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b5dc:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1b5de:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b5e0:	f7ff fc7e 	bl	1aee0 <atomic_test_bit>
   1b5e4:	4604      	mov	r4, r0
   1b5e6:	b9f0      	cbnz	r0, 1b626 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b5e8:	68db      	ldr	r3, [r3, #12]
   1b5ea:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b5ec:	2e16      	cmp	r6, #22
   1b5ee:	d91c      	bls.n	1b62a <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b5f0:	4638      	mov	r0, r7
   1b5f2:	2202      	movs	r2, #2
   1b5f4:	f7f5 fbec 	bl	10dd0 <bt_att_create_pdu>
	if (!pdu) {
   1b5f8:	4607      	mov	r7, r0
   1b5fa:	b1c0      	cbz	r0, 1b62e <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1b5fc:	2102      	movs	r1, #2
   1b5fe:	300c      	adds	r0, #12
   1b600:	f000 ffa1 	bl	1c546 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b604:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   1b606:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b608:	7003      	strb	r3, [r0, #0]
   1b60a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1b60c:	4628      	mov	r0, r5
   1b60e:	f7ff fd6c 	bl	1b0ea <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b612:	2e41      	cmp	r6, #65	; 0x41
   1b614:	bf28      	it	cs
   1b616:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1b618:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b61a:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b61c:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1b61e:	f7ff fced 	bl	1affc <att_chan_mtu_updated>
	return 0;
   1b622:	4620      	mov	r0, r4
}
   1b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b626:	2006      	movs	r0, #6
   1b628:	e7fc      	b.n	1b624 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   1b62a:	2004      	movs	r0, #4
   1b62c:	e7fa      	b.n	1b624 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   1b62e:	200e      	movs	r0, #14
   1b630:	e7f8      	b.n	1b624 <att_mtu_req+0x52>

0001b632 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b632:	8a0a      	ldrh	r2, [r1, #16]
   1b634:	2300      	movs	r3, #0
   1b636:	68c9      	ldr	r1, [r1, #12]
   1b638:	f7f5 bed6 	b.w	113e8 <att_handle_rsp>

0001b63c <bt_att_encrypt_change>:
{
   1b63c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b63e:	4606      	mov	r6, r0
	if (!att_chan->att) {
   1b640:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1b644:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   1b646:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   1b64a:	2b00      	cmp	r3, #0
   1b64c:	d036      	beq.n	1b6bc <bt_att_encrypt_change+0x80>
	if (hci_status) {
   1b64e:	b139      	cbz	r1, 1b660 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   1b650:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b652:	2b00      	cmp	r3, #0
   1b654:	d032      	beq.n	1b6bc <bt_att_encrypt_change+0x80>
   1b656:	7c1b      	ldrb	r3, [r3, #16]
   1b658:	07da      	lsls	r2, r3, #31
   1b65a:	d52f      	bpl.n	1b6bc <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   1b65c:	2305      	movs	r3, #5
   1b65e:	e020      	b.n	1b6a2 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   1b660:	4628      	mov	r0, r5
   1b662:	f7f6 fe7f 	bl	12364 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1b666:	7a6b      	ldrb	r3, [r5, #9]
   1b668:	2b01      	cmp	r3, #1
   1b66a:	d027      	beq.n	1b6bc <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1b66c:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1b66e:	b32d      	cbz	r5, 1b6bc <bt_att_encrypt_change+0x80>
   1b670:	7c2b      	ldrb	r3, [r5, #16]
   1b672:	07db      	lsls	r3, r3, #31
   1b674:	d522      	bpl.n	1b6bc <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   1b676:	68eb      	ldr	r3, [r5, #12]
   1b678:	2b00      	cmp	r3, #0
   1b67a:	d0ef      	beq.n	1b65c <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1b67c:	4630      	mov	r0, r6
   1b67e:	696a      	ldr	r2, [r5, #20]
   1b680:	7c69      	ldrb	r1, [r5, #17]
   1b682:	f7f5 fa1d 	bl	10ac0 <bt_att_chan_create_pdu>
	if (!buf) {
   1b686:	4604      	mov	r4, r0
   1b688:	b150      	cbz	r0, 1b6a0 <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   1b68a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   1b68e:	68eb      	ldr	r3, [r5, #12]
   1b690:	4798      	blx	r3
   1b692:	b168      	cbz	r0, 1b6b0 <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b694:	69a0      	ldr	r0, [r4, #24]
   1b696:	f7f4 ff4d 	bl	10534 <tx_meta_data_free>
		net_buf_unref(buf);
   1b69a:	4620      	mov	r0, r4
   1b69c:	f7f8 fd8a 	bl	141b4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1b6a0:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   1b6a2:	2200      	movs	r2, #0
   1b6a4:	4630      	mov	r0, r6
}
   1b6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1b6aa:	4611      	mov	r1, r2
   1b6ac:	f7f5 be9c 	b.w	113e8 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   1b6b0:	4621      	mov	r1, r4
   1b6b2:	4630      	mov	r0, r6
   1b6b4:	f7f5 f80c 	bl	106d0 <chan_send>
   1b6b8:	2800      	cmp	r0, #0
   1b6ba:	d1eb      	bne.n	1b694 <bt_att_encrypt_change+0x58>
}
   1b6bc:	bd70      	pop	{r4, r5, r6, pc}

0001b6be <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1b6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6c0:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1b6c2:	f7f5 f87d 	bl	107c0 <att_get>
	if (!att) {
   1b6c6:	4604      	mov	r4, r0
   1b6c8:	b940      	cbnz	r0, 1b6dc <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b6ca:	69a8      	ldr	r0, [r5, #24]
   1b6cc:	f7f4 ff32 	bl	10534 <tx_meta_data_free>
		net_buf_unref(buf);
   1b6d0:	4628      	mov	r0, r5
   1b6d2:	f7f8 fd6f 	bl	141b4 <net_buf_unref>
		return -ENOTCONN;
   1b6d6:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1b6dc:	f100 060c 	add.w	r6, r0, #12
   1b6e0:	4629      	mov	r1, r5
   1b6e2:	4630      	mov	r0, r6
   1b6e4:	f000 ff03 	bl	1c4ee <net_buf_put>
	return list->head;
   1b6e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b6ea:	b14d      	cbz	r5, 1b700 <bt_att_send+0x42>
	return node->next;
   1b6ec:	f855 4988 	ldr.w	r4, [r5], #-136
   1b6f0:	b104      	cbz	r4, 1b6f4 <bt_att_send+0x36>
   1b6f2:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1b6f4:	4631      	mov	r1, r6
   1b6f6:	4628      	mov	r0, r5
   1b6f8:	f7ff fcde 	bl	1b0b8 <process_queue>
		if (!err) {
   1b6fc:	4603      	mov	r3, r0
   1b6fe:	b980      	cbnz	r0, 1b722 <bt_att_send+0x64>
	return 0;
   1b700:	2000      	movs	r0, #0
   1b702:	e7ea      	b.n	1b6da <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b704:	2103      	movs	r1, #3
   1b706:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b70a:	f7ff fbe9 	bl	1aee0 <atomic_test_bit>
   1b70e:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b710:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1b714:	f7ff fbe4 	bl	1aee0 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1b718:	4287      	cmp	r7, r0
   1b71a:	f06f 0301 	mvn.w	r3, #1
   1b71e:	d107      	bne.n	1b730 <bt_att_send+0x72>
   1b720:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b722:	2c00      	cmp	r4, #0
   1b724:	d0ec      	beq.n	1b700 <bt_att_send+0x42>
   1b726:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1b72a:	b922      	cbnz	r2, 1b736 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   1b72c:	3302      	adds	r3, #2
   1b72e:	d0e9      	beq.n	1b704 <bt_att_send+0x46>
{
   1b730:	4625      	mov	r5, r4
   1b732:	4614      	mov	r4, r2
   1b734:	e7de      	b.n	1b6f4 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b736:	3a88      	subs	r2, #136	; 0x88
   1b738:	e7f8      	b.n	1b72c <bt_att_send+0x6e>

0001b73a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b73a:	b510      	push	{r4, lr}
   1b73c:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1b73e:	f7f5 f83f 	bl	107c0 <att_get>
	if (!att) {
   1b742:	b160      	cbz	r0, 1b75e <bt_att_req_send+0x24>
	parent->next = child;
   1b744:	2300      	movs	r3, #0
   1b746:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b748:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1b74a:	b92b      	cbnz	r3, 1b758 <bt_att_req_send+0x1e>
	list->head = node;
   1b74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1b750:	f7ff fe1f 	bl	1b392 <att_req_send_process>

	return 0;
   1b754:	2000      	movs	r0, #0
}
   1b756:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b758:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b75a:	6084      	str	r4, [r0, #8]
}
   1b75c:	e7f8      	b.n	1b750 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1b75e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b762:	e7f8      	b.n	1b756 <bt_att_req_send+0x1c>

0001b764 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1b764:	2001      	movs	r0, #1
   1b766:	4770      	bx	lr

0001b768 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1b768:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   1b76a:	f7f5 f829 	bl	107c0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1b76e:	b150      	cbz	r0, 1b786 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   1b770:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b772:	b144      	cbz	r4, 1b786 <bt_att_clear_out_of_sync_sent+0x1e>
   1b774:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   1b776:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b77a:	2105      	movs	r1, #5
   1b77c:	f7ff fd67 	bl	1b24e <atomic_clear_bit>
	return node->next;
   1b780:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   1b784:	e7f5      	b.n	1b772 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   1b786:	bd10      	pop	{r4, pc}

0001b788 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1b788:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b78a:	2104      	movs	r1, #4
   1b78c:	f7ff fb7a 	bl	1ae84 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1b790:	b128      	cbz	r0, 1b79e <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1b792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1b796:	2105      	movs	r1, #5
   1b798:	3030      	adds	r0, #48	; 0x30
   1b79a:	f7ff bba1 	b.w	1aee0 <atomic_test_bit>
}
   1b79e:	bd08      	pop	{r3, pc}

0001b7a0 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1b7a0:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1b7a2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1b7a6:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1b7a8:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1b7aa:	8082      	strh	r2, [r0, #4]
}
   1b7ac:	4770      	bx	lr

0001b7ae <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1b7ae:	6010      	str	r0, [r2, #0]
}
   1b7b0:	2000      	movs	r0, #0
   1b7b2:	4770      	bx	lr

0001b7b4 <gatt_ccc_changed>:
{
   1b7b4:	460b      	mov	r3, r1
   1b7b6:	8909      	ldrh	r1, [r1, #8]
   1b7b8:	8a5a      	ldrh	r2, [r3, #18]
   1b7ba:	4291      	cmp	r1, r2
   1b7bc:	bf38      	it	cc
   1b7be:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1b7c0:	8a9a      	ldrh	r2, [r3, #20]
   1b7c2:	428a      	cmp	r2, r1
   1b7c4:	d003      	beq.n	1b7ce <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1b7c6:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1b7c8:	699b      	ldr	r3, [r3, #24]
   1b7ca:	b103      	cbz	r3, 1b7ce <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1b7cc:	4718      	bx	r3
}
   1b7ce:	4770      	bx	lr

0001b7d0 <gatt_indicate_rsp>:
{
   1b7d0:	b510      	push	{r4, lr}
   1b7d2:	9c02      	ldr	r4, [sp, #8]
   1b7d4:	460a      	mov	r2, r1
	if (params->func) {
   1b7d6:	68a3      	ldr	r3, [r4, #8]
   1b7d8:	b10b      	cbz	r3, 1b7de <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1b7da:	4621      	mov	r1, r4
   1b7dc:	4798      	blx	r3
	params->_ref--;
   1b7de:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b7e0:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1b7e2:	3b01      	subs	r3, #1
   1b7e4:	b2db      	uxtb	r3, r3
   1b7e6:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b7e8:	b122      	cbz	r2, 1b7f4 <gatt_indicate_rsp+0x24>
   1b7ea:	b91b      	cbnz	r3, 1b7f4 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1b7ec:	4620      	mov	r0, r4
}
   1b7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1b7f2:	4710      	bx	r2
}
   1b7f4:	bd10      	pop	{r4, pc}

0001b7f6 <match_uuid>:
	data->attr = attr;
   1b7f6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1b7f8:	8091      	strh	r1, [r2, #4]
}
   1b7fa:	2000      	movs	r0, #0
   1b7fc:	4770      	bx	lr

0001b7fe <gen_hash_m>:
{
   1b7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b800:	6807      	ldr	r7, [r0, #0]
{
   1b802:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b804:	783d      	ldrb	r5, [r7, #0]
{
   1b806:	4614      	mov	r4, r2
   1b808:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b80a:	b9dd      	cbnz	r5, 1b844 <gen_hash_m+0x46>
	switch (u16->val) {
   1b80c:	887b      	ldrh	r3, [r7, #2]
   1b80e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b812:	d004      	beq.n	1b81e <gen_hash_m+0x20>
   1b814:	d810      	bhi.n	1b838 <gen_hash_m+0x3a>
   1b816:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b81a:	2b03      	cmp	r3, #3
   1b81c:	d812      	bhi.n	1b844 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1b81e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b822:	2202      	movs	r2, #2
   1b824:	4620      	mov	r0, r4
   1b826:	f10d 010a 	add.w	r1, sp, #10
   1b82a:	f7fe fa42 	bl	19cb2 <tc_cmac_update>
   1b82e:	b968      	cbnz	r0, 1b84c <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1b830:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1b834:	65a2      	str	r2, [r4, #88]	; 0x58
   1b836:	e006      	b.n	1b846 <gen_hash_m+0x48>
	switch (u16->val) {
   1b838:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1b83c:	33ff      	adds	r3, #255	; 0xff
   1b83e:	b29b      	uxth	r3, r3
   1b840:	2b04      	cmp	r3, #4
   1b842:	d91e      	bls.n	1b882 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1b844:	2501      	movs	r5, #1
}
   1b846:	4628      	mov	r0, r5
   1b848:	b009      	add	sp, #36	; 0x24
   1b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1b84c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b84e:	2202      	movs	r2, #2
   1b850:	4620      	mov	r0, r4
   1b852:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1b856:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b85a:	f7fe fa2a 	bl	19cb2 <tc_cmac_update>
   1b85e:	2800      	cmp	r0, #0
   1b860:	d0e6      	beq.n	1b830 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b862:	2000      	movs	r0, #0
   1b864:	9000      	str	r0, [sp, #0]
   1b866:	aa03      	add	r2, sp, #12
   1b868:	2313      	movs	r3, #19
   1b86a:	4631      	mov	r1, r6
   1b86c:	6877      	ldr	r7, [r6, #4]
   1b86e:	47b8      	blx	r7
		if (len < 0) {
   1b870:	1e02      	subs	r2, r0, #0
   1b872:	dbdf      	blt.n	1b834 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1b874:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b876:	4620      	mov	r0, r4
   1b878:	f7fe fa1b 	bl	19cb2 <tc_cmac_update>
   1b87c:	2800      	cmp	r0, #0
   1b87e:	d1e1      	bne.n	1b844 <gen_hash_m+0x46>
   1b880:	e7d6      	b.n	1b830 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1b882:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b886:	2202      	movs	r2, #2
   1b888:	4620      	mov	r0, r4
   1b88a:	f10d 010a 	add.w	r1, sp, #10
   1b88e:	f7fe fa10 	bl	19cb2 <tc_cmac_update>
   1b892:	2800      	cmp	r0, #0
   1b894:	d0cc      	beq.n	1b830 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1b896:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b898:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1b89a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b89e:	f10d 010a 	add.w	r1, sp, #10
   1b8a2:	e7e8      	b.n	1b876 <gen_hash_m+0x78>

0001b8a4 <bt_addr_le_eq>:
   1b8a4:	2207      	movs	r2, #7
{
   1b8a6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1b8a8:	f7fe fd51 	bl	1a34e <memcmp>
}
   1b8ac:	fab0 f080 	clz	r0, r0
   1b8b0:	0940      	lsrs	r0, r0, #5
   1b8b2:	bd08      	pop	{r3, pc}

0001b8b4 <atomic_or>:
{
   1b8b4:	4603      	mov	r3, r0
   1b8b6:	b510      	push	{r4, lr}
}
   1b8b8:	e8d3 0fef 	ldaex	r0, [r3]
   1b8bc:	ea40 0201 	orr.w	r2, r0, r1
   1b8c0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1b8c4:	2c00      	cmp	r4, #0
   1b8c6:	d1f7      	bne.n	1b8b8 <atomic_or+0x4>
   1b8c8:	bd10      	pop	{r4, pc}

0001b8ca <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b8ca:	2207      	movs	r2, #7
   1b8cc:	f7fe bd4f 	b.w	1a36e <memcpy>

0001b8d0 <z_log_msg_static_create.constprop.0>:
   1b8d0:	2300      	movs	r3, #0
   1b8d2:	f7ef baef 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001b8d6 <sc_clear>:
{
   1b8d6:	b570      	push	{r4, r5, r6, lr}
   1b8d8:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b8da:	f100 0688 	add.w	r6, r0, #136	; 0x88
   1b8de:	4631      	mov	r1, r6
   1b8e0:	7a00      	ldrb	r0, [r0, #8]
   1b8e2:	f7fe fed9 	bl	1a698 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1b8e6:	4631      	mov	r1, r6
   1b8e8:	7a20      	ldrb	r0, [r4, #8]
   1b8ea:	f7f5 fe71 	bl	115d0 <find_sc_cfg>
	if (!cfg) {
   1b8ee:	b128      	cbz	r0, 1b8fc <sc_clear+0x26>
}
   1b8f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1b8f4:	220c      	movs	r2, #12
   1b8f6:	2100      	movs	r1, #0
   1b8f8:	f7fe bd44 	b.w	1a384 <memset>
}
   1b8fc:	bd70      	pop	{r4, r5, r6, pc}

0001b8fe <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1b8fe:	2a02      	cmp	r2, #2
{
   1b900:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1b902:	d108      	bne.n	1b916 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1b904:	2300      	movs	r3, #0
   1b906:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b90a:	461a      	mov	r2, r3
   1b90c:	7a00      	ldrb	r0, [r0, #8]
   1b90e:	f7f5 ff21 	bl	11754 <sc_save>
}
   1b912:	2002      	movs	r0, #2
   1b914:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1b916:	f7ff ffde 	bl	1b8d6 <sc_clear>
   1b91a:	e7fa      	b.n	1b912 <sc_ccc_cfg_write+0x14>

0001b91c <read_appearance>:
{
   1b91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b91e:	4615      	mov	r5, r2
   1b920:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1b924:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b926:	f7fe feb5 	bl	1a694 <bt_get_appearance>
	if (offset > value_len) {
   1b92a:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b92c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b930:	d80e      	bhi.n	1b950 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1b932:	f1c6 0402 	rsb	r4, r6, #2
   1b936:	42bc      	cmp	r4, r7
   1b938:	bfa8      	it	ge
   1b93a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b93c:	f10d 0306 	add.w	r3, sp, #6
   1b940:	4622      	mov	r2, r4
   1b942:	4628      	mov	r0, r5
   1b944:	1999      	adds	r1, r3, r6
   1b946:	f7fe fd12 	bl	1a36e <memcpy>
}
   1b94a:	4620      	mov	r0, r4
   1b94c:	b003      	add	sp, #12
   1b94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b950:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b954:	e7f9      	b.n	1b94a <read_appearance+0x2e>

0001b956 <read_name>:
{
   1b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b95a:	4698      	mov	r8, r3
   1b95c:	4615      	mov	r5, r2
   1b95e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1b962:	f7f2 fc97 	bl	e294 <bt_get_name>
   1b966:	4607      	mov	r7, r0
				 strlen(name));
   1b968:	f7fe fcc2 	bl	1a2f0 <strlen>
	if (offset > value_len) {
   1b96c:	b283      	uxth	r3, r0
   1b96e:	42b3      	cmp	r3, r6
   1b970:	d30c      	bcc.n	1b98c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1b972:	1b9c      	subs	r4, r3, r6
   1b974:	4544      	cmp	r4, r8
   1b976:	bfa8      	it	ge
   1b978:	4644      	movge	r4, r8
   1b97a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1b97c:	4622      	mov	r2, r4
   1b97e:	4628      	mov	r0, r5
   1b980:	19b9      	adds	r1, r7, r6
   1b982:	f7fe fcf4 	bl	1a36e <memcpy>
}
   1b986:	4620      	mov	r0, r4
   1b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b98c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b990:	e7f9      	b.n	1b986 <read_name+0x30>

0001b992 <cf_read>:
{
   1b992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b994:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1b996:	2300      	movs	r3, #0
{
   1b998:	4615      	mov	r5, r2
   1b99a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1b99e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1b9a2:	f7f5 fde7 	bl	11574 <find_cf_cfg>
	if (cfg) {
   1b9a6:	b128      	cbz	r0, 1b9b4 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1b9a8:	f100 0108 	add.w	r1, r0, #8
   1b9ac:	2201      	movs	r2, #1
   1b9ae:	a801      	add	r0, sp, #4
   1b9b0:	f7fe fcdd 	bl	1a36e <memcpy>
	if (offset > value_len) {
   1b9b4:	2e01      	cmp	r6, #1
   1b9b6:	d80d      	bhi.n	1b9d4 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1b9b8:	f1c6 0401 	rsb	r4, r6, #1
   1b9bc:	42bc      	cmp	r4, r7
   1b9be:	bfa8      	it	ge
   1b9c0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b9c2:	ab01      	add	r3, sp, #4
   1b9c4:	4622      	mov	r2, r4
   1b9c6:	4628      	mov	r0, r5
   1b9c8:	1999      	adds	r1, r3, r6
   1b9ca:	f7fe fcd0 	bl	1a36e <memcpy>
}
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	b003      	add	sp, #12
   1b9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b9d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b9d8:	e7f9      	b.n	1b9ce <cf_read+0x3c>

0001b9da <bt_gatt_attr_read_service>:
{
   1b9da:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1b9dc:	68c9      	ldr	r1, [r1, #12]
{
   1b9de:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1b9e0:	780a      	ldrb	r2, [r1, #0]
{
   1b9e2:	461c      	mov	r4, r3
   1b9e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1b9e8:	b992      	cbnz	r2, 1ba10 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b9ea:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1b9ec:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b9ee:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b9f2:	d818      	bhi.n	1ba26 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b9f4:	f1c3 0202 	rsb	r2, r3, #2
   1b9f8:	4294      	cmp	r4, r2
   1b9fa:	bfa8      	it	ge
   1b9fc:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b9fe:	4622      	mov	r2, r4
   1ba00:	f10d 0106 	add.w	r1, sp, #6
   1ba04:	4419      	add	r1, r3
   1ba06:	f7fe fcb2 	bl	1a36e <memcpy>
}
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	b002      	add	sp, #8
   1ba0e:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1ba10:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1ba12:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1ba16:	d806      	bhi.n	1ba26 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1ba18:	f1c3 0210 	rsb	r2, r3, #16
   1ba1c:	4294      	cmp	r4, r2
   1ba1e:	bfa8      	it	ge
   1ba20:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ba22:	4622      	mov	r2, r4
   1ba24:	e7ee      	b.n	1ba04 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ba26:	f06f 0406 	mvn.w	r4, #6
   1ba2a:	e7ee      	b.n	1ba0a <bt_gatt_attr_read_service+0x30>

0001ba2c <bt_gatt_attr_read_ccc>:
{
   1ba2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1ba2e:	68c9      	ldr	r1, [r1, #12]
{
   1ba30:	4615      	mov	r5, r2
   1ba32:	461f      	mov	r7, r3
   1ba34:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1ba38:	f7f5 fdec 	bl	11614 <find_ccc_cfg>
	if (cfg) {
   1ba3c:	b100      	cbz	r0, 1ba40 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1ba3e:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1ba40:	2e02      	cmp	r6, #2
   1ba42:	f8ad 0006 	strh.w	r0, [sp, #6]
   1ba46:	d80e      	bhi.n	1ba66 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1ba48:	f1c6 0402 	rsb	r4, r6, #2
   1ba4c:	42bc      	cmp	r4, r7
   1ba4e:	bfa8      	it	ge
   1ba50:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ba52:	f10d 0306 	add.w	r3, sp, #6
   1ba56:	4622      	mov	r2, r4
   1ba58:	4628      	mov	r0, r5
   1ba5a:	1999      	adds	r1, r3, r6
   1ba5c:	f7fe fc87 	bl	1a36e <memcpy>
}
   1ba60:	4620      	mov	r0, r4
   1ba62:	b003      	add	sp, #12
   1ba64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ba66:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1ba6a:	e7f9      	b.n	1ba60 <bt_gatt_attr_read_ccc+0x34>

0001ba6c <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ba6c:	2101      	movs	r1, #1
   1ba6e:	300c      	adds	r0, #12
   1ba70:	f7ff bf20 	b.w	1b8b4 <atomic_or>

0001ba74 <sc_restore_rsp>:
{
   1ba74:	b538      	push	{r3, r4, r5, lr}
   1ba76:	4604      	mov	r4, r0
   1ba78:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1ba7a:	f7ff fe73 	bl	1b764 <bt_att_fixed_chan_only>
   1ba7e:	b140      	cbz	r0, 1ba92 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   1ba80:	4620      	mov	r0, r4
   1ba82:	f7f5 fd77 	bl	11574 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ba86:	b120      	cbz	r0, 1ba92 <sc_restore_rsp+0x1e>
   1ba88:	7a03      	ldrb	r3, [r0, #8]
   1ba8a:	07db      	lsls	r3, r3, #31
   1ba8c:	d501      	bpl.n	1ba92 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   1ba8e:	f7ff ffed 	bl	1ba6c <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1ba92:	b965      	cbnz	r5, 1baae <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ba94:	7a20      	ldrb	r0, [r4, #8]
   1ba96:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ba9a:	f7f5 fd99 	bl	115d0 <find_sc_cfg>
		if (sc_cfg) {
   1ba9e:	b130      	cbz	r0, 1baae <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1baa0:	4629      	mov	r1, r5
}
   1baa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1baa6:	2204      	movs	r2, #4
   1baa8:	3008      	adds	r0, #8
   1baaa:	f7fe bc6b 	b.w	1a384 <memset>
}
   1baae:	bd38      	pop	{r3, r4, r5, pc}

0001bab0 <bt_gatt_attr_read>:
{
   1bab0:	b510      	push	{r4, lr}
   1bab2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1bab6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1baba:	4610      	mov	r0, r2
	if (offset > value_len) {
   1babc:	42a1      	cmp	r1, r4
   1babe:	d80b      	bhi.n	1bad8 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1bac0:	1a64      	subs	r4, r4, r1
   1bac2:	429c      	cmp	r4, r3
   1bac4:	bfa8      	it	ge
   1bac6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bac8:	9b03      	ldr	r3, [sp, #12]
   1baca:	b2a4      	uxth	r4, r4
   1bacc:	4622      	mov	r2, r4
   1bace:	4419      	add	r1, r3
   1bad0:	f7fe fc4d 	bl	1a36e <memcpy>
}
   1bad4:	4620      	mov	r0, r4
   1bad6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bad8:	f06f 0406 	mvn.w	r4, #6
   1badc:	e7fa      	b.n	1bad4 <bt_gatt_attr_read+0x24>

0001bade <bt_gatt_attr_value_handle>:
{
   1bade:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1bae0:	4604      	mov	r4, r0
   1bae2:	b910      	cbnz	r0, 1baea <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1bae4:	2000      	movs	r0, #0
}
   1bae6:	b002      	add	sp, #8
   1bae8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1baea:	2300      	movs	r3, #0
   1baec:	f88d 3004 	strb.w	r3, [sp, #4]
   1baf0:	f642 0303 	movw	r3, #10243	; 0x2803
   1baf4:	6800      	ldr	r0, [r0, #0]
   1baf6:	a901      	add	r1, sp, #4
   1baf8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bafc:	f7fe fc74 	bl	1a3e8 <bt_uuid_cmp>
   1bb00:	2800      	cmp	r0, #0
   1bb02:	d1ef      	bne.n	1bae4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1bb04:	68e3      	ldr	r3, [r4, #12]
   1bb06:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1bb08:	2800      	cmp	r0, #0
   1bb0a:	d1ec      	bne.n	1bae6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1bb0c:	4620      	mov	r0, r4
   1bb0e:	f7f5 ff87 	bl	11a20 <bt_gatt_attr_get_handle>
   1bb12:	3001      	adds	r0, #1
   1bb14:	b280      	uxth	r0, r0
	return handle;
   1bb16:	e7e6      	b.n	1bae6 <bt_gatt_attr_value_handle+0x8>

0001bb18 <bt_gatt_attr_read_chrc>:
{
   1bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1bb1a:	68cc      	ldr	r4, [r1, #12]
{
   1bb1c:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1bb1e:	79a3      	ldrb	r3, [r4, #6]
{
   1bb20:	b087      	sub	sp, #28
   1bb22:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1bb24:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1bb28:	4615      	mov	r5, r2
   1bb2a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bb2e:	f7ff ffd6 	bl	1bade <bt_gatt_attr_value_handle>
   1bb32:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bb36:	6821      	ldr	r1, [r4, #0]
   1bb38:	780b      	ldrb	r3, [r1, #0]
   1bb3a:	b99b      	cbnz	r3, 1bb64 <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   1bb3c:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bb3e:	884b      	ldrh	r3, [r1, #2]
   1bb40:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1bb44:	42b4      	cmp	r4, r6
   1bb46:	d315      	bcc.n	1bb74 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1bb48:	1ba4      	subs	r4, r4, r6
   1bb4a:	42bc      	cmp	r4, r7
   1bb4c:	bfa8      	it	ge
   1bb4e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bb50:	ab01      	add	r3, sp, #4
   1bb52:	b2a4      	uxth	r4, r4
   1bb54:	4622      	mov	r2, r4
   1bb56:	4628      	mov	r0, r5
   1bb58:	1999      	adds	r1, r3, r6
   1bb5a:	f7fe fc08 	bl	1a36e <memcpy>
}
   1bb5e:	4620      	mov	r0, r4
   1bb60:	b007      	add	sp, #28
   1bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1bb64:	2210      	movs	r2, #16
   1bb66:	3101      	adds	r1, #1
   1bb68:	f10d 0007 	add.w	r0, sp, #7
   1bb6c:	f7fe fbff 	bl	1a36e <memcpy>
		value_len += 16U;
   1bb70:	2413      	movs	r4, #19
   1bb72:	e7e7      	b.n	1bb44 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bb74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1bb78:	e7f1      	b.n	1bb5e <bt_gatt_attr_read_chrc+0x46>

0001bb7a <bt_gatt_foreach_attr>:
{
   1bb7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bb7c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1bb80:	2300      	movs	r3, #0
   1bb82:	461a      	mov	r2, r3
   1bb84:	9300      	str	r3, [sp, #0]
   1bb86:	f7f5 ff7b 	bl	11a80 <bt_gatt_foreach_attr_type>
}
   1bb8a:	b005      	add	sp, #20
   1bb8c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb90 <bt_gatt_check_perm>:
{
   1bb90:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1bb92:	07d4      	lsls	r4, r2, #31
{
   1bb94:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bb96:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1bb98:	d504      	bpl.n	1bba4 <bt_gatt_check_perm+0x14>
   1bb9a:	f013 0f95 	tst.w	r3, #149	; 0x95
   1bb9e:	d02b      	beq.n	1bbf8 <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bba0:	6848      	ldr	r0, [r1, #4]
   1bba2:	b348      	cbz	r0, 1bbf8 <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1bba4:	0790      	lsls	r0, r2, #30
   1bba6:	d504      	bpl.n	1bbb2 <bt_gatt_check_perm+0x22>
   1bba8:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1bbac:	d026      	beq.n	1bbfc <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1bbae:	6889      	ldr	r1, [r1, #8]
   1bbb0:	b321      	cbz	r1, 1bbfc <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   1bbb2:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1bbb6:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   1bbba:	d00d      	beq.n	1bbd8 <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   1bbbc:	7aeb      	ldrb	r3, [r5, #11]
   1bbbe:	b92b      	cbnz	r3, 1bbcc <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   1bbc0:	4628      	mov	r0, r5
   1bbc2:	f7ff f841 	bl	1ac48 <bt_conn_ltk_present>
   1bbc6:	b9d8      	cbnz	r0, 1bc00 <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   1bbc8:	2005      	movs	r0, #5
}
   1bbca:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1bbcc:	f014 0f30 	tst.w	r4, #48	; 0x30
   1bbd0:	d104      	bne.n	1bbdc <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   1bbd2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1bbd6:	d107      	bne.n	1bbe8 <bt_gatt_check_perm+0x58>
	return 0;
   1bbd8:	2000      	movs	r0, #0
   1bbda:	e7f6      	b.n	1bbca <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1bbdc:	4628      	mov	r0, r5
   1bbde:	f7ff f876 	bl	1acce <bt_conn_get_security>
   1bbe2:	2802      	cmp	r0, #2
   1bbe4:	d8f5      	bhi.n	1bbd2 <bt_gatt_check_perm+0x42>
   1bbe6:	e7ef      	b.n	1bbc8 <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   1bbe8:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d0eb      	beq.n	1bbc8 <bt_gatt_check_perm+0x38>
   1bbf0:	7b5b      	ldrb	r3, [r3, #13]
   1bbf2:	06db      	lsls	r3, r3, #27
   1bbf4:	d5e8      	bpl.n	1bbc8 <bt_gatt_check_perm+0x38>
   1bbf6:	e7ef      	b.n	1bbd8 <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1bbf8:	2002      	movs	r0, #2
   1bbfa:	e7e6      	b.n	1bbca <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1bbfc:	2003      	movs	r0, #3
   1bbfe:	e7e4      	b.n	1bbca <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1bc00:	200f      	movs	r0, #15
   1bc02:	e7e2      	b.n	1bbca <bt_gatt_check_perm+0x3a>

0001bc04 <bt_gatt_is_subscribed>:
{
   1bc04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1bc08:	7b43      	ldrb	r3, [r0, #13]
{
   1bc0a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1bc0c:	2b07      	cmp	r3, #7
{
   1bc0e:	460c      	mov	r4, r1
   1bc10:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1bc12:	d110      	bne.n	1bc36 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1bc14:	2300      	movs	r3, #0
   1bc16:	f88d 300c 	strb.w	r3, [sp, #12]
   1bc1a:	f642 0303 	movw	r3, #10243	; 0x2803
   1bc1e:	6820      	ldr	r0, [r4, #0]
   1bc20:	a903      	add	r1, sp, #12
   1bc22:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc26:	f7fe fbdf 	bl	1a3e8 <bt_uuid_cmp>
   1bc2a:	b960      	cbnz	r0, 1bc46 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1bc2c:	68e3      	ldr	r3, [r4, #12]
   1bc2e:	799b      	ldrb	r3, [r3, #6]
   1bc30:	f013 0f30 	tst.w	r3, #48	; 0x30
   1bc34:	d103      	bne.n	1bc3e <bt_gatt_is_subscribed+0x3a>
		return false;
   1bc36:	2000      	movs	r0, #0
}
   1bc38:	b004      	add	sp, #16
   1bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1bc3e:	4620      	mov	r0, r4
   1bc40:	f7f6 f800 	bl	11c44 <bt_gatt_attr_next>
   1bc44:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1bc46:	2300      	movs	r3, #0
   1bc48:	6820      	ldr	r0, [r4, #0]
   1bc4a:	f88d 300c 	strb.w	r3, [sp, #12]
   1bc4e:	f642 1302 	movw	r3, #10498	; 0x2902
   1bc52:	a903      	add	r1, sp, #12
   1bc54:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc58:	f7fe fbc6 	bl	1a3e8 <bt_uuid_cmp>
   1bc5c:	b118      	cbz	r0, 1bc66 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1bc5e:	4620      	mov	r0, r4
   1bc60:	f7f5 fff0 	bl	11c44 <bt_gatt_attr_next>
   1bc64:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1bc66:	2700      	movs	r7, #0
   1bc68:	f642 1802 	movw	r8, #10498	; 0x2902
   1bc6c:	6820      	ldr	r0, [r4, #0]
   1bc6e:	4669      	mov	r1, sp
   1bc70:	f88d 7000 	strb.w	r7, [sp]
   1bc74:	f8ad 8002 	strh.w	r8, [sp, #2]
   1bc78:	f7fe fbb6 	bl	1a3e8 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bc7c:	bb20      	cbnz	r0, 1bcc8 <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1bc7e:	2300      	movs	r3, #0
   1bc80:	6820      	ldr	r0, [r4, #0]
   1bc82:	f88d 300c 	strb.w	r3, [sp, #12]
   1bc86:	f642 1302 	movw	r3, #10498	; 0x2902
   1bc8a:	a903      	add	r1, sp, #12
   1bc8c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc90:	f7fe fbaa 	bl	1a3e8 <bt_uuid_cmp>
   1bc94:	2800      	cmp	r0, #0
   1bc96:	d1ce      	bne.n	1bc36 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1bc98:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1bc9a:	4628      	mov	r0, r5
   1bc9c:	4622      	mov	r2, r4
   1bc9e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bca2:	f7ff f816 	bl	1acd2 <bt_conn_is_peer_addr_le>
   1bca6:	b110      	cbz	r0, 1bcae <bt_gatt_is_subscribed+0xaa>
   1bca8:	8923      	ldrh	r3, [r4, #8]
   1bcaa:	421e      	tst	r6, r3
   1bcac:	d10a      	bne.n	1bcc4 <bt_gatt_is_subscribed+0xc0>
   1bcae:	4628      	mov	r0, r5
   1bcb0:	7aa1      	ldrb	r1, [r4, #10]
   1bcb2:	f104 020b 	add.w	r2, r4, #11
   1bcb6:	f7ff f80c 	bl	1acd2 <bt_conn_is_peer_addr_le>
   1bcba:	2800      	cmp	r0, #0
   1bcbc:	d0bb      	beq.n	1bc36 <bt_gatt_is_subscribed+0x32>
   1bcbe:	8a63      	ldrh	r3, [r4, #18]
   1bcc0:	421e      	tst	r6, r3
   1bcc2:	d0b8      	beq.n	1bc36 <bt_gatt_is_subscribed+0x32>
			return true;
   1bcc4:	2001      	movs	r0, #1
   1bcc6:	e7b7      	b.n	1bc38 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1bcc8:	f642 0303 	movw	r3, #10243	; 0x2803
   1bccc:	6820      	ldr	r0, [r4, #0]
   1bcce:	a901      	add	r1, sp, #4
   1bcd0:	f88d 7004 	strb.w	r7, [sp, #4]
   1bcd4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bcd8:	f7fe fb86 	bl	1a3e8 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1bcdc:	2800      	cmp	r0, #0
   1bcde:	d0ce      	beq.n	1bc7e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bce0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bce4:	6820      	ldr	r0, [r4, #0]
   1bce6:	a902      	add	r1, sp, #8
   1bce8:	f88d 7008 	strb.w	r7, [sp, #8]
   1bcec:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bcf0:	f7fe fb7a 	bl	1a3e8 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1bcf4:	2800      	cmp	r0, #0
   1bcf6:	d0c2      	beq.n	1bc7e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bcf8:	f642 0301 	movw	r3, #10241	; 0x2801
   1bcfc:	6820      	ldr	r0, [r4, #0]
   1bcfe:	a903      	add	r1, sp, #12
   1bd00:	f88d 700c 	strb.w	r7, [sp, #12]
   1bd04:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bd08:	f7fe fb6e 	bl	1a3e8 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bd0c:	2800      	cmp	r0, #0
   1bd0e:	d0b6      	beq.n	1bc7e <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1bd10:	4620      	mov	r0, r4
   1bd12:	f7f5 ff97 	bl	11c44 <bt_gatt_attr_next>
		if (!attr) {
   1bd16:	4604      	mov	r4, r0
   1bd18:	2800      	cmp	r0, #0
   1bd1a:	d1a7      	bne.n	1bc6c <bt_gatt_is_subscribed+0x68>
   1bd1c:	e78b      	b.n	1bc36 <bt_gatt_is_subscribed+0x32>

0001bd1e <bt_gatt_change_aware>:
{
   1bd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd22:	4605      	mov	r5, r0
   1bd24:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   1bd26:	f7f5 fc25 	bl	11574 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1bd2a:	4604      	mov	r4, r0
   1bd2c:	b1e0      	cbz	r0, 1bd68 <bt_gatt_change_aware+0x4a>
   1bd2e:	7a03      	ldrb	r3, [r0, #8]
   1bd30:	07da      	lsls	r2, r3, #31
   1bd32:	d519      	bpl.n	1bd68 <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1bd34:	f100 060c 	add.w	r6, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd38:	e8d6 7faf 	lda	r7, [r6]
   1bd3c:	f017 0701 	ands.w	r7, r7, #1
   1bd40:	d112      	bne.n	1bd68 <bt_gatt_change_aware+0x4a>
	if (!req) {
   1bd42:	f1b8 0f00 	cmp.w	r8, #0
   1bd46:	d010      	beq.n	1bd6a <bt_gatt_change_aware+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd48:	e8d6 3fef 	ldaex	r3, [r6]
   1bd4c:	f023 0202 	bic.w	r2, r3, #2
   1bd50:	e8c6 2fe1 	stlex	r1, r2, [r6]
   1bd54:	2900      	cmp	r1, #0
   1bd56:	d1f7      	bne.n	1bd48 <bt_gatt_change_aware+0x2a>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1bd58:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   1bd5a:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1bd5c:	d508      	bpl.n	1bd70 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   1bd5e:	f7ff fd03 	bl	1b768 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   1bd62:	4620      	mov	r0, r4
   1bd64:	f7ff fe82 	bl	1ba6c <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   1bd68:	2701      	movs	r7, #1
}
   1bd6a:	4638      	mov	r0, r7
   1bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1bd70:	f7ff fcf8 	bl	1b764 <bt_att_fixed_chan_only>
   1bd74:	2800      	cmp	r0, #0
   1bd76:	d0f8      	beq.n	1bd6a <bt_gatt_change_aware+0x4c>
   1bd78:	4628      	mov	r0, r5
   1bd7a:	f7ff fd05 	bl	1b788 <bt_att_out_of_sync_sent_on_fixed>
   1bd7e:	2800      	cmp	r0, #0
   1bd80:	d0f3      	beq.n	1bd6a <bt_gatt_change_aware+0x4c>
   1bd82:	e8d6 3fef 	ldaex	r3, [r6]
   1bd86:	f023 0302 	bic.w	r3, r3, #2
   1bd8a:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1bd8e:	2a00      	cmp	r2, #0
   1bd90:	d1f7      	bne.n	1bd82 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   1bd92:	4628      	mov	r0, r5
   1bd94:	e7e3      	b.n	1bd5e <bt_gatt_change_aware+0x40>

0001bd96 <smp_pairing_rsp>:
}
   1bd96:	2007      	movs	r0, #7
   1bd98:	4770      	bx	lr

0001bd9a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd9a:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bd9e:	4108      	asrs	r0, r1
}
   1bda0:	f000 0001 	and.w	r0, r0, #1
   1bda4:	4770      	bx	lr

0001bda6 <update_keys_check>:
{
   1bda6:	4603      	mov	r3, r0
   1bda8:	b510      	push	{r4, lr}
	if (!keys ||
   1bdaa:	b1d9      	cbz	r1, 1bde4 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1bdac:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1bdae:	f010 0f24 	tst.w	r0, #36	; 0x24
   1bdb2:	d017      	beq.n	1bde4 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bdb4:	7d1a      	ldrb	r2, [r3, #20]
   1bdb6:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1bdb8:	7b09      	ldrb	r1, [r1, #12]
   1bdba:	42a2      	cmp	r2, r4
   1bdbc:	bf28      	it	cs
   1bdbe:	4622      	movcs	r2, r4
   1bdc0:	4291      	cmp	r1, r2
   1bdc2:	d901      	bls.n	1bdc8 <update_keys_check+0x22>
			return false;
   1bdc4:	2000      	movs	r0, #0
}
   1bdc6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1bdc8:	0682      	lsls	r2, r0, #26
   1bdca:	d404      	bmi.n	1bdd6 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1bdcc:	7a18      	ldrb	r0, [r3, #8]
   1bdce:	3800      	subs	r0, #0
   1bdd0:	bf18      	it	ne
   1bdd2:	2001      	movne	r0, #1
   1bdd4:	e7f7      	b.n	1bdc6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bdd6:	2105      	movs	r1, #5
   1bdd8:	1d18      	adds	r0, r3, #4
   1bdda:	f7ff ffde 	bl	1bd9a <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1bdde:	2800      	cmp	r0, #0
   1bde0:	d1f4      	bne.n	1bdcc <update_keys_check+0x26>
   1bde2:	e7ef      	b.n	1bdc4 <update_keys_check+0x1e>
	return true;
   1bde4:	2001      	movs	r0, #1
   1bde6:	e7ee      	b.n	1bdc6 <update_keys_check+0x20>

0001bde8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bde8:	2301      	movs	r3, #1
   1bdea:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bdec:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bdee:	e8d0 2fef 	ldaex	r2, [r0]
   1bdf2:	401a      	ands	r2, r3
   1bdf4:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1bdf8:	2900      	cmp	r1, #0
   1bdfa:	d1f8      	bne.n	1bdee <atomic_clear_bit+0x6>
}
   1bdfc:	4770      	bx	lr

0001bdfe <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   1bdfe:	2007      	movs	r0, #7
   1be00:	4770      	bx	lr

0001be02 <z_log_msg_static_create.constprop.0>:
   1be02:	2300      	movs	r3, #0
   1be04:	f7ef b856 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001be08 <smp_chan_get>:
{
   1be08:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1be0a:	2106      	movs	r1, #6
   1be0c:	f7ff f83a 	bl	1ae84 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1be10:	b918      	cbnz	r0, 1be1a <smp_chan_get+0x12>
}
   1be12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1be16:	f7f6 bba9 	b.w	1256c <smp_chan_get.part.0>
   1be1a:	38ec      	subs	r0, #236	; 0xec
   1be1c:	bd08      	pop	{r3, pc}

0001be1e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be1e:	2301      	movs	r3, #1
   1be20:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be22:	e8d0 2fef 	ldaex	r2, [r0]
   1be26:	431a      	orrs	r2, r3
   1be28:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1be2c:	2900      	cmp	r1, #0
   1be2e:	d1f8      	bne.n	1be22 <atomic_set_bit+0x4>
}
   1be30:	4770      	bx	lr

0001be32 <smp_keypress_notif>:
{
   1be32:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1be34:	210e      	movs	r1, #14
   1be36:	f7ff fff2 	bl	1be1e <atomic_set_bit>
}
   1be3a:	2000      	movs	r0, #0
   1be3c:	bd08      	pop	{r3, pc}

0001be3e <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1be3e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1be40:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1be42:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1be44:	4628      	mov	r0, r5
   1be46:	2104      	movs	r1, #4
   1be48:	f7ff ffa7 	bl	1bd9a <atomic_test_bit>
   1be4c:	b168      	cbz	r0, 1be6a <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   1be4e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1be50:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1be52:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1be54:	4608      	mov	r0, r1
   1be56:	f7fe fff0 	bl	1ae3a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1be5a:	4604      	mov	r4, r0
   1be5c:	b940      	cbnz	r0, 1be70 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1be5e:	2104      	movs	r1, #4
   1be60:	4628      	mov	r0, r5
   1be62:	f7ff ffdc 	bl	1be1e <atomic_set_bit>
}
   1be66:	4620      	mov	r0, r4
   1be68:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1be6a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1be6e:	e7ef      	b.n	1be50 <smp_create_pdu.constprop.0+0x12>
   1be70:	2101      	movs	r1, #1
   1be72:	300c      	adds	r0, #12
   1be74:	f000 fb67 	bl	1c546 <net_buf_simple_add>
	hdr->code = op;
   1be78:	7006      	strb	r6, [r0, #0]
	return buf;
   1be7a:	e7f4      	b.n	1be66 <smp_create_pdu.constprop.0+0x28>

0001be7c <send_pairing_rsp>:
{
   1be7c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1be7e:	2102      	movs	r1, #2
{
   1be80:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1be82:	f7ff ffdc 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1be86:	4604      	mov	r4, r0
   1be88:	b178      	cbz	r0, 1beaa <send_pairing_rsp+0x2e>
   1be8a:	2106      	movs	r1, #6
   1be8c:	300c      	adds	r0, #12
   1be8e:	f000 fb5a 	bl	1c546 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1be92:	2206      	movs	r2, #6
   1be94:	f105 0111 	add.w	r1, r5, #17
   1be98:	f7fe fa69 	bl	1a36e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1be9c:	4628      	mov	r0, r5
   1be9e:	2200      	movs	r2, #0
   1bea0:	4621      	mov	r1, r4
   1bea2:	f7f6 fafb 	bl	1249c <smp_send.constprop.0>
	return 0;
   1bea6:	2000      	movs	r0, #0
}
   1bea8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1beaa:	2008      	movs	r0, #8
   1beac:	e7fc      	b.n	1bea8 <send_pairing_rsp+0x2c>

0001beae <smp_send_pairing_random>:
{
   1beae:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1beb0:	2104      	movs	r1, #4
{
   1beb2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1beb4:	f7ff ffc3 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1beb8:	4604      	mov	r4, r0
   1beba:	b178      	cbz	r0, 1bedc <smp_send_pairing_random+0x2e>
   1bebc:	2110      	movs	r1, #16
   1bebe:	300c      	adds	r0, #12
   1bec0:	f000 fb41 	bl	1c546 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1bec4:	2210      	movs	r2, #16
   1bec6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1beca:	f7fe fa50 	bl	1a36e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1bece:	4628      	mov	r0, r5
   1bed0:	2200      	movs	r2, #0
   1bed2:	4621      	mov	r1, r4
   1bed4:	f7f6 fae2 	bl	1249c <smp_send.constprop.0>
	return 0;
   1bed8:	2000      	movs	r0, #0
}
   1beda:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1bedc:	2008      	movs	r0, #8
   1bede:	e7fc      	b.n	1beda <smp_send_pairing_random+0x2c>

0001bee0 <smp_dhkey_check>:
{
   1bee0:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1bee2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   1bee6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1bee8:	78db      	ldrb	r3, [r3, #3]
   1beea:	2b01      	cmp	r3, #1
   1beec:	d114      	bne.n	1bf18 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1beee:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bef0:	1d05      	adds	r5, r0, #4
   1bef2:	2110      	movs	r1, #16
   1bef4:	4628      	mov	r0, r5
   1bef6:	f7ff ff77 	bl	1bde8 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1befa:	4631      	mov	r1, r6
   1befc:	2210      	movs	r2, #16
   1befe:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1bf02:	f7fe fa34 	bl	1a36e <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1bf06:	2107      	movs	r1, #7
   1bf08:	4628      	mov	r0, r5
   1bf0a:	f7ff ff46 	bl	1bd9a <atomic_test_bit>
   1bf0e:	b128      	cbz	r0, 1bf1c <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1bf10:	2109      	movs	r1, #9
   1bf12:	4628      	mov	r0, r5
   1bf14:	f7ff ff83 	bl	1be1e <atomic_set_bit>
}
   1bf18:	2000      	movs	r0, #0
   1bf1a:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1bf1c:	210a      	movs	r1, #10
   1bf1e:	4628      	mov	r0, r5
   1bf20:	f7ff ff3b 	bl	1bd9a <atomic_test_bit>
   1bf24:	2800      	cmp	r0, #0
   1bf26:	d1f3      	bne.n	1bf10 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   1bf28:	4620      	mov	r0, r4
}
   1bf2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   1bf2e:	f7f6 bf29 	b.w	12d84 <compute_and_check_and_send_periph_dhcheck>

0001bf32 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   1bf32:	2007      	movs	r0, #7
   1bf34:	4770      	bx	lr

0001bf36 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bf36:	2301      	movs	r3, #1
   1bf38:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bf3c:	43ca      	mvns	r2, r1
{
   1bf3e:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bf40:	e8d0 3fef 	ldaex	r3, [r0]
   1bf44:	ea03 0402 	and.w	r4, r3, r2
   1bf48:	e8c0 4fe5 	stlex	r5, r4, [r0]
   1bf4c:	2d00      	cmp	r5, #0
   1bf4e:	d1f7      	bne.n	1bf40 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1bf50:	4219      	tst	r1, r3
}
   1bf52:	bf14      	ite	ne
   1bf54:	2001      	movne	r0, #1
   1bf56:	2000      	moveq	r0, #0
   1bf58:	bd30      	pop	{r4, r5, pc}

0001bf5a <smp_reset>:
{
   1bf5a:	b538      	push	{r3, r4, r5, lr}
   1bf5c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bf5e:	2500      	movs	r5, #0
   1bf60:	1d03      	adds	r3, r0, #4
   1bf62:	e8d3 2fef 	ldaex	r2, [r3]
   1bf66:	e8c3 5fe1 	stlex	r1, r5, [r3]
   1bf6a:	2900      	cmp	r1, #0
   1bf6c:	d1f9      	bne.n	1bf62 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   1bf6e:	f504 7090 	add.w	r0, r4, #288	; 0x120
   1bf72:	f001 fd6d 	bl	1da50 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1bf76:	7225      	strb	r5, [r4, #8]
   1bf78:	e8d4 3fef 	ldaex	r3, [r4]
   1bf7c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1bf80:	2a00      	cmp	r2, #0
   1bf82:	d1f9      	bne.n	1bf78 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1bf84:	4620      	mov	r0, r4
}
   1bf86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1bf8a:	2101      	movs	r1, #1
   1bf8c:	f7ff bf47 	b.w	1be1e <atomic_set_bit>

0001bf90 <smp_c1>:
{
   1bf90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf94:	4699      	mov	r9, r3
   1bf96:	b089      	sub	sp, #36	; 0x24
   1bf98:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   1bf9c:	783b      	ldrb	r3, [r7, #0]
{
   1bf9e:	460c      	mov	r4, r1
	p1[0] = ia->type;
   1bfa0:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   1bfa4:	f898 3000 	ldrb.w	r3, [r8]
{
   1bfa8:	4611      	mov	r1, r2
   1bfaa:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   1bfac:	2207      	movs	r2, #7
{
   1bfae:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1bfb0:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   1bfb4:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   1bfb8:	f7fe f9d9 	bl	1a36e <memcpy>
	memcpy(p1 + 9, pres, 7);
   1bfbc:	2207      	movs	r2, #7
   1bfbe:	4649      	mov	r1, r9
   1bfc0:	f10d 0009 	add.w	r0, sp, #9
   1bfc4:	f7fe f9d3 	bl	1a36e <memcpy>
   1bfc8:	462a      	mov	r2, r5
   1bfca:	4669      	mov	r1, sp
   1bfcc:	f104 0010 	add.w	r0, r4, #16
		*r++ = *p++ ^ *q++;
   1bfd0:	f814 3b01 	ldrb.w	r3, [r4], #1
   1bfd4:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   1bfd8:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   1bfda:	ea83 030c 	eor.w	r3, r3, ip
   1bfde:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   1bfe2:	d1f5      	bne.n	1bfd0 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1bfe4:	462a      	mov	r2, r5
   1bfe6:	4629      	mov	r1, r5
   1bfe8:	4630      	mov	r0, r6
   1bfea:	f7fe fd2b 	bl	1aa44 <bt_encrypt_le>
	if (err) {
   1bfee:	4604      	mov	r4, r0
   1bff0:	bb20      	cbnz	r0, 1c03c <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   1bff2:	2206      	movs	r2, #6
   1bff4:	f108 0101 	add.w	r1, r8, #1
   1bff8:	a804      	add	r0, sp, #16
   1bffa:	f7fe f9b8 	bl	1a36e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1bffe:	2206      	movs	r2, #6
   1c000:	1c79      	adds	r1, r7, #1
   1c002:	f10d 0016 	add.w	r0, sp, #22
   1c006:	f7fe f9b2 	bl	1a36e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1c00a:	2204      	movs	r2, #4
   1c00c:	4621      	mov	r1, r4
   1c00e:	a807      	add	r0, sp, #28
   1c010:	f7fe f9b8 	bl	1a384 <memset>
   1c014:	462a      	mov	r2, r5
   1c016:	f105 0010 	add.w	r0, r5, #16
   1c01a:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   1c01c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1c020:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   1c024:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   1c026:	ea81 0104 	eor.w	r1, r1, r4
   1c02a:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   1c02e:	d1f5      	bne.n	1c01c <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   1c030:	462a      	mov	r2, r5
   1c032:	4629      	mov	r1, r5
   1c034:	4630      	mov	r0, r6
   1c036:	f7fe fd05 	bl	1aa44 <bt_encrypt_le>
   1c03a:	4604      	mov	r4, r0
}
   1c03c:	4620      	mov	r0, r4
   1c03e:	b009      	add	sp, #36	; 0x24
   1c040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c044 <legacy_pairing_confirm>:
{
   1c044:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c046:	1d07      	adds	r7, r0, #4
{
   1c048:	4604      	mov	r4, r0
   1c04a:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c04c:	210a      	movs	r1, #10
   1c04e:	4638      	mov	r0, r7
   1c050:	f7ff fea3 	bl	1bd9a <atomic_test_bit>
   1c054:	bb88      	cbnz	r0, 1c0ba <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1c056:	2104      	movs	r1, #4
   1c058:	4620      	mov	r0, r4
   1c05a:	f7ff fee0 	bl	1be1e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1c05e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1c060:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1c064:	f7ff feeb 	bl	1be3e <smp_create_pdu.constprop.0>
	if (!buf) {
   1c068:	4605      	mov	r5, r0
   1c06a:	b1c0      	cbz	r0, 1c09e <legacy_pairing_confirm+0x5a>
   1c06c:	2110      	movs	r1, #16
   1c06e:	300c      	adds	r0, #12
   1c070:	f000 fa69 	bl	1c546 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1c074:	f106 0396 	add.w	r3, r6, #150	; 0x96
   1c078:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1c07a:	9002      	str	r0, [sp, #8]
   1c07c:	9301      	str	r3, [sp, #4]
   1c07e:	9600      	str	r6, [sp, #0]
   1c080:	f104 0310 	add.w	r3, r4, #16
   1c084:	f104 0209 	add.w	r2, r4, #9
   1c088:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c08c:	f104 0047 	add.w	r0, r4, #71	; 0x47
   1c090:	f7ff ff7e 	bl	1bf90 <smp_c1>
   1c094:	4606      	mov	r6, r0
   1c096:	b128      	cbz	r0, 1c0a4 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   1c098:	4628      	mov	r0, r5
   1c09a:	f7f8 f88b 	bl	141b4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1c09e:	2008      	movs	r0, #8
}
   1c0a0:	b005      	add	sp, #20
   1c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   1c0a4:	4602      	mov	r2, r0
   1c0a6:	4629      	mov	r1, r5
   1c0a8:	4620      	mov	r0, r4
   1c0aa:	f7f6 f9f7 	bl	1249c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c0ae:	4631      	mov	r1, r6
   1c0b0:	4638      	mov	r0, r7
   1c0b2:	f7ff fe99 	bl	1bde8 <atomic_clear_bit>
	return 0;
   1c0b6:	2000      	movs	r0, #0
   1c0b8:	e7f2      	b.n	1c0a0 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c0ba:	2100      	movs	r1, #0
   1c0bc:	4638      	mov	r0, r7
   1c0be:	f7ff feae 	bl	1be1e <atomic_set_bit>
	return 0;
   1c0c2:	e7f8      	b.n	1c0b6 <legacy_pairing_confirm+0x72>

0001c0c4 <bt_smp_request_ltk>:
{
   1c0c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c0c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1c0ca:	4604      	mov	r4, r0
   1c0cc:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   1c0d0:	f7ff fe9a 	bl	1be08 <smp_chan_get>
	if (!smp) {
   1c0d4:	4605      	mov	r5, r0
   1c0d6:	2800      	cmp	r0, #0
   1c0d8:	d07c      	beq.n	1c1d4 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   1c0da:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1c0de:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   1c0e0:	f1b8 0f00 	cmp.w	r8, #0
   1c0e4:	d128      	bne.n	1c138 <bt_smp_request_ltk+0x74>
   1c0e6:	e9dd 3200 	ldrd	r3, r2, [sp]
   1c0ea:	4313      	orrs	r3, r2
   1c0ec:	d124      	bne.n	1c138 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1c0ee:	2103      	movs	r1, #3
   1c0f0:	4630      	mov	r0, r6
   1c0f2:	f7ff fe52 	bl	1bd9a <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1c0f6:	b1f8      	cbz	r0, 1c138 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c0f8:	2101      	movs	r1, #1
   1c0fa:	4630      	mov	r0, r6
   1c0fc:	f7ff fe4d 	bl	1bd9a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1c100:	b1d0      	cbz	r0, 1c138 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   1c102:	7d2c      	ldrb	r4, [r5, #20]
   1c104:	7b6b      	ldrb	r3, [r5, #13]
		memcpy(ltk, smp->tk, enc_size);
   1c106:	f105 0147 	add.w	r1, r5, #71	; 0x47
	return MIN(req->max_key_size, rsp->max_key_size);
   1c10a:	429c      	cmp	r4, r3
   1c10c:	bf28      	it	cs
   1c10e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1c110:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1c112:	4638      	mov	r0, r7
   1c114:	f7fe f92b 	bl	1a36e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1c118:	2c0f      	cmp	r4, #15
   1c11a:	d805      	bhi.n	1c128 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   1c11c:	4641      	mov	r1, r8
   1c11e:	f1c4 0210 	rsb	r2, r4, #16
   1c122:	1938      	adds	r0, r7, r4
   1c124:	f7fe f92e 	bl	1a384 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c128:	4630      	mov	r0, r6
   1c12a:	2101      	movs	r1, #1
   1c12c:	f7ff fe77 	bl	1be1e <atomic_set_bit>
		return true;
   1c130:	2001      	movs	r0, #1
}
   1c132:	b002      	add	sp, #8
   1c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1c138:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1c13c:	b983      	cbnz	r3, 1c160 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   1c13e:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1c142:	4642      	mov	r2, r8
   1c144:	2020      	movs	r0, #32
   1c146:	7a21      	ldrb	r1, [r4, #8]
   1c148:	f7f7 fe5e 	bl	13e08 <bt_keys_find>
   1c14c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1c150:	b930      	cbnz	r0, 1c160 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   1c152:	4642      	mov	r2, r8
   1c154:	2001      	movs	r0, #1
   1c156:	7a21      	ldrb	r1, [r4, #8]
   1c158:	f7f7 fe56 	bl	13e08 <bt_keys_find>
   1c15c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   1c160:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1c164:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   1c168:	f1b8 0f00 	cmp.w	r8, #0
   1c16c:	d10c      	bne.n	1c188 <bt_smp_request_ltk+0xc4>
   1c16e:	e9dd 3200 	ldrd	r3, r2, [sp]
   1c172:	4313      	orrs	r3, r2
   1c174:	d108      	bne.n	1c188 <bt_smp_request_ltk+0xc4>
   1c176:	b300      	cbz	r0, 1c1ba <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1c178:	89c3      	ldrh	r3, [r0, #14]
   1c17a:	069a      	lsls	r2, r3, #26
   1c17c:	d505      	bpl.n	1c18a <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   1c17e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1c180:	f100 011a 	add.w	r1, r0, #26
   1c184:	4622      	mov	r2, r4
   1c186:	e7c4      	b.n	1c112 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1c188:	b1b8      	cbz	r0, 1c1ba <bt_smp_request_ltk+0xf6>
   1c18a:	89c3      	ldrh	r3, [r0, #14]
   1c18c:	07db      	lsls	r3, r3, #31
   1c18e:	d514      	bpl.n	1c1ba <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1c190:	2208      	movs	r2, #8
   1c192:	4669      	mov	r1, sp
   1c194:	3040      	adds	r0, #64	; 0x40
   1c196:	f7fe f8da 	bl	1a34e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1c19a:	b970      	cbnz	r0, 1c1ba <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   1c19c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1c1a0:	2202      	movs	r2, #2
   1c1a2:	a908      	add	r1, sp, #32
   1c1a4:	3048      	adds	r0, #72	; 0x48
   1c1a6:	f7fe f8d2 	bl	1a34e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1c1aa:	4680      	mov	r8, r0
   1c1ac:	b928      	cbnz	r0, 1c1ba <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   1c1ae:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   1c1b2:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   1c1b4:	314a      	adds	r1, #74	; 0x4a
   1c1b6:	4622      	mov	r2, r4
   1c1b8:	e7ab      	b.n	1c112 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1c1ba:	210f      	movs	r1, #15
   1c1bc:	4630      	mov	r0, r6
   1c1be:	f7ff fdec 	bl	1bd9a <atomic_test_bit>
   1c1c2:	b120      	cbz	r0, 1c1ce <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1c1c4:	2202      	movs	r2, #2
   1c1c6:	2106      	movs	r1, #6
   1c1c8:	4620      	mov	r0, r4
   1c1ca:	f7f3 fdc3 	bl	fd54 <bt_conn_security_changed>
	smp_reset(smp);
   1c1ce:	4628      	mov	r0, r5
   1c1d0:	f7ff fec3 	bl	1bf5a <smp_reset>
		return false;
   1c1d4:	2000      	movs	r0, #0
   1c1d6:	e7ac      	b.n	1c132 <bt_smp_request_ltk+0x6e>

0001c1d8 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1c1d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c1dc:	4770      	bx	lr

0001c1de <bt_smp_dhkey_ready>:
{
   1c1de:	b570      	push	{r4, r5, r6, lr}
   1c1e0:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1c1e2:	2008      	movs	r0, #8
   1c1e4:	f7f6 f8f2 	bl	123cc <smp_find>
	if (smp) {
   1c1e8:	4604      	mov	r4, r0
   1c1ea:	b1b8      	cbz	r0, 1c21c <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1c1ec:	1d05      	adds	r5, r0, #4
   1c1ee:	2108      	movs	r1, #8
   1c1f0:	4628      	mov	r0, r5
   1c1f2:	f7ff fdf9 	bl	1bde8 <atomic_clear_bit>
	if (!dhkey) {
   1c1f6:	b38e      	cbz	r6, 1c25c <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1c1f8:	2107      	movs	r1, #7
   1c1fa:	f7ff fdf5 	bl	1bde8 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   1c1fe:	4631      	mov	r1, r6
   1c200:	2220      	movs	r2, #32
   1c202:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1c206:	f7fe f8b2 	bl	1a36e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c20a:	210a      	movs	r1, #10
   1c20c:	4628      	mov	r0, r5
   1c20e:	f7ff fdc4 	bl	1bd9a <atomic_test_bit>
   1c212:	b168      	cbz	r0, 1c230 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1c214:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1c216:	4628      	mov	r0, r5
   1c218:	f7ff fe01 	bl	1be1e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1c21c:	2007      	movs	r0, #7
   1c21e:	f7f6 f8d5 	bl	123cc <smp_find>
		if (smp) {
   1c222:	4604      	mov	r4, r0
   1c224:	b118      	cbz	r0, 1c22e <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1c226:	f7f6 f9d1 	bl	125cc <smp_dhkey_generate>
			if (err) {
   1c22a:	4601      	mov	r1, r0
   1c22c:	b990      	cbnz	r0, 1c254 <bt_smp_dhkey_ready+0x76>
}
   1c22e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1c230:	2110      	movs	r1, #16
   1c232:	4628      	mov	r0, r5
   1c234:	f7ff fdb1 	bl	1bd9a <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1c238:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1c23a:	2800      	cmp	r0, #0
   1c23c:	d1eb      	bne.n	1c216 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1c23e:	4628      	mov	r0, r5
   1c240:	f7ff fdab 	bl	1bd9a <atomic_test_bit>
   1c244:	2800      	cmp	r0, #0
   1c246:	d0e9      	beq.n	1c21c <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   1c248:	4620      	mov	r0, r4
   1c24a:	f7f6 fd9b 	bl	12d84 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   1c24e:	4601      	mov	r1, r0
   1c250:	2800      	cmp	r0, #0
   1c252:	d0e3      	beq.n	1c21c <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1c254:	4620      	mov	r0, r4
   1c256:	f7f7 f91f 	bl	13498 <smp_error>
   1c25a:	e7df      	b.n	1c21c <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1c25c:	210b      	movs	r1, #11
   1c25e:	e7f9      	b.n	1c254 <bt_smp_dhkey_ready+0x76>

0001c260 <bt_smp_disconnected>:
{
   1c260:	b570      	push	{r4, r5, r6, lr}
   1c262:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1c264:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1c268:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1c26c:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   1c26e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   1c272:	f001 fbed 	bl	1da50 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1c276:	2103      	movs	r1, #3
   1c278:	4620      	mov	r0, r4
   1c27a:	f7ff fd8e 	bl	1bd9a <atomic_test_bit>
   1c27e:	b1a0      	cbz	r0, 1c2aa <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c280:	2108      	movs	r1, #8
   1c282:	4630      	mov	r0, r6
   1c284:	f7f7 f870 	bl	13368 <smp_pairing_complete>
	if (keys) {
   1c288:	b13d      	cbz	r5, 1c29a <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1c28a:	89eb      	ldrh	r3, [r5, #14]
   1c28c:	b113      	cbz	r3, 1c294 <bt_smp_disconnected+0x34>
   1c28e:	7b6b      	ldrb	r3, [r5, #13]
   1c290:	079b      	lsls	r3, r3, #30
   1c292:	d502      	bpl.n	1c29a <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1c294:	4628      	mov	r0, r5
   1c296:	f000 f840 	bl	1c31a <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1c29a:	4630      	mov	r0, r6
}
   1c29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1c2a0:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1c2a4:	2100      	movs	r1, #0
   1c2a6:	f7fe b86d 	b.w	1a384 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1c2aa:	2101      	movs	r1, #1
   1c2ac:	4620      	mov	r0, r4
   1c2ae:	f7ff fd74 	bl	1bd9a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1c2b2:	2800      	cmp	r0, #0
   1c2b4:	d1e4      	bne.n	1c280 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1c2b6:	210f      	movs	r1, #15
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f7ff fd6e 	bl	1bd9a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1c2be:	2800      	cmp	r0, #0
   1c2c0:	d1de      	bne.n	1c280 <bt_smp_disconnected+0x20>
   1c2c2:	e7e1      	b.n	1c288 <bt_smp_disconnected+0x28>

0001c2c4 <smp_ident_sent>:
{
   1c2c4:	b508      	push	{r3, lr}
	if (!err) {
   1c2c6:	b99a      	cbnz	r2, 1c2f0 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1c2c8:	7883      	ldrb	r3, [r0, #2]
   1c2ca:	2b01      	cmp	r3, #1
   1c2cc:	d110      	bne.n	1c2f0 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1c2ce:	2106      	movs	r1, #6
   1c2d0:	f7fe fdcf 	bl	1ae72 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1c2d4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1c2d8:	f023 0301 	bic.w	r3, r3, #1
   1c2dc:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1c2e0:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1c2e4:	b921      	cbnz	r1, 1c2f0 <smp_ident_sent+0x2c>
}
   1c2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1c2ea:	38ec      	subs	r0, #236	; 0xec
   1c2ec:	f7f7 b83c 	b.w	13368 <smp_pairing_complete>
}
   1c2f0:	bd08      	pop	{r3, pc}

0001c2f2 <bt_keys_get_type>:
{
   1c2f2:	b570      	push	{r4, r5, r6, lr}
   1c2f4:	4604      	mov	r4, r0
   1c2f6:	460d      	mov	r5, r1
   1c2f8:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1c2fa:	f7f7 fd85 	bl	13e08 <bt_keys_find>
	if (keys) {
   1c2fe:	b938      	cbnz	r0, 1c310 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1c300:	4631      	mov	r1, r6
   1c302:	4628      	mov	r0, r5
   1c304:	f7f7 fd4c 	bl	13da0 <bt_keys_get_addr>
	if (!keys) {
   1c308:	b110      	cbz	r0, 1c310 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   1c30a:	89c3      	ldrh	r3, [r0, #14]
   1c30c:	431c      	orrs	r4, r3
   1c30e:	81c4      	strh	r4, [r0, #14]
}
   1c310:	bd70      	pop	{r4, r5, r6, pc}

0001c312 <bt_keys_add_type>:
	keys->keys |= type;
   1c312:	89c3      	ldrh	r3, [r0, #14]
   1c314:	4319      	orrs	r1, r3
   1c316:	81c1      	strh	r1, [r0, #14]
}
   1c318:	4770      	bx	lr

0001c31a <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1c31a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1c31c:	7a03      	ldrb	r3, [r0, #8]
{
   1c31e:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c320:	075b      	lsls	r3, r3, #29
   1c322:	d501      	bpl.n	1c328 <bt_keys_clear+0xe>
		bt_id_del(keys);
   1c324:	f7f2 f9b6 	bl	e694 <bt_id_del>

		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1c328:	4620      	mov	r0, r4
}
   1c32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1c32e:	225c      	movs	r2, #92	; 0x5c
   1c330:	2100      	movs	r1, #0
   1c332:	f7fe b827 	b.w	1a384 <memset>

0001c336 <sys_memcpy_swap>:
	psrc += length - 1;
   1c336:	1e53      	subs	r3, r2, #1
   1c338:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1c33a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1c33c:	f811 3901 	ldrb.w	r3, [r1], #-1
   1c340:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1c344:	4290      	cmp	r0, r2
   1c346:	d1f9      	bne.n	1c33c <sys_memcpy_swap+0x6>
}
   1c348:	4770      	bx	lr

0001c34a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1c34a:	b510      	push	{r4, lr}
   1c34c:	1e43      	subs	r3, r0, #1
   1c34e:	f100 0210 	add.w	r2, r0, #16
   1c352:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c354:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c358:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1c35c:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c35e:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c360:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1c362:	d1f7      	bne.n	1c354 <sys_mem_swap.constprop.0+0xa>
	}
}
   1c364:	bd10      	pop	{r4, pc}

0001c366 <bt_crypto_aes_cmac>:
{
   1c366:	b570      	push	{r4, r5, r6, lr}
   1c368:	b0c2      	sub	sp, #264	; 0x108
   1c36a:	460d      	mov	r5, r1
   1c36c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1c36e:	4601      	mov	r1, r0
   1c370:	aa16      	add	r2, sp, #88	; 0x58
   1c372:	4668      	mov	r0, sp
{
   1c374:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1c376:	f7fd fc71 	bl	19c5c <tc_cmac_setup>
   1c37a:	b918      	cbnz	r0, 1c384 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   1c37c:	f06f 0004 	mvn.w	r0, #4
}
   1c380:	b042      	add	sp, #264	; 0x108
   1c382:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1c384:	4632      	mov	r2, r6
   1c386:	4629      	mov	r1, r5
   1c388:	4668      	mov	r0, sp
   1c38a:	f7fd fc92 	bl	19cb2 <tc_cmac_update>
   1c38e:	2800      	cmp	r0, #0
   1c390:	d0f4      	beq.n	1c37c <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1c392:	4669      	mov	r1, sp
   1c394:	4620      	mov	r0, r4
   1c396:	f7fd fcf6 	bl	19d86 <tc_cmac_final>
   1c39a:	2800      	cmp	r0, #0
   1c39c:	d0ee      	beq.n	1c37c <bt_crypto_aes_cmac+0x16>
	return 0;
   1c39e:	2000      	movs	r0, #0
   1c3a0:	e7ee      	b.n	1c380 <bt_crypto_aes_cmac+0x1a>

0001c3a2 <bt_crypto_f4>:
{
   1c3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3a4:	460e      	mov	r6, r1
   1c3a6:	4614      	mov	r4, r2
   1c3a8:	461d      	mov	r5, r3
   1c3aa:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1c3ac:	4601      	mov	r1, r0
   1c3ae:	2220      	movs	r2, #32
   1c3b0:	a805      	add	r0, sp, #20
{
   1c3b2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1c3b4:	f7ff ffbf 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c3b8:	2220      	movs	r2, #32
   1c3ba:	4631      	mov	r1, r6
   1c3bc:	a80d      	add	r0, sp, #52	; 0x34
   1c3be:	f7ff ffba 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c3c2:	4621      	mov	r1, r4
   1c3c4:	2210      	movs	r2, #16
   1c3c6:	a801      	add	r0, sp, #4
	m[64] = z;
   1c3c8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1c3cc:	f7ff ffb3 	bl	1c336 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   1c3d0:	463b      	mov	r3, r7
   1c3d2:	2241      	movs	r2, #65	; 0x41
   1c3d4:	a905      	add	r1, sp, #20
   1c3d6:	a801      	add	r0, sp, #4
   1c3d8:	f7ff ffc5 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   1c3dc:	4604      	mov	r4, r0
   1c3de:	b910      	cbnz	r0, 1c3e6 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   1c3e0:	4638      	mov	r0, r7
   1c3e2:	f7ff ffb2 	bl	1c34a <sys_mem_swap.constprop.0>
}
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	b017      	add	sp, #92	; 0x5c
   1c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c3ec <bt_crypto_f6>:
{
   1c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3ee:	4616      	mov	r6, r2
   1c3f0:	461c      	mov	r4, r3
   1c3f2:	4605      	mov	r5, r0
   1c3f4:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1c3f6:	2210      	movs	r2, #16
   1c3f8:	a805      	add	r0, sp, #20
{
   1c3fa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1c3fc:	f7ff ff9b 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1c400:	2210      	movs	r2, #16
   1c402:	4631      	mov	r1, r6
   1c404:	a809      	add	r0, sp, #36	; 0x24
   1c406:	f7ff ff96 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1c40a:	4621      	mov	r1, r4
   1c40c:	2210      	movs	r2, #16
   1c40e:	a80d      	add	r0, sp, #52	; 0x34
   1c410:	f7ff ff91 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1c414:	2203      	movs	r2, #3
   1c416:	991c      	ldr	r1, [sp, #112]	; 0x70
   1c418:	a811      	add	r0, sp, #68	; 0x44
   1c41a:	f7ff ff8c 	bl	1c336 <sys_memcpy_swap>
	m[51] = a1->type;
   1c41e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1c420:	2206      	movs	r2, #6
	m[51] = a1->type;
   1c422:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1c426:	a812      	add	r0, sp, #72	; 0x48
   1c428:	4621      	mov	r1, r4
	m[51] = a1->type;
   1c42a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1c42e:	f7fd ff9e 	bl	1a36e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1c432:	4621      	mov	r1, r4
   1c434:	2206      	movs	r2, #6
   1c436:	a812      	add	r0, sp, #72	; 0x48
   1c438:	f7ff ff7d 	bl	1c336 <sys_memcpy_swap>
	m[58] = a2->type;
   1c43c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1c43e:	2206      	movs	r2, #6
	m[58] = a2->type;
   1c440:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1c444:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1c448:	4621      	mov	r1, r4
	m[58] = a2->type;
   1c44a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1c44e:	f7fd ff8e 	bl	1a36e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1c452:	4621      	mov	r1, r4
   1c454:	2206      	movs	r2, #6
   1c456:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1c45a:	f7ff ff6c 	bl	1c336 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1c45e:	2210      	movs	r2, #16
   1c460:	4629      	mov	r1, r5
   1c462:	a801      	add	r0, sp, #4
   1c464:	f7ff ff67 	bl	1c336 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   1c468:	463b      	mov	r3, r7
   1c46a:	2241      	movs	r2, #65	; 0x41
   1c46c:	a905      	add	r1, sp, #20
   1c46e:	a801      	add	r0, sp, #4
   1c470:	f7ff ff79 	bl	1c366 <bt_crypto_aes_cmac>
	if (err) {
   1c474:	4604      	mov	r4, r0
   1c476:	b910      	cbnz	r0, 1c47e <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   1c478:	4638      	mov	r0, r7
   1c47a:	f7ff ff66 	bl	1c34a <sys_mem_swap.constprop.0>
}
   1c47e:	4620      	mov	r0, r4
   1c480:	b017      	add	sp, #92	; 0x5c
   1c482:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c484 <fixed_data_unref>:
}
   1c484:	4770      	bx	lr

0001c486 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c486:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c488:	6849      	ldr	r1, [r1, #4]
   1c48a:	6809      	ldr	r1, [r1, #0]
   1c48c:	f7f7 be00 	b.w	14090 <net_buf_alloc_len>

0001c490 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1c490:	f7fb b962 	b.w	17758 <z_impl_k_queue_get>

0001c494 <net_buf_slist_put>:
	__asm__ volatile(
   1c494:	f04f 0320 	mov.w	r3, #32
   1c498:	f3ef 8211 	mrs	r2, BASEPRI
   1c49c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c4a0:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1c4a4:	2300      	movs	r3, #0
   1c4a6:	600b      	str	r3, [r1, #0]
	return list->tail;
   1c4a8:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1c4aa:	b933      	cbnz	r3, 1c4ba <net_buf_slist_put+0x26>
	list->head = node;
   1c4ac:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   1c4b0:	f382 8811 	msr	BASEPRI, r2
   1c4b4:	f3bf 8f6f 	isb	sy
}
   1c4b8:	4770      	bx	lr
	parent->next = child;
   1c4ba:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1c4bc:	6041      	str	r1, [r0, #4]
}
   1c4be:	e7f7      	b.n	1c4b0 <net_buf_slist_put+0x1c>

0001c4c0 <net_buf_slist_get>:
{
   1c4c0:	4603      	mov	r3, r0
   1c4c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c4c4:	f04f 0220 	mov.w	r2, #32
   1c4c8:	f3ef 8111 	mrs	r1, BASEPRI
   1c4cc:	f382 8812 	msr	BASEPRI_MAX, r2
   1c4d0:	f3bf 8f6f 	isb	sy
	return list->head;
   1c4d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c4d6:	b128      	cbz	r0, 1c4e4 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c4d8:	685c      	ldr	r4, [r3, #4]
	return node->next;
   1c4da:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c4dc:	42a0      	cmp	r0, r4
	list->head = node;
   1c4de:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c4e0:	bf08      	it	eq
   1c4e2:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   1c4e4:	f381 8811 	msr	BASEPRI, r1
   1c4e8:	f3bf 8f6f 	isb	sy
}
   1c4ec:	bd10      	pop	{r4, pc}

0001c4ee <net_buf_put>:
	k_fifo_put(fifo, buf);
   1c4ee:	f001 b9c1 	b.w	1d874 <k_queue_append>

0001c4f2 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c4f2:	7a02      	ldrb	r2, [r0, #8]
   1c4f4:	3201      	adds	r2, #1
   1c4f6:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1c4f8:	4770      	bx	lr

0001c4fa <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c4fa:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1c4fc:	4618      	mov	r0, r3
   1c4fe:	685b      	ldr	r3, [r3, #4]
   1c500:	2b00      	cmp	r3, #0
   1c502:	d1fb      	bne.n	1c4fc <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1c504:	4770      	bx	lr

0001c506 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1c506:	6842      	ldr	r2, [r0, #4]
{
   1c508:	b510      	push	{r4, lr}
	if (parent->frags) {
   1c50a:	b12a      	cbz	r2, 1c518 <net_buf_frag_insert+0x12>
   1c50c:	460b      	mov	r3, r1
	while (buf->frags) {
   1c50e:	461c      	mov	r4, r3
   1c510:	685b      	ldr	r3, [r3, #4]
   1c512:	2b00      	cmp	r3, #0
   1c514:	d1fb      	bne.n	1c50e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c516:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c518:	6041      	str	r1, [r0, #4]
}
   1c51a:	bd10      	pop	{r4, pc}

0001c51c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c51c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1c51e:	4604      	mov	r4, r0
   1c520:	b920      	cbnz	r0, 1c52c <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   1c522:	4608      	mov	r0, r1
	buf->ref++;
   1c524:	7a0b      	ldrb	r3, [r1, #8]
   1c526:	3301      	adds	r3, #1
   1c528:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c52a:	bd10      	pop	{r4, pc}
   1c52c:	4603      	mov	r3, r0
	while (buf->frags) {
   1c52e:	4618      	mov	r0, r3
   1c530:	685b      	ldr	r3, [r3, #4]
   1c532:	2b00      	cmp	r3, #0
   1c534:	d1fb      	bne.n	1c52e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c536:	f7ff ffe6 	bl	1c506 <net_buf_frag_insert>
   1c53a:	4620      	mov	r0, r4
   1c53c:	e7f5      	b.n	1c52a <net_buf_frag_add+0xe>

0001c53e <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c53e:	6883      	ldr	r3, [r0, #8]
   1c540:	440b      	add	r3, r1
   1c542:	6003      	str	r3, [r0, #0]
}
   1c544:	4770      	bx	lr

0001c546 <net_buf_simple_add>:
	return buf->data + buf->len;
   1c546:	8883      	ldrh	r3, [r0, #4]
   1c548:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1c54a:	4419      	add	r1, r3
   1c54c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1c54e:	18d0      	adds	r0, r2, r3
   1c550:	4770      	bx	lr

0001c552 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1c552:	b430      	push	{r4, r5}
   1c554:	8884      	ldrh	r4, [r0, #4]
   1c556:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1c558:	18a3      	adds	r3, r4, r2
   1c55a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c55c:	1928      	adds	r0, r5, r4
}
   1c55e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c560:	f7fd bf05 	b.w	1a36e <memcpy>

0001c564 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1c564:	b510      	push	{r4, lr}
   1c566:	8883      	ldrh	r3, [r0, #4]
   1c568:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1c56a:	1c5c      	adds	r4, r3, #1
   1c56c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1c56e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1c570:	18d0      	adds	r0, r2, r3
   1c572:	bd10      	pop	{r4, pc}

0001c574 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c574:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1c576:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1c578:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1c57a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1c57c:	4411      	add	r1, r2
	buf->data -= len;
   1c57e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1c580:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1c582:	4770      	bx	lr

0001c584 <net_buf_simple_push_u8>:
	buf->data -= len;
   1c584:	6802      	ldr	r2, [r0, #0]
   1c586:	1e53      	subs	r3, r2, #1
   1c588:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1c58a:	8883      	ldrh	r3, [r0, #4]
   1c58c:	3301      	adds	r3, #1
   1c58e:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1c590:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1c594:	4770      	bx	lr

0001c596 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1c596:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1c598:	8882      	ldrh	r2, [r0, #4]
   1c59a:	1a52      	subs	r2, r2, r1
   1c59c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1c59e:	6800      	ldr	r0, [r0, #0]
   1c5a0:	4408      	add	r0, r1
   1c5a2:	6018      	str	r0, [r3, #0]
}
   1c5a4:	4770      	bx	lr

0001c5a6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1c5a6:	4603      	mov	r3, r0
	void *data = buf->data;
   1c5a8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1c5aa:	889a      	ldrh	r2, [r3, #4]
   1c5ac:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1c5ae:	4401      	add	r1, r0
	buf->len -= len;
   1c5b0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1c5b2:	6019      	str	r1, [r3, #0]

	return data;
}
   1c5b4:	4770      	bx	lr

0001c5b6 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1c5b6:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c5b8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c5ba:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c5bc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c5be:	f7ff ffea 	bl	1c596 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1c5c2:	4620      	mov	r0, r4
   1c5c4:	bd10      	pop	{r4, pc}

0001c5c6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c5c6:	6802      	ldr	r2, [r0, #0]
   1c5c8:	6880      	ldr	r0, [r0, #8]
}
   1c5ca:	1a10      	subs	r0, r2, r0
   1c5cc:	4770      	bx	lr

0001c5ce <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c5ce:	8883      	ldrh	r3, [r0, #4]
   1c5d0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1c5d2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c5d4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c5d6:	6803      	ldr	r3, [r0, #0]
   1c5d8:	1a5b      	subs	r3, r3, r1
}
   1c5da:	1ad0      	subs	r0, r2, r3
   1c5dc:	4770      	bx	lr

0001c5de <z_log_msg_static_create.constprop.0>:
   1c5de:	2300      	movs	r3, #0
   1c5e0:	f7ee bc68 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001c5e4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c5e4:	220c      	movs	r2, #12
   1c5e6:	6903      	ldr	r3, [r0, #16]
   1c5e8:	b2c9      	uxtb	r1, r1
   1c5ea:	fb01 3302 	mla	r3, r1, r2, r3
   1c5ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   1c5f0:	f000 0007 	and.w	r0, r0, #7
   1c5f4:	4770      	bx	lr

0001c5f6 <set_on_state>:
	__asm__ volatile(
   1c5f6:	f04f 0320 	mov.w	r3, #32
   1c5fa:	f3ef 8211 	mrs	r2, BASEPRI
   1c5fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1c602:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c606:	6803      	ldr	r3, [r0, #0]
   1c608:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c60c:	f043 0302 	orr.w	r3, r3, #2
   1c610:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c612:	f382 8811 	msr	BASEPRI, r2
   1c616:	f3bf 8f6f 	isb	sy
}
   1c61a:	4770      	bx	lr

0001c61c <stop>:
{
   1c61c:	b570      	push	{r4, r5, r6, lr}
   1c61e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1c620:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1c622:	f04f 0420 	mov.w	r4, #32
   1c626:	f3ef 8511 	mrs	r5, BASEPRI
   1c62a:	f384 8812 	msr	BASEPRI_MAX, r4
   1c62e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c632:	260c      	movs	r6, #12
   1c634:	fb06 3401 	mla	r4, r6, r1, r3
   1c638:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c63a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c63e:	d008      	beq.n	1c652 <stop+0x36>
   1c640:	42a2      	cmp	r2, r4
   1c642:	d006      	beq.n	1c652 <stop+0x36>
	__asm__ volatile(
   1c644:	f385 8811 	msr	BASEPRI, r5
   1c648:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1c64c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c650:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c652:	2201      	movs	r2, #1
   1c654:	4371      	muls	r1, r6
   1c656:	440b      	add	r3, r1
   1c658:	679a      	str	r2, [r3, #120]	; 0x78
   1c65a:	f385 8811 	msr	BASEPRI, r5
   1c65e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1c662:	6843      	ldr	r3, [r0, #4]
   1c664:	440b      	add	r3, r1
   1c666:	685b      	ldr	r3, [r3, #4]
   1c668:	4798      	blx	r3
	return 0;
   1c66a:	2000      	movs	r0, #0
   1c66c:	e7f0      	b.n	1c650 <stop+0x34>

0001c66e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1c66e:	2280      	movs	r2, #128	; 0x80
   1c670:	f7ff bfd4 	b.w	1c61c <stop>

0001c674 <async_start>:
{
   1c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c676:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1c678:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1c67a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1c67c:	f04f 0520 	mov.w	r5, #32
   1c680:	f3ef 8611 	mrs	r6, BASEPRI
   1c684:	f385 8812 	msr	BASEPRI_MAX, r5
   1c688:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c68c:	250c      	movs	r5, #12
   1c68e:	4369      	muls	r1, r5
   1c690:	440c      	add	r4, r1
   1c692:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c694:	f005 0c07 	and.w	ip, r5, #7
   1c698:	f1bc 0f01 	cmp.w	ip, #1
   1c69c:	d10b      	bne.n	1c6b6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c69e:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   1c6a0:	f386 8811 	msr	BASEPRI, r6
   1c6a4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1c6a8:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   1c6ac:	6843      	ldr	r3, [r0, #4]
   1c6ae:	585b      	ldr	r3, [r3, r1]
   1c6b0:	4798      	blx	r3
	return 0;
   1c6b2:	2000      	movs	r0, #0
}
   1c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c6b6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1c6ba:	42af      	cmp	r7, r5
   1c6bc:	f386 8811 	msr	BASEPRI, r6
   1c6c0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1c6c4:	bf0c      	ite	eq
   1c6c6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1c6ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c6ce:	e7f1      	b.n	1c6b4 <async_start+0x40>

0001c6d0 <api_start>:
{
   1c6d0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1c6d2:	2480      	movs	r4, #128	; 0x80
   1c6d4:	9400      	str	r4, [sp, #0]
   1c6d6:	f7ff ffcd 	bl	1c674 <async_start>
}
   1c6da:	b002      	add	sp, #8
   1c6dc:	bd10      	pop	{r4, pc}

0001c6de <onoff_started_callback>:
{
   1c6de:	b410      	push	{r4}
	notify(mgr, 0);
   1c6e0:	241c      	movs	r4, #28
	return &data->mgr[type];
   1c6e2:	6900      	ldr	r0, [r0, #16]
   1c6e4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c6e6:	fb03 0004 	mla	r0, r3, r4, r0
   1c6ea:	2100      	movs	r1, #0
}
   1c6ec:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c6ee:	4710      	bx	r2

0001c6f0 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1c6f0:	2003      	movs	r0, #3
   1c6f2:	f7f9 bc5f 	b.w	15fb4 <nrfx_clock_start>

0001c6f6 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1c6f6:	2002      	movs	r0, #2
   1c6f8:	f7f9 bc5c 	b.w	15fb4 <nrfx_clock_start>

0001c6fc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c6fc:	2000      	movs	r0, #0
   1c6fe:	f7f9 bc59 	b.w	15fb4 <nrfx_clock_start>

0001c702 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1c702:	2003      	movs	r0, #3
   1c704:	f000 b975 	b.w	1c9f2 <nrfx_clock_stop>

0001c708 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1c708:	2002      	movs	r0, #2
   1c70a:	f000 b972 	b.w	1c9f2 <nrfx_clock_stop>

0001c70e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c70e:	2000      	movs	r0, #0
   1c710:	f000 b96f 	b.w	1c9f2 <nrfx_clock_stop>

0001c714 <blocking_start_callback>:
{
   1c714:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c716:	f7fb b853 	b.w	177c0 <z_impl_k_sem_give>

0001c71a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1c71a:	2000      	movs	r0, #0
   1c71c:	4770      	bx	lr

0001c71e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1c71e:	b538      	push	{r3, r4, r5, lr}
   1c720:	460c      	mov	r4, r1
   1c722:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1c724:	f7f1 fdae 	bl	e284 <bt_is_ready>
   1c728:	b128      	cbz	r0, 1c736 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1c72a:	4629      	mov	r1, r5
   1c72c:	4620      	mov	r0, r4
}
   1c72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1c732:	f7f0 beeb 	b.w	d50c <bt_hci_le_rand>
}
   1c736:	f06f 000a 	mvn.w	r0, #10
   1c73a:	bd38      	pop	{r3, r4, r5, pc}

0001c73c <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   1c73c:	4608      	mov	r0, r1
   1c73e:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   1c740:	4611      	mov	r1, r2
   1c742:	f7f9 fae1 	bl	15d08 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   1c746:	2800      	cmp	r0, #0
	}

	return 0;
}
   1c748:	bf18      	it	ne
   1c74a:	f06f 0004 	mvnne.w	r0, #4
   1c74e:	bd08      	pop	{r3, pc}

0001c750 <entropy_psa_crypto_rng_init>:
{
   1c750:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   1c752:	f000 f92f 	bl	1c9b4 <psa_crypto_init>
		return -EIO;
   1c756:	2800      	cmp	r0, #0
}
   1c758:	bf18      	it	ne
   1c75a:	f06f 0004 	mvnne.w	r0, #4
   1c75e:	bd08      	pop	{r3, pc}

0001c760 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c760:	6843      	ldr	r3, [r0, #4]
}
   1c762:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c764:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c766:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1c768:	600b      	str	r3, [r1, #0]
}
   1c76a:	4770      	bx	lr

0001c76c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c76c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1c76e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c772:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1c774:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1c778:	6098      	str	r0, [r3, #8]
}
   1c77a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c77c:	60d9      	str	r1, [r3, #12]
   1c77e:	4770      	bx	lr

0001c780 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c780:	6843      	ldr	r3, [r0, #4]
}
   1c782:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c784:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1c786:	6099      	str	r1, [r3, #8]
}
   1c788:	4770      	bx	lr

0001c78a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c78a:	6843      	ldr	r3, [r0, #4]
}
   1c78c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c78e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1c790:	60d9      	str	r1, [r3, #12]
}
   1c792:	4770      	bx	lr

0001c794 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c794:	6843      	ldr	r3, [r0, #4]
   1c796:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c798:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1c79a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1c79e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1c7a0:	6090      	str	r0, [r2, #8]
}
   1c7a2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c7a4:	60d3      	str	r3, [r2, #12]
   1c7a6:	4770      	bx	lr

0001c7a8 <gpio_nrfx_manage_callback>:
{
   1c7a8:	b510      	push	{r4, lr}
	return port->data;
   1c7aa:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1c7ac:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1c7ae:	b1f8      	cbz	r0, 1c7f0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c7b0:	4288      	cmp	r0, r1
   1c7b2:	d119      	bne.n	1c7e8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1c7b4:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c7b6:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c7b8:	42a1      	cmp	r1, r4
	list->head = node;
   1c7ba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c7bc:	d100      	bne.n	1c7c0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1c7be:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c7c0:	2000      	movs	r0, #0
   1c7c2:	6008      	str	r0, [r1, #0]
	if (set) {
   1c7c4:	b12a      	cbz	r2, 1c7d2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1c7c6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c7c8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c7ca:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c7cc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c7ce:	b902      	cbnz	r2, 1c7d2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1c7d0:	6099      	str	r1, [r3, #8]
	return 0;
   1c7d2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c7d4:	e010      	b.n	1c7f8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c7d6:	4281      	cmp	r1, r0
   1c7d8:	d106      	bne.n	1c7e8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1c7da:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c7dc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c7de:	6898      	ldr	r0, [r3, #8]
   1c7e0:	4281      	cmp	r1, r0
   1c7e2:	d1ed      	bne.n	1c7c0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1c7e4:	609c      	str	r4, [r3, #8]
}
   1c7e6:	e7eb      	b.n	1c7c0 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1c7e8:	4604      	mov	r4, r0
   1c7ea:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c7ec:	2800      	cmp	r0, #0
   1c7ee:	d1f2      	bne.n	1c7d6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1c7f0:	2a00      	cmp	r2, #0
   1c7f2:	d1e8      	bne.n	1c7c6 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1c7f4:	f06f 0015 	mvn.w	r0, #21
}
   1c7f8:	bd10      	pop	{r4, pc}

0001c7fa <mbox_nrf_register_callback>:
{
   1c7fa:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1c7fc:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1c7fe:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1c800:	bf9f      	itttt	ls
   1c802:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1c806:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1c80a:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1c80c:	2000      	movls	r0, #0
		return -EINVAL;
   1c80e:	bf88      	it	hi
   1c810:	f06f 0015 	mvnhi.w	r0, #21
}
   1c814:	bd10      	pop	{r4, pc}

0001c816 <mbox_nrf_mtu_get>:
}
   1c816:	2000      	movs	r0, #0
   1c818:	4770      	bx	lr

0001c81a <mbox_nrf_max_channels_get>:
}
   1c81a:	2010      	movs	r0, #16
   1c81c:	4770      	bx	lr

0001c81e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1c81e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1c820:	6843      	ldr	r3, [r0, #4]
   1c822:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1c824:	7a05      	ldrb	r5, [r0, #8]
   1c826:	6844      	ldr	r4, [r0, #4]
   1c828:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1c82c:	42a3      	cmp	r3, r4
   1c82e:	d302      	bcc.n	1c836 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1c830:	f06f 0001 	mvn.w	r0, #1
}
   1c834:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1c836:	795c      	ldrb	r4, [r3, #5]
   1c838:	428c      	cmp	r4, r1
   1c83a:	d001      	beq.n	1c840 <pinctrl_lookup_state+0x22>
		(*state)++;
   1c83c:	3308      	adds	r3, #8
   1c83e:	e7f0      	b.n	1c822 <pinctrl_lookup_state+0x4>
			return 0;
   1c840:	2000      	movs	r0, #0
   1c842:	e7f7      	b.n	1c834 <pinctrl_lookup_state+0x16>

0001c844 <uarte_nrfx_config_get>:
{
   1c844:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1c846:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1c848:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c84c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c850:	2000      	movs	r0, #0
   1c852:	4770      	bx	lr

0001c854 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c854:	6843      	ldr	r3, [r0, #4]
   1c856:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c858:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c85c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c860:	4770      	bx	lr

0001c862 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c862:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1c864:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1c866:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c868:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c86c:	b150      	cbz	r0, 1c884 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c86e:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1c870:	6952      	ldr	r2, [r2, #20]
   1c872:	7812      	ldrb	r2, [r2, #0]
   1c874:	700a      	strb	r2, [r1, #0]
   1c876:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c87a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c87e:	2201      	movs	r2, #1
   1c880:	601a      	str	r2, [r3, #0]
	return 0;
   1c882:	4770      	bx	lr
		return -1;
   1c884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c888:	4770      	bx	lr

0001c88a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c88a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c88c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c88e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c892:	b940      	cbnz	r0, 1c8a6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1c894:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c896:	079b      	lsls	r3, r3, #30
   1c898:	d406      	bmi.n	1c8a8 <is_tx_ready.isra.0+0x1e>
   1c89a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c89e:	3800      	subs	r0, #0
   1c8a0:	bf18      	it	ne
   1c8a2:	2001      	movne	r0, #1
   1c8a4:	4770      	bx	lr
   1c8a6:	2001      	movs	r0, #1
}
   1c8a8:	4770      	bx	lr

0001c8aa <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1c8aa:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1c8ac:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1c8ae:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c8b2:	05c9      	lsls	r1, r1, #23
   1c8b4:	d518      	bpl.n	1c8e8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1c8ba:	b1a9      	cbz	r1, 1c8e8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1c8bc:	f04f 0020 	mov.w	r0, #32
   1c8c0:	f3ef 8111 	mrs	r1, BASEPRI
   1c8c4:	f380 8812 	msr	BASEPRI_MAX, r0
   1c8c8:	f3bf 8f6f 	isb	sy
   1c8cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c8d0:	b130      	cbz	r0, 1c8e0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c8d2:	2000      	movs	r0, #0
   1c8d4:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1c8d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8dc:	2001      	movs	r0, #1
   1c8de:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1c8e0:	f381 8811 	msr	BASEPRI, r1
   1c8e4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c8e8:	6852      	ldr	r2, [r2, #4]
   1c8ea:	06d2      	lsls	r2, r2, #27
   1c8ec:	d515      	bpl.n	1c91a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1c8ee:	f04f 0120 	mov.w	r1, #32
   1c8f2:	f3ef 8211 	mrs	r2, BASEPRI
   1c8f6:	f381 8812 	msr	BASEPRI_MAX, r1
   1c8fa:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8fe:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c902:	b111      	cbz	r1, 1c90a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c904:	2100      	movs	r1, #0
   1c906:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1c90a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c90e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1c912:	f382 8811 	msr	BASEPRI, r2
   1c916:	f3bf 8f6f 	isb	sy
}
   1c91a:	4770      	bx	lr

0001c91c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1c91c:	4770      	bx	lr

0001c91e <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c91e:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1c920:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1c924:	009b      	lsls	r3, r3, #2
   1c926:	b29b      	uxth	r3, r3
   1c928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c92c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1c930:	601a      	str	r2, [r3, #0]
   1c932:	681b      	ldr	r3, [r3, #0]
}
   1c934:	4770      	bx	lr

0001c936 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   1c936:	b130      	cbz	r0, 1c946 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   1c938:	3010      	adds	r0, #16
   1c93a:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   1c93c:	b2c0      	uxtb	r0, r0
   1c93e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1c942:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   1c946:	4770      	bx	lr

0001c948 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   1c948:	f7f8 bd1c 	b.w	15384 <compare_set>

0001c94c <sys_clock_cycle_get_32>:
{
   1c94c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1c94e:	f7f8 fcf7 	bl	15340 <z_nrf_rtc_timer_read>
}
   1c952:	bd08      	pop	{r3, pc}

0001c954 <gpio_pin_configure_dt>:
{
   1c954:	4603      	mov	r3, r0
   1c956:	b470      	push	{r4, r5, r6}
   1c958:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   1c95a:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   1c95c:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   1c95e:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   1c960:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c962:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   1c964:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c966:	408c      	lsls	r4, r1
   1c968:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c96a:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   1c96e:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c970:	bf14      	ite	ne
   1c972:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c974:	43a3      	biceq	r3, r4
   1c976:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   1c978:	6833      	ldr	r3, [r6, #0]
}
   1c97a:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   1c97c:	4718      	bx	r3

0001c97e <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c97e:	2301      	movs	r3, #1
   1c980:	fa03 f101 	lsl.w	r1, r3, r1
   1c984:	6903      	ldr	r3, [r0, #16]
   1c986:	681b      	ldr	r3, [r3, #0]
   1c988:	4219      	tst	r1, r3
   1c98a:	d003      	beq.n	1c994 <gpio_pin_set+0x16>
	if (value != 0)	{
   1c98c:	b122      	cbz	r2, 1c998 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   1c98e:	6883      	ldr	r3, [r0, #8]
   1c990:	691b      	ldr	r3, [r3, #16]
   1c992:	e003      	b.n	1c99c <gpio_pin_set+0x1e>
	if (value != 0)	{
   1c994:	2a00      	cmp	r2, #0
   1c996:	d0fa      	beq.n	1c98e <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   1c998:	6883      	ldr	r3, [r0, #8]
   1c99a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1c99c:	4718      	bx	r3

0001c99e <z_log_msg_static_create.constprop.0>:
   1c99e:	2300      	movs	r3, #0
   1c9a0:	f7ee ba88 	b.w	aeb4 <z_impl_z_log_msg_static_create>

0001c9a4 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c9a4:	2101      	movs	r1, #1
   1c9a6:	f7f9 b90f 	b.w	15bc8 <dk_set_led>

0001c9aa <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c9aa:	2100      	movs	r1, #0
   1c9ac:	f7f9 b90c 	b.w	15bc8 <dk_set_led>

0001c9b0 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1c9b0:	2000      	movs	r0, #0
   1c9b2:	4770      	bx	lr

0001c9b4 <psa_crypto_init>:
}
   1c9b4:	2000      	movs	r0, #0
   1c9b6:	4770      	bx	lr

0001c9b8 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   1c9b8:	2300      	movs	r3, #0
{
   1c9ba:	b510      	push	{r4, lr}
   1c9bc:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1c9be:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   1c9c2:	ab05      	add	r3, sp, #20
   1c9c4:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1c9c6:	230c      	movs	r3, #12
   1c9c8:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1c9ca:	2304      	movs	r3, #4
{
   1c9cc:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1c9ce:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1c9d0:	aa03      	add	r2, sp, #12
   1c9d2:	eb0d 0103 	add.w	r1, sp, r3
   1c9d6:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   1c9d8:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1c9da:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1c9de:	f7f9 f96d 	bl	15cbc <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1c9e2:	9b00      	ldr	r3, [sp, #0]
   1c9e4:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   1c9e6:	b008      	add	sp, #32
   1c9e8:	bd10      	pop	{r4, pc}

0001c9ea <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   1c9ea:	4770      	bx	lr

0001c9ec <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c9ec:	4700      	bx	r0

0001c9ee <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c9ee:	f001 b9bf 	b.w	1dd70 <z_impl_k_busy_wait>

0001c9f2 <nrfx_clock_stop>:
    clock_stop(domain);
   1c9f2:	f7f9 b9fd 	b.w	15df0 <clock_stop>

0001c9f6 <nrf_gpio_reconfigure>:
{
   1c9f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c9f8:	4616      	mov	r6, r2
   1c9fa:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1c9fe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ca00:	a801      	add	r0, sp, #4
{
   1ca02:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ca04:	f7f9 fb9c 	bl	16140 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ca08:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ca0a:	f1b6 0c00 	subs.w	ip, r6, #0
   1ca0e:	bf18      	it	ne
   1ca10:	f04f 0c01 	movne.w	ip, #1
   1ca14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ca18:	1e0b      	subs	r3, r1, #0
   1ca1a:	bf18      	it	ne
   1ca1c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ca1e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ca20:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ca24:	bf14      	ite	ne
   1ca26:	f04f 0c0c 	movne.w	ip, #12
   1ca2a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ca2e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ca30:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ca34:	bf14      	ite	ne
   1ca36:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   1ca3a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ca3e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ca40:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ca44:	bf14      	ite	ne
   1ca46:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1ca4a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ca4e:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ca52:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1ca56:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ca5a:	b101      	cbz	r1, 1ca5e <nrf_gpio_reconfigure+0x68>
   1ca5c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1ca5e:	b10e      	cbz	r6, 1ca64 <nrf_gpio_reconfigure+0x6e>
   1ca60:	7836      	ldrb	r6, [r6, #0]
   1ca62:	0076      	lsls	r6, r6, #1
   1ca64:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1ca66:	b10d      	cbz	r5, 1ca6c <nrf_gpio_reconfigure+0x76>
   1ca68:	782d      	ldrb	r5, [r5, #0]
   1ca6a:	00ad      	lsls	r5, r5, #2
   1ca6c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1ca6e:	b10c      	cbz	r4, 1ca74 <nrf_gpio_reconfigure+0x7e>
   1ca70:	7824      	ldrb	r4, [r4, #0]
   1ca72:	0224      	lsls	r4, r4, #8
   1ca74:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1ca76:	b10f      	cbz	r7, 1ca7c <nrf_gpio_reconfigure+0x86>
   1ca78:	783f      	ldrb	r7, [r7, #0]
   1ca7a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ca7c:	430c      	orrs	r4, r1
   1ca7e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1ca80:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1ca84:	b003      	add	sp, #12
   1ca86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ca88 <nrf_gpio_cfg_sense_set>:
{
   1ca88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1ca8a:	f10d 030f 	add.w	r3, sp, #15
   1ca8e:	9301      	str	r3, [sp, #4]
   1ca90:	2300      	movs	r3, #0
{
   1ca92:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1ca96:	461a      	mov	r2, r3
   1ca98:	4619      	mov	r1, r3
   1ca9a:	9300      	str	r3, [sp, #0]
   1ca9c:	f7ff ffab 	bl	1c9f6 <nrf_gpio_reconfigure>
}
   1caa0:	b005      	add	sp, #20
   1caa2:	f85d fb04 	ldr.w	pc, [sp], #4

0001caa6 <metal_device_open>:
{
   1caa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1caa8:	460c      	mov	r4, r1
   1caaa:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1caac:	4606      	mov	r6, r0
   1caae:	b918      	cbnz	r0, 1cab8 <metal_device_open+0x12>
		return -EINVAL;
   1cab0:	f06f 0015 	mvn.w	r0, #21
}
   1cab4:	b002      	add	sp, #8
   1cab6:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1cab8:	f7fd fc1a 	bl	1a2f0 <strlen>
   1cabc:	2800      	cmp	r0, #0
   1cabe:	d0f7      	beq.n	1cab0 <metal_device_open+0xa>
   1cac0:	2c00      	cmp	r4, #0
   1cac2:	d0f5      	beq.n	1cab0 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1cac4:	4620      	mov	r0, r4
   1cac6:	f7fd fc13 	bl	1a2f0 <strlen>
   1caca:	2800      	cmp	r0, #0
   1cacc:	d0f0      	beq.n	1cab0 <metal_device_open+0xa>
   1cace:	2d00      	cmp	r5, #0
   1cad0:	d0ee      	beq.n	1cab0 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1cad2:	4630      	mov	r0, r6
   1cad4:	a901      	add	r1, sp, #4
   1cad6:	f7f9 ff43 	bl	16960 <metal_bus_find>
	if (error)
   1cada:	2800      	cmp	r0, #0
   1cadc:	d1ea      	bne.n	1cab4 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1cade:	9801      	ldr	r0, [sp, #4]
   1cae0:	6883      	ldr	r3, [r0, #8]
   1cae2:	b12b      	cbz	r3, 1caf0 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1cae4:	462a      	mov	r2, r5
   1cae6:	4621      	mov	r1, r4
}
   1cae8:	b002      	add	sp, #8
   1caea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1caee:	4718      	bx	r3
		return -ENODEV;
   1caf0:	f06f 0012 	mvn.w	r0, #18
   1caf4:	e7de      	b.n	1cab4 <metal_device_open+0xe>

0001caf6 <metal_device_close>:
{
   1caf6:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   1caf8:	6840      	ldr	r0, [r0, #4]
   1cafa:	68c3      	ldr	r3, [r0, #12]
   1cafc:	b103      	cbz	r3, 1cb00 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   1cafe:	4718      	bx	r3
}
   1cb00:	4770      	bx	lr

0001cb02 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1cb02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb06:	b089      	sub	sp, #36	; 0x24
   1cb08:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1cb0a:	4604      	mov	r4, r0
   1cb0c:	4689      	mov	r9, r1
   1cb0e:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1cb10:	2100      	movs	r1, #0
   1cb12:	2220      	movs	r2, #32
   1cb14:	4668      	mov	r0, sp
{
   1cb16:	461f      	mov	r7, r3
   1cb18:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1cb1a:	f7fd fc33 	bl	1a384 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1cb1e:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1cb20:	bf97      	itett	ls
   1cb22:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1cb24:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
		io->page_mask = (1UL << page_shift) - 1UL;
   1cb28:	40b3      	lslls	r3, r6
   1cb2a:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
   1cb2e:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1cb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1cb32:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1cb36:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1cb3a:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1cb3c:	3418      	adds	r4, #24
   1cb3e:	b145      	cbz	r5, 1cb52 <metal_io_init+0x50>
   1cb40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cb48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1cb4c:	b009      	add	sp, #36	; 0x24
   1cb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1cb52:	466d      	mov	r5, sp
   1cb54:	e7f4      	b.n	1cb40 <metal_io_init+0x3e>

0001cb56 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1cb56:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cb58:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1cb5a:	1c66      	adds	r6, r4, #1
   1cb5c:	d031      	beq.n	1cbc2 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cb5e:	6885      	ldr	r5, [r0, #8]
   1cb60:	42a9      	cmp	r1, r5
   1cb62:	d22e      	bcs.n	1cbc2 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1cb64:	1864      	adds	r4, r4, r1
   1cb66:	d02c      	beq.n	1cbc2 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1cb68:	185e      	adds	r6, r3, r1
   1cb6a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1cb6c:	bf88      	it	hi
   1cb6e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1cb70:	6a05      	ldr	r5, [r0, #32]
   1cb72:	b135      	cbz	r5, 1cb82 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1cb74:	9300      	str	r3, [sp, #0]
   1cb76:	2305      	movs	r3, #5
   1cb78:	47a8      	blx	r5
   1cb7a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1cb7c:	4618      	mov	r0, r3
   1cb7e:	b002      	add	sp, #8
   1cb80:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1cb82:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1cb86:	4619      	mov	r1, r3
   1cb88:	1aa4      	subs	r4, r4, r2
   1cb8a:	1910      	adds	r0, r2, r4
   1cb8c:	b119      	cbz	r1, 1cb96 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1cb8e:	ea40 0502 	orr.w	r5, r0, r2
   1cb92:	07ad      	lsls	r5, r5, #30
   1cb94:	d10a      	bne.n	1cbac <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1cb96:	2903      	cmp	r1, #3
   1cb98:	dc0d      	bgt.n	1cbb6 <metal_io_block_read+0x60>
   1cb9a:	3801      	subs	r0, #1
   1cb9c:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1cb9e:	428a      	cmp	r2, r1
   1cba0:	d0ec      	beq.n	1cb7c <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1cba2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1cba6:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1cbaa:	e7f8      	b.n	1cb9e <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1cbac:	7800      	ldrb	r0, [r0, #0]
			len--;
   1cbae:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1cbb0:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1cbb4:	e7e9      	b.n	1cb8a <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1cbb6:	f850 4b04 	ldr.w	r4, [r0], #4
   1cbba:	3904      	subs	r1, #4
   1cbbc:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1cbc0:	e7e9      	b.n	1cb96 <metal_io_block_read+0x40>
		return -ERANGE;
   1cbc2:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1cbc6:	e7d9      	b.n	1cb7c <metal_io_block_read+0x26>

0001cbc8 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1cbc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cbca:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1cbcc:	1c65      	adds	r5, r4, #1
   1cbce:	d032      	beq.n	1cc36 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cbd0:	6885      	ldr	r5, [r0, #8]
   1cbd2:	42a9      	cmp	r1, r5
   1cbd4:	d22f      	bcs.n	1cc36 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1cbd6:	1864      	adds	r4, r4, r1
   1cbd8:	d02d      	beq.n	1cc36 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1cbda:	185e      	adds	r6, r3, r1
   1cbdc:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1cbde:	bf88      	it	hi
   1cbe0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1cbe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1cbe4:	b1cd      	cbz	r5, 1cc1a <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1cbe6:	9300      	str	r3, [sp, #0]
   1cbe8:	2305      	movs	r3, #5
   1cbea:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1cbec:	b002      	add	sp, #8
   1cbee:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1cbf0:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1cbf4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1cbf6:	7005      	strb	r5, [r0, #0]
			len--;
   1cbf8:	4615      	mov	r5, r2
   1cbfa:	18a0      	adds	r0, r4, r2
		while ( len && (
   1cbfc:	b119      	cbz	r1, 1cc06 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1cbfe:	ea40 0602 	orr.w	r6, r0, r2
   1cc02:	07b6      	lsls	r6, r6, #30
   1cc04:	d1f4      	bne.n	1cbf0 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cc06:	2903      	cmp	r1, #3
   1cc08:	dc0a      	bgt.n	1cc20 <metal_io_block_write+0x58>
   1cc0a:	3d01      	subs	r5, #1
   1cc0c:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1cc0e:	4288      	cmp	r0, r1
   1cc10:	d10c      	bne.n	1cc2c <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1cc12:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1cc16:	4618      	mov	r0, r3
   1cc18:	e7e8      	b.n	1cbec <metal_io_block_write+0x24>
   1cc1a:	4619      	mov	r1, r3
   1cc1c:	1aa4      	subs	r4, r4, r2
   1cc1e:	e7eb      	b.n	1cbf8 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1cc20:	f855 2b04 	ldr.w	r2, [r5], #4
   1cc24:	3904      	subs	r1, #4
   1cc26:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1cc2a:	e7ec      	b.n	1cc06 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1cc2c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1cc30:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1cc34:	e7eb      	b.n	1cc0e <metal_io_block_write+0x46>
		return -ERANGE;
   1cc36:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1cc3a:	e7d7      	b.n	1cbec <metal_io_block_write+0x24>

0001cc3c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1cc3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cc3e:	6804      	ldr	r4, [r0, #0]
   1cc40:	461d      	mov	r5, r3
		: NULL);
   1cc42:	1c66      	adds	r6, r4, #1
   1cc44:	d02b      	beq.n	1cc9e <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cc46:	6883      	ldr	r3, [r0, #8]
   1cc48:	4299      	cmp	r1, r3
   1cc4a:	d228      	bcs.n	1cc9e <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1cc4c:	1864      	adds	r4, r4, r1
   1cc4e:	d026      	beq.n	1cc9e <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1cc50:	186e      	adds	r6, r5, r1
   1cc52:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1cc54:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1cc56:	bf88      	it	hi
   1cc58:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1cc5a:	b12e      	cbz	r6, 1cc68 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1cc5c:	2305      	movs	r3, #5
   1cc5e:	9500      	str	r5, [sp, #0]
   1cc60:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1cc62:	4628      	mov	r0, r5
}
   1cc64:	b002      	add	sp, #8
   1cc66:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1cc68:	4621      	mov	r1, r4
   1cc6a:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1cc6c:	b94b      	cbnz	r3, 1cc82 <metal_io_block_set+0x46>
   1cc6e:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1cc70:	4299      	cmp	r1, r3
   1cc72:	d111      	bne.n	1cc98 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1cc74:	f3bf 8f5b 	dmb	ish
   1cc78:	e7f3      	b.n	1cc62 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1cc7a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1cc7e:	3b01      	subs	r3, #1
   1cc80:	e7f4      	b.n	1cc6c <metal_io_block_set+0x30>
   1cc82:	0788      	lsls	r0, r1, #30
   1cc84:	d1f9      	bne.n	1cc7a <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1cc86:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1cc8a:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cc8c:	2b03      	cmp	r3, #3
   1cc8e:	ddee      	ble.n	1cc6e <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1cc90:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cc94:	3b04      	subs	r3, #4
   1cc96:	e7f9      	b.n	1cc8c <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1cc98:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1cc9c:	e7e8      	b.n	1cc70 <metal_io_block_set+0x34>
		return -ERANGE;
   1cc9e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1cca2:	e7df      	b.n	1cc64 <metal_io_block_set+0x28>

0001cca4 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1cca4:	2000      	movs	r0, #0
   1cca6:	4770      	bx	lr

0001cca8 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1cca8:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1ccaa:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1ccac:	4602      	mov	r2, r0
   1ccae:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1ccb0:	b984      	cbnz	r4, 1ccd4 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   1ccb2:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1ccb4:	291f      	cmp	r1, #31
   1ccb6:	bf98      	it	ls
   1ccb8:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1ccbc:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1ccbe:	b161      	cbz	r1, 1ccda <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   1ccc0:	6880      	ldr	r0, [r0, #8]
   1ccc2:	4283      	cmp	r3, r0
   1ccc4:	d209      	bcs.n	1ccda <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   1ccc6:	6910      	ldr	r0, [r2, #16]
   1ccc8:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1ccca:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1ccce:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1ccd0:	bc10      	pop	{r4}
   1ccd2:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1ccd4:	4623      	mov	r3, r4
}
   1ccd6:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   1ccd8:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1ccda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ccde:	e7f7      	b.n	1ccd0 <metal_io_phys+0x28>

0001cce0 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   1cce0:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   1cce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   1cce4:	4605      	mov	r5, r0
   1cce6:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   1cce8:	b9e3      	cbnz	r3, 1cd24 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1ccea:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1ccec:	1c62      	adds	r2, r4, #1
   1ccee:	bf09      	itett	eq
   1ccf0:	6843      	ldreq	r3, [r0, #4]
   1ccf2:	400c      	andne	r4, r1
   1ccf4:	681c      	ldreq	r4, [r3, #0]
   1ccf6:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   1ccf8:	4621      	mov	r1, r4
   1ccfa:	4628      	mov	r0, r5
   1ccfc:	f7ff ffd4 	bl	1cca8 <metal_io_phys>
   1cd00:	4286      	cmp	r6, r0
   1cd02:	d007      	beq.n	1cd14 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   1cd04:	692b      	ldr	r3, [r5, #16]
   1cd06:	3301      	adds	r3, #1
   1cd08:	441c      	add	r4, r3
		} while (offset < io->size);
   1cd0a:	68ab      	ldr	r3, [r5, #8]
   1cd0c:	429c      	cmp	r4, r3
   1cd0e:	d3f3      	bcc.n	1ccf8 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   1cd10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cd14:	6828      	ldr	r0, [r5, #0]
		: NULL);
   1cd16:	1c43      	adds	r3, r0, #1
   1cd18:	d007      	beq.n	1cd2a <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cd1a:	68ab      	ldr	r3, [r5, #8]
   1cd1c:	42a3      	cmp	r3, r4
   1cd1e:	d904      	bls.n	1cd2a <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   1cd20:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   1cd22:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1cd24:	4798      	blx	r3
   1cd26:	4604      	mov	r4, r0
   1cd28:	e7f4      	b.n	1cd14 <metal_io_phys_to_virt+0x34>
		: NULL);
   1cd2a:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   1cd2c:	e7f9      	b.n	1cd22 <metal_io_phys_to_virt+0x42>

0001cd2e <virtqueue_create>:
{
   1cd2e:	b530      	push	{r4, r5, lr}
   1cd30:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1cd32:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1cd36:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1cd38:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1cd3a:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1cd3c:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1cd3e:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1cd40:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1cd42:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1cd44:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1cd46:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1cd4a:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1cd4e:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1cd52:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1cd54:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1cd56:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1cd5a:	1c6a      	adds	r2, r5, #1
   1cd5c:	4413      	add	r3, r2
   1cd5e:	426d      	negs	r5, r5
   1cd60:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1cd62:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cd64:	6983      	ldr	r3, [r0, #24]
   1cd66:	b953      	cbnz	r3, 1cd7e <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1cd68:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1cd6a:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1cd6c:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1cd6e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1cd72:	db06      	blt.n	1cd82 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1cd74:	2300      	movs	r3, #0
   1cd76:	7393      	strb	r3, [r2, #14]
   1cd78:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1cd7c:	73d3      	strb	r3, [r2, #15]
}
   1cd7e:	2000      	movs	r0, #0
   1cd80:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1cd82:	3301      	adds	r3, #1
   1cd84:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1cd86:	e7f0      	b.n	1cd6a <virtqueue_create+0x3c>

0001cd88 <virtqueue_add_buffer>:
{
   1cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1cd8c:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1cd90:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cd92:	4655      	mov	r5, sl
   1cd94:	2600      	movs	r6, #0
{
   1cd96:	b085      	sub	sp, #20
	needed = readable + writable;
   1cd98:	eb02 0803 	add.w	r8, r2, r3
{
   1cd9c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1cd9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cda0:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1cda4:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1cda8:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1cdaa:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1cdae:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1cdb2:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cdb4:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1cdb6:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cdb8:	45b0      	cmp	r8, r6
   1cdba:	dc1a      	bgt.n	1cdf2 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1cdbc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1cdbe:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1cdc0:	eba3 030b 	sub.w	r3, r3, fp
   1cdc4:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cdc6:	69e3      	ldr	r3, [r4, #28]
   1cdc8:	8961      	ldrh	r1, [r4, #10]
   1cdca:	885a      	ldrh	r2, [r3, #2]
   1cdcc:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1cdce:	400a      	ands	r2, r1
   1cdd0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1cdd4:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1cdd8:	f3bf 8f5b 	dmb	ish
}
   1cddc:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1cdde:	69e2      	ldr	r2, [r4, #28]
   1cde0:	8853      	ldrh	r3, [r2, #2]
   1cde2:	3301      	adds	r3, #1
   1cde4:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1cde6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1cde8:	3301      	adds	r3, #1
   1cdea:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cdec:	b005      	add	sp, #20
   1cdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1cdf2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1cdf4:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1cdf6:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1cdfa:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1cdfe:	9302      	str	r3, [sp, #8]
   1ce00:	6803      	ldr	r3, [r0, #0]
   1ce02:	9203      	str	r2, [sp, #12]
   1ce04:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1ce06:	6883      	ldr	r3, [r0, #8]
   1ce08:	3708      	adds	r7, #8
   1ce0a:	4299      	cmp	r1, r3
   1ce0c:	bf28      	it	cs
   1ce0e:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   1ce12:	f7ff ff49 	bl	1cca8 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1ce16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1ce1a:	5098      	str	r0, [r3, r2]
   1ce1c:	2200      	movs	r2, #0
   1ce1e:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1ce20:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1ce24:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1ce26:	9a01      	ldr	r2, [sp, #4]
   1ce28:	4296      	cmp	r6, r2
   1ce2a:	bfac      	ite	ge
   1ce2c:	2200      	movge	r2, #0
   1ce2e:	2201      	movlt	r2, #1
		if (i >= readable)
   1ce30:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1ce32:	bfd8      	it	le
   1ce34:	f042 0202 	orrle.w	r2, r2, #2
   1ce38:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ce3a:	3601      	adds	r6, #1
   1ce3c:	89ed      	ldrh	r5, [r5, #14]
   1ce3e:	e7bb      	b.n	1cdb8 <virtqueue_add_buffer+0x30>

0001ce40 <virtqueue_get_buffer>:
{
   1ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1ce42:	b350      	cbz	r0, 1ce9a <virtqueue_get_buffer+0x5a>
   1ce44:	6a05      	ldr	r5, [r0, #32]
   1ce46:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1ce48:	886b      	ldrh	r3, [r5, #2]
   1ce4a:	42a3      	cmp	r3, r4
   1ce4c:	d030      	beq.n	1ceb0 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1ce4e:	1c63      	adds	r3, r4, #1
   1ce50:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1ce52:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1ce54:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1ce58:	3b01      	subs	r3, #1
   1ce5a:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1ce5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1ce60:	686b      	ldr	r3, [r5, #4]
   1ce62:	b29e      	uxth	r6, r3
	if (len)
   1ce64:	b109      	cbz	r1, 1ce6a <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1ce66:	68ad      	ldr	r5, [r5, #8]
   1ce68:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1ce6a:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1ce6e:	b29b      	uxth	r3, r3
   1ce70:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1ce74:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1ce78:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1ce7a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1ce7c:	442f      	add	r7, r5
	dxp->ndescs--;
   1ce7e:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1ce80:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1ce82:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1ce84:	898d      	ldrh	r5, [r1, #12]
   1ce86:	076f      	lsls	r7, r5, #29
   1ce88:	d50e      	bpl.n	1cea8 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1ce8a:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1ce8c:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1ce8e:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1ce90:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1ce92:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1ce94:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1ce96:	b102      	cbz	r2, 1ce9a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1ce98:	8014      	strh	r4, [r2, #0]
}
   1ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1ce9c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1ce9e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1cea0:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1cea2:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1cea6:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1cea8:	898d      	ldrh	r5, [r1, #12]
   1ceaa:	07ed      	lsls	r5, r5, #31
   1ceac:	d4f6      	bmi.n	1ce9c <virtqueue_get_buffer+0x5c>
   1ceae:	e7ec      	b.n	1ce8a <virtqueue_get_buffer+0x4a>
		return NULL;
   1ceb0:	2000      	movs	r0, #0
   1ceb2:	e7f2      	b.n	1ce9a <virtqueue_get_buffer+0x5a>

0001ceb4 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1ceb4:	6983      	ldr	r3, [r0, #24]
   1ceb6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1ceba:	6898      	ldr	r0, [r3, #8]
   1cebc:	4770      	bx	lr

0001cebe <virtqueue_get_available_buffer>:
{
   1cebe:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cec0:	f3bf 8f5b 	dmb	ish
{
   1cec4:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cec6:	69c1      	ldr	r1, [r0, #28]
{
   1cec8:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ceca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1cecc:	884a      	ldrh	r2, [r1, #2]
{
   1cece:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ced0:	429a      	cmp	r2, r3
   1ced2:	d016      	beq.n	1cf02 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1ced4:	1c5a      	adds	r2, r3, #1
   1ced6:	8602      	strh	r2, [r0, #48]	; 0x30
   1ced8:	8942      	ldrh	r2, [r0, #10]
   1ceda:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cedc:	4013      	ands	r3, r2
   1cede:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   1cee2:	888a      	ldrh	r2, [r1, #4]
   1cee4:	802a      	strh	r2, [r5, #0]
   1cee6:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1cee8:	6982      	ldr	r2, [r0, #24]
   1ceea:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   1ceec:	58d1      	ldr	r1, [r2, r3]
   1ceee:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1cef0:	f7ff fef6 	bl	1cce0 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   1cef4:	882a      	ldrh	r2, [r5, #0]
   1cef6:	69a3      	ldr	r3, [r4, #24]
   1cef8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cefc:	689b      	ldr	r3, [r3, #8]
   1cefe:	6033      	str	r3, [r6, #0]
}
   1cf00:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1cf02:	2000      	movs	r0, #0
   1cf04:	e7fc      	b.n	1cf00 <virtqueue_get_available_buffer+0x42>

0001cf06 <virtqueue_disable_cb>:
{
   1cf06:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cf08:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cf0a:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cf0c:	6912      	ldr	r2, [r2, #16]
   1cf0e:	0092      	lsls	r2, r2, #2
   1cf10:	d517      	bpl.n	1cf42 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cf12:	b943      	cbnz	r3, 1cf26 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cf14:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1cf16:	69c2      	ldr	r2, [r0, #28]
   1cf18:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cf1a:	8944      	ldrh	r4, [r0, #10]
   1cf1c:	3b01      	subs	r3, #1
   1cf1e:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1cf20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1cf24:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1cf26:	6803      	ldr	r3, [r0, #0]
   1cf28:	699b      	ldr	r3, [r3, #24]
   1cf2a:	2b01      	cmp	r3, #1
   1cf2c:	d108      	bne.n	1cf40 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cf2e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1cf30:	6a02      	ldr	r2, [r0, #32]
   1cf32:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cf34:	8940      	ldrh	r0, [r0, #10]
   1cf36:	3b01      	subs	r3, #1
   1cf38:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1cf3a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1cf3e:	8093      	strh	r3, [r2, #4]
}
   1cf40:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cf42:	b923      	cbnz	r3, 1cf4e <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1cf44:	69c2      	ldr	r2, [r0, #28]
   1cf46:	8813      	ldrh	r3, [r2, #0]
   1cf48:	f043 0301 	orr.w	r3, r3, #1
   1cf4c:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1cf4e:	6803      	ldr	r3, [r0, #0]
   1cf50:	699b      	ldr	r3, [r3, #24]
   1cf52:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1cf54:	bf01      	itttt	eq
   1cf56:	6a02      	ldreq	r2, [r0, #32]
   1cf58:	8813      	ldrheq	r3, [r2, #0]
   1cf5a:	f043 0301 	orreq.w	r3, r3, #1
   1cf5e:	8013      	strheq	r3, [r2, #0]
}
   1cf60:	e7ee      	b.n	1cf40 <virtqueue_disable_cb+0x3a>

0001cf62 <virtqueue_kick>:
{
   1cf62:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cf64:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cf68:	6803      	ldr	r3, [r0, #0]
{
   1cf6a:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cf6c:	691a      	ldr	r2, [r3, #16]
   1cf6e:	699b      	ldr	r3, [r3, #24]
   1cf70:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1cf74:	d01a      	beq.n	1cfac <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cf76:	b97b      	cbnz	r3, 1cf98 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1cf78:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1cf7a:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1cf7c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1cf7e:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1cf80:	3b01      	subs	r3, #1
   1cf82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1cf86:	8892      	ldrh	r2, [r2, #4]
   1cf88:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1cf8a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1cf8c:	b29b      	uxth	r3, r3
   1cf8e:	429a      	cmp	r2, r3
   1cf90:	d814      	bhi.n	1cfbc <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1cf92:	2300      	movs	r3, #0
   1cf94:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cf96:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1cf98:	2b01      	cmp	r3, #1
   1cf9a:	d1fa      	bne.n	1cf92 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1cf9c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1cf9e:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1cfa0:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1cfa2:	6941      	ldr	r1, [r0, #20]
   1cfa4:	3b01      	subs	r3, #1
   1cfa6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1cfaa:	e7ec      	b.n	1cf86 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1cfac:	b963      	cbnz	r3, 1cfc8 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1cfae:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1cfb0:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1cfb2:	43db      	mvns	r3, r3
   1cfb4:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1cfb8:	2b00      	cmp	r3, #0
   1cfba:	d0ea      	beq.n	1cf92 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1cfbc:	6923      	ldr	r3, [r4, #16]
   1cfbe:	2b00      	cmp	r3, #0
   1cfc0:	d0e7      	beq.n	1cf92 <virtqueue_kick+0x30>
		vq->notify(vq);
   1cfc2:	4620      	mov	r0, r4
   1cfc4:	4798      	blx	r3
   1cfc6:	e7e4      	b.n	1cf92 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1cfc8:	2b01      	cmp	r3, #1
   1cfca:	d1e2      	bne.n	1cf92 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1cfcc:	69c3      	ldr	r3, [r0, #28]
   1cfce:	e7ef      	b.n	1cfb0 <virtqueue_kick+0x4e>

0001cfd0 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cfd0:	69c3      	ldr	r3, [r0, #28]
   1cfd2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1cfd4:	8859      	ldrh	r1, [r3, #2]
   1cfd6:	4291      	cmp	r1, r2
   1cfd8:	d00a      	beq.n	1cff0 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1cfda:	8941      	ldrh	r1, [r0, #10]
   1cfdc:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cfde:	400a      	ands	r2, r1
   1cfe0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1cfe4:	889a      	ldrh	r2, [r3, #4]
   1cfe6:	6983      	ldr	r3, [r0, #24]
   1cfe8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cfec:	6898      	ldr	r0, [r3, #8]
	return len;
   1cfee:	4770      	bx	lr
		return 0;
   1cff0:	2000      	movs	r0, #0
}
   1cff2:	4770      	bx	lr

0001cff4 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1cff4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1cff8:	68c3      	ldr	r3, [r0, #12]
   1cffa:	b103      	cbz	r3, 1cffe <virtqueue_notification+0xa>
		vq->callback(vq);
   1cffc:	4718      	bx	r3
}
   1cffe:	4770      	bx	lr

0001d000 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1d000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d008:	f7fa bc00 	b.w	1780c <z_impl_k_sem_take>

0001d00c <rpmsg_unregister_endpoint>:
{
   1d00c:	b570      	push	{r4, r5, r6, lr}
   1d00e:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1d010:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1d012:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1d016:	4630      	mov	r0, r6
   1d018:	f7ff fff2 	bl	1d000 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1d01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d01e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1d022:	2b7f      	cmp	r3, #127	; 0x7f
   1d024:	d80b      	bhi.n	1d03e <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1d026:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1d028:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1d02a:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1d02c:	f003 031f 	and.w	r3, r3, #31
   1d030:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1d032:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1d036:	ea23 0302 	bic.w	r3, r3, r2
   1d03a:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1d03e:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1d042:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1d044:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1d046:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1d04a:	6011      	str	r1, [r2, #0]
	node->next = node;
   1d04c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1d050:	2300      	movs	r3, #0
   1d052:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1d054:	4630      	mov	r0, r6
}
   1d056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d05a:	f7fa bbb1 	b.w	177c0 <z_impl_k_sem_give>

0001d05e <rpmsg_send_ns_message>:
{
   1d05e:	b510      	push	{r4, lr}
   1d060:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1d062:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1d064:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1d066:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1d068:	2220      	movs	r2, #32
   1d06a:	4601      	mov	r1, r0
   1d06c:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1d06e:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1d070:	f7fd f92a 	bl	1a2c8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1d074:	2328      	movs	r3, #40	; 0x28
   1d076:	2201      	movs	r2, #1
   1d078:	e9cd 3200 	strd	r3, r2, [sp]
   1d07c:	4620      	mov	r0, r4
   1d07e:	2235      	movs	r2, #53	; 0x35
   1d080:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d082:	ab02      	add	r3, sp, #8
   1d084:	f7f9 fdbe 	bl	16c04 <rpmsg_send_offchannel_raw>
}
   1d088:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d08c:	b00c      	add	sp, #48	; 0x30
   1d08e:	bd10      	pop	{r4, pc}

0001d090 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1d090:	b128      	cbz	r0, 1d09e <rpmsg_hold_rx_buffer+0xe>
   1d092:	6a00      	ldr	r0, [r0, #32]
   1d094:	b118      	cbz	r0, 1d09e <rpmsg_hold_rx_buffer+0xe>
   1d096:	b111      	cbz	r1, 1d09e <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1d098:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1d09a:	b103      	cbz	r3, 1d09e <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1d09c:	4718      	bx	r3
}
   1d09e:	4770      	bx	lr

0001d0a0 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1d0a0:	b130      	cbz	r0, 1d0b0 <rpmsg_release_rx_buffer+0x10>
   1d0a2:	6a00      	ldr	r0, [r0, #32]
   1d0a4:	b120      	cbz	r0, 1d0b0 <rpmsg_release_rx_buffer+0x10>
   1d0a6:	b119      	cbz	r1, 1d0b0 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   1d0a8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1d0ac:	b103      	cbz	r3, 1d0b0 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1d0ae:	4718      	bx	r3
}
   1d0b0:	4770      	bx	lr

0001d0b2 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1d0b2:	b130      	cbz	r0, 1d0c2 <rpmsg_get_tx_payload_buffer+0x10>
   1d0b4:	6a00      	ldr	r0, [r0, #32]
   1d0b6:	b120      	cbz	r0, 1d0c2 <rpmsg_get_tx_payload_buffer+0x10>
   1d0b8:	b119      	cbz	r1, 1d0c2 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1d0ba:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   1d0be:	b103      	cbz	r3, 1d0c2 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1d0c0:	4718      	bx	r3
}
   1d0c2:	2000      	movs	r0, #0
   1d0c4:	4770      	bx	lr

0001d0c6 <rpmsg_get_endpoint>:
{
   1d0c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d0ca:	4606      	mov	r6, r0
   1d0cc:	4688      	mov	r8, r1
   1d0ce:	4617      	mov	r7, r2
   1d0d0:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1d0d2:	6804      	ldr	r4, [r0, #0]
   1d0d4:	42a6      	cmp	r6, r4
   1d0d6:	d101      	bne.n	1d0dc <rpmsg_get_endpoint+0x16>
	return NULL;
   1d0d8:	2500      	movs	r5, #0
   1d0da:	e023      	b.n	1d124 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d0dc:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1d0de:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d0e2:	d002      	beq.n	1d0ea <rpmsg_get_endpoint+0x24>
   1d0e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d0e6:	42bb      	cmp	r3, r7
   1d0e8:	d01c      	beq.n	1d124 <rpmsg_get_endpoint+0x5e>
		if (name)
   1d0ea:	f1b8 0f00 	cmp.w	r8, #0
   1d0ee:	d101      	bne.n	1d0f4 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1d0f0:	6824      	ldr	r4, [r4, #0]
   1d0f2:	e7ef      	b.n	1d0d4 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1d0f4:	2220      	movs	r2, #32
   1d0f6:	4641      	mov	r1, r8
   1d0f8:	4628      	mov	r0, r5
   1d0fa:	f7fd f915 	bl	1a328 <strncmp>
		if (!name || !name_match)
   1d0fe:	2800      	cmp	r0, #0
   1d100:	d1f6      	bne.n	1d0f0 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1d102:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1d106:	d002      	beq.n	1d10e <rpmsg_get_endpoint+0x48>
   1d108:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d10a:	454b      	cmp	r3, r9
   1d10c:	d00a      	beq.n	1d124 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1d10e:	1c7b      	adds	r3, r7, #1
   1d110:	d00b      	beq.n	1d12a <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1d112:	6824      	ldr	r4, [r4, #0]
   1d114:	42b4      	cmp	r4, r6
   1d116:	d0df      	beq.n	1d0d8 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d118:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1d11c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d120:	429f      	cmp	r7, r3
   1d122:	d1e7      	bne.n	1d0f4 <rpmsg_get_endpoint+0x2e>
}
   1d124:	4628      	mov	r0, r5
   1d126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1d12a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d12c:	3301      	adds	r3, #1
   1d12e:	d0f9      	beq.n	1d124 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1d130:	6824      	ldr	r4, [r4, #0]
   1d132:	42b4      	cmp	r4, r6
   1d134:	d0d0      	beq.n	1d0d8 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1d136:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d13a:	e7d6      	b.n	1d0ea <rpmsg_get_endpoint+0x24>

0001d13c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1d13c:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   1d13e:	4604      	mov	r4, r0
   1d140:	b190      	cbz	r0, 1d168 <rpmsg_destroy_ept+0x2c>
   1d142:	6a03      	ldr	r3, [r0, #32]
   1d144:	b183      	cbz	r3, 1d168 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   1d146:	7802      	ldrb	r2, [r0, #0]
   1d148:	b14a      	cbz	r2, 1d15e <rpmsg_destroy_ept+0x22>
   1d14a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1d14e:	b133      	cbz	r3, 1d15e <rpmsg_destroy_ept+0x22>
   1d150:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1d152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d156:	d302      	bcc.n	1d15e <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1d158:	2101      	movs	r1, #1
   1d15a:	f7ff ff80 	bl	1d05e <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1d15e:	4620      	mov	r0, r4
}
   1d160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1d164:	f7ff bf52 	b.w	1d00c <rpmsg_unregister_endpoint>
}
   1d168:	bd10      	pop	{r4, pc}

0001d16a <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1d16a:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1d16e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d172:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1d176:	4770      	bx	lr

0001d178 <rpmsg_virtio_tx_callback>:
}
   1d178:	4770      	bx	lr

0001d17a <k_sem_give>:
   1d17a:	f7fa bb21 	b.w	177c0 <z_impl_k_sem_give>

0001d17e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1d17e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d186:	f7fa bb41 	b.w	1780c <z_impl_k_sem_take>

0001d18a <rpmsg_virtio_release_tx_buffer>:
{
   1d18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d18c:	460c      	mov	r4, r1
   1d18e:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   1d190:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1d194:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1d198:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   1d19a:	b2b6      	uxth	r6, r6
   1d19c:	f7ff ffef 	bl	1d17e <__metal_mutex_acquire>
	r_desc->idx = idx;
   1d1a0:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   1d1a4:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   1d1a8:	f1a4 0310 	sub.w	r3, r4, #16
   1d1ac:	f844 2c0c 	str.w	r2, [r4, #-12]
   1d1b0:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   1d1b4:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   1d1b8:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   1d1bc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1d1c0:	4638      	mov	r0, r7
   1d1c2:	6013      	str	r3, [r2, #0]
   1d1c4:	f7ff ffd9 	bl	1d17a <k_sem_give>
}
   1d1c8:	2000      	movs	r0, #0
   1d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d1cc <rpmsg_virtio_ns_callback>:
{
   1d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1d1d0:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   1d1d2:	2a28      	cmp	r2, #40	; 0x28
{
   1d1d4:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1d1d6:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   1d1da:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1d1dc:	d126      	bne.n	1d22c <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1d1de:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1d1e0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1d1e2:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1d1e4:	42a1      	cmp	r1, r4
   1d1e6:	bf28      	it	cs
   1d1e8:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   1d1ec:	2320      	movs	r3, #32
   1d1ee:	466a      	mov	r2, sp
   1d1f0:	f7ff fcb1 	bl	1cb56 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1d1f4:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   1d1f8:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1d1fc:	4630      	mov	r0, r6
   1d1fe:	f7ff ffbe 	bl	1d17e <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d202:	4643      	mov	r3, r8
   1d204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d208:	4669      	mov	r1, sp
   1d20a:	4628      	mov	r0, r5
   1d20c:	f7ff ff5b 	bl	1d0c6 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d212:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d214:	07db      	lsls	r3, r3, #31
   1d216:	d519      	bpl.n	1d24c <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   1d218:	b960      	cbnz	r0, 1d234 <rpmsg_virtio_ns_callback+0x68>
   1d21a:	4630      	mov	r0, r6
   1d21c:	f7ff ffad 	bl	1d17a <k_sem_give>
		if (rdev->ns_unbind_cb)
   1d220:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   1d222:	b11b      	cbz	r3, 1d22c <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   1d224:	4642      	mov	r2, r8
   1d226:	4669      	mov	r1, sp
   1d228:	4628      	mov	r0, r5
   1d22a:	4798      	blx	r3
}
   1d22c:	2000      	movs	r0, #0
   1d22e:	b008      	add	sp, #32
   1d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1d234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d238:	6283      	str	r3, [r0, #40]	; 0x28
   1d23a:	4630      	mov	r0, r6
   1d23c:	f7ff ff9d 	bl	1d17a <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1d240:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d242:	2b00      	cmp	r3, #0
   1d244:	d0ec      	beq.n	1d220 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   1d246:	4620      	mov	r0, r4
   1d248:	4798      	blx	r3
   1d24a:	e7e9      	b.n	1d220 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   1d24c:	b920      	cbnz	r0, 1d258 <rpmsg_virtio_ns_callback+0x8c>
   1d24e:	4630      	mov	r0, r6
   1d250:	f7ff ff93 	bl	1d17a <k_sem_give>
			if (rdev->ns_bind_cb)
   1d254:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1d256:	e7e4      	b.n	1d222 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   1d258:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1d25c:	4630      	mov	r0, r6
   1d25e:	f7ff ff8c 	bl	1d17a <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1d262:	e7e3      	b.n	1d22c <rpmsg_virtio_ns_callback+0x60>

0001d264 <rpmsg_virtio_get_rx_buffer>:
{
   1d264:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1d266:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   1d26a:	4613      	mov	r3, r2
   1d26c:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1d26e:	b925      	cbnz	r5, 1d27a <rpmsg_virtio_get_rx_buffer+0x16>
}
   1d270:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1d272:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1d276:	f7ff bde3 	b.w	1ce40 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1d27a:	2d01      	cmp	r5, #1
   1d27c:	d106      	bne.n	1d28c <rpmsg_virtio_get_rx_buffer+0x28>
}
   1d27e:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1d280:	460a      	mov	r2, r1
   1d282:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1d286:	4619      	mov	r1, r3
   1d288:	f7ff be19 	b.w	1cebe <virtqueue_get_available_buffer>
}
   1d28c:	2000      	movs	r0, #0
   1d28e:	bc30      	pop	{r4, r5}
   1d290:	4770      	bx	lr

0001d292 <rpmsg_virtio_return_buffer>:
{
   1d292:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d294:	460c      	mov	r4, r1
   1d296:	4619      	mov	r1, r3
   1d298:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   1d29c:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1d29e:	b95d      	cbnz	r5, 1d2b8 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1d2a0:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1d2a2:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1d2a6:	2301      	movs	r3, #1
   1d2a8:	462a      	mov	r2, r5
   1d2aa:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1d2ae:	a902      	add	r1, sp, #8
   1d2b0:	f7ff fd6a 	bl	1cd88 <virtqueue_add_buffer>
}
   1d2b4:	b004      	add	sp, #16
   1d2b6:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1d2b8:	2d01      	cmp	r5, #1
   1d2ba:	d1fb      	bne.n	1d2b4 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1d2bc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   1d2c0:	b004      	add	sp, #16
   1d2c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1d2c6:	f7f9 bc81 	b.w	16bcc <virtqueue_add_consumed_buffer>

0001d2ca <rpmsg_virtio_rx_callback>:
{
   1d2ca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1d2ce:	6803      	ldr	r3, [r0, #0]
   1d2d0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1d2d2:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1d2d6:	4630      	mov	r0, r6
   1d2d8:	f7ff ff51 	bl	1d17e <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1d2dc:	4638      	mov	r0, r7
   1d2de:	f10d 020a 	add.w	r2, sp, #10
   1d2e2:	a903      	add	r1, sp, #12
   1d2e4:	f7ff ffbe 	bl	1d264 <rpmsg_virtio_get_rx_buffer>
   1d2e8:	4604      	mov	r4, r0
   1d2ea:	4630      	mov	r0, r6
   1d2ec:	f7ff ff45 	bl	1d17a <k_sem_give>
	while (rp_hdr) {
   1d2f0:	2c00      	cmp	r4, #0
   1d2f2:	d041      	beq.n	1d378 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   1d2f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d2f8:	4630      	mov	r0, r6
   1d2fa:	60a3      	str	r3, [r4, #8]
   1d2fc:	f7ff ff3f 	bl	1d17e <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1d300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d304:	2100      	movs	r1, #0
   1d306:	4638      	mov	r0, r7
   1d308:	6862      	ldr	r2, [r4, #4]
   1d30a:	f7ff fedc 	bl	1d0c6 <rpmsg_get_endpoint>
   1d30e:	4605      	mov	r5, r0
   1d310:	4630      	mov	r0, r6
   1d312:	f7ff ff32 	bl	1d17a <k_sem_give>
		if (ept) {
   1d316:	b17d      	cbz	r5, 1d338 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1d318:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1d31a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1d31c:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1d31e:	bf08      	it	eq
   1d320:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1d322:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1d324:	bf08      	it	eq
   1d326:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1d328:	6823      	ldr	r3, [r4, #0]
   1d32a:	89a2      	ldrh	r2, [r4, #12]
   1d32c:	9100      	str	r1, [sp, #0]
   1d32e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1d332:	f104 0110 	add.w	r1, r4, #16
   1d336:	47c0      	blx	r8
   1d338:	4630      	mov	r0, r6
   1d33a:	f7ff ff20 	bl	1d17e <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1d33e:	68a3      	ldr	r3, [r4, #8]
   1d340:	2b00      	cmp	r3, #0
   1d342:	db06      	blt.n	1d352 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1d344:	4621      	mov	r1, r4
   1d346:	4638      	mov	r0, r7
   1d348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d34c:	9a03      	ldr	r2, [sp, #12]
   1d34e:	f7ff ffa0 	bl	1d292 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1d352:	4638      	mov	r0, r7
   1d354:	f10d 020a 	add.w	r2, sp, #10
   1d358:	a903      	add	r1, sp, #12
   1d35a:	f7ff ff83 	bl	1d264 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1d35e:	4604      	mov	r4, r0
   1d360:	b118      	cbz	r0, 1d36a <rpmsg_virtio_rx_callback+0xa0>
   1d362:	4630      	mov	r0, r6
   1d364:	f7ff ff09 	bl	1d17a <k_sem_give>
	while (rp_hdr) {
   1d368:	e7c4      	b.n	1d2f4 <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   1d36a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1d36e:	f7ff fdf8 	bl	1cf62 <virtqueue_kick>
   1d372:	4630      	mov	r0, r6
   1d374:	f7ff ff01 	bl	1d17a <k_sem_give>
}
   1d378:	b004      	add	sp, #16
   1d37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d37e <rpmsg_virtio_release_rx_buffer>:
{
   1d37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d380:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1d382:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1d386:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1d38a:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1d38c:	b2b6      	uxth	r6, r6
{
   1d38e:	460d      	mov	r5, r1
   1d390:	f7ff fef5 	bl	1d17e <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1d394:	4631      	mov	r1, r6
   1d396:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1d39a:	f7ff fd8b 	bl	1ceb4 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1d39e:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1d3a0:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1d3a2:	f1a5 0110 	sub.w	r1, r5, #16
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	f7ff ff73 	bl	1d292 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   1d3ac:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1d3b0:	f7ff fdd7 	bl	1cf62 <virtqueue_kick>
   1d3b4:	4638      	mov	r0, r7
}
   1d3b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d3ba:	f7ff bede 	b.w	1d17a <k_sem_give>

0001d3be <rpmsg_virtio_send_offchannel_nocopy>:
{
   1d3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   1d3c2:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   1d3c6:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   1d3ca:	2300      	movs	r3, #0
{
   1d3cc:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1d3ce:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1d3d0:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   1d3d4:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1d3d6:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1d3d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1d3dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   1d3de:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1d3e2:	f8ad 701c 	strh.w	r7, [sp, #28]
   1d3e6:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1d3e8:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1d3ec:	1a71      	subs	r1, r6, r1
   1d3ee:	eb0d 0203 	add.w	r2, sp, r3
   1d3f2:	4561      	cmp	r1, ip
   1d3f4:	bf28      	it	cs
   1d3f6:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
	metal_mutex_acquire(&rdev->lock);
   1d3fa:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1d3fe:	f7ff fbe3 	bl	1cbc8 <metal_io_block_write>
   1d402:	4640      	mov	r0, r8
   1d404:	f7ff febb 	bl	1d17e <__metal_mutex_acquire>
   1d408:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   1d40c:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1d40e:	699b      	ldr	r3, [r3, #24]
   1d410:	b9cb      	cbnz	r3, 1d446 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   1d412:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1d416:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1d41a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1d41e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1d420:	b9c3      	cbnz	r3, 1d454 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   1d422:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1d426:	9600      	str	r6, [sp, #0]
   1d428:	2201      	movs	r2, #1
   1d42a:	a902      	add	r1, sp, #8
   1d42c:	f7ff fcac 	bl	1cd88 <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   1d430:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1d434:	f7ff fd95 	bl	1cf62 <virtqueue_kick>
   1d438:	4640      	mov	r0, r8
   1d43a:	f7ff fe9e 	bl	1d17a <k_sem_give>
}
   1d43e:	4638      	mov	r0, r7
   1d440:	b008      	add	sp, #32
   1d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1d446:	4629      	mov	r1, r5
   1d448:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1d44c:	f7ff fd32 	bl	1ceb4 <virtqueue_get_buffer_length>
   1d450:	4602      	mov	r2, r0
   1d452:	e7e0      	b.n	1d416 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   1d454:	2b01      	cmp	r3, #1
   1d456:	d1eb      	bne.n	1d430 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1d458:	4629      	mov	r1, r5
   1d45a:	f7f9 fbb7 	bl	16bcc <virtqueue_add_consumed_buffer>
   1d45e:	e7e7      	b.n	1d430 <rpmsg_virtio_send_offchannel_nocopy+0x72>

0001d460 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1d460:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   1d462:	b148      	cbz	r0, 1d478 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   1d464:	b149      	cbz	r1, 1d47a <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   1d466:	6843      	ldr	r3, [r0, #4]
   1d468:	428b      	cmp	r3, r1
   1d46a:	d306      	bcc.n	1d47a <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d46c:	6882      	ldr	r2, [r0, #8]
   1d46e:	6804      	ldr	r4, [r0, #0]
   1d470:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   1d472:	1a5b      	subs	r3, r3, r1
   1d474:	6043      	str	r3, [r0, #4]
	return buffer;
   1d476:	18a0      	adds	r0, r4, r2
}
   1d478:	bd10      	pop	{r4, pc}
		return NULL;
   1d47a:	2000      	movs	r0, #0
   1d47c:	e7fc      	b.n	1d478 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0001d47e <rpmsg_virtio_get_tx_payload_buffer>:
{
   1d47e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d482:	4605      	mov	r5, r0
   1d484:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1d488:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1d48a:	6a03      	ldr	r3, [r0, #32]
   1d48c:	4617      	mov	r7, r2
   1d48e:	681b      	ldr	r3, [r3, #0]
   1d490:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1d492:	0743      	lsls	r3, r0, #29
   1d494:	d403      	bmi.n	1d49e <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1d496:	2000      	movs	r0, #0
}
   1d498:	b002      	add	sp, #8
   1d49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1d49e:	f643 2398 	movw	r3, #15000	; 0x3a98
   1d4a2:	2f00      	cmp	r7, #0
   1d4a4:	bf18      	it	ne
   1d4a6:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   1d4a8:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   1d4ac:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   1d4b0:	4640      	mov	r0, r8
   1d4b2:	f7ff fe64 	bl	1d17e <__metal_mutex_acquire>
	return list->next == list;
   1d4b6:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   1d4ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   1d4be:	4554      	cmp	r4, sl
   1d4c0:	f8d3 9018 	ldr.w	r9, [r3, #24]
   1d4c4:	d025      	beq.n	1d512 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   1d4c6:	b324      	cbz	r4, 1d512 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   1d4c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d4cc:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   1d4ce:	6822      	ldr	r2, [r4, #0]
   1d4d0:	601a      	str	r2, [r3, #0]
	node->next = node;
   1d4d2:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   1d4d6:	f1b9 0f00 	cmp.w	r9, #0
   1d4da:	d10e      	bne.n	1d4fa <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   1d4dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1d4e0:	6033      	str	r3, [r6, #0]
   1d4e2:	4640      	mov	r0, r8
   1d4e4:	f7ff fe49 	bl	1d17a <k_sem_give>
	rp_hdr->reserved = idx;
   1d4e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1d4ec:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1d4f0:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1d4f2:	6833      	ldr	r3, [r6, #0]
   1d4f4:	3b10      	subs	r3, #16
   1d4f6:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1d4f8:	e7ce      	b.n	1d498 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   1d4fa:	f1b9 0f01 	cmp.w	r9, #1
   1d4fe:	d1f0      	bne.n	1d4e2 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   1d500:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1d502:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   1d506:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1d50a:	f7ff fcd3 	bl	1ceb4 <virtqueue_get_buffer_length>
   1d50e:	6030      	str	r0, [r6, #0]
   1d510:	e7e7      	b.n	1d4e2 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   1d512:	f1b9 0f00 	cmp.w	r9, #0
   1d516:	d12a      	bne.n	1d56e <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1d518:	4631      	mov	r1, r6
   1d51a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1d51e:	f10d 0206 	add.w	r2, sp, #6
   1d522:	f7ff fc8d 	bl	1ce40 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1d526:	4604      	mov	r4, r0
   1d528:	2800      	cmp	r0, #0
   1d52a:	d1da      	bne.n	1d4e2 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   1d52c:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1d530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1d532:	b953      	cbnz	r3, 1d54a <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   1d534:	4640      	mov	r0, r8
   1d536:	f7ff fe20 	bl	1d17a <k_sem_give>
		if (rp_hdr || !tick_count)
   1d53a:	2f00      	cmp	r7, #0
   1d53c:	d0ab      	beq.n	1d496 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1d53e:	2021      	movs	r0, #33	; 0x21
   1d540:	2100      	movs	r1, #0
   1d542:	f7fa fe5b 	bl	181fc <z_impl_k_sleep>
		tick_count--;
   1d546:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   1d548:	e7b2      	b.n	1d4b0 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1d54a:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   1d54e:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   1d552:	f7ff ff85 	bl	1d460 <rpmsg_virtio_shm_pool_get_buffer>
   1d556:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1d558:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   1d55c:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1d560:	6033      	str	r3, [r6, #0]
   1d562:	4640      	mov	r0, r8
   1d564:	f7ff fe09 	bl	1d17a <k_sem_give>
		if (rp_hdr || !tick_count)
   1d568:	2c00      	cmp	r4, #0
   1d56a:	d0e6      	beq.n	1d53a <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   1d56c:	e7bc      	b.n	1d4e8 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   1d56e:	f1b9 0f01 	cmp.w	r9, #1
   1d572:	d1df      	bne.n	1d534 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1d574:	4632      	mov	r2, r6
   1d576:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1d57a:	f10d 0106 	add.w	r1, sp, #6
   1d57e:	f7ff fc9e 	bl	1cebe <virtqueue_get_available_buffer>
   1d582:	4604      	mov	r4, r0
   1d584:	e7ed      	b.n	1d562 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0001d586 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   1d586:	b120      	cbz	r0, 1d592 <rpmsg_virtio_init_shm_pool+0xc>
   1d588:	b119      	cbz	r1, 1d592 <rpmsg_virtio_init_shm_pool+0xc>
   1d58a:	b112      	cbz	r2, 1d592 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   1d58c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1d590:	6001      	str	r1, [r0, #0]
}
   1d592:	4770      	bx	lr

0001d594 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1d594:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   1d596:	4604      	mov	r4, r0
   1d598:	b918      	cbnz	r0, 1d5a2 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   1d59a:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   1d59c:	3834      	subs	r0, #52	; 0x34
   1d59e:	f7ff fdcd 	bl	1d13c <rpmsg_destroy_ept>
	return list->next == list;
   1d5a2:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   1d5a4:	4284      	cmp	r4, r0
   1d5a6:	d1f9      	bne.n	1d59c <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   1d5a8:	2300      	movs	r3, #0
		rvdev->svq = 0;
   1d5aa:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   1d5ae:	e7f4      	b.n	1d59a <rpmsg_deinit_vdev+0x6>

0001d5b0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1d5b0:	4770      	bx	lr

0001d5b2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1d5b2:	b140      	cbz	r0, 1d5c6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1d5b4:	68c3      	ldr	r3, [r0, #12]
   1d5b6:	7858      	ldrb	r0, [r3, #1]
   1d5b8:	f010 0001 	ands.w	r0, r0, #1
   1d5bc:	bf1e      	ittt	ne
   1d5be:	7818      	ldrbne	r0, [r3, #0]
   1d5c0:	fab0 f080 	clzne	r0, r0
   1d5c4:	0940      	lsrne	r0, r0, #5
}
   1d5c6:	4770      	bx	lr

0001d5c8 <z_early_memset>:
	(void) memset(dst, c, n);
   1d5c8:	f7fc bedc 	b.w	1a384 <memset>

0001d5cc <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1d5cc:	f7fc becf 	b.w	1a36e <memcpy>

0001d5d0 <k_heap_init>:
{
   1d5d0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1d5d2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d5d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d5da:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d5dc:	f7fb bb71 	b.w	18cc2 <sys_heap_init>

0001d5e0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5e4:	b085      	sub	sp, #20
   1d5e6:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1d5ea:	4607      	mov	r7, r0
   1d5ec:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d5ee:	4650      	mov	r0, sl
   1d5f0:	4621      	mov	r1, r4
{
   1d5f2:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d5f4:	f000 fbc0 	bl	1dd78 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1d5f8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1d5fc:	bf08      	it	eq
   1d5fe:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d602:	4605      	mov	r5, r0
   1d604:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1d606:	bf04      	itt	eq
   1d608:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1d60c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1d610:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1d614:	f04f 0320 	mov.w	r3, #32
   1d618:	f3ef 8411 	mrs	r4, BASEPRI
   1d61c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d620:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d624:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1d628:	464a      	mov	r2, r9
   1d62a:	4641      	mov	r1, r8
   1d62c:	4638      	mov	r0, r7
   1d62e:	f7fb fae1 	bl	18bf4 <sys_heap_aligned_alloc>
   1d632:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1d634:	f7fa ffb4 	bl	185a0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1d638:	9b03      	ldr	r3, [sp, #12]
   1d63a:	b13b      	cbz	r3, 1d64c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1d63c:	f384 8811 	msr	BASEPRI, r4
   1d640:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1d644:	4618      	mov	r0, r3
   1d646:	b005      	add	sp, #20
   1d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1d64c:	1a28      	subs	r0, r5, r0
   1d64e:	eb66 0101 	sbc.w	r1, r6, r1
   1d652:	2801      	cmp	r0, #1
   1d654:	f171 0200 	sbcs.w	r2, r1, #0
   1d658:	dbf0      	blt.n	1d63c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d65a:	e9cd 0100 	strd	r0, r1, [sp]
   1d65e:	465a      	mov	r2, fp
   1d660:	4621      	mov	r1, r4
   1d662:	4650      	mov	r0, sl
   1d664:	f7fa fc4a 	bl	17efc <z_pend_curr>
	__asm__ volatile(
   1d668:	f04f 0320 	mov.w	r3, #32
   1d66c:	f3ef 8411 	mrs	r4, BASEPRI
   1d670:	f383 8812 	msr	BASEPRI_MAX, r3
   1d674:	f3bf 8f6f 	isb	sy
	return k;
   1d678:	e7d6      	b.n	1d628 <k_heap_aligned_alloc+0x48>

0001d67a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1d67a:	b538      	push	{r3, r4, r5, lr}
   1d67c:	4604      	mov	r4, r0
   1d67e:	f04f 0320 	mov.w	r3, #32
   1d682:	f3ef 8511 	mrs	r5, BASEPRI
   1d686:	f383 8812 	msr	BASEPRI_MAX, r3
   1d68a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1d68e:	f7fb fa79 	bl	18b84 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1d692:	f104 000c 	add.w	r0, r4, #12
   1d696:	f000 fb0c 	bl	1dcb2 <z_unpend_all>
   1d69a:	b130      	cbz	r0, 1d6aa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1d69c:	4629      	mov	r1, r5
   1d69e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1d6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1d6a6:	f7fa bc8d 	b.w	17fc4 <z_reschedule>
	__asm__ volatile(
   1d6aa:	f385 8811 	msr	BASEPRI, r5
   1d6ae:	f3bf 8f6f 	isb	sy
}
   1d6b2:	bd38      	pop	{r3, r4, r5, pc}

0001d6b4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d6b4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1d6b8:	4313      	orrs	r3, r2
   1d6ba:	f013 0303 	ands.w	r3, r3, #3
   1d6be:	d10c      	bne.n	1d6da <create_free_list+0x26>
	slab->free_list = NULL;
   1d6c0:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d6c2:	6881      	ldr	r1, [r0, #8]
   1d6c4:	4299      	cmp	r1, r3
   1d6c6:	d801      	bhi.n	1d6cc <create_free_list+0x18>
	return 0;
   1d6c8:	2000      	movs	r0, #0
   1d6ca:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1d6cc:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d6ce:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1d6d0:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1d6d2:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1d6d4:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   1d6d6:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1d6d8:	e7f3      	b.n	1d6c2 <create_free_list+0xe>
		return -EINVAL;
   1d6da:	f06f 0015 	mvn.w	r0, #21
}
   1d6de:	4770      	bx	lr

0001d6e0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6e2:	4604      	mov	r4, r0
   1d6e4:	460d      	mov	r5, r1
	__asm__ volatile(
   1d6e6:	f04f 0320 	mov.w	r3, #32
   1d6ea:	f3ef 8611 	mrs	r6, BASEPRI
   1d6ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d6f6:	6947      	ldr	r7, [r0, #20]
   1d6f8:	b977      	cbnz	r7, 1d718 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1d6fa:	f000 fa90 	bl	1dc1e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1d6fe:	b158      	cbz	r0, 1d718 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1d700:	682a      	ldr	r2, [r5, #0]
   1d702:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1d704:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1d706:	f000 fa2b 	bl	1db60 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1d70a:	4631      	mov	r1, r6
   1d70c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1d710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1d714:	f7fa bc56 	b.w	17fc4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1d718:	682b      	ldr	r3, [r5, #0]
   1d71a:	6962      	ldr	r2, [r4, #20]
   1d71c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1d71e:	682b      	ldr	r3, [r5, #0]
   1d720:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1d722:	69a3      	ldr	r3, [r4, #24]
   1d724:	3b01      	subs	r3, #1
   1d726:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1d728:	f386 8811 	msr	BASEPRI, r6
   1d72c:	f3bf 8f6f 	isb	sy
}
   1d730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d732 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d732:	f3ef 8005 	mrs	r0, IPSR
}
   1d736:	3800      	subs	r0, #0
   1d738:	bf18      	it	ne
   1d73a:	2001      	movne	r0, #1
   1d73c:	4770      	bx	lr

0001d73e <z_impl_k_thread_name_set>:
}
   1d73e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1d742:	4770      	bx	lr

0001d744 <k_thread_name_get>:
}
   1d744:	2000      	movs	r0, #0
   1d746:	4770      	bx	lr

0001d748 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1d748:	f7fa bc4e 	b.w	17fe8 <z_sched_start>

0001d74c <z_pm_save_idle_exit>:
{
   1d74c:	b508      	push	{r3, lr}
	pm_system_resume();
   1d74e:	f7ed fecd 	bl	b4ec <pm_system_resume>
}
   1d752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1d756:	f7ff b8e1 	b.w	1c91c <sys_clock_idle_exit>

0001d75a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1d75a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d75e:	428b      	cmp	r3, r1
   1d760:	d001      	beq.n	1d766 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1d762:	f7fa bbe9 	b.w	17f38 <z_set_prio>
}
   1d766:	2000      	movs	r0, #0
   1d768:	4770      	bx	lr

0001d76a <z_impl_k_mutex_init>:
{
   1d76a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d76c:	2000      	movs	r0, #0
   1d76e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1d772:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1d776:	4770      	bx	lr

0001d778 <queue_insert>:
{
   1d778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d77c:	4699      	mov	r9, r3
   1d77e:	4604      	mov	r4, r0
   1d780:	460d      	mov	r5, r1
   1d782:	4690      	mov	r8, r2
   1d784:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d788:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1d78c:	f04f 0220 	mov.w	r2, #32
   1d790:	f3ef 8711 	mrs	r7, BASEPRI
   1d794:	f382 8812 	msr	BASEPRI_MAX, r2
   1d798:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1d79c:	b103      	cbz	r3, 1d7a0 <queue_insert+0x28>
	return list->tail;
   1d79e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1d7a0:	4630      	mov	r0, r6
   1d7a2:	f000 fa3c 	bl	1dc1e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1d7a6:	b158      	cbz	r0, 1d7c0 <queue_insert+0x48>
   1d7a8:	2300      	movs	r3, #0
   1d7aa:	f8c0 8014 	str.w	r8, [r0, #20]
   1d7ae:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1d7b0:	f000 f9d6 	bl	1db60 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1d7b4:	4630      	mov	r0, r6
   1d7b6:	4639      	mov	r1, r7
   1d7b8:	f7fa fc04 	bl	17fc4 <z_reschedule>
		return 0;
   1d7bc:	2000      	movs	r0, #0
   1d7be:	e00c      	b.n	1d7da <queue_insert+0x62>
	if (alloc) {
   1d7c0:	f1b9 0f00 	cmp.w	r9, #0
   1d7c4:	d01b      	beq.n	1d7fe <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1d7c6:	2108      	movs	r1, #8
   1d7c8:	f7fb f838 	bl	1883c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1d7cc:	b938      	cbnz	r0, 1d7de <queue_insert+0x66>
	__asm__ volatile(
   1d7ce:	f387 8811 	msr	BASEPRI, r7
   1d7d2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1d7d6:	f06f 000b 	mvn.w	r0, #11
}
   1d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1d7de:	2201      	movs	r2, #1
		anode->data = data;
   1d7e0:	f8c0 8004 	str.w	r8, [r0, #4]
   1d7e4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d7e6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d7e8:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1d7ec:	b95d      	cbnz	r5, 1d806 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d7ee:	6822      	ldr	r2, [r4, #0]
   1d7f0:	430a      	orrs	r2, r1
   1d7f2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d7f4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1d7f6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d7f8:	b96a      	cbnz	r2, 1d816 <queue_insert+0x9e>
	list->tail = node;
   1d7fa:	6060      	str	r0, [r4, #4]
}
   1d7fc:	e00b      	b.n	1d816 <queue_insert+0x9e>
}
   1d7fe:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1d800:	f8c8 9000 	str.w	r9, [r8]
}
   1d804:	e7ef      	b.n	1d7e6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d806:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1d808:	2a03      	cmp	r2, #3
   1d80a:	d810      	bhi.n	1d82e <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d80c:	6001      	str	r1, [r0, #0]
	return list->tail;
   1d80e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1d810:	b939      	cbnz	r1, 1d822 <queue_insert+0xaa>
	list->head = node;
   1d812:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d816:	2104      	movs	r1, #4
   1d818:	f104 0010 	add.w	r0, r4, #16
   1d81c:	f000 fc37 	bl	1e08e <z_handle_obj_poll_events>
   1d820:	e7c8      	b.n	1d7b4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d822:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d824:	f002 0203 	and.w	r2, r2, #3
   1d828:	4302      	orrs	r2, r0
   1d82a:	600a      	str	r2, [r1, #0]
   1d82c:	e7e5      	b.n	1d7fa <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d82e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d832:	430a      	orrs	r2, r1
   1d834:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d836:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d838:	f002 0203 	and.w	r2, r2, #3
   1d83c:	ea40 0302 	orr.w	r3, r0, r2
   1d840:	602b      	str	r3, [r5, #0]
}
   1d842:	e7e8      	b.n	1d816 <queue_insert+0x9e>

0001d844 <z_queue_node_peek>:
{
   1d844:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1d846:	4604      	mov	r4, r0
   1d848:	b130      	cbz	r0, 1d858 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d84a:	6802      	ldr	r2, [r0, #0]
   1d84c:	0793      	lsls	r3, r2, #30
   1d84e:	d003      	beq.n	1d858 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d850:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d852:	b109      	cbz	r1, 1d858 <z_queue_node_peek+0x14>
			k_free(anode);
   1d854:	f000 fc41 	bl	1e0da <k_free>
}
   1d858:	4620      	mov	r0, r4
   1d85a:	bd10      	pop	{r4, pc}

0001d85c <z_impl_k_queue_init>:
	list->head = NULL;
   1d85c:	2300      	movs	r3, #0
	list->tail = NULL;
   1d85e:	e9c0 3300 	strd	r3, r3, [r0]
   1d862:	f100 0308 	add.w	r3, r0, #8
   1d866:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1d86a:	f100 0310 	add.w	r3, r0, #16
   1d86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1d872:	4770      	bx	lr

0001d874 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1d874:	2301      	movs	r3, #1
{
   1d876:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d878:	9300      	str	r3, [sp, #0]
   1d87a:	2300      	movs	r3, #0
{
   1d87c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d87e:	4619      	mov	r1, r3
   1d880:	f7ff ff7a 	bl	1d778 <queue_insert>
}
   1d884:	b003      	add	sp, #12
   1d886:	f85d fb04 	ldr.w	pc, [sp], #4

0001d88a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1d88a:	2300      	movs	r3, #0
{
   1d88c:	b507      	push	{r0, r1, r2, lr}
   1d88e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d890:	9300      	str	r3, [sp, #0]
   1d892:	4619      	mov	r1, r3
   1d894:	f7ff ff70 	bl	1d778 <queue_insert>
}
   1d898:	b003      	add	sp, #12
   1d89a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d89e <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1d89e:	2100      	movs	r1, #0
   1d8a0:	6800      	ldr	r0, [r0, #0]
   1d8a2:	f7ff bfcf 	b.w	1d844 <z_queue_node_peek>

0001d8a6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1d8a6:	b15a      	cbz	r2, 1d8c0 <z_impl_k_sem_init+0x1a>
   1d8a8:	428a      	cmp	r2, r1
   1d8aa:	d309      	bcc.n	1d8c0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d8ac:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d8b0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1d8b4:	e9c0 0000 	strd	r0, r0, [r0]
   1d8b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d8bc:	2000      	movs	r0, #0
   1d8be:	4770      	bx	lr
		return -EINVAL;
   1d8c0:	f06f 0015 	mvn.w	r0, #21
}
   1d8c4:	4770      	bx	lr

0001d8c6 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1d8c6:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1d8c8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1d8ca:	408b      	lsls	r3, r1
   1d8cc:	ea22 0303 	bic.w	r3, r2, r3
   1d8d0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1d8d2:	fa22 f001 	lsr.w	r0, r2, r1
}
   1d8d6:	f000 0001 	and.w	r0, r0, #1
   1d8da:	4770      	bx	lr

0001d8dc <unschedule_locked>:
{
   1d8dc:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1d8de:	2103      	movs	r1, #3
{
   1d8e0:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1d8e2:	300c      	adds	r0, #12
   1d8e4:	f7ff ffef 	bl	1d8c6 <flag_test_and_clear>
   1d8e8:	b130      	cbz	r0, 1d8f8 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1d8ea:	f104 0010 	add.w	r0, r4, #16
   1d8ee:	f000 fa13 	bl	1dd18 <z_abort_timeout>
   1d8f2:	fab0 f080 	clz	r0, r0
   1d8f6:	0940      	lsrs	r0, r0, #5
}
   1d8f8:	bd10      	pop	{r4, pc}

0001d8fa <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1d8fa:	b120      	cbz	r0, 1d906 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1d8fc:	2200      	movs	r2, #0
   1d8fe:	3090      	adds	r0, #144	; 0x90
   1d900:	4611      	mov	r1, r2
   1d902:	f000 b9e6 	b.w	1dcd2 <z_sched_wake>
}
   1d906:	4770      	bx	lr

0001d908 <cancel_async_locked>:
{
   1d908:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d90a:	68c3      	ldr	r3, [r0, #12]
{
   1d90c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d90e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1d912:	079b      	lsls	r3, r3, #30
   1d914:	d416      	bmi.n	1d944 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1d916:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1d918:	2102      	movs	r1, #2
   1d91a:	300c      	adds	r0, #12
   1d91c:	f7ff ffd3 	bl	1d8c6 <flag_test_and_clear>
   1d920:	b180      	cbz	r0, 1d944 <cancel_async_locked+0x3c>
	return list->head;
   1d922:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d926:	b16a      	cbz	r2, 1d944 <cancel_async_locked+0x3c>
   1d928:	4294      	cmp	r4, r2
   1d92a:	d11d      	bne.n	1d968 <cancel_async_locked+0x60>
	return node->next;
   1d92c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d92e:	b99e      	cbnz	r6, 1d958 <cancel_async_locked+0x50>
   1d930:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1d934:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1d938:	429c      	cmp	r4, r3
   1d93a:	d101      	bne.n	1d940 <cancel_async_locked+0x38>
	list->tail = node;
   1d93c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1d940:	2300      	movs	r3, #0
   1d942:	6023      	str	r3, [r4, #0]
	return *flagp;
   1d944:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1d946:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1d94a:	bf1e      	ittt	ne
   1d94c:	f043 0302 	orrne.w	r3, r3, #2
   1d950:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1d952:	f040 0002 	orrne.w	r0, r0, #2
}
   1d956:	bd70      	pop	{r4, r5, r6, pc}
   1d958:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d95a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1d95e:	4294      	cmp	r4, r2
	list->tail = node;
   1d960:	bf08      	it	eq
   1d962:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1d966:	e7eb      	b.n	1d940 <cancel_async_locked+0x38>
	return node->next;
   1d968:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d96a:	6812      	ldr	r2, [r2, #0]
   1d96c:	e7db      	b.n	1d926 <cancel_async_locked+0x1e>

0001d96e <work_timeout>:
{
   1d96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d970:	4604      	mov	r4, r0
	__asm__ volatile(
   1d972:	f04f 0320 	mov.w	r3, #32
   1d976:	f3ef 8511 	mrs	r5, BASEPRI
   1d97a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d97e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1d982:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d984:	f1a0 0610 	sub.w	r6, r0, #16
   1d988:	2103      	movs	r1, #3
   1d98a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1d98c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d98e:	f7ff ff9a 	bl	1d8c6 <flag_test_and_clear>
   1d992:	b128      	cbz	r0, 1d9a0 <work_timeout+0x32>
		queue = dw->queue;
   1d994:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1d996:	4630      	mov	r0, r6
   1d998:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1d99a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1d99c:	f7fa f832 	bl	17a04 <submit_to_queue_locked>
	__asm__ volatile(
   1d9a0:	f385 8811 	msr	BASEPRI, r5
   1d9a4:	f3bf 8f6f 	isb	sy
}
   1d9a8:	b002      	add	sp, #8
   1d9aa:	bd70      	pop	{r4, r5, r6, pc}

0001d9ac <k_work_init>:
{
   1d9ac:	b538      	push	{r3, r4, r5, lr}
   1d9ae:	4604      	mov	r4, r0
   1d9b0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d9b2:	2210      	movs	r2, #16
   1d9b4:	2100      	movs	r1, #0
   1d9b6:	f7fc fce5 	bl	1a384 <memset>
   1d9ba:	6065      	str	r5, [r4, #4]
}
   1d9bc:	bd38      	pop	{r3, r4, r5, pc}

0001d9be <k_work_busy_get>:
	__asm__ volatile(
   1d9be:	f04f 0220 	mov.w	r2, #32
   1d9c2:	f3ef 8311 	mrs	r3, BASEPRI
   1d9c6:	f382 8812 	msr	BASEPRI_MAX, r2
   1d9ca:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1d9ce:	68c0      	ldr	r0, [r0, #12]
   1d9d0:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1d9d4:	f383 8811 	msr	BASEPRI, r3
   1d9d8:	f3bf 8f6f 	isb	sy
}
   1d9dc:	4770      	bx	lr

0001d9de <z_work_submit_to_queue>:
{
   1d9de:	b513      	push	{r0, r1, r4, lr}
   1d9e0:	9001      	str	r0, [sp, #4]
   1d9e2:	4608      	mov	r0, r1
	__asm__ volatile(
   1d9e4:	f04f 0320 	mov.w	r3, #32
   1d9e8:	f3ef 8411 	mrs	r4, BASEPRI
   1d9ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9f0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1d9f4:	a901      	add	r1, sp, #4
   1d9f6:	f7fa f805 	bl	17a04 <submit_to_queue_locked>
	__asm__ volatile(
   1d9fa:	f384 8811 	msr	BASEPRI, r4
   1d9fe:	f3bf 8f6f 	isb	sy
}
   1da02:	b002      	add	sp, #8
   1da04:	bd10      	pop	{r4, pc}

0001da06 <k_work_submit_to_queue>:
{
   1da06:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1da08:	f7ff ffe9 	bl	1d9de <z_work_submit_to_queue>
	if (ret > 0) {
   1da0c:	1e04      	subs	r4, r0, #0
   1da0e:	dd09      	ble.n	1da24 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1da10:	f04f 0320 	mov.w	r3, #32
   1da14:	f3ef 8011 	mrs	r0, BASEPRI
   1da18:	f383 8812 	msr	BASEPRI_MAX, r3
   1da1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1da20:	f000 f931 	bl	1dc86 <z_reschedule_irqlock>
}
   1da24:	4620      	mov	r0, r4
   1da26:	bd10      	pop	{r4, pc}

0001da28 <k_work_queue_init>:
{
   1da28:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1da2a:	22a8      	movs	r2, #168	; 0xa8
   1da2c:	2100      	movs	r1, #0
   1da2e:	f7fc fca9 	bl	1a384 <memset>
}
   1da32:	bd08      	pop	{r3, pc}

0001da34 <k_work_init_delayable>:
{
   1da34:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1da36:	2230      	movs	r2, #48	; 0x30
{
   1da38:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1da3a:	2100      	movs	r1, #0
{
   1da3c:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   1da3e:	f7fc fca1 	bl	1a384 <memset>
   1da42:	f44f 7380 	mov.w	r3, #256	; 0x100
   1da46:	6065      	str	r5, [r4, #4]
   1da48:	60e3      	str	r3, [r4, #12]
}
   1da4a:	bd38      	pop	{r3, r4, r5, pc}

0001da4c <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1da4c:	f7ff bfb7 	b.w	1d9be <k_work_busy_get>

0001da50 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1da50:	b538      	push	{r3, r4, r5, lr}
   1da52:	4604      	mov	r4, r0
   1da54:	f04f 0320 	mov.w	r3, #32
   1da58:	f3ef 8511 	mrs	r5, BASEPRI
   1da5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1da60:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1da64:	f7ff ff3a 	bl	1d8dc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1da68:	4620      	mov	r0, r4
   1da6a:	f7ff ff4d 	bl	1d908 <cancel_async_locked>
	__asm__ volatile(
   1da6e:	f385 8811 	msr	BASEPRI, r5
   1da72:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1da76:	bd38      	pop	{r3, r4, r5, pc}

0001da78 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da7a:	4604      	mov	r4, r0
   1da7c:	460d      	mov	r5, r1
	__asm__ volatile(
   1da7e:	f04f 0320 	mov.w	r3, #32
   1da82:	f3ef 8611 	mrs	r6, BASEPRI
   1da86:	f383 8812 	msr	BASEPRI_MAX, r3
   1da8a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1da8e:	68c3      	ldr	r3, [r0, #12]
   1da90:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1da94:	2b00      	cmp	r3, #0
   1da96:	bf14      	ite	ne
   1da98:	2701      	movne	r7, #1
   1da9a:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1da9c:	d105      	bne.n	1daaa <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1da9e:	f386 8811 	msr	BASEPRI, r6
   1daa2:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1daa6:	4638      	mov	r0, r7
   1daa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1daaa:	f7ff ff17 	bl	1d8dc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1daae:	4620      	mov	r0, r4
   1dab0:	f7ff ff2a 	bl	1d908 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1dab4:	4629      	mov	r1, r5
   1dab6:	4620      	mov	r0, r4
   1dab8:	f7f9 ff86 	bl	179c8 <cancel_sync_locked>
   1dabc:	f386 8811 	msr	BASEPRI, r6
   1dac0:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1dac4:	2800      	cmp	r0, #0
   1dac6:	d0ee      	beq.n	1daa6 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1dac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dacc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dad0:	f105 0008 	add.w	r0, r5, #8
   1dad4:	f7f9 fe9a 	bl	1780c <z_impl_k_sem_take>
   1dad8:	e7e5      	b.n	1daa6 <k_work_cancel_delayable_sync+0x2e>

0001dada <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1dada:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1dade:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1dae0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dae2:	2300      	movs	r3, #0
	node->prev = NULL;
   1dae4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dae8:	4770      	bx	lr

0001daea <unpend_thread_no_timeout>:
{
   1daea:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1daec:	f7ff fff5 	bl	1dada <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1daf0:	7b43      	ldrb	r3, [r0, #13]
   1daf2:	f023 0302 	bic.w	r3, r3, #2
   1daf6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1daf8:	2300      	movs	r3, #0
   1dafa:	6083      	str	r3, [r0, #8]
}
   1dafc:	bd08      	pop	{r3, pc}

0001dafe <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1dafe:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1db02:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1db06:	4283      	cmp	r3, r0
		return b2 - b1;
   1db08:	bf14      	ite	ne
   1db0a:	1ac0      	subne	r0, r0, r3
	return 0;
   1db0c:	2000      	moveq	r0, #0
}
   1db0e:	4770      	bx	lr

0001db10 <add_to_waitq_locked>:
{
   1db10:	b538      	push	{r3, r4, r5, lr}
   1db12:	4604      	mov	r4, r0
   1db14:	460d      	mov	r5, r1
	unready_thread(thread);
   1db16:	f7fa f991 	bl	17e3c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1db1a:	7b63      	ldrb	r3, [r4, #13]
   1db1c:	f043 0302 	orr.w	r3, r3, #2
   1db20:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1db22:	b1e5      	cbz	r5, 1db5e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1db24:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1db26:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1db28:	429d      	cmp	r5, r3
   1db2a:	d109      	bne.n	1db40 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1db2c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1db2e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1db32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1db34:	606c      	str	r4, [r5, #4]
}
   1db36:	e012      	b.n	1db5e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1db38:	686a      	ldr	r2, [r5, #4]
   1db3a:	4293      	cmp	r3, r2
   1db3c:	d0f6      	beq.n	1db2c <add_to_waitq_locked+0x1c>
   1db3e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1db40:	2b00      	cmp	r3, #0
   1db42:	d0f3      	beq.n	1db2c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1db44:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1db48:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1db4c:	428a      	cmp	r2, r1
   1db4e:	d0f3      	beq.n	1db38 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1db50:	4291      	cmp	r1, r2
   1db52:	ddf1      	ble.n	1db38 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1db54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1db56:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1db5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1db5c:	605c      	str	r4, [r3, #4]
}
   1db5e:	bd38      	pop	{r3, r4, r5, pc}

0001db60 <z_ready_thread>:
{
   1db60:	b510      	push	{r4, lr}
	__asm__ volatile(
   1db62:	f04f 0320 	mov.w	r3, #32
   1db66:	f3ef 8411 	mrs	r4, BASEPRI
   1db6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1db6e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1db72:	f7fa f92f 	bl	17dd4 <ready_thread>
	__asm__ volatile(
   1db76:	f384 8811 	msr	BASEPRI, r4
   1db7a:	f3bf 8f6f 	isb	sy
}
   1db7e:	bd10      	pop	{r4, pc}

0001db80 <z_unpend_thread_no_timeout>:
{
   1db80:	b508      	push	{r3, lr}
	__asm__ volatile(
   1db82:	f04f 0220 	mov.w	r2, #32
   1db86:	f3ef 8111 	mrs	r1, BASEPRI
   1db8a:	f382 8812 	msr	BASEPRI_MAX, r2
   1db8e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1db92:	6883      	ldr	r3, [r0, #8]
   1db94:	b10b      	cbz	r3, 1db9a <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1db96:	f7ff ffa8 	bl	1daea <unpend_thread_no_timeout>
	__asm__ volatile(
   1db9a:	f381 8811 	msr	BASEPRI, r1
   1db9e:	f3bf 8f6f 	isb	sy
}
   1dba2:	bd08      	pop	{r3, pc}

0001dba4 <z_sched_wake_thread>:
{
   1dba4:	b538      	push	{r3, r4, r5, lr}
   1dba6:	4604      	mov	r4, r0
	__asm__ volatile(
   1dba8:	f04f 0320 	mov.w	r3, #32
   1dbac:	f3ef 8511 	mrs	r5, BASEPRI
   1dbb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbb4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1dbb8:	7b43      	ldrb	r3, [r0, #13]
   1dbba:	f013 0f28 	tst.w	r3, #40	; 0x28
   1dbbe:	d10b      	bne.n	1dbd8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1dbc0:	6883      	ldr	r3, [r0, #8]
   1dbc2:	b10b      	cbz	r3, 1dbc8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1dbc4:	f7ff ff91 	bl	1daea <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1dbc8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1dbca:	b951      	cbnz	r1, 1dbe2 <z_sched_wake_thread+0x3e>
   1dbcc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   1dbd0:	4620      	mov	r0, r4
   1dbd2:	7363      	strb	r3, [r4, #13]
   1dbd4:	f7fa f8fe 	bl	17dd4 <ready_thread>
	__asm__ volatile(
   1dbd8:	f385 8811 	msr	BASEPRI, r5
   1dbdc:	f3bf 8f6f 	isb	sy
}
   1dbe0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1dbe2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1dbe6:	e7f3      	b.n	1dbd0 <z_sched_wake_thread+0x2c>

0001dbe8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1dbe8:	2101      	movs	r1, #1
   1dbea:	3818      	subs	r0, #24
   1dbec:	f7ff bfda 	b.w	1dba4 <z_sched_wake_thread>

0001dbf0 <z_unpend1_no_timeout>:
{
   1dbf0:	b508      	push	{r3, lr}
   1dbf2:	4603      	mov	r3, r0
	__asm__ volatile(
   1dbf4:	f04f 0220 	mov.w	r2, #32
   1dbf8:	f3ef 8111 	mrs	r1, BASEPRI
   1dbfc:	f382 8812 	msr	BASEPRI_MAX, r2
   1dc00:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1dc04:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc06:	4283      	cmp	r3, r0
   1dc08:	d007      	beq.n	1dc1a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1dc0a:	b108      	cbz	r0, 1dc10 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1dc0c:	f7ff ff6d 	bl	1daea <unpend_thread_no_timeout>
	__asm__ volatile(
   1dc10:	f381 8811 	msr	BASEPRI, r1
   1dc14:	f3bf 8f6f 	isb	sy
}
   1dc18:	bd08      	pop	{r3, pc}
   1dc1a:	2000      	movs	r0, #0
   1dc1c:	e7f8      	b.n	1dc10 <z_unpend1_no_timeout+0x20>

0001dc1e <z_unpend_first_thread>:
{
   1dc1e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1dc20:	f04f 0320 	mov.w	r3, #32
   1dc24:	f3ef 8511 	mrs	r5, BASEPRI
   1dc28:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc2c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1dc30:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc32:	42a0      	cmp	r0, r4
   1dc34:	d00d      	beq.n	1dc52 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1dc36:	b134      	cbz	r4, 1dc46 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1dc38:	4620      	mov	r0, r4
   1dc3a:	f7ff ff56 	bl	1daea <unpend_thread_no_timeout>
   1dc3e:	f104 0018 	add.w	r0, r4, #24
   1dc42:	f000 f869 	bl	1dd18 <z_abort_timeout>
	__asm__ volatile(
   1dc46:	f385 8811 	msr	BASEPRI, r5
   1dc4a:	f3bf 8f6f 	isb	sy
}
   1dc4e:	4620      	mov	r0, r4
   1dc50:	bd38      	pop	{r3, r4, r5, pc}
   1dc52:	2400      	movs	r4, #0
   1dc54:	e7f7      	b.n	1dc46 <z_unpend_first_thread+0x28>

0001dc56 <z_unpend_thread>:
{
   1dc56:	4601      	mov	r1, r0
   1dc58:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dc5a:	f04f 0320 	mov.w	r3, #32
   1dc5e:	f3ef 8411 	mrs	r4, BASEPRI
   1dc62:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc66:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1dc6a:	6883      	ldr	r3, [r0, #8]
   1dc6c:	b10b      	cbz	r3, 1dc72 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1dc6e:	f7ff ff3c 	bl	1daea <unpend_thread_no_timeout>
	__asm__ volatile(
   1dc72:	f384 8811 	msr	BASEPRI, r4
   1dc76:	f3bf 8f6f 	isb	sy
}
   1dc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dc7e:	f101 0018 	add.w	r0, r1, #24
   1dc82:	f000 b849 	b.w	1dd18 <z_abort_timeout>

0001dc86 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dc86:	4603      	mov	r3, r0
   1dc88:	b920      	cbnz	r0, 1dc94 <z_reschedule_irqlock+0xe>
   1dc8a:	f3ef 8205 	mrs	r2, IPSR
   1dc8e:	b90a      	cbnz	r2, 1dc94 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1dc90:	f7ed bf9a 	b.w	bbc8 <arch_swap>
   1dc94:	f383 8811 	msr	BASEPRI, r3
   1dc98:	f3bf 8f6f 	isb	sy
}
   1dc9c:	4770      	bx	lr

0001dc9e <z_reschedule_unlocked>:
	__asm__ volatile(
   1dc9e:	f04f 0320 	mov.w	r3, #32
   1dca2:	f3ef 8011 	mrs	r0, BASEPRI
   1dca6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcaa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dcae:	f7ff bfea 	b.w	1dc86 <z_reschedule_irqlock>

0001dcb2 <z_unpend_all>:
{
   1dcb2:	b538      	push	{r3, r4, r5, lr}
   1dcb4:	4605      	mov	r5, r0
	int need_sched = 0;
   1dcb6:	2000      	movs	r0, #0
	return list->head == list;
   1dcb8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dcba:	42a5      	cmp	r5, r4
   1dcbc:	d000      	beq.n	1dcc0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dcbe:	b904      	cbnz	r4, 1dcc2 <z_unpend_all+0x10>
}
   1dcc0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1dcc2:	4620      	mov	r0, r4
   1dcc4:	f7ff ffc7 	bl	1dc56 <z_unpend_thread>
		z_ready_thread(thread);
   1dcc8:	4620      	mov	r0, r4
   1dcca:	f7ff ff49 	bl	1db60 <z_ready_thread>
		need_sched = 1;
   1dcce:	2001      	movs	r0, #1
   1dcd0:	e7f2      	b.n	1dcb8 <z_unpend_all+0x6>

0001dcd2 <z_sched_wake>:
{
   1dcd2:	b538      	push	{r3, r4, r5, lr}
   1dcd4:	f04f 0320 	mov.w	r3, #32
   1dcd8:	f3ef 8511 	mrs	r5, BASEPRI
   1dcdc:	f383 8812 	msr	BASEPRI_MAX, r3
   1dce0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1dce4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dce6:	42a0      	cmp	r0, r4
   1dce8:	d012      	beq.n	1dd10 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1dcea:	b19c      	cbz	r4, 1dd14 <z_sched_wake+0x42>
   1dcec:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1dcee:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1dcf0:	4620      	mov	r0, r4
   1dcf2:	f7ff fefa 	bl	1daea <unpend_thread_no_timeout>
   1dcf6:	f104 0018 	add.w	r0, r4, #24
   1dcfa:	f000 f80d 	bl	1dd18 <z_abort_timeout>
			ready_thread(thread);
   1dcfe:	4620      	mov	r0, r4
   1dd00:	f7fa f868 	bl	17dd4 <ready_thread>
			ret = true;
   1dd04:	2001      	movs	r0, #1
	__asm__ volatile(
   1dd06:	f385 8811 	msr	BASEPRI, r5
   1dd0a:	f3bf 8f6f 	isb	sy
}
   1dd0e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1dd10:	2000      	movs	r0, #0
   1dd12:	e7f8      	b.n	1dd06 <z_sched_wake+0x34>
   1dd14:	4620      	mov	r0, r4
   1dd16:	e7f6      	b.n	1dd06 <z_sched_wake+0x34>

0001dd18 <z_abort_timeout>:
{
   1dd18:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dd1a:	f04f 0220 	mov.w	r2, #32
   1dd1e:	f3ef 8411 	mrs	r4, BASEPRI
   1dd22:	f382 8812 	msr	BASEPRI_MAX, r2
   1dd26:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1dd2a:	6803      	ldr	r3, [r0, #0]
   1dd2c:	b13b      	cbz	r3, 1dd3e <z_abort_timeout+0x26>
			remove_timeout(to);
   1dd2e:	f7fa fb3b 	bl	183a8 <remove_timeout>
			ret = 0;
   1dd32:	2000      	movs	r0, #0
	__asm__ volatile(
   1dd34:	f384 8811 	msr	BASEPRI, r4
   1dd38:	f3bf 8f6f 	isb	sy
}
   1dd3c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1dd3e:	f06f 0015 	mvn.w	r0, #21
   1dd42:	e7f7      	b.n	1dd34 <z_abort_timeout+0x1c>

0001dd44 <z_get_next_timeout_expiry>:
{
   1dd44:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dd46:	f04f 0320 	mov.w	r3, #32
   1dd4a:	f3ef 8411 	mrs	r4, BASEPRI
   1dd4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd52:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1dd56:	f7fa fb07 	bl	18368 <next_timeout>
	__asm__ volatile(
   1dd5a:	f384 8811 	msr	BASEPRI, r4
   1dd5e:	f3bf 8f6f 	isb	sy
}
   1dd62:	bd10      	pop	{r4, pc}

0001dd64 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1dd64:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1dd66:	f7fa fc1b 	bl	185a0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1dd6a:	bd08      	pop	{r3, pc}

0001dd6c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1dd6c:	f7fa bc18 	b.w	185a0 <sys_clock_tick_get>

0001dd70 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1dd70:	b108      	cbz	r0, 1dd76 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1dd72:	f7ec b967 	b.w	a044 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1dd76:	4770      	bx	lr

0001dd78 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd78:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1dd7c:	bf08      	it	eq
   1dd7e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1dd82:	b538      	push	{r3, r4, r5, lr}
   1dd84:	460c      	mov	r4, r1
   1dd86:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd88:	d014      	beq.n	1ddb4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dd8a:	4308      	orrs	r0, r1
   1dd8c:	d103      	bne.n	1dd96 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1dd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1dd92:	f7fa bc05 	b.w	185a0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1dd96:	f06f 0001 	mvn.w	r0, #1
   1dd9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd9e:	1b40      	subs	r0, r0, r5
   1dda0:	eb63 0101 	sbc.w	r1, r3, r1
   1dda4:	2900      	cmp	r1, #0
   1dda6:	da04      	bge.n	1ddb2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1dda8:	f7fa fbfa 	bl	185a0 <sys_clock_tick_get>
   1ddac:	1940      	adds	r0, r0, r5
   1ddae:	eb41 0104 	adc.w	r1, r1, r4
}
   1ddb2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1ddb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddb8:	4601      	mov	r1, r0
   1ddba:	e7fa      	b.n	1ddb2 <sys_clock_timeout_end_calc+0x3a>

0001ddbc <k_timer_init>:
	timer->status = 0U;
   1ddbc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ddbe:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1ddc2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1ddc6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1ddca:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1ddce:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1ddd0:	6343      	str	r3, [r0, #52]	; 0x34
}
   1ddd2:	4770      	bx	lr

0001ddd4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ddd4:	b510      	push	{r4, lr}
   1ddd6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1ddd8:	f7ff ff9e 	bl	1dd18 <z_abort_timeout>

	if (inactive) {
   1dddc:	b9b0      	cbnz	r0, 1de0c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ddde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dde0:	b10b      	cbz	r3, 1dde6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1dde2:	4620      	mov	r0, r4
   1dde4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1dde6:	f104 0018 	add.w	r0, r4, #24
   1ddea:	f7ff ff01 	bl	1dbf0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1ddee:	b168      	cbz	r0, 1de0c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1ddf0:	f7ff feb6 	bl	1db60 <z_ready_thread>
	__asm__ volatile(
   1ddf4:	f04f 0320 	mov.w	r3, #32
   1ddf8:	f3ef 8011 	mrs	r0, BASEPRI
   1ddfc:	f383 8812 	msr	BASEPRI_MAX, r3
   1de00:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1de04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de08:	f7ff bf3d 	b.w	1dc86 <z_reschedule_irqlock>
   1de0c:	bd10      	pop	{r4, pc}

0001de0e <add_event>:
{
   1de0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de10:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1de12:	e9d0 1300 	ldrd	r1, r3, [r0]
   1de16:	4288      	cmp	r0, r1
   1de18:	4604      	mov	r4, r0
   1de1a:	d105      	bne.n	1de28 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1de1c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1de1e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1de22:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1de24:	6065      	str	r5, [r4, #4]
   1de26:	e01d      	b.n	1de64 <add_event+0x56>
	if ((pending == NULL) ||
   1de28:	2b00      	cmp	r3, #0
   1de2a:	d0f7      	beq.n	1de1c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1de2c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1de2e:	b100      	cbz	r0, 1de32 <add_event+0x24>
   1de30:	3860      	subs	r0, #96	; 0x60
   1de32:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1de36:	4639      	mov	r1, r7
   1de38:	f7ff fe61 	bl	1dafe <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1de3c:	2800      	cmp	r0, #0
   1de3e:	dced      	bgt.n	1de1c <add_event+0xe>
	return list->head == list;
   1de40:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de42:	42b4      	cmp	r4, r6
   1de44:	d0ea      	beq.n	1de1c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1de46:	2e00      	cmp	r6, #0
   1de48:	d0e8      	beq.n	1de1c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1de4a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1de4c:	b101      	cbz	r1, 1de50 <add_event+0x42>
   1de4e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1de50:	4638      	mov	r0, r7
   1de52:	f7ff fe54 	bl	1dafe <z_sched_prio_cmp>
   1de56:	2800      	cmp	r0, #0
   1de58:	dd05      	ble.n	1de66 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1de5a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1de5c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1de60:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1de62:	6075      	str	r5, [r6, #4]
}
   1de64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1de66:	6863      	ldr	r3, [r4, #4]
   1de68:	429e      	cmp	r6, r3
   1de6a:	d0d7      	beq.n	1de1c <add_event+0xe>
   1de6c:	6836      	ldr	r6, [r6, #0]
   1de6e:	e7ea      	b.n	1de46 <add_event+0x38>

0001de70 <register_events>:
{
   1de70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1de74:	2500      	movs	r5, #0
{
   1de76:	468b      	mov	fp, r1
   1de78:	4614      	mov	r4, r2
   1de7a:	461f      	mov	r7, r3
   1de7c:	4682      	mov	sl, r0
	int events_registered = 0;
   1de7e:	462e      	mov	r6, r5
	event->poller = NULL;
   1de80:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1de82:	455d      	cmp	r5, fp
   1de84:	db02      	blt.n	1de8c <register_events+0x1c>
}
   1de86:	4630      	mov	r0, r6
   1de88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de8c:	f04f 0320 	mov.w	r3, #32
   1de90:	f3ef 8911 	mrs	r9, BASEPRI
   1de94:	f383 8812 	msr	BASEPRI_MAX, r3
   1de98:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1de9c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1dea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dea4:	3b01      	subs	r3, #1
   1dea6:	2b07      	cmp	r3, #7
   1dea8:	d80f      	bhi.n	1deca <register_events+0x5a>
   1deaa:	e8df f003 	tbb	[pc, r3]
   1deae:	041e      	.short	0x041e
   1deb0:	0e0e0a0e 	.word	0x0e0e0a0e
   1deb4:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1deb6:	f8da 3010 	ldr.w	r3, [sl, #16]
   1deba:	689b      	ldr	r3, [r3, #8]
   1debc:	b12b      	cbz	r3, 1deca <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1debe:	2302      	movs	r3, #2
   1dec0:	e020      	b.n	1df04 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1dec2:	f8da 3010 	ldr.w	r3, [sl, #16]
   1dec6:	681b      	ldr	r3, [r3, #0]
   1dec8:	bb8b      	cbnz	r3, 1df2e <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1deca:	bb47      	cbnz	r7, 1df1e <register_events+0xae>
   1decc:	7823      	ldrb	r3, [r4, #0]
   1dece:	b333      	cbz	r3, 1df1e <register_events+0xae>
	switch (event->type) {
   1ded0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ded4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ded8:	3b01      	subs	r3, #1
   1deda:	2b07      	cmp	r3, #7
   1dedc:	d830      	bhi.n	1df40 <register_events+0xd0>
   1dede:	e8df f003 	tbb	[pc, r3]
   1dee2:	2833      	.short	0x2833
   1dee4:	2f2f282f 	.word	0x2f2f282f
   1dee8:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1deea:	f8da 3010 	ldr.w	r3, [sl, #16]
   1deee:	689b      	ldr	r3, [r3, #8]
   1def0:	2b00      	cmp	r3, #0
   1def2:	d0ea      	beq.n	1deca <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1def4:	2301      	movs	r3, #1
   1def6:	e005      	b.n	1df04 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1def8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1defc:	6a1b      	ldr	r3, [r3, #32]
   1defe:	2b00      	cmp	r3, #0
   1df00:	d0e3      	beq.n	1deca <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1df02:	2310      	movs	r3, #16
	event->state |= state;
   1df04:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1df08:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1df0c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1df10:	430b      	orrs	r3, r1
   1df12:	f363 3294 	bfi	r2, r3, #14, #7
   1df16:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1df1a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1df1e:	f389 8811 	msr	BASEPRI, r9
   1df22:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1df26:	3501      	adds	r5, #1
   1df28:	f10a 0a14 	add.w	sl, sl, #20
   1df2c:	e7a9      	b.n	1de82 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1df2e:	2304      	movs	r3, #4
   1df30:	e7e8      	b.n	1df04 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1df32:	4622      	mov	r2, r4
   1df34:	4651      	mov	r1, sl
   1df36:	f8da 0010 	ldr.w	r0, [sl, #16]
   1df3a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1df3c:	f7ff ff67 	bl	1de0e <add_event>
	event->poller = poller;
   1df40:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1df44:	3601      	adds	r6, #1
   1df46:	e7ea      	b.n	1df1e <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1df48:	4622      	mov	r2, r4
   1df4a:	4651      	mov	r1, sl
   1df4c:	f8da 0010 	ldr.w	r0, [sl, #16]
   1df50:	e7f4      	b.n	1df3c <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1df52:	f8da 0010 	ldr.w	r0, [sl, #16]
   1df56:	4622      	mov	r2, r4
   1df58:	4651      	mov	r1, sl
   1df5a:	3024      	adds	r0, #36	; 0x24
   1df5c:	e7ee      	b.n	1df3c <register_events+0xcc>

0001df5e <signal_poll_event>:
{
   1df5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1df62:	6884      	ldr	r4, [r0, #8]
{
   1df64:	4605      	mov	r5, r0
   1df66:	460e      	mov	r6, r1
	if (poller != NULL) {
   1df68:	b144      	cbz	r4, 1df7c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1df6a:	7863      	ldrb	r3, [r4, #1]
   1df6c:	2b01      	cmp	r3, #1
   1df6e:	d12e      	bne.n	1dfce <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1df70:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1df74:	f013 0302 	ands.w	r3, r3, #2
   1df78:	d10a      	bne.n	1df90 <signal_poll_event+0x32>
		poller->is_polling = false;
   1df7a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1df7c:	2000      	movs	r0, #0
	event->state |= state;
   1df7e:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1df80:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1df82:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1df86:	4316      	orrs	r6, r2
   1df88:	f366 3394 	bfi	r3, r6, #14, #7
   1df8c:	60eb      	str	r3, [r5, #12]
	return retcode;
   1df8e:	e03e      	b.n	1e00e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1df90:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1df94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1df98:	bf08      	it	eq
   1df9a:	f112 0f02 	cmneq.w	r2, #2
   1df9e:	d032      	beq.n	1e006 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1dfa0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1dfa4:	4640      	mov	r0, r8
   1dfa6:	f7ff fe56 	bl	1dc56 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1dfaa:	2e08      	cmp	r6, #8
   1dfac:	bf0c      	ite	eq
   1dfae:	f06f 0303 	mvneq.w	r3, #3
   1dfb2:	2300      	movne	r3, #0
   1dfb4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1dfb6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1dfba:	06db      	lsls	r3, r3, #27
   1dfbc:	d109      	bne.n	1dfd2 <signal_poll_event+0x74>
   1dfbe:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1dfc2:	b937      	cbnz	r7, 1dfd2 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1dfc4:	4640      	mov	r0, r8
   1dfc6:	f7ff fdcb 	bl	1db60 <z_ready_thread>
		poller->is_polling = false;
   1dfca:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1dfcc:	e7d6      	b.n	1df7c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1dfce:	2b02      	cmp	r3, #2
   1dfd0:	d001      	beq.n	1dfd6 <signal_poll_event+0x78>
		poller->is_polling = false;
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	e7d1      	b.n	1df7a <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1dfd6:	7823      	ldrb	r3, [r4, #0]
   1dfd8:	2b00      	cmp	r3, #0
   1dfda:	d0cf      	beq.n	1df7c <signal_poll_event+0x1e>
   1dfdc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1dfe0:	2f00      	cmp	r7, #0
   1dfe2:	d0f2      	beq.n	1dfca <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1dfe4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1dfe8:	f1a4 0914 	sub.w	r9, r4, #20
   1dfec:	f104 0014 	add.w	r0, r4, #20
   1dff0:	f7ff fe92 	bl	1dd18 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1dff4:	4649      	mov	r1, r9
   1dff6:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1dff8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1dffc:	f7ff fcef 	bl	1d9de <z_work_submit_to_queue>
		poller->is_polling = false;
   1e000:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e004:	e7ba      	b.n	1df7c <signal_poll_event+0x1e>
		poller->is_polling = false;
   1e006:	2300      	movs	r3, #0
		return -EAGAIN;
   1e008:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1e00c:	7023      	strb	r3, [r4, #0]
}
   1e00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e012 <clear_event_registrations>:
	while (num_events--) {
   1e012:	2314      	movs	r3, #20
{
   1e014:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   1e016:	2400      	movs	r4, #0
	switch (event->type) {
   1e018:	f44f 768b 	mov.w	r6, #278	; 0x116
   1e01c:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   1e020:	b901      	cbnz	r1, 1e024 <clear_event_registrations+0x12>
}
   1e022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1e024:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1e028:	f1a0 0714 	sub.w	r7, r0, #20
   1e02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e030:	2b08      	cmp	r3, #8
	event->poller = NULL;
   1e032:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1e036:	d80c      	bhi.n	1e052 <clear_event_registrations+0x40>
   1e038:	fa26 f303 	lsr.w	r3, r6, r3
   1e03c:	07db      	lsls	r3, r3, #31
   1e03e:	d508      	bpl.n	1e052 <clear_event_registrations+0x40>
	return node->next != NULL;
   1e040:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e044:	b12b      	cbz	r3, 1e052 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1e046:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1e04a:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1e04c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e04e:	e940 4405 	strd	r4, r4, [r0, #-20]
   1e052:	f382 8811 	msr	BASEPRI, r2
   1e056:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e05a:	f04f 0320 	mov.w	r3, #32
   1e05e:	f3ef 8211 	mrs	r2, BASEPRI
   1e062:	f383 8812 	msr	BASEPRI_MAX, r3
   1e066:	f3bf 8f6f 	isb	sy
   1e06a:	4638      	mov	r0, r7
   1e06c:	3901      	subs	r1, #1
   1e06e:	e7d7      	b.n	1e020 <clear_event_registrations+0xe>

0001e070 <k_poll_event_init>:
{
   1e070:	b510      	push	{r4, lr}
	event->poller = NULL;
   1e072:	2400      	movs	r4, #0
	event->type = type;
   1e074:	0552      	lsls	r2, r2, #21
   1e076:	0209      	lsls	r1, r1, #8
   1e078:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1e07c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1e080:	430a      	orrs	r2, r1
   1e082:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1e084:	6084      	str	r4, [r0, #8]
	event->type = type;
   1e086:	430a      	orrs	r2, r1
	event->obj = obj;
   1e088:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1e08c:	bd10      	pop	{r4, pc}

0001e08e <z_handle_obj_poll_events>:
{
   1e08e:	4603      	mov	r3, r0
	return list->head == list;
   1e090:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e092:	4283      	cmp	r3, r0
   1e094:	d008      	beq.n	1e0a8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e096:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e09a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e09c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e09e:	2300      	movs	r3, #0
	node->prev = NULL;
   1e0a0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e0a4:	f7ff bf5b 	b.w	1df5e <signal_poll_event>
}
   1e0a8:	4770      	bx	lr

0001e0aa <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1e0aa:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1e0ac:	e9c0 0000 	strd	r0, r0, [r0]
   1e0b0:	6083      	str	r3, [r0, #8]
}
   1e0b2:	4770      	bx	lr

0001e0b4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e0b4:	3204      	adds	r2, #4
{
   1e0b6:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1e0b8:	4604      	mov	r4, r0
   1e0ba:	d208      	bcs.n	1e0ce <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e0bc:	2600      	movs	r6, #0
   1e0be:	2700      	movs	r7, #0
   1e0c0:	f041 0104 	orr.w	r1, r1, #4
   1e0c4:	e9cd 6700 	strd	r6, r7, [sp]
   1e0c8:	f7ff fa8a 	bl	1d5e0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e0cc:	b910      	cbnz	r0, 1e0d4 <z_heap_aligned_alloc+0x20>
		return NULL;
   1e0ce:	2000      	movs	r0, #0
}
   1e0d0:	b002      	add	sp, #8
   1e0d2:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1e0d4:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1e0d8:	e7fa      	b.n	1e0d0 <z_heap_aligned_alloc+0x1c>

0001e0da <k_free>:
	if (ptr != NULL) {
   1e0da:	b120      	cbz	r0, 1e0e6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1e0dc:	1f01      	subs	r1, r0, #4
   1e0de:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e0e2:	f7ff baca 	b.w	1d67a <k_heap_free>
}
   1e0e6:	4770      	bx	lr

0001e0e8 <k_malloc>:
{
   1e0e8:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1e0ea:	2004      	movs	r0, #4
   1e0ec:	f7fa bb98 	b.w	18820 <k_aligned_alloc>

0001e0f0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e0f0:	4770      	bx	lr
	...
